
/Users/friedl/Desktop/Projects/PN532_RFID/target/5.4.1/p2/PN532_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fa000  085fa000  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fa018  085fa018  0000a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fabe0  085fa0a8  0000abe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00005408  023fabe8  085fa0b0  0000abe8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff0  023ffff0  00020000  2**0
                  CONTENTS
  6 .data         00000080  1007821c  085ff4b8  0001821c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002d4c  1007829c  1007829c  0002829c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff538  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000a7c  085ff53c  085ff53c  0001f53c  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f53c  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0012ce34  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000142d6  00000000  00000000  0014ce34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003c3ff  00000000  00000000  0016110a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002d20  00000000  00000000  0019d509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000adc0  00000000  00000000  001a0229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002863b  00000000  00000000  001aafe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000458f9  00000000  00000000  001d3624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c6a43  00000000  00000000  00218f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000805c  00000000  00000000  002df960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fa018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa018:	4813      	ldr	r0, [pc, #76]	; (85fa068 <module_user_pre_init+0x50>)
 85fa01a:	4914      	ldr	r1, [pc, #80]	; (85fa06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fa01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fa01e:	4288      	cmp	r0, r1
 85fa020:	d005      	beq.n	85fa02e <module_user_pre_init+0x16>
 85fa022:	4a13      	ldr	r2, [pc, #76]	; (85fa070 <module_user_pre_init+0x58>)
 85fa024:	4282      	cmp	r2, r0
 85fa026:	d002      	beq.n	85fa02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fa028:	4b12      	ldr	r3, [pc, #72]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa02a:	1a12      	subs	r2, r2, r0
 85fa02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fa02e:	4812      	ldr	r0, [pc, #72]	; (85fa078 <module_user_pre_init+0x60>)
 85fa030:	4a12      	ldr	r2, [pc, #72]	; (85fa07c <module_user_pre_init+0x64>)
 85fa032:	2100      	movs	r1, #0
 85fa034:	4b12      	ldr	r3, [pc, #72]	; (85fa080 <module_user_pre_init+0x68>)
 85fa036:	1a12      	subs	r2, r2, r0
 85fa038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fa03a:	4812      	ldr	r0, [pc, #72]	; (85fa084 <module_user_pre_init+0x6c>)
 85fa03c:	4912      	ldr	r1, [pc, #72]	; (85fa088 <module_user_pre_init+0x70>)
 85fa03e:	4288      	cmp	r0, r1
 85fa040:	d005      	beq.n	85fa04e <module_user_pre_init+0x36>
 85fa042:	4a12      	ldr	r2, [pc, #72]	; (85fa08c <module_user_pre_init+0x74>)
 85fa044:	4282      	cmp	r2, r0
 85fa046:	d002      	beq.n	85fa04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fa048:	4b0a      	ldr	r3, [pc, #40]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa04a:	1a12      	subs	r2, r2, r0
 85fa04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fa04e:	4810      	ldr	r0, [pc, #64]	; (85fa090 <module_user_pre_init+0x78>)
 85fa050:	4910      	ldr	r1, [pc, #64]	; (85fa094 <module_user_pre_init+0x7c>)
 85fa052:	4288      	cmp	r0, r1
 85fa054:	d005      	beq.n	85fa062 <module_user_pre_init+0x4a>
 85fa056:	4a10      	ldr	r2, [pc, #64]	; (85fa098 <module_user_pre_init+0x80>)
 85fa058:	4282      	cmp	r2, r0
 85fa05a:	d002      	beq.n	85fa062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fa05c:	4b05      	ldr	r3, [pc, #20]	; (85fa074 <module_user_pre_init+0x5c>)
 85fa05e:	1a12      	subs	r2, r2, r0
 85fa060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fa062:	4801      	ldr	r0, [pc, #4]	; (85fa068 <module_user_pre_init+0x50>)
 85fa064:	bd08      	pop	{r3, pc}
 85fa066:	bf00      	nop
 85fa068:	1007821c 	.word	0x1007821c
 85fa06c:	085ff4b8 	.word	0x085ff4b8
 85fa070:	1007829c 	.word	0x1007829c
 85fa074:	10110d2d 	.word	0x10110d2d
 85fa078:	1007829c 	.word	0x1007829c
 85fa07c:	1007afe8 	.word	0x1007afe8
 85fa080:	10110ea1 	.word	0x10110ea1
 85fa084:	023fabe0 	.word	0x023fabe0
 85fa088:	085fa0a8 	.word	0x085fa0a8
 85fa08c:	023fabe8 	.word	0x023fabe8
 85fa090:	023fabe8 	.word	0x023fabe8
 85fa094:	085fa0b0 	.word	0x085fa0b0
 85fa098:	023ffff0 	.word	0x023ffff0

085fa09c <dynalib_preinit>:
 85fa09c:	085fa019 00000000                       .._.....

Disassembly of section .psram_text:

023fabe8 <strlen>:
 23fabe8:	4603      	mov	r3, r0
 23fabea:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fabee:	2a00      	cmp	r2, #0
 23fabf0:	d1fb      	bne.n	23fabea <strlen+0x2>
 23fabf2:	1a18      	subs	r0, r3, r0
 23fabf4:	3801      	subs	r0, #1
 23fabf6:	4770      	bx	lr

023fabf8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fabf8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fabfa:	f002 f88f 	bl	23fcd1c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fabfe:	2500      	movs	r5, #0
 23fac00:	4e05      	ldr	r6, [pc, #20]	; (23fac18 <module_user_init+0x20>)
 23fac02:	4c06      	ldr	r4, [pc, #24]	; (23fac1c <module_user_init+0x24>)
 23fac04:	1ba4      	subs	r4, r4, r6
 23fac06:	08a4      	lsrs	r4, r4, #2
 23fac08:	42ac      	cmp	r4, r5
 23fac0a:	d100      	bne.n	23fac0e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fac0c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fac0e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fac12:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fac14:	3501      	adds	r5, #1
 23fac16:	e7f7      	b.n	23fac08 <module_user_init+0x10>
 23fac18:	023fffcc 	.word	0x023fffcc
 23fac1c:	023ffff0 	.word	0x023ffff0

023fac20 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fac20:	f000 b814 	b.w	23fac4c <setup>

023fac24 <module_user_loop>:
}

void module_user_loop() {
 23fac24:	b508      	push	{r3, lr}
    loop();
 23fac26:	f000 f989 	bl	23faf3c <loop>
    _post_loop();
}
 23fac2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fac2e:	f002 b82d 	b.w	23fcc8c <_post_loop>

023fac32 <_Znaj>:
 23fac32:	f001 ba6f 	b.w	23fc114 <malloc>

023fac36 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fac36:	f001 ba7b 	b.w	23fc130 <free>

023fac3a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fac3a:	7800      	ldrb	r0, [r0, #0]
 23fac3c:	fab0 f080 	clz	r0, r0
 23fac40:	0940      	lsrs	r0, r0, #5
 23fac42:	4770      	bx	lr

023fac44 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fac44:	2301      	movs	r3, #1
 23fac46:	7003      	strb	r3, [r0, #0]
 23fac48:	4770      	bx	lr
	...

023fac4c <setup>:
/////--  MAX17201 Fuel Gauge declarations --/////
char msgFG[64];
max1720x gauge;


void setup() {
 23fac4c:	b508      	push	{r3, lr}

Serial.begin(115200);
 23fac4e:	f001 ff8d 	bl	23fcb6c <_Z16_fetch_usbserialv>
 23fac52:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fac56:	f001 ff7d 	bl	23fcb54 <_ZN9USBSerial5beginEl>

//gauge.reset();                                  // Resets MAX1720x
delay(2000);                                      // Waits for the initial measurements to be made
 23fac5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 23fac5e:	f001 faad 	bl	23fc1bc <delay>

// pinMode(D23, OUTPUT);
// digitalWrite(D23, LOW);

    Serial.print("3.52inch e-paper test\r\n ");
 23fac62:	f001 ff83 	bl	23fcb6c <_Z16_fetch_usbserialv>
 23fac66:	490a      	ldr	r1, [pc, #40]	; (23fac90 <setup+0x44>)
 23fac68:	f001 fcd6 	bl	23fc618 <_ZN5Print5printEPKc>
    Serial.print("e-Paper Clear\r\n ");
 23fac6c:	f001 ff7e 	bl	23fcb6c <_Z16_fetch_usbserialv>
 23fac70:	4908      	ldr	r1, [pc, #32]	; (23fac94 <setup+0x48>)
 23fac72:	f001 fcd1 	bl	23fc618 <_ZN5Print5printEPKc>
// while (!nfc.begin()) {
//   Serial.print(".");
//   delay (1000);
// }

if (epd.Init() != 0) { 
 23fac76:	4808      	ldr	r0, [pc, #32]	; (23fac98 <setup+0x4c>)
 23fac78:	f000 fa25 	bl	23fb0c6 <_ZN3Epd4InitEv>
 23fac7c:	b130      	cbz	r0, 23fac8c <setup+0x40>
  Serial.print("e-Paper init failed");
 23fac7e:	f001 ff75 	bl	23fcb6c <_Z16_fetch_usbserialv>
// Serial.println();
// Serial.println("Waiting for a card......");  

//I2C_Scanner();

}
 23fac82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.print("e-Paper init failed");
 23fac86:	4905      	ldr	r1, [pc, #20]	; (23fac9c <setup+0x50>)
 23fac88:	f001 bcc6 	b.w	23fc618 <_ZN5Print5printEPKc>
}
 23fac8c:	bd08      	pop	{r3, pc}
 23fac8e:	bf00      	nop
 23fac90:	023fd224 	.word	0x023fd224
 23fac94:	023fd23d 	.word	0x023fd23d
 23fac98:	1007831c 	.word	0x1007831c
 23fac9c:	023fd24e 	.word	0x023fd24e

023faca0 <_Z3EPDv>:


//////////////////// E-PAPER START //////////////////////


void EPD() {
 23faca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  VAR1 = "Starship Room";
 23faca4:	4e8e      	ldr	r6, [pc, #568]	; (23faee0 <_Z3EPDv+0x240>)
  VAR2 = "Mars here we come";
 23faca6:	f8df b284 	ldr.w	fp, [pc, #644]	; 23faf2c <_Z3EPDv+0x28c>
void EPD() {
 23facaa:	b095      	sub	sp, #84	; 0x54
  VAR3 = "10:00";
 23facac:	f8df a280 	ldr.w	sl, [pc, #640]	; 23faf30 <_Z3EPDv+0x290>
  VAR1 = "Starship Room";
 23facb0:	4630      	mov	r0, r6
 23facb2:	498c      	ldr	r1, [pc, #560]	; (23faee4 <_Z3EPDv+0x244>)
 23facb4:	f001 fe3f 	bl	23fc936 <_ZN6StringaSEPKc>
  VAR4 = "12:00";
 23facb8:	f8df 9278 	ldr.w	r9, [pc, #632]	; 23faf34 <_Z3EPDv+0x294>
  VAR2 = "Mars here we come";
 23facbc:	4658      	mov	r0, fp
 23facbe:	498a      	ldr	r1, [pc, #552]	; (23faee8 <_Z3EPDv+0x248>)
 23facc0:	f001 fe39 	bl	23fc936 <_ZN6StringaSEPKc>
  VAR3 = "10:00";
 23facc4:	4650      	mov	r0, sl
 23facc6:	4989      	ldr	r1, [pc, #548]	; (23faeec <_Z3EPDv+0x24c>)
 23facc8:	f001 fe35 	bl	23fc936 <_ZN6StringaSEPKc>
  VAR4 = "12:00";
 23faccc:	4648      	mov	r0, r9
 23facce:	4988      	ldr	r1, [pc, #544]	; (23faef0 <_Z3EPDv+0x250>)
 23facd0:	f001 fe31 	bl	23fc936 <_ZN6StringaSEPKc>
  VAR5 = "Elon";
  VAR6 = "Musk";
  SCAN = "ERROR";
 23facd4:	f8df 8260 	ldr.w	r8, [pc, #608]	; 23faf38 <_Z3EPDv+0x298>
  VAR5 = "Elon";
 23facd8:	4986      	ldr	r1, [pc, #536]	; (23faef4 <_Z3EPDv+0x254>)
 23facda:	4887      	ldr	r0, [pc, #540]	; (23faef8 <_Z3EPDv+0x258>)
  
  epd.display_NUM(EPD_3IN52_WHITE);
 23facdc:	4d87      	ldr	r5, [pc, #540]	; (23faefc <_Z3EPDv+0x25c>)
  VAR5 = "Elon";
 23facde:	f001 fe2a 	bl	23fc936 <_ZN6StringaSEPKc>
  VAR6 = "Musk";
 23face2:	4987      	ldr	r1, [pc, #540]	; (23faf00 <_Z3EPDv+0x260>)
 23face4:	4887      	ldr	r0, [pc, #540]	; (23faf04 <_Z3EPDv+0x264>)
 23face6:	f001 fe26 	bl	23fc936 <_ZN6StringaSEPKc>
  SCAN = "ERROR";
 23facea:	4640      	mov	r0, r8
 23facec:	4986      	ldr	r1, [pc, #536]	; (23faf08 <_Z3EPDv+0x268>)
 23facee:	f001 fe22 	bl	23fc936 <_ZN6StringaSEPKc>
  epd.display_NUM(EPD_3IN52_WHITE);
 23facf2:	21ff      	movs	r1, #255	; 0xff
 23facf4:	4628      	mov	r0, r5
 23facf6:	f000 fb29 	bl	23fb34c <_ZN3Epd11display_NUMEh>
  epd.lut_GC();
 23facfa:	4628      	mov	r0, r5
 23facfc:	f000 fa70 	bl	23fb1e0 <_ZN3Epd6lut_GCEv>
  epd.Clear();
 23fad00:	4628      	mov	r0, r5
 23fad02:	f000 fb92 	bl	23fb42a <_ZN3Epd5ClearEv>
  epd.refresh();
 23fad06:	4628      	mov	r0, r5
 23fad08:	f000 fa59 	bl	23fb1be <_ZN3Epd7refreshEv>

  delay(500);
 23fad0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fad10:	f001 fa54 	bl	23fc1bc <delay>

  epd.SendCommand(0x50);
 23fad14:	4628      	mov	r0, r5
 23fad16:	2150      	movs	r1, #80	; 0x50
 23fad18:	f000 f989 	bl	23fb02e <_ZN3Epd11SendCommandEh>
  epd.SendData(0x17);
 23fad1c:	4628      	mov	r0, r5
 23fad1e:	2117      	movs	r1, #23
 23fad20:	f000 f990 	bl	23fb044 <_ZN3Epd8SendDataEh>

  Paint paint(image, 240, 360);     // width should be the multiple of 8   
 23fad24:	f44f 73b4 	mov.w	r3, #360	; 0x168
 23fad28:	22f0      	movs	r2, #240	; 0xf0
 23fad2a:	4978      	ldr	r1, [pc, #480]	; (23faf0c <_Z3EPDv+0x26c>)
 23fad2c:	a804      	add	r0, sp, #16
 23fad2e:	f000 fc42 	bl	23fb5b6 <_ZN5PaintC1EPhii>
  paint.SetRotate(3);               // Top right (0,0)
 23fad32:	a804      	add	r0, sp, #16
 23fad34:	2103      	movs	r1, #3
 23fad36:	f000 fc8a 	bl	23fb64e <_ZN5Paint9SetRotateEi>
  paint.Clear(UNCOLORED);
 23fad3a:	a804      	add	r0, sp, #16
 23fad3c:	2101      	movs	r1, #1

  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
 23fad3e:	2400      	movs	r4, #0
  paint.Clear(UNCOLORED);
 23fad40:	f000 fc6a 	bl	23fb618 <_ZN5Paint5ClearEi>
  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
 23fad44:	2205      	movs	r2, #5
 23fad46:	4f72      	ldr	r7, [pc, #456]	; (23faf10 <_Z3EPDv+0x270>)
 23fad48:	4611      	mov	r1, r2
 23fad4a:	4b72      	ldr	r3, [pc, #456]	; (23faf14 <_Z3EPDv+0x274>)
 23fad4c:	a804      	add	r0, sp, #16
 23fad4e:	9401      	str	r4, [sp, #4]
 23fad50:	9700      	str	r7, [sp, #0]
 23fad52:	f000 fcfb 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 5, String(VAR1), &Font24, COLORED);
 23fad56:	4631      	mov	r1, r6
 23fad58:	4e6f      	ldr	r6, [pc, #444]	; (23faf18 <_Z3EPDv+0x278>)
 23fad5a:	a810      	add	r0, sp, #64	; 0x40
 23fad5c:	f001 fde0 	bl	23fc920 <_ZN6StringC1ERKS_>
 23fad60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23fad62:	2205      	movs	r2, #5
 23fad64:	2164      	movs	r1, #100	; 0x64
 23fad66:	9600      	str	r6, [sp, #0]
 23fad68:	a804      	add	r0, sp, #16
 23fad6a:	9401      	str	r4, [sp, #4]
 23fad6c:	f000 fcee 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
 23fad70:	a810      	add	r0, sp, #64	; 0x40
 23fad72:	f001 fd67 	bl	23fc844 <_ZN6StringD1Ev>

  paint.DrawStringAt(5, 35, "TITLE: ", &Font20, COLORED);
 23fad76:	2223      	movs	r2, #35	; 0x23
 23fad78:	4b68      	ldr	r3, [pc, #416]	; (23faf1c <_Z3EPDv+0x27c>)
 23fad7a:	a804      	add	r0, sp, #16
 23fad7c:	2105      	movs	r1, #5
 23fad7e:	e9cd 7400 	strd	r7, r4, [sp]
 23fad82:	f000 fce3 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 35, String(VAR2), &Font24, COLORED);
 23fad86:	4659      	mov	r1, fp
 23fad88:	a810      	add	r0, sp, #64	; 0x40
 23fad8a:	f001 fdc9 	bl	23fc920 <_ZN6StringC1ERKS_>
 23fad8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23fad90:	2223      	movs	r2, #35	; 0x23
 23fad92:	2164      	movs	r1, #100	; 0x64
 23fad94:	e9cd 6400 	strd	r6, r4, [sp]
 23fad98:	a804      	add	r0, sp, #16
 23fad9a:	f000 fcd7 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
 23fad9e:	a810      	add	r0, sp, #64	; 0x40
 23fada0:	f001 fd50 	bl	23fc844 <_ZN6StringD1Ev>

  paint.DrawStringAt(5, 65, "TIME: ", &Font20, COLORED);
 23fada4:	2241      	movs	r2, #65	; 0x41
 23fada6:	4b5e      	ldr	r3, [pc, #376]	; (23faf20 <_Z3EPDv+0x280>)
 23fada8:	a804      	add	r0, sp, #16
 23fadaa:	2105      	movs	r1, #5
 23fadac:	e9cd 7400 	strd	r7, r4, [sp]
 23fadb0:	f000 fccc 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 65, String(VAR3) + " - " + String(VAR4), &Font24, COLORED);
 23fadb4:	4651      	mov	r1, sl
 23fadb6:	a808      	add	r0, sp, #32
 23fadb8:	f001 fdb2 	bl	23fc920 <_ZN6StringC1ERKS_>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 23fadbc:	a908      	add	r1, sp, #32
 23fadbe:	a80c      	add	r0, sp, #48	; 0x30
 23fadc0:	f001 fdae 	bl	23fc920 <_ZN6StringC1ERKS_>
 23fadc4:	4957      	ldr	r1, [pc, #348]	; (23faf24 <_Z3EPDv+0x284>)
 23fadc6:	a80c      	add	r0, sp, #48	; 0x30
 23fadc8:	f001 fdea 	bl	23fc9a0 <_ZplRK15StringSumHelperPKc>
 23fadcc:	4682      	mov	sl, r0
 23fadce:	4649      	mov	r1, r9
 23fadd0:	a810      	add	r0, sp, #64	; 0x40
 23fadd2:	f001 fda5 	bl	23fc920 <_ZN6StringC1ERKS_>
 23fadd6:	a910      	add	r1, sp, #64	; 0x40
 23fadd8:	4650      	mov	r0, sl
 23fadda:	f001 fdd5 	bl	23fc988 <_ZplRK15StringSumHelperRK6String>

  paint.DrawHorizontalLine(0,136,360,COLORED);
  paint.DrawVerticalLine(180,136,104,COLORED);
    
  paint.DrawFilledRectangle(0,145,170,240, COLORED);
 23fadde:	f04f 0af0 	mov.w	sl, #240	; 0xf0
  paint.DrawStringAt(5, 155, "SPEAKER: ", &Font20, UNCOLORED);
 23fade2:	f04f 0901 	mov.w	r9, #1
  paint.DrawStringAt(100, 65, String(VAR3) + " - " + String(VAR4), &Font24, COLORED);
 23fade6:	e9cd 6400 	strd	r6, r4, [sp]
 23fadea:	2241      	movs	r2, #65	; 0x41
 23fadec:	6803      	ldr	r3, [r0, #0]
 23fadee:	2164      	movs	r1, #100	; 0x64
 23fadf0:	a804      	add	r0, sp, #16
 23fadf2:	f000 fcab 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
 23fadf6:	a810      	add	r0, sp, #64	; 0x40
 23fadf8:	f001 fd24 	bl	23fc844 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fadfc:	a80c      	add	r0, sp, #48	; 0x30
 23fadfe:	f001 fd21 	bl	23fc844 <_ZN6StringD1Ev>
 23fae02:	a808      	add	r0, sp, #32
 23fae04:	f001 fd1e 	bl	23fc844 <_ZN6StringD1Ev>
  paint.DrawHorizontalLine(0,136,360,COLORED);
 23fae08:	4621      	mov	r1, r4
 23fae0a:	a804      	add	r0, sp, #16
 23fae0c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 23fae10:	2288      	movs	r2, #136	; 0x88
 23fae12:	9400      	str	r4, [sp, #0]
 23fae14:	f000 fcb2 	bl	23fb77c <_ZN5Paint18DrawHorizontalLineEiiii>
  paint.DrawVerticalLine(180,136,104,COLORED);
 23fae18:	a804      	add	r0, sp, #16
 23fae1a:	2368      	movs	r3, #104	; 0x68
 23fae1c:	2288      	movs	r2, #136	; 0x88
 23fae1e:	21b4      	movs	r1, #180	; 0xb4
 23fae20:	9400      	str	r4, [sp, #0]
 23fae22:	f000 fcbb 	bl	23fb79c <_ZN5Paint16DrawVerticalLineEiiii>
  paint.DrawFilledRectangle(0,145,170,240, COLORED);
 23fae26:	4621      	mov	r1, r4
 23fae28:	a804      	add	r0, sp, #16
 23fae2a:	23aa      	movs	r3, #170	; 0xaa
 23fae2c:	2291      	movs	r2, #145	; 0x91
 23fae2e:	9401      	str	r4, [sp, #4]
 23fae30:	f8cd a000 	str.w	sl, [sp]
 23fae34:	f000 fcc2 	bl	23fb7bc <_ZN5Paint19DrawFilledRectangleEiiiii>
  paint.DrawStringAt(5, 155, "SPEAKER: ", &Font20, UNCOLORED);
 23fae38:	a804      	add	r0, sp, #16
 23fae3a:	229b      	movs	r2, #155	; 0x9b
 23fae3c:	2105      	movs	r1, #5
 23fae3e:	e9cd 7900 	strd	r7, r9, [sp]
 23fae42:	4b39      	ldr	r3, [pc, #228]	; (23faf28 <_Z3EPDv+0x288>)
 23fae44:	f000 fc82 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(5, 185, (VAR5), &Font24, UNCOLORED);
 23fae48:	e9cd 6900 	strd	r6, r9, [sp]
 23fae4c:	4b2a      	ldr	r3, [pc, #168]	; (23faef8 <_Z3EPDv+0x258>)
 23fae4e:	a804      	add	r0, sp, #16
 23fae50:	22b9      	movs	r2, #185	; 0xb9
 23fae52:	2105      	movs	r1, #5
 23fae54:	681b      	ldr	r3, [r3, #0]
 23fae56:	f000 fc79 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(5, 215, (VAR6), &Font24, UNCOLORED);
 23fae5a:	e9cd 6900 	strd	r6, r9, [sp]
 23fae5e:	4b29      	ldr	r3, [pc, #164]	; (23faf04 <_Z3EPDv+0x264>)
 23fae60:	a804      	add	r0, sp, #16
 23fae62:	22d7      	movs	r2, #215	; 0xd7
 23fae64:	2105      	movs	r1, #5
 23fae66:	681b      	ldr	r3, [r3, #0]
 23fae68:	f000 fc70 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>

  paint.DrawFilledRectangle(190,145,360,240, COLORED);   
 23fae6c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 23fae70:	2291      	movs	r2, #145	; 0x91
 23fae72:	a804      	add	r0, sp, #16
 23fae74:	21be      	movs	r1, #190	; 0xbe
 23fae76:	e9cd a400 	strd	sl, r4, [sp]
 23fae7a:	f000 fc9f 	bl	23fb7bc <_ZN5Paint19DrawFilledRectangleEiiiii>
  paint.DrawStringAt(200, 180, String(SCAN), &Font24, UNCOLORED);      //This should be printed from the scan function 
 23fae7e:	4641      	mov	r1, r8
 23fae80:	a810      	add	r0, sp, #64	; 0x40
 23fae82:	f001 fd4d 	bl	23fc920 <_ZN6StringC1ERKS_>
 23fae86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 23fae88:	22b4      	movs	r2, #180	; 0xb4
 23fae8a:	21c8      	movs	r1, #200	; 0xc8
 23fae8c:	e9cd 6900 	strd	r6, r9, [sp]
 23fae90:	a804      	add	r0, sp, #16
 23fae92:	f000 fc5b 	bl	23fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
 23fae96:	a810      	add	r0, sp, #64	; 0x40
 23fae98:	f001 fcd4 	bl	23fc844 <_ZN6StringD1Ev>

  epd.display_part(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());  // (Y, X)
 23fae9c:	a804      	add	r0, sp, #16
 23fae9e:	f000 fbd0 	bl	23fb642 <_ZN5Paint8GetImageEv>
 23faea2:	9003      	str	r0, [sp, #12]
 23faea4:	a804      	add	r0, sp, #16
 23faea6:	f000 fbce 	bl	23fb646 <_ZN5Paint8GetWidthEv>
 23faeaa:	4606      	mov	r6, r0
 23faeac:	a804      	add	r0, sp, #16
 23faeae:	f000 fbcc 	bl	23fb64a <_ZN5Paint9GetHeightEv>
 23faeb2:	4623      	mov	r3, r4
 23faeb4:	4622      	mov	r2, r4
 23faeb6:	9903      	ldr	r1, [sp, #12]
 23faeb8:	e9cd 6000 	strd	r6, r0, [sp]
 23faebc:	4628      	mov	r0, r5
 23faebe:	f000 fa09 	bl	23fb2d4 <_ZN3Epd12display_partEPhjjjj>
  epd.refresh();
 23faec2:	4628      	mov	r0, r5
 23faec4:	f000 f97b 	bl	23fb1be <_ZN3Epd7refreshEv>
  delay(25);
 23faec8:	2019      	movs	r0, #25
 23faeca:	f001 f977 	bl	23fc1bc <delay>
  epd.sleep();
 23faece:	4628      	mov	r0, r5
 23faed0:	f000 fac5 	bl	23fb45e <_ZN3Epd5sleepEv>
  Paint paint(image, 240, 360);     // width should be the multiple of 8   
 23faed4:	a804      	add	r0, sp, #16
 23faed6:	f000 fb81 	bl	23fb5dc <_ZN5PaintD1Ev>

}
 23faeda:	b015      	add	sp, #84	; 0x54
 23faedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23faee0:	100782b8 	.word	0x100782b8
 23faee4:	023fd262 	.word	0x023fd262
 23faee8:	023fd270 	.word	0x023fd270
 23faeec:	023fd282 	.word	0x023fd282
 23faef0:	023fd288 	.word	0x023fd288
 23faef4:	023fd28e 	.word	0x023fd28e
 23faef8:	100782f8 	.word	0x100782f8
 23faefc:	1007831c 	.word	0x1007831c
 23faf00:	023fd293 	.word	0x023fd293
 23faf04:	10078308 	.word	0x10078308
 23faf08:	023fd298 	.word	0x023fd298
 23faf0c:	10078339 	.word	0x10078339
 23faf10:	10078220 	.word	0x10078220
 23faf14:	023fd29e 	.word	0x023fd29e
 23faf18:	10078228 	.word	0x10078228
 23faf1c:	023fd2a5 	.word	0x023fd2a5
 23faf20:	023fd2ad 	.word	0x023fd2ad
 23faf24:	023fd2b4 	.word	0x023fd2b4
 23faf28:	023fd2b8 	.word	0x023fd2b8
 23faf2c:	100782c8 	.word	0x100782c8
 23faf30:	100782d8 	.word	0x100782d8
 23faf34:	100782e8 	.word	0x100782e8
 23faf38:	1007829c 	.word	0x1007829c

023faf3c <loop>:

//////////////////// E-PAPER END //////////////////// 

void loop() {
 23faf3c:	b508      	push	{r3, lr}

  //I2C_Scanner();
  //Fuel_Gauge();
  //RFID();
  EPD();
 23faf3e:	f7ff feaf 	bl	23faca0 <_Z3EPDv>

  delay(10000);
  
}
 23faf42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10000);
 23faf46:	f242 7010 	movw	r0, #10000	; 0x2710
 23faf4a:	f001 b937 	b.w	23fc1bc <delay>
	...

023faf50 <_GLOBAL__sub_I_SystemMode>:
}
 23faf50:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23faf52:	2400      	movs	r4, #0
 23faf54:	2501      	movs	r5, #1
 23faf56:	4b1c      	ldr	r3, [pc, #112]	; (23fafc8 <_GLOBAL__sub_I_SystemMode+0x78>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
 23faf58:	4a1c      	ldr	r2, [pc, #112]	; (23fafcc <_GLOBAL__sub_I_SystemMode+0x7c>)
 23faf5a:	701c      	strb	r4, [r3, #0]
 23faf5c:	4b1c      	ldr	r3, [pc, #112]	; (23fafd0 <_GLOBAL__sub_I_SystemMode+0x80>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23faf5e:	2002      	movs	r0, #2
 23faf60:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 23faf62:	4b1c      	ldr	r3, [pc, #112]	; (23fafd4 <_GLOBAL__sub_I_SystemMode+0x84>)
    SleepResult() {}
 23faf64:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23faf66:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
 23faf6a:	f000 ffd7 	bl	23fbf1c <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23faf6e:	4621      	mov	r1, r4
 23faf70:	4628      	mov	r0, r5
 23faf72:	f000 ffef 	bl	23fbf54 <system_thread_set_state>
Epd epd;
 23faf76:	4818      	ldr	r0, [pc, #96]	; (23fafd8 <_GLOBAL__sub_I_SystemMode+0x88>)
 23faf78:	f000 f844 	bl	23fb004 <_ZN3EpdC1Ev>
String VAR1;
 23faf7c:	4917      	ldr	r1, [pc, #92]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23faf7e:	4818      	ldr	r0, [pc, #96]	; (23fafe0 <_GLOBAL__sub_I_SystemMode+0x90>)
 23faf80:	f001 fcab 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
String VAR2;
 23faf84:	4915      	ldr	r1, [pc, #84]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23faf86:	4817      	ldr	r0, [pc, #92]	; (23fafe4 <_GLOBAL__sub_I_SystemMode+0x94>)
 23faf88:	f001 fca7 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
String VAR3;
 23faf8c:	4913      	ldr	r1, [pc, #76]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23faf8e:	4816      	ldr	r0, [pc, #88]	; (23fafe8 <_GLOBAL__sub_I_SystemMode+0x98>)
 23faf90:	f001 fca3 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
String VAR4;
 23faf94:	4911      	ldr	r1, [pc, #68]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23faf96:	4815      	ldr	r0, [pc, #84]	; (23fafec <_GLOBAL__sub_I_SystemMode+0x9c>)
 23faf98:	f001 fc9f 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
String VAR5;
 23faf9c:	490f      	ldr	r1, [pc, #60]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23faf9e:	4814      	ldr	r0, [pc, #80]	; (23faff0 <_GLOBAL__sub_I_SystemMode+0xa0>)
 23fafa0:	f001 fc9b 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
String VAR6;
 23fafa4:	490d      	ldr	r1, [pc, #52]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23fafa6:	4813      	ldr	r0, [pc, #76]	; (23faff4 <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fafa8:	f001 fc97 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
String SCAN;
 23fafac:	490b      	ldr	r1, [pc, #44]	; (23fafdc <_GLOBAL__sub_I_SystemMode+0x8c>)
 23fafae:	4812      	ldr	r0, [pc, #72]	; (23faff8 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fafb0:	f001 fc93 	bl	23fc8da <_ZN6StringC1EPK19__FlashStringHelper>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
 23fafb4:	4622      	mov	r2, r4
 23fafb6:	2102      	movs	r1, #2
 23fafb8:	4810      	ldr	r0, [pc, #64]	; (23faffc <_GLOBAL__sub_I_SystemMode+0xac>)
 23fafba:	f000 fc83 	bl	23fb8c4 <_ZN17DFRobot_PN532_IICC1Ehh>
}
 23fafbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
max1720x gauge;
 23fafc2:	480f      	ldr	r0, [pc, #60]	; (23fb000 <_GLOBAL__sub_I_SystemMode+0xb0>)
 23fafc4:	f000 bc20 	b.w	23fb808 <_ZN8max1720xC1Ev>
 23fafc8:	10078318 	.word	0x10078318
 23fafcc:	ffff0000 	.word	0xffff0000
 23fafd0:	10078319 	.word	0x10078319
 23fafd4:	100782ac 	.word	0x100782ac
 23fafd8:	1007831c 	.word	0x1007831c
 23fafdc:	023fd2eb 	.word	0x023fd2eb
 23fafe0:	100782b8 	.word	0x100782b8
 23fafe4:	100782c8 	.word	0x100782c8
 23fafe8:	100782d8 	.word	0x100782d8
 23fafec:	100782e8 	.word	0x100782e8
 23faff0:	100782f8 	.word	0x100782f8
 23faff4:	10078308 	.word	0x10078308
 23faff8:	1007829c 	.word	0x1007829c
 23faffc:	1007ae34 	.word	0x1007ae34
 23fb000:	10078338 	.word	0x10078338

023fb004 <_ZN3EpdC1Ev>:
};

Epd::~Epd() {
};

Epd::Epd() {
 23fb004:	b510      	push	{r4, lr}
 23fb006:	4604      	mov	r4, r0
 23fb008:	f000 fa74 	bl	23fb4f4 <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
 23fb00c:	220a      	movs	r2, #10
 23fb00e:	2306      	movs	r3, #6
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
 23fb010:	2112      	movs	r1, #18
    dc_pin = DC_PIN;
 23fb012:	e9c4 2300 	strd	r2, r3, [r4]
    busy_pin = BUSY_PIN;
 23fb016:	2307      	movs	r3, #7
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
 23fb018:	20f0      	movs	r0, #240	; 0xf0
    busy_pin = BUSY_PIN;
 23fb01a:	e9c4 1302 	strd	r1, r3, [r4, #8]
    height = EPD_HEIGHT;
 23fb01e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 23fb022:	e9c4 0304 	strd	r0, r3, [r4, #16]
    EPD_3IN52_Flag = 0;
 23fb026:	2300      	movs	r3, #0
};
 23fb028:	4620      	mov	r0, r4
    EPD_3IN52_Flag = 0;
 23fb02a:	7623      	strb	r3, [r4, #24]
};
 23fb02c:	bd10      	pop	{r4, pc}

023fb02e <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
 23fb02e:	b510      	push	{r4, lr}
 23fb030:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
 23fb032:	6840      	ldr	r0, [r0, #4]
 23fb034:	2100      	movs	r1, #0
 23fb036:	f000 fa5e 	bl	23fb4f6 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
 23fb03a:	4620      	mov	r0, r4
}
 23fb03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
 23fb040:	f000 baa8 	b.w	23fb594 <_ZN5EpdIf11SpiTransferEh>

023fb044 <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
 23fb044:	b510      	push	{r4, lr}
 23fb046:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
 23fb048:	6840      	ldr	r0, [r0, #4]
 23fb04a:	2101      	movs	r1, #1
 23fb04c:	f000 fa53 	bl	23fb4f6 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
 23fb050:	4620      	mov	r0, r4
}
 23fb052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
 23fb056:	f000 ba9d 	b.w	23fb594 <_ZN5EpdIf11SpiTransferEh>
	...

023fb05c <_ZN3Epd8ReadBusyEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::ReadBusy(void) {
 23fb05c:	b510      	push	{r4, lr}
 23fb05e:	4604      	mov	r4, r0
    Serial.print("e-Paper busy \r\n ");
 23fb060:	f001 fd84 	bl	23fcb6c <_Z16_fetch_usbserialv>
 23fb064:	4909      	ldr	r1, [pc, #36]	; (23fb08c <_ZN3Epd8ReadBusyEv+0x30>)
 23fb066:	f001 fad7 	bl	23fc618 <_ZN5Print5printEPKc>
    UBYTE busy;
    do {
        busy = DigitalRead(busy_pin);
 23fb06a:	68e0      	ldr	r0, [r4, #12]
 23fb06c:	f000 fa47 	bl	23fb4fe <_ZN5EpdIf11DigitalReadEi>
    } while(busy);    
 23fb070:	b2c0      	uxtb	r0, r0
 23fb072:	2800      	cmp	r0, #0
 23fb074:	d1f9      	bne.n	23fb06a <_ZN3Epd8ReadBusyEv+0xe>
    DelayMs(200);
 23fb076:	20c8      	movs	r0, #200	; 0xc8
 23fb078:	f000 fa44 	bl	23fb504 <_ZN5EpdIf7DelayMsEj>
    Serial.print("e-Paper busy release \r\n ");
 23fb07c:	f001 fd76 	bl	23fcb6c <_Z16_fetch_usbserialv>
}
 23fb080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("e-Paper busy release \r\n ");
 23fb084:	4902      	ldr	r1, [pc, #8]	; (23fb090 <_ZN3Epd8ReadBusyEv+0x34>)
 23fb086:	f001 bac7 	b.w	23fc618 <_ZN5Print5printEPKc>
 23fb08a:	bf00      	nop
 23fb08c:	023fd2c2 	.word	0x023fd2c2
 23fb090:	023fd2d3 	.word	0x023fd2d3

023fb094 <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
 23fb094:	b510      	push	{r4, lr}
 23fb096:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
 23fb098:	2101      	movs	r1, #1
 23fb09a:	6800      	ldr	r0, [r0, #0]
 23fb09c:	f000 fa2b 	bl	23fb4f6 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(20);    
 23fb0a0:	2014      	movs	r0, #20
 23fb0a2:	f000 fa2f 	bl	23fb504 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);                //module reset    
 23fb0a6:	2100      	movs	r1, #0
 23fb0a8:	6820      	ldr	r0, [r4, #0]
 23fb0aa:	f000 fa24 	bl	23fb4f6 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
 23fb0ae:	2002      	movs	r0, #2
 23fb0b0:	f000 fa28 	bl	23fb504 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
 23fb0b4:	6820      	ldr	r0, [r4, #0]
 23fb0b6:	2101      	movs	r1, #1
 23fb0b8:	f000 fa1d 	bl	23fb4f6 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(20);    
}
 23fb0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(20);    
 23fb0c0:	2014      	movs	r0, #20
 23fb0c2:	f000 ba1f 	b.w	23fb504 <_ZN5EpdIf7DelayMsEj>

023fb0c6 <_ZN3Epd4InitEv>:
int Epd::Init(void) {
 23fb0c6:	b538      	push	{r3, r4, r5, lr}
 23fb0c8:	4604      	mov	r4, r0
    if (IfInit() != 0) {
 23fb0ca:	f000 fa37 	bl	23fb53c <_ZN5EpdIf6IfInitEv>
 23fb0ce:	4605      	mov	r5, r0
 23fb0d0:	2800      	cmp	r0, #0
 23fb0d2:	d171      	bne.n	23fb1b8 <_ZN3Epd4InitEv+0xf2>
    Reset();
 23fb0d4:	4620      	mov	r0, r4
 23fb0d6:	f7ff ffdd 	bl	23fb094 <_ZN3Epd5ResetEv>
    SendCommand(0x00);		// panel setting   PSR
 23fb0da:	4629      	mov	r1, r5
 23fb0dc:	4620      	mov	r0, r4
    EPD_3IN52_Flag = 0;
 23fb0de:	7625      	strb	r5, [r4, #24]
    SendCommand(0x00);		// panel setting   PSR
 23fb0e0:	f7ff ffa5 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0xFF);			// RES1 RES0 REG KW/R     UD    SHL   SHD_N  RST_N	
 23fb0e4:	21ff      	movs	r1, #255	; 0xff
 23fb0e6:	4620      	mov	r0, r4
 23fb0e8:	f7ff ffac 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x01);			// x x x VCMZ TS_AUTO TIGE NORG VC_LUTZ
 23fb0ec:	2101      	movs	r1, #1
 23fb0ee:	4620      	mov	r0, r4
 23fb0f0:	f7ff ffa8 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x01);		// POWER SETTING   PWR
 23fb0f4:	2101      	movs	r1, #1
 23fb0f6:	4620      	mov	r0, r4
 23fb0f8:	f7ff ff99 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0x03);			//  x x x x x x VDS_EN VDG_EN	
 23fb0fc:	2103      	movs	r1, #3
 23fb0fe:	4620      	mov	r0, r4
 23fb100:	f7ff ffa0 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x10);			//  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V	
 23fb104:	2110      	movs	r1, #16
 23fb106:	4620      	mov	r0, r4
 23fb108:	f7ff ff9c 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x3F);			//  x x VSH[5:0]	VSH = 15V
 23fb10c:	213f      	movs	r1, #63	; 0x3f
 23fb10e:	4620      	mov	r0, r4
 23fb110:	f7ff ff98 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x3F);			//  x x VSL[5:0]	VSL=-15V
 23fb114:	213f      	movs	r1, #63	; 0x3f
 23fb116:	4620      	mov	r0, r4
 23fb118:	f7ff ff94 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x03);			//  OPTEN VDHR[6:0]  VHDR=6.4V
 23fb11c:	2103      	movs	r1, #3
 23fb11e:	4620      	mov	r0, r4
 23fb120:	f7ff ff90 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x06);		// booster soft start   BTST 
 23fb124:	2106      	movs	r1, #6
 23fb126:	4620      	mov	r0, r4
 23fb128:	f7ff ff81 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0x37);			//  BT_PHA[7:0]  	
 23fb12c:	2137      	movs	r1, #55	; 0x37
 23fb12e:	4620      	mov	r0, r4
 23fb130:	f7ff ff88 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x3D);			//  BT_PHB[7:0]	
 23fb134:	213d      	movs	r1, #61	; 0x3d
 23fb136:	4620      	mov	r0, r4
 23fb138:	f7ff ff84 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x3D);			//  x x BT_PHC[5:0]	
 23fb13c:	213d      	movs	r1, #61	; 0x3d
 23fb13e:	4620      	mov	r0, r4
 23fb140:	f7ff ff80 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x60);		// TCON setting			TCON 
 23fb144:	2160      	movs	r1, #96	; 0x60
 23fb146:	4620      	mov	r0, r4
 23fb148:	f7ff ff71 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0x22);			// S2G[3:0] G2S[3:0]   non-overlap = 12		
 23fb14c:	2122      	movs	r1, #34	; 0x22
 23fb14e:	4620      	mov	r0, r4
 23fb150:	f7ff ff78 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x82);		// VCOM_DC setting		VDCS 
 23fb154:	2182      	movs	r1, #130	; 0x82
 23fb156:	4620      	mov	r0, r4
 23fb158:	f7ff ff69 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0x07);			// x  VDCS[6:0]	VCOM_DC value= -1.9v    00~3f,0x12=-1.9v
 23fb15c:	2107      	movs	r1, #7
 23fb15e:	4620      	mov	r0, r4
 23fb160:	f7ff ff70 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x30);			 
 23fb164:	2130      	movs	r1, #48	; 0x30
 23fb166:	4620      	mov	r0, r4
 23fb168:	f7ff ff61 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0x09);		
 23fb16c:	2109      	movs	r1, #9
 23fb16e:	4620      	mov	r0, r4
 23fb170:	f7ff ff68 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0xe3);		// power saving			PWS 
 23fb174:	21e3      	movs	r1, #227	; 0xe3
 23fb176:	4620      	mov	r0, r4
 23fb178:	f7ff ff59 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0x88);			// VCOM_W[3:0] SD_W[3:0]
 23fb17c:	2188      	movs	r1, #136	; 0x88
 23fb17e:	4620      	mov	r0, r4
 23fb180:	f7ff ff60 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x61);		// resoultion setting 
 23fb184:	2161      	movs	r1, #97	; 0x61
 23fb186:	4620      	mov	r0, r4
 23fb188:	f7ff ff51 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0xf0);			//  HRES[7:3] 0 0 0	
 23fb18c:	21f0      	movs	r1, #240	; 0xf0
 23fb18e:	4620      	mov	r0, r4
 23fb190:	f7ff ff58 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x01);			//  x x x x x x x VRES[8]	
 23fb194:	2101      	movs	r1, #1
 23fb196:	4620      	mov	r0, r4
 23fb198:	f7ff ff54 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendData(0x68);			//  VRES[7:0]
 23fb19c:	2168      	movs	r1, #104	; 0x68
 23fb19e:	4620      	mov	r0, r4
 23fb1a0:	f7ff ff50 	bl	23fb044 <_ZN3Epd8SendDataEh>
    SendCommand(0x50);			
 23fb1a4:	2150      	movs	r1, #80	; 0x50
 23fb1a6:	4620      	mov	r0, r4
 23fb1a8:	f7ff ff41 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0xB7);		
 23fb1ac:	21b7      	movs	r1, #183	; 0xb7
 23fb1ae:	4620      	mov	r0, r4
 23fb1b0:	f7ff ff48 	bl	23fb044 <_ZN3Epd8SendDataEh>
}
 23fb1b4:	4628      	mov	r0, r5
 23fb1b6:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
 23fb1b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23fb1bc:	e7fa      	b.n	23fb1b4 <_ZN3Epd4InitEv+0xee>

023fb1be <_ZN3Epd7refreshEv>:
        SendData(EPD_3IN52_lut_wb[count]);
    }
}

void Epd::refresh(void)
{
 23fb1be:	b510      	push	{r4, lr}
 23fb1c0:	4604      	mov	r4, r0
    SendCommand(0x17);
 23fb1c2:	2117      	movs	r1, #23
 23fb1c4:	f7ff ff33 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0xA5);
 23fb1c8:	4620      	mov	r0, r4
 23fb1ca:	21a5      	movs	r1, #165	; 0xa5
 23fb1cc:	f7ff ff3a 	bl	23fb044 <_ZN3Epd8SendDataEh>
    ReadBusy();
 23fb1d0:	4620      	mov	r0, r4
 23fb1d2:	f7ff ff43 	bl	23fb05c <_ZN3Epd8ReadBusyEv>
    DelayMs(200);
}
 23fb1d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);
 23fb1da:	20c8      	movs	r0, #200	; 0xc8
 23fb1dc:	f000 b992 	b.w	23fb504 <_ZN5EpdIf7DelayMsEj>

023fb1e0 <_ZN3Epd6lut_GCEv>:

// LUT download
void Epd::lut_GC(void)
{
 23fb1e0:	b570      	push	{r4, r5, r6, lr}
    UBYTE count;
    SendCommand(0x20);        // vcom
 23fb1e2:	2120      	movs	r1, #32
{
 23fb1e4:	4604      	mov	r4, r0
    SendCommand(0x20);        // vcom
 23fb1e6:	2538      	movs	r5, #56	; 0x38
 23fb1e8:	f7ff ff21 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 56 ; count++)
 23fb1ec:	4e34      	ldr	r6, [pc, #208]	; (23fb2c0 <_ZN3Epd6lut_GCEv+0xe0>)
    {
        SendData(EPD_3IN52_lut_R20_GC[count]);
 23fb1ee:	4620      	mov	r0, r4
 23fb1f0:	f816 1b01 	ldrb.w	r1, [r6], #1
    for(count = 0; count < 56 ; count++)
 23fb1f4:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R20_GC[count]);
 23fb1f6:	f7ff ff25 	bl	23fb044 <_ZN3Epd8SendDataEh>
    for(count = 0; count < 56 ; count++)
 23fb1fa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb1fe:	d1f6      	bne.n	23fb1ee <_ZN3Epd6lut_GCEv+0xe>
    }
        
    SendCommand(0x21);        // red not use
 23fb200:	2121      	movs	r1, #33	; 0x21
 23fb202:	4620      	mov	r0, r4
 23fb204:	f7ff ff13 	bl	23fb02e <_ZN3Epd11SendCommandEh>
 23fb208:	252a      	movs	r5, #42	; 0x2a
 23fb20a:	4e2e      	ldr	r6, [pc, #184]	; (23fb2c4 <_ZN3Epd6lut_GCEv+0xe4>)
    for(count = 0; count < 42 ; count++)
    {
        SendData(EPD_3IN52_lut_R21_GC[count]);
 23fb20c:	4620      	mov	r0, r4
 23fb20e:	f816 1b01 	ldrb.w	r1, [r6], #1
    for(count = 0; count < 42 ; count++)
 23fb212:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R21_GC[count]);
 23fb214:	f7ff ff16 	bl	23fb044 <_ZN3Epd8SendDataEh>
    for(count = 0; count < 42 ; count++)
 23fb218:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb21c:	d1f6      	bne.n	23fb20c <_ZN3Epd6lut_GCEv+0x2c>
    }
        
    SendCommand(0x24);        // bb b
 23fb21e:	2124      	movs	r1, #36	; 0x24
 23fb220:	4620      	mov	r0, r4
 23fb222:	f7ff ff04 	bl	23fb02e <_ZN3Epd11SendCommandEh>
 23fb226:	252a      	movs	r5, #42	; 0x2a
 23fb228:	4e27      	ldr	r6, [pc, #156]	; (23fb2c8 <_ZN3Epd6lut_GCEv+0xe8>)
    for(count = 0; count < 42 ; count++)
    {
        SendData(EPD_3IN52_lut_R24_GC[count]);
 23fb22a:	4620      	mov	r0, r4
 23fb22c:	f816 1b01 	ldrb.w	r1, [r6], #1
    for(count = 0; count < 42 ; count++)
 23fb230:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R24_GC[count]);
 23fb232:	f7ff ff07 	bl	23fb044 <_ZN3Epd8SendDataEh>
    for(count = 0; count < 42 ; count++)
 23fb236:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb23a:	d1f6      	bne.n	23fb22a <_ZN3Epd6lut_GCEv+0x4a>
    }
    
    if(EPD_3IN52_Flag == 0)
 23fb23c:	7e23      	ldrb	r3, [r4, #24]
    {
        SendCommand(0x22);    // bw r
 23fb23e:	2122      	movs	r1, #34	; 0x22
 23fb240:	4620      	mov	r0, r4
    if(EPD_3IN52_Flag == 0)
 23fb242:	b9f3      	cbnz	r3, 23fb282 <_ZN3Epd6lut_GCEv+0xa2>
        SendCommand(0x22);    // bw r
 23fb244:	f7ff fef3 	bl	23fb02e <_ZN3Epd11SendCommandEh>
 23fb248:	2538      	movs	r5, #56	; 0x38
 23fb24a:	4e20      	ldr	r6, [pc, #128]	; (23fb2cc <_ZN3Epd6lut_GCEv+0xec>)
        for(count = 0; count < 56 ; count++)
        {
            SendData(EPD_3IN52_lut_R22_GC[count]);
 23fb24c:	4620      	mov	r0, r4
 23fb24e:	f816 1b01 	ldrb.w	r1, [r6], #1
        for(count = 0; count < 56 ; count++)
 23fb252:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R22_GC[count]);
 23fb254:	f7ff fef6 	bl	23fb044 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 56 ; count++)
 23fb258:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb25c:	d1f6      	bne.n	23fb24c <_ZN3Epd6lut_GCEv+0x6c>
        }
            
        SendCommand(0x23);    // wb w
 23fb25e:	2123      	movs	r1, #35	; 0x23
 23fb260:	4620      	mov	r0, r4
 23fb262:	f7ff fee4 	bl	23fb02e <_ZN3Epd11SendCommandEh>
 23fb266:	252a      	movs	r5, #42	; 0x2a
 23fb268:	4e19      	ldr	r6, [pc, #100]	; (23fb2d0 <_ZN3Epd6lut_GCEv+0xf0>)
        for(count = 0; count < 42 ; count++)
        {
            SendData(EPD_3IN52_lut_R23_GC[count]);
 23fb26a:	4620      	mov	r0, r4
 23fb26c:	f816 1b01 	ldrb.w	r1, [r6], #1
        for(count = 0; count < 42 ; count++)
 23fb270:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R23_GC[count]);
 23fb272:	f7ff fee7 	bl	23fb044 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 42 ; count++)
 23fb276:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb27a:	d1f6      	bne.n	23fb26a <_ZN3Epd6lut_GCEv+0x8a>
        }
            
        EPD_3IN52_Flag = 1;
 23fb27c:	2301      	movs	r3, #1
 23fb27e:	7623      	strb	r3, [r4, #24]
            SendData(EPD_3IN52_lut_R22_GC[count]);
        }
            
       EPD_3IN52_Flag = 0;
    }
}
 23fb280:	bd70      	pop	{r4, r5, r6, pc}
        SendCommand(0x22);    // bw r
 23fb282:	f7ff fed4 	bl	23fb02e <_ZN3Epd11SendCommandEh>
 23fb286:	2538      	movs	r5, #56	; 0x38
 23fb288:	4e11      	ldr	r6, [pc, #68]	; (23fb2d0 <_ZN3Epd6lut_GCEv+0xf0>)
            SendData(EPD_3IN52_lut_R23_GC[count]);
 23fb28a:	4620      	mov	r0, r4
 23fb28c:	f816 1b01 	ldrb.w	r1, [r6], #1
        for(count = 0; count < 56 ; count++)
 23fb290:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R23_GC[count]);
 23fb292:	f7ff fed7 	bl	23fb044 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 56 ; count++)
 23fb296:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb29a:	d1f6      	bne.n	23fb28a <_ZN3Epd6lut_GCEv+0xaa>
        SendCommand(0x23);    // wb w
 23fb29c:	2123      	movs	r1, #35	; 0x23
 23fb29e:	4620      	mov	r0, r4
 23fb2a0:	f7ff fec5 	bl	23fb02e <_ZN3Epd11SendCommandEh>
 23fb2a4:	252a      	movs	r5, #42	; 0x2a
 23fb2a6:	4e09      	ldr	r6, [pc, #36]	; (23fb2cc <_ZN3Epd6lut_GCEv+0xec>)
            SendData(EPD_3IN52_lut_R22_GC[count]);
 23fb2a8:	4620      	mov	r0, r4
 23fb2aa:	f816 1b01 	ldrb.w	r1, [r6], #1
        for(count = 0; count < 42 ; count++)
 23fb2ae:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R22_GC[count]);
 23fb2b0:	f7ff fec8 	bl	23fb044 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 42 ; count++)
 23fb2b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 23fb2b8:	d1f6      	bne.n	23fb2a8 <_ZN3Epd6lut_GCEv+0xc8>
       EPD_3IN52_Flag = 0;
 23fb2ba:	7625      	strb	r5, [r4, #24]
}
 23fb2bc:	e7e0      	b.n	23fb280 <_ZN3Epd6lut_GCEv+0xa0>
 23fb2be:	bf00      	nop
 23fb2c0:	023fd2ec 	.word	0x023fd2ec
 23fb2c4:	023fd324 	.word	0x023fd324
 23fb2c8:	023fd3be 	.word	0x023fd3be
 23fb2cc:	023fd34e 	.word	0x023fd34e
 23fb2d0:	023fd386 	.word	0x023fd386

023fb2d4 <_ZN3Epd12display_partEPhjjjj>:
        SendData(pgm_read_byte(&picData[i]));
    }
}

void Epd::display_part(UBYTE *Image, UWORD xstart, UWORD ystart, UWORD image_width, UWORD image_heigh)
{
 23fb2d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb2d8:	461f      	mov	r7, r3
 23fb2da:	4614      	mov	r4, r2
    UWORD i,j;
    SendCommand(0x13);		     //Transfer new data
    for(i=0; i<height; i++)
 23fb2dc:	f04f 0a00 	mov.w	sl, #0
{
 23fb2e0:	9100      	str	r1, [sp, #0]
    SendCommand(0x13);		     //Transfer new data
 23fb2e2:	2113      	movs	r1, #19
{
 23fb2e4:	4605      	mov	r5, r0
    SendCommand(0x13);		     //Transfer new data
 23fb2e6:	f7ff fea2 	bl	23fb02e <_ZN3Epd11SendCommandEh>
        for(j=0; j<(width/8); j++)
        {
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
 23fb2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb2ec:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
 23fb2f0:	441c      	add	r4, r3
 23fb2f2:	437b      	muls	r3, r7
 23fb2f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 23fb2f6:	f1c3 0900 	rsb	r9, r3, #0
 23fb2fa:	187b      	adds	r3, r7, r1
 23fb2fc:	08e4      	lsrs	r4, r4, #3
 23fb2fe:	9301      	str	r3, [sp, #4]
    for(i=0; i<height; i++)
 23fb300:	6969      	ldr	r1, [r5, #20]
 23fb302:	4551      	cmp	r1, sl
 23fb304:	d91f      	bls.n	23fb346 <_ZN3Epd12display_partEPhjjjj+0x72>
        for(j=0; j<(width/8); j++)
 23fb306:	2600      	movs	r6, #0
            {
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
 23fb308:	9b00      	ldr	r3, [sp, #0]
 23fb30a:	ebcb 08d9 	rsb	r8, fp, r9, lsr #3
 23fb30e:	4498      	add	r8, r3
        for(j=0; j<(width/8); j++)
 23fb310:	6929      	ldr	r1, [r5, #16]
 23fb312:	ebb6 0fd1 	cmp.w	r6, r1, lsr #3
 23fb316:	d211      	bcs.n	23fb33c <_ZN3Epd12display_partEPhjjjj+0x68>
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
 23fb318:	45b3      	cmp	fp, r6
 23fb31a:	d80d      	bhi.n	23fb338 <_ZN3Epd12display_partEPhjjjj+0x64>
 23fb31c:	42b4      	cmp	r4, r6
 23fb31e:	d90b      	bls.n	23fb338 <_ZN3Epd12display_partEPhjjjj+0x64>
 23fb320:	45ba      	cmp	sl, r7
 23fb322:	d309      	bcc.n	23fb338 <_ZN3Epd12display_partEPhjjjj+0x64>
 23fb324:	9b01      	ldr	r3, [sp, #4]
 23fb326:	4553      	cmp	r3, sl
 23fb328:	d306      	bcc.n	23fb338 <_ZN3Epd12display_partEPhjjjj+0x64>
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
 23fb32a:	f818 1006 	ldrb.w	r1, [r8, r6]
                // Serial.print(Image[(i-ystart) * image_width/8 + j - xstart], HEX);
                // Serial.print(" ");
            }
            else
            {
                SendData(0x00);
 23fb32e:	4628      	mov	r0, r5
 23fb330:	f7ff fe88 	bl	23fb044 <_ZN3Epd8SendDataEh>
        for(j=0; j<(width/8); j++)
 23fb334:	3601      	adds	r6, #1
 23fb336:	e7eb      	b.n	23fb310 <_ZN3Epd12display_partEPhjjjj+0x3c>
                SendData(0x00);
 23fb338:	2100      	movs	r1, #0
 23fb33a:	e7f8      	b.n	23fb32e <_ZN3Epd12display_partEPhjjjj+0x5a>
    for(i=0; i<height; i++)
 23fb33c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fb33e:	f10a 0a01 	add.w	sl, sl, #1
 23fb342:	4499      	add	r9, r3
 23fb344:	e7dc      	b.n	23fb300 <_ZN3Epd12display_partEPhjjjj+0x2c>
            }
        }
}
 23fb346:	b003      	add	sp, #12
 23fb348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb34c <_ZN3Epd11display_NUMEh>:


void Epd::display_NUM(UBYTE NUM)
{
 23fb34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fb350:	460e      	mov	r6, r1
    UWORD row, column;
    // UWORD pcnt = 0;

    SendCommand(0x13);		     //Transfer new data
 23fb352:	2113      	movs	r1, #19
{
 23fb354:	4604      	mov	r4, r0

    for(column=0; column<height; column++)   
 23fb356:	2500      	movs	r5, #0
    SendCommand(0x13);		     //Transfer new data
 23fb358:	f7ff fe69 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    for(column=0; column<height; column++)   
 23fb35c:	6963      	ldr	r3, [r4, #20]
 23fb35e:	42ab      	cmp	r3, r5
 23fb360:	d961      	bls.n	23fb426 <_ZN3Epd11display_NUMEh+0xda>
    {
        for(row=0; row<width/8; row++)  
 23fb362:	2700      	movs	r7, #0
                case EPD_3IN52_Source_Line:
                    SendData(0xAA);  
                    break;
                        
                case EPD_3IN52_Gate_Line:
                    if(column%2)
 23fb364:	f005 0801 	and.w	r8, r5, #1
        for(row=0; row<width/8; row++)  
 23fb368:	6923      	ldr	r3, [r4, #16]
 23fb36a:	ebb7 0fd3 	cmp.w	r7, r3, lsr #3
 23fb36e:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 23fb372:	d256      	bcs.n	23fb422 <_ZN3Epd11display_NUMEh+0xd6>
            switch (NUM)
 23fb374:	2e0f      	cmp	r6, #15
 23fb376:	d02c      	beq.n	23fb3d2 <_ZN3Epd11display_NUMEh+0x86>
 23fb378:	d808      	bhi.n	23fb38c <_ZN3Epd11display_NUMEh+0x40>
 23fb37a:	2e03      	cmp	r6, #3
 23fb37c:	d80d      	bhi.n	23fb39a <_ZN3Epd11display_NUMEh+0x4e>
 23fb37e:	1e71      	subs	r1, r6, #1
 23fb380:	2902      	cmp	r1, #2
 23fb382:	d815      	bhi.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb384:	e8df f001 	tbb	[pc, r1]
 23fb388:	3b2d      	.short	0x3b2d
 23fb38a:	19          	.byte	0x19
 23fb38b:	00          	.byte	0x00
 23fb38c:	2ef0      	cmp	r6, #240	; 0xf0
 23fb38e:	d024      	beq.n	23fb3da <_ZN3Epd11display_NUMEh+0x8e>
 23fb390:	d805      	bhi.n	23fb39e <_ZN3Epd11display_NUMEh+0x52>
 23fb392:	2e55      	cmp	r6, #85	; 0x55
 23fb394:	d009      	beq.n	23fb3aa <_ZN3Epd11display_NUMEh+0x5e>
 23fb396:	2eaa      	cmp	r6, #170	; 0xaa
 23fb398:	d005      	beq.n	23fb3a6 <_ZN3Epd11display_NUMEh+0x5a>
        for(row=0; row<width/8; row++)  
 23fb39a:	3701      	adds	r7, #1
 23fb39c:	e7e4      	b.n	23fb368 <_ZN3Epd11display_NUMEh+0x1c>
            switch (NUM)
 23fb39e:	2eff      	cmp	r6, #255	; 0xff
 23fb3a0:	d1fb      	bne.n	23fb39a <_ZN3Epd11display_NUMEh+0x4e>
                        SendData(0xff); //An odd number of Gate line  
 23fb3a2:	21ff      	movs	r1, #255	; 0xff
 23fb3a4:	e005      	b.n	23fb3b2 <_ZN3Epd11display_NUMEh+0x66>
                    SendData(0xAA);  
 23fb3a6:	4631      	mov	r1, r6
 23fb3a8:	e003      	b.n	23fb3b2 <_ZN3Epd11display_NUMEh+0x66>
                    if(column%2)
 23fb3aa:	f1b8 0f00 	cmp.w	r8, #0
 23fb3ae:	d1f8      	bne.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
                    SendData(0x00);
 23fb3b0:	2100      	movs	r1, #0
 23fb3b2:	4620      	mov	r0, r4
 23fb3b4:	f7ff fe46 	bl	23fb044 <_ZN3Epd8SendDataEh>
                    break;  
 23fb3b8:	e7ef      	b.n	23fb39a <_ZN3Epd11display_NUMEh+0x4e>
                    else
                        SendData(0x00); //The even line Gate  
                    break;			
                        
                case EPD_3IN52_Chessboard:
                    if(row>=(width/8/2)&&column>=(height/2))
 23fb3ba:	6962      	ldr	r2, [r4, #20]
 23fb3bc:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
 23fb3c0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 23fb3c4:	d302      	bcc.n	23fb3cc <_ZN3Epd11display_NUMEh+0x80>
 23fb3c6:	4295      	cmp	r5, r2
 23fb3c8:	d3f2      	bcc.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb3ca:	e7ea      	b.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
                        SendData(0xff);
                    else if(row<(width/8/2)&&column<(height/2))
 23fb3cc:	4295      	cmp	r5, r2
 23fb3ce:	d2ef      	bcs.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb3d0:	e7e7      	b.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
                    else
                        SendData(0x00);
                    break; 			
                        
                case EPD_3IN52_LEFT_BLACK_RIGHT_WHITE:
                    if(row>=(width/8/2))
 23fb3d2:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
                    else
                        SendData(0x00);
                    break;
                            
                case EPD_3IN52_UP_BLACK_DOWN_WHITE:
                    if(column>=(height/2))
 23fb3d6:	d2e4      	bcs.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
 23fb3d8:	e7ea      	b.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb3da:	6963      	ldr	r3, [r4, #20]
 23fb3dc:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
 23fb3e0:	e7f9      	b.n	23fb3d6 <_ZN3Epd11display_NUMEh+0x8a>
                    else
                        SendData(0x00);
                    break;
                            
                case EPD_3IN52_Frame:
                    if(column==0||column==(height-1))
 23fb3e2:	2d00      	cmp	r5, #0
 23fb3e4:	d0e4      	beq.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb3e6:	6963      	ldr	r3, [r4, #20]
 23fb3e8:	3b01      	subs	r3, #1
 23fb3ea:	42ab      	cmp	r3, r5
 23fb3ec:	d0e0      	beq.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
                        SendData(0x00);						
                    else if(row==0)
 23fb3ee:	b90f      	cbnz	r7, 23fb3f4 <_ZN3Epd11display_NUMEh+0xa8>
                        SendData(0x7F);
 23fb3f0:	217f      	movs	r1, #127	; 0x7f
 23fb3f2:	e7de      	b.n	23fb3b2 <_ZN3Epd11display_NUMEh+0x66>
                    else if(row==(width/8-1))
 23fb3f4:	1e53      	subs	r3, r2, #1
 23fb3f6:	42bb      	cmp	r3, r7
 23fb3f8:	d1d3      	bne.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
                        SendData(0xFE);					
 23fb3fa:	21fe      	movs	r1, #254	; 0xfe
 23fb3fc:	e7d9      	b.n	23fb3b2 <_ZN3Epd11display_NUMEh+0x66>
                    else
                        SendData(0xFF);
                    break; 					
                            
                case EPD_3IN52_Crosstalk:
                    if((row>=(width/8/3)&&row<=(width/8/3*2)&&column<=(height/3))||(row>=(width/8/3)&&row<=(width/8/3*2)&&column>=(height/3*2)))
 23fb3fe:	2218      	movs	r2, #24
 23fb400:	fbb3 f3f2 	udiv	r3, r3, r2
 23fb404:	42bb      	cmp	r3, r7
 23fb406:	d8cc      	bhi.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
 23fb408:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
 23fb40c:	d8c9      	bhi.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
 23fb40e:	2203      	movs	r2, #3
 23fb410:	6963      	ldr	r3, [r4, #20]
 23fb412:	fbb3 f3f2 	udiv	r3, r3, r2
 23fb416:	42ab      	cmp	r3, r5
 23fb418:	d2ca      	bcs.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb41a:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
 23fb41e:	d2c7      	bcs.n	23fb3b0 <_ZN3Epd11display_NUMEh+0x64>
 23fb420:	e7bf      	b.n	23fb3a2 <_ZN3Epd11display_NUMEh+0x56>
    for(column=0; column<height; column++)   
 23fb422:	3501      	adds	r5, #1
 23fb424:	e79a      	b.n	23fb35c <_ZN3Epd11display_NUMEh+0x10>
                default:
                    break;
            }
        }
    }	
}
 23fb426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb42a <_ZN3Epd5ClearEv>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void Epd::Clear(void)
{
 23fb42a:	b538      	push	{r3, r4, r5, lr}
    UWORD i;
    SendCommand(0x13);		     //Transfer new data
 23fb42c:	2113      	movs	r1, #19
{
 23fb42e:	4604      	mov	r4, r0
    for(i=0;i<(width*height/8);i++)	     
 23fb430:	2500      	movs	r5, #0
    SendCommand(0x13);		     //Transfer new data
 23fb432:	f7ff fdfc 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    for(i=0;i<(width*height/8);i++)	     
 23fb436:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 23fb43a:	4353      	muls	r3, r2
 23fb43c:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
 23fb440:	d205      	bcs.n	23fb44e <_ZN3Epd5ClearEv+0x24>
    {
        SendData(0xFF);
 23fb442:	21ff      	movs	r1, #255	; 0xff
 23fb444:	4620      	mov	r0, r4
 23fb446:	f7ff fdfd 	bl	23fb044 <_ZN3Epd8SendDataEh>
    for(i=0;i<(width*height/8);i++)	     
 23fb44a:	3501      	adds	r5, #1
 23fb44c:	e7f3      	b.n	23fb436 <_ZN3Epd5ClearEv+0xc>
    }
    lut_GC();
 23fb44e:	4620      	mov	r0, r4
 23fb450:	f7ff fec6 	bl	23fb1e0 <_ZN3Epd6lut_GCEv>
	refresh();
 23fb454:	4620      	mov	r0, r4
}
 23fb456:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	refresh();
 23fb45a:	f7ff beb0 	b.w	23fb1be <_ZN3Epd7refreshEv>

023fb45e <_ZN3Epd5sleepEv>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void Epd::sleep(void)
{
 23fb45e:	b510      	push	{r4, lr}
 23fb460:	4604      	mov	r4, r0
    SendCommand(0X07);  	//deep sleep
 23fb462:	2107      	movs	r1, #7
 23fb464:	f7ff fde3 	bl	23fb02e <_ZN3Epd11SendCommandEh>
    SendData(0xA5);
 23fb468:	4620      	mov	r0, r4
 23fb46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SendData(0xA5);
 23fb46e:	21a5      	movs	r1, #165	; 0xa5
 23fb470:	f7ff bde8 	b.w	23fb044 <_ZN3Epd8SendDataEh>

023fb474 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
 23fb474:	4770      	bx	lr

023fb476 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
 23fb476:	b510      	push	{r4, lr}
 23fb478:	4604      	mov	r4, r0
  }
 23fb47a:	2110      	movs	r1, #16
 23fb47c:	f7ff fbdb 	bl	23fac36 <_ZdlPvj>
 23fb480:	4620      	mov	r0, r4
 23fb482:	bd10      	pop	{r4, pc}

023fb484 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
 23fb484:	b40e      	push	{r1, r2, r3}
 23fb486:	b503      	push	{r0, r1, lr}
 23fb488:	ab03      	add	r3, sp, #12
 23fb48a:	f853 2b04 	ldr.w	r2, [r3], #4
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
 23fb48e:	2100      	movs	r1, #0
        va_start(args, format);
 23fb490:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
 23fb492:	f001 f8f2 	bl	23fc67a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
 23fb496:	b002      	add	sp, #8
 23fb498:	f85d eb04 	ldr.w	lr, [sp], #4
 23fb49c:	b003      	add	sp, #12
 23fb49e:	4770      	bx	lr

023fb4a0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 23fb4a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fb4a2:	4604      	mov	r4, r0
  {
    if (default_ && clock_ == 0)
 23fb4a4:	7922      	ldrb	r2, [r4, #4]
  virtual size_t printTo(Print& p) const
 23fb4a6:	4608      	mov	r0, r1
    if (default_ && clock_ == 0)
 23fb4a8:	68a3      	ldr	r3, [r4, #8]
 23fb4aa:	b132      	cbz	r2, 23fb4ba <_ZNK8particle11SPISettings7printToER5Print+0x1a>
 23fb4ac:	b9a3      	cbnz	r3, 23fb4d8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
 23fb4ae:	490b      	ldr	r1, [pc, #44]	; (23fb4dc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
 23fb4b0:	b002      	add	sp, #8
 23fb4b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
 23fb4b6:	f001 b8af 	b.w	23fc618 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fb4ba:	4a09      	ldr	r2, [pc, #36]	; (23fb4e0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
 23fb4bc:	7b26      	ldrb	r6, [r4, #12]
 23fb4be:	4d09      	ldr	r5, [pc, #36]	; (23fb4e4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
 23fb4c0:	4909      	ldr	r1, [pc, #36]	; (23fb4e8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
 23fb4c2:	7b64      	ldrb	r4, [r4, #13]
 23fb4c4:	2e01      	cmp	r6, #1
 23fb4c6:	bf18      	it	ne
 23fb4c8:	4629      	movne	r1, r5
 23fb4ca:	e9cd 1400 	strd	r1, r4, [sp]
 23fb4ce:	4907      	ldr	r1, [pc, #28]	; (23fb4ec <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
 23fb4d0:	f7ff ffd8 	bl	23fb484 <_ZN5Print6printfEPKcz>
  }
 23fb4d4:	b002      	add	sp, #8
 23fb4d6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
 23fb4d8:	4a05      	ldr	r2, [pc, #20]	; (23fb4f0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
 23fb4da:	e7ef      	b.n	23fb4bc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
 23fb4dc:	023fd3f9 	.word	0x023fd3f9
 23fb4e0:	023fd2eb 	.word	0x023fd2eb
 23fb4e4:	023fd3f5 	.word	0x023fd3f5
 23fb4e8:	023fd3f1 	.word	0x023fd3f1
 23fb4ec:	023fd40f 	.word	0x023fd40f
 23fb4f0:	023fd3e8 	.word	0x023fd3e8

023fb4f4 <_ZN5EpdIfC1Ev>:

#include "epdif.h"
#include <spi.h>

EpdIf::EpdIf() {
};
 23fb4f4:	4770      	bx	lr

023fb4f6 <_ZN5EpdIf12DigitalWriteEii>:

EpdIf::~EpdIf() {
};

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
 23fb4f6:	b2c9      	uxtb	r1, r1
 23fb4f8:	b280      	uxth	r0, r0
 23fb4fa:	f001 bc90 	b.w	23fce1e <digitalWrite>

023fb4fe <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
 23fb4fe:	b280      	uxth	r0, r0
 23fb500:	f001 bca6 	b.w	23fce50 <digitalRead>

023fb504 <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
 23fb504:	f000 be5a 	b.w	23fc1bc <delay>

023fb508 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fb508:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fb50a:	4c0a      	ldr	r4, [pc, #40]	; (23fb534 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fb50c:	e8d4 1f8f 	ldab	r1, [r4]
 23fb510:	f011 0101 	ands.w	r1, r1, #1
 23fb514:	d10b      	bne.n	23fb52e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb516:	4620      	mov	r0, r4
 23fb518:	9101      	str	r1, [sp, #4]
 23fb51a:	f7ff fb8e 	bl	23fac3a <__cxa_guard_acquire>
 23fb51e:	9901      	ldr	r1, [sp, #4]
 23fb520:	b128      	cbz	r0, 23fb52e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fb522:	4805      	ldr	r0, [pc, #20]	; (23fb538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb524:	f001 f8e6 	bl	23fc6f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fb528:	4620      	mov	r0, r4
 23fb52a:	f7ff fb8b 	bl	23fac44 <__cxa_guard_release>
        return instance;
    }
 23fb52e:	4802      	ldr	r0, [pc, #8]	; (23fb538 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fb530:	b002      	add	sp, #8
 23fb532:	bd10      	pop	{r4, pc}
 23fb534:	1007ae80 	.word	0x1007ae80
 23fb538:	1007ae84 	.word	0x1007ae84

023fb53c <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
 23fb53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
 23fb53e:	2101      	movs	r1, #1
 23fb540:	2012      	movs	r0, #18
 23fb542:	f001 fc5b 	bl	23fcdfc <pinMode>
    pinMode(RST_PIN, OUTPUT);
 23fb546:	2101      	movs	r1, #1
 23fb548:	200a      	movs	r0, #10
 23fb54a:	f001 fc57 	bl	23fcdfc <pinMode>
    pinMode(DC_PIN, OUTPUT);
 23fb54e:	2101      	movs	r1, #1
 23fb550:	2006      	movs	r0, #6
 23fb552:	f001 fc53 	bl	23fcdfc <pinMode>
    pinMode(BUSY_PIN, INPUT); 
 23fb556:	2100      	movs	r1, #0
 23fb558:	2007      	movs	r0, #7
 23fb55a:	f001 fc4f 	bl	23fcdfc <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
 23fb55e:	f7ff ffd3 	bl	23fb508 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb562:	f001 f8d1 	bl	23fc708 <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
 23fb566:	4b09      	ldr	r3, [pc, #36]	; (23fb58c <_ZN5EpdIf6IfInitEv+0x50>)
 23fb568:	2400      	movs	r4, #0
 23fb56a:	9300      	str	r3, [sp, #0]
 23fb56c:	4b08      	ldr	r3, [pc, #32]	; (23fb590 <_ZN5EpdIf6IfInitEv+0x54>)
 23fb56e:	f88d 4004 	strb.w	r4, [sp, #4]
 23fb572:	9302      	str	r3, [sp, #8]
 23fb574:	2301      	movs	r3, #1
 23fb576:	f8ad 300c 	strh.w	r3, [sp, #12]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
 23fb57a:	f7ff ffc5 	bl	23fb508 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb57e:	4669      	mov	r1, sp
 23fb580:	f001 f8ec 	bl	23fc75c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    
    return 0;
}
 23fb584:	4620      	mov	r0, r4
 23fb586:	b004      	add	sp, #16
 23fb588:	bd10      	pop	{r4, pc}
 23fb58a:	bf00      	nop
 23fb58c:	023fd434 	.word	0x023fd434
 23fb590:	001e8480 	.word	0x001e8480

023fb594 <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
 23fb594:	b510      	push	{r4, lr}
 23fb596:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
 23fb598:	2100      	movs	r1, #0
 23fb59a:	2012      	movs	r0, #18
 23fb59c:	f001 fc3f 	bl	23fce1e <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 23fb5a0:	f7ff ffb2 	bl	23fb508 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fb5a4:	4621      	mov	r1, r4
 23fb5a6:	f001 f947 	bl	23fc838 <_ZN8SPIClass8transferEh>
}
 23fb5aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
 23fb5ae:	2101      	movs	r1, #1
 23fb5b0:	2012      	movs	r0, #18
 23fb5b2:	f001 bc34 	b.w	23fce1e <digitalWrite>

023fb5b6 <_ZN5PaintC1EPhii>:
 */

#include <avr/pgmspace.h>
#include "epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
 23fb5b6:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
 23fb5b8:	2400      	movs	r4, #0
 23fb5ba:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
 23fb5bc:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
 23fb5c0:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
 23fb5c2:	d008      	beq.n	23fb5d6 <_ZN5PaintC1EPhii+0x20>
 23fb5c4:	f102 0508 	add.w	r5, r2, #8
 23fb5c8:	4252      	negs	r2, r2
 23fb5ca:	f002 0107 	and.w	r1, r2, #7
 23fb5ce:	4622      	mov	r2, r4
 23fb5d0:	bf58      	it	pl
 23fb5d2:	424a      	negpl	r2, r1
 23fb5d4:	1aaa      	subs	r2, r5, r2
    this->height = height;
 23fb5d6:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
 23fb5da:	bd30      	pop	{r4, r5, pc}

023fb5dc <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
 23fb5dc:	4770      	bx	lr

023fb5de <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
 23fb5de:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
 23fb5e0:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
 23fb5e2:	db15      	blt.n	23fb610 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
 23fb5e4:	6844      	ldr	r4, [r0, #4]
 23fb5e6:	428c      	cmp	r4, r1
 23fb5e8:	dd12      	ble.n	23fb610 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
 23fb5ea:	2a00      	cmp	r2, #0
 23fb5ec:	db10      	blt.n	23fb610 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
 23fb5ee:	6885      	ldr	r5, [r0, #8]
 23fb5f0:	4295      	cmp	r5, r2
 23fb5f2:	dd0d      	ble.n	23fb610 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
 23fb5f4:	fb02 1204 	mla	r2, r2, r4, r1
 23fb5f8:	2480      	movs	r4, #128	; 0x80
 23fb5fa:	6805      	ldr	r5, [r0, #0]
 23fb5fc:	f001 0107 	and.w	r1, r1, #7
 23fb600:	10d2      	asrs	r2, r2, #3
 23fb602:	fa44 f101 	asr.w	r1, r4, r1
 23fb606:	56a8      	ldrsb	r0, [r5, r2]
 23fb608:	b249      	sxtb	r1, r1
        if (colored) {
 23fb60a:	b113      	cbz	r3, 23fb612 <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
 23fb60c:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
 23fb60e:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
 23fb610:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
 23fb612:	ea20 0001 	bic.w	r0, r0, r1
 23fb616:	e7fa      	b.n	23fb60e <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

023fb618 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
 23fb618:	b570      	push	{r4, r5, r6, lr}
 23fb61a:	460b      	mov	r3, r1
 23fb61c:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
 23fb61e:	2500      	movs	r5, #0
 23fb620:	6862      	ldr	r2, [r4, #4]
 23fb622:	42aa      	cmp	r2, r5
 23fb624:	dd0c      	ble.n	23fb640 <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
 23fb626:	2600      	movs	r6, #0
 23fb628:	68a2      	ldr	r2, [r4, #8]
 23fb62a:	42b2      	cmp	r2, r6
 23fb62c:	dd06      	ble.n	23fb63c <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
 23fb62e:	4632      	mov	r2, r6
 23fb630:	4629      	mov	r1, r5
 23fb632:	4620      	mov	r0, r4
 23fb634:	f7ff ffd3 	bl	23fb5de <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
 23fb638:	3601      	adds	r6, #1
 23fb63a:	e7f5      	b.n	23fb628 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
 23fb63c:	3501      	adds	r5, #1
 23fb63e:	e7ef      	b.n	23fb620 <_ZN5Paint5ClearEi+0x8>
}
 23fb640:	bd70      	pop	{r4, r5, r6, pc}

023fb642 <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
 23fb642:	6800      	ldr	r0, [r0, #0]
 23fb644:	4770      	bx	lr

023fb646 <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
 23fb646:	6840      	ldr	r0, [r0, #4]
 23fb648:	4770      	bx	lr

023fb64a <_ZN5Paint9GetHeightEv>:
    this->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint::GetHeight(void) {
    return this->height;
}
 23fb64a:	6880      	ldr	r0, [r0, #8]
 23fb64c:	4770      	bx	lr

023fb64e <_ZN5Paint9SetRotateEi>:
int Paint::GetRotate(void) {
    return this->rotate;
}

void Paint::SetRotate(int rotate){
    this->rotate = rotate;
 23fb64e:	60c1      	str	r1, [r0, #12]
}
 23fb650:	4770      	bx	lr

023fb652 <_ZN5Paint9DrawPixelEiii>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
 23fb652:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
 23fb654:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
 23fb656:	460d      	mov	r5, r1
 23fb658:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
 23fb65a:	b967      	cbnz	r7, 23fb676 <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
 23fb65c:	2900      	cmp	r1, #0
 23fb65e:	db37      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb660:	6847      	ldr	r7, [r0, #4]
 23fb662:	428f      	cmp	r7, r1
 23fb664:	dd34      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb666:	2a00      	cmp	r2, #0
 23fb668:	db32      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb66a:	6885      	ldr	r5, [r0, #8]
 23fb66c:	4295      	cmp	r5, r2
 23fb66e:	dd2f      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
 23fb670:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
 23fb672:	f7ff bfb4 	b.w	23fb5de <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
 23fb676:	2f01      	cmp	r7, #1
 23fb678:	d10c      	bne.n	23fb694 <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
 23fb67a:	2900      	cmp	r1, #0
 23fb67c:	db28      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb67e:	6882      	ldr	r2, [r0, #8]
 23fb680:	428a      	cmp	r2, r1
 23fb682:	dd25      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb684:	2c00      	cmp	r4, #0
 23fb686:	db23      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb688:	6841      	ldr	r1, [r0, #4]
 23fb68a:	42a1      	cmp	r1, r4
 23fb68c:	dd20      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
 23fb68e:	462a      	mov	r2, r5
 23fb690:	1b09      	subs	r1, r1, r4
 23fb692:	e7ed      	b.n	23fb670 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
 23fb694:	2f02      	cmp	r7, #2
 23fb696:	d10c      	bne.n	23fb6b2 <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
 23fb698:	2900      	cmp	r1, #0
 23fb69a:	db19      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb69c:	6841      	ldr	r1, [r0, #4]
 23fb69e:	42a9      	cmp	r1, r5
 23fb6a0:	dd16      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb6a2:	2a00      	cmp	r2, #0
 23fb6a4:	db14      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb6a6:	6882      	ldr	r2, [r0, #8]
 23fb6a8:	42a2      	cmp	r2, r4
 23fb6aa:	dd11      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
 23fb6ac:	1b12      	subs	r2, r2, r4
 23fb6ae:	1b49      	subs	r1, r1, r5
 23fb6b0:	e7de      	b.n	23fb670 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
 23fb6b2:	2f03      	cmp	r7, #3
 23fb6b4:	d10c      	bne.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
 23fb6b6:	2900      	cmp	r1, #0
 23fb6b8:	db0a      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb6ba:	6882      	ldr	r2, [r0, #8]
 23fb6bc:	428a      	cmp	r2, r1
 23fb6be:	dd07      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb6c0:	2c00      	cmp	r4, #0
 23fb6c2:	db05      	blt.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
 23fb6c4:	6841      	ldr	r1, [r0, #4]
 23fb6c6:	42a1      	cmp	r1, r4
 23fb6c8:	dd02      	ble.n	23fb6d0 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
 23fb6ca:	4621      	mov	r1, r4
 23fb6cc:	1b52      	subs	r2, r2, r5
 23fb6ce:	e7cf      	b.n	23fb670 <_ZN5Paint9DrawPixelEiii+0x1e>
}
 23fb6d0:	bcf0      	pop	{r4, r5, r6, r7}
 23fb6d2:	4770      	bx	lr

023fb6d4 <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
 23fb6d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fb6d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 23fb6da:	4691      	mov	r9, r2
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 23fb6dc:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
 23fb6de:	4688      	mov	r8, r1
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 23fb6e0:	f014 0207 	ands.w	r2, r4, #7
 23fb6e4:	bf18      	it	ne
 23fb6e6:	2201      	movne	r2, #1
    const unsigned char* ptr = &font->table[char_offset];

    for (j = 0; j < font->Height; j++) {
 23fb6e8:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
 23fb6ea:	f04f 0b80 	mov.w	fp, #128	; 0x80
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 23fb6ee:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
 23fb6f2:	88ec      	ldrh	r4, [r5, #6]
 23fb6f4:	3b20      	subs	r3, #32
 23fb6f6:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
 23fb6f8:	682c      	ldr	r4, [r5, #0]
 23fb6fa:	fb03 4402 	mla	r4, r3, r2, r4
    for (j = 0; j < font->Height; j++) {
 23fb6fe:	88eb      	ldrh	r3, [r5, #6]
 23fb700:	42bb      	cmp	r3, r7
 23fb702:	dd20      	ble.n	23fb746 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
 23fb704:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
 23fb706:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
 23fb70a:	88ab      	ldrh	r3, [r5, #4]
 23fb70c:	42b3      	cmp	r3, r6
 23fb70e:	dd15      	ble.n	23fb73c <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
 23fb710:	7821      	ldrb	r1, [r4, #0]
 23fb712:	f006 0a07 	and.w	sl, r6, #7
 23fb716:	fa4b f30a 	asr.w	r3, fp, sl
 23fb71a:	4219      	tst	r1, r3
 23fb71c:	d008      	beq.n	23fb730 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
 23fb71e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 23fb720:	eb06 0108 	add.w	r1, r6, r8
 23fb724:	9201      	str	r2, [sp, #4]
 23fb726:	9000      	str	r0, [sp, #0]
 23fb728:	f7ff ff93 	bl	23fb652 <_ZN5Paint9DrawPixelEiii>
 23fb72c:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
 23fb730:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
 23fb734:	bf08      	it	eq
 23fb736:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
 23fb738:	3601      	adds	r6, #1
 23fb73a:	e7e6      	b.n	23fb70a <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
 23fb73c:	075b      	lsls	r3, r3, #29
            ptr++;
 23fb73e:	bf18      	it	ne
 23fb740:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
 23fb742:	3701      	adds	r7, #1
 23fb744:	e7db      	b.n	23fb6fe <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
 23fb746:	b003      	add	sp, #12
 23fb748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fb74c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
 23fb74c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb750:	4606      	mov	r6, r0
 23fb752:	460c      	mov	r4, r1
 23fb754:	4690      	mov	r8, r2
 23fb756:	9f08      	ldr	r7, [sp, #32]
 23fb758:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 23fb75a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 23fb75e:	b153      	cbz	r3, 23fb776 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
 23fb760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fb762:	4621      	mov	r1, r4
 23fb764:	e9cd 7200 	strd	r7, r2, [sp]
 23fb768:	4630      	mov	r0, r6
 23fb76a:	4642      	mov	r2, r8
 23fb76c:	f7ff ffb2 	bl	23fb6d4 <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 23fb770:	88bb      	ldrh	r3, [r7, #4]
 23fb772:	441c      	add	r4, r3
    while (*p_text != 0) {
 23fb774:	e7f1      	b.n	23fb75a <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
 23fb776:	b002      	add	sp, #8
 23fb778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb77c <_ZN5Paint18DrawHorizontalLineEiiii>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
 23fb77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb77e:	4606      	mov	r6, r0
 23fb780:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
 23fb782:	460c      	mov	r4, r1
 23fb784:	18cd      	adds	r5, r1, r3
 23fb786:	42a5      	cmp	r5, r4
 23fb788:	dd07      	ble.n	23fb79a <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
 23fb78a:	4621      	mov	r1, r4
 23fb78c:	463a      	mov	r2, r7
 23fb78e:	4630      	mov	r0, r6
 23fb790:	9b06      	ldr	r3, [sp, #24]
 23fb792:	f7ff ff5e 	bl	23fb652 <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
 23fb796:	3401      	adds	r4, #1
 23fb798:	e7f5      	b.n	23fb786 <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
 23fb79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb79c <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
 23fb79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb79e:	4606      	mov	r6, r0
 23fb7a0:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
 23fb7a2:	4614      	mov	r4, r2
 23fb7a4:	18d5      	adds	r5, r2, r3
 23fb7a6:	42a5      	cmp	r5, r4
 23fb7a8:	dd07      	ble.n	23fb7ba <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
 23fb7aa:	4622      	mov	r2, r4
 23fb7ac:	4639      	mov	r1, r7
 23fb7ae:	4630      	mov	r0, r6
 23fb7b0:	9b06      	ldr	r3, [sp, #24]
 23fb7b2:	f7ff ff4e 	bl	23fb652 <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
 23fb7b6:	3401      	adds	r4, #1
 23fb7b8:	e7f5      	b.n	23fb7a6 <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
 23fb7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fb7bc <_ZN5Paint19DrawFilledRectangleEiiiii>:
}

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
 23fb7bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fb7c0:	428b      	cmp	r3, r1
 23fb7c2:	4604      	mov	r4, r0
 23fb7c4:	9808      	ldr	r0, [sp, #32]
 23fb7c6:	461e      	mov	r6, r3
 23fb7c8:	bfa8      	it	ge
 23fb7ca:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
 23fb7cc:	428b      	cmp	r3, r1
 23fb7ce:	bfb8      	it	lt
 23fb7d0:	460b      	movlt	r3, r1
 23fb7d2:	4290      	cmp	r0, r2
 23fb7d4:	4680      	mov	r8, r0
 23fb7d6:	bfa8      	it	ge
 23fb7d8:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
 23fb7da:	4290      	cmp	r0, r2
 23fb7dc:	bfac      	ite	ge
 23fb7de:	ebc8 0700 	rsbge	r7, r8, r0
 23fb7e2:	ebc8 0702 	rsblt	r7, r8, r2
 23fb7e6:	461d      	mov	r5, r3
 23fb7e8:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
 23fb7ea:	42ae      	cmp	r6, r5
 23fb7ec:	dc09      	bgt.n	23fb802 <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
 23fb7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fb7f0:	4631      	mov	r1, r6
 23fb7f2:	9300      	str	r3, [sp, #0]
 23fb7f4:	4642      	mov	r2, r8
 23fb7f6:	463b      	mov	r3, r7
 23fb7f8:	4620      	mov	r0, r4
 23fb7fa:	f7ff ffcf 	bl	23fb79c <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
 23fb7fe:	3601      	adds	r6, #1
 23fb800:	e7f3      	b.n	23fb7ea <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
 23fb802:	b002      	add	sp, #8
 23fb804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb808 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
 23fb808:	b510      	push	{r4, lr}
 23fb80a:	4604      	mov	r4, r0
    Wire.begin(); 
 23fb80c:	f001 fb4e 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb810:	f000 fd68 	bl	23fc2e4 <_ZN7TwoWire5beginEv>
}
 23fb814:	4620      	mov	r0, r4
 23fb816:	bd10      	pop	{r4, pc}

023fb818 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 23fb818:	6803      	ldr	r3, [r0, #0]
 23fb81a:	b2c9      	uxtb	r1, r1
 23fb81c:	689b      	ldr	r3, [r3, #8]
 23fb81e:	4718      	bx	r3

023fb820 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
 23fb820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
 23fb824:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
 23fb826:	2002      	movs	r0, #2
    cmdlen++;
 23fb828:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
 23fb82a:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
 23fb82c:	f000 fcc6 	bl	23fc1bc <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
 23fb830:	f001 fb3c 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb834:	2124      	movs	r1, #36	; 0x24
 23fb836:	f000 fd8b 	bl	23fc350 <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
 23fb83a:	f001 fb37 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb83e:	2100      	movs	r1, #0
 23fb840:	f7ff ffea 	bl	23fb818 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
 23fb844:	f001 fb32 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb848:	2100      	movs	r1, #0
 23fb84a:	f7ff ffe5 	bl	23fb818 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
 23fb84e:	f001 fb2d 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb852:	21ff      	movs	r1, #255	; 0xff
 23fb854:	f7ff ffe0 	bl	23fb818 <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
 23fb858:	f001 fb28 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb85c:	6803      	ldr	r3, [r0, #0]
 23fb85e:	4629      	mov	r1, r5
 23fb860:	689b      	ldr	r3, [r3, #8]
 23fb862:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
 23fb864:	f001 fb22 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb868:	4269      	negs	r1, r5
 23fb86a:	f7ff ffd5 	bl	23fb818 <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
 23fb86e:	f001 fb1d 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb872:	21d4      	movs	r1, #212	; 0xd4
 23fb874:	f7ff ffd0 	bl	23fb818 <_ZN7TwoWire5writeEi>
 23fb878:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
 23fb87a:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
 23fb87c:	3d01      	subs	r5, #1
 23fb87e:	f104 0801 	add.w	r8, r4, #1
 23fb882:	b2e4      	uxtb	r4, r4
 23fb884:	42ac      	cmp	r4, r5
 23fb886:	da0a      	bge.n	23fb89e <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
 23fb888:	f001 fb10 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb88c:	6803      	ldr	r3, [r0, #0]
 23fb88e:	5d39      	ldrb	r1, [r7, r4]
 23fb890:	689b      	ldr	r3, [r3, #8]
 23fb892:	4798      	blx	r3
      checksum += cmd[i];
 23fb894:	5d39      	ldrb	r1, [r7, r4]
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
 23fb896:	4644      	mov	r4, r8
      checksum += cmd[i];
 23fb898:	440e      	add	r6, r1
 23fb89a:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
 23fb89c:	e7ef      	b.n	23fb87e <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
 23fb89e:	f001 fb05 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb8a2:	43f1      	mvns	r1, r6
 23fb8a4:	6803      	ldr	r3, [r0, #0]
 23fb8a6:	b2c9      	uxtb	r1, r1
 23fb8a8:	689b      	ldr	r3, [r3, #8]
 23fb8aa:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
 23fb8ac:	f001 fafe 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb8b0:	6803      	ldr	r3, [r0, #0]
 23fb8b2:	2100      	movs	r1, #0
 23fb8b4:	689b      	ldr	r3, [r3, #8]
 23fb8b6:	4798      	blx	r3
    Wire.endTransmission();
 23fb8b8:	f001 faf8 	bl	23fceac <_Z19__fetch_global_Wirev>
}
 23fb8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
 23fb8c0:	f000 bd4d 	b.w	23fc35e <_ZN7TwoWire15endTransmissionEv>

023fb8c4 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
 23fb8c4:	b538      	push	{r3, r4, r5, lr}
 23fb8c6:	4604      	mov	r4, r0
 23fb8c8:	4615      	mov	r5, r2
 23fb8ca:	4b06      	ldr	r3, [pc, #24]	; (23fb8e4 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
 23fb8cc:	4608      	mov	r0, r1
    
    _irq = irq;
 23fb8ce:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
 23fb8d2:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
 23fb8d4:	2100      	movs	r1, #0
 23fb8d6:	f001 fa91 	bl	23fcdfc <pinMode>
    _mode = mode;
}
 23fb8da:	4620      	mov	r0, r4
    _mode = mode;
 23fb8dc:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
 23fb8e0:	bd38      	pop	{r3, r4, r5, pc}
 23fb8e2:	bf00      	nop
 23fb8e4:	023ffdd8 	.word	0x023ffdd8

023fb8e8 <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
 23fb8e8:	b538      	push	{r3, r4, r5, lr}
 23fb8ea:	4605      	mov	r5, r0
 23fb8ec:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
 23fb8ee:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 23fb8f2:	f001 faad 	bl	23fce50 <digitalRead>
 23fb8f6:	b130      	cbz	r0, 23fb906 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
 23fb8f8:	3c01      	subs	r4, #1
 23fb8fa:	b2a4      	uxth	r4, r4
 23fb8fc:	b12c      	cbz	r4, 23fb90a <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
 23fb8fe:	200a      	movs	r0, #10
 23fb900:	f000 fc5c 	bl	23fc1bc <delay>
    while(digitalRead(_irq)!=0){
 23fb904:	e7f3      	b.n	23fb8ee <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
 23fb906:	2001      	movs	r0, #1
}
 23fb908:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 23fb90a:	4620      	mov	r0, r4
 23fb90c:	e7fc      	b.n	23fb908 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

023fb90e <_ZN17DFRobot_PN532_IIC7readAckEil>:
    pn532ack[0] = 0x00;
 23fb90e:	2300      	movs	r3, #0
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
 23fb910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[2] = 0xFF;
 23fb912:	22ff      	movs	r2, #255	; 0xff
    pn532ack[0] = 0x00;
 23fb914:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
 23fb918:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
 23fb91c:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
 23fb920:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
 23fb924:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
 23fb928:	4604      	mov	r4, r0
    if(_mode == 1){
 23fb92a:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
 23fb92c:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
 23fb92e:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
 23fb932:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
 23fb936:	d141      	bne.n	23fb9bc <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
 23fb938:	f7ff ffd6 	bl	23fb8e8 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
 23fb93c:	b910      	cbnz	r0, 23fb944 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
 23fb93e:	2000      	movs	r0, #0
}
 23fb940:	b003      	add	sp, #12
 23fb942:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
 23fb944:	f001 fab2 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb948:	2208      	movs	r2, #8
 23fb94a:	2124      	movs	r1, #36	; 0x24
 23fb94c:	f000 fcf9 	bl	23fc342 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
 23fb950:	f001 faac 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb954:	6803      	ldr	r3, [r0, #0]
 23fb956:	1d26      	adds	r6, r4, #4
 23fb958:	695b      	ldr	r3, [r3, #20]
 23fb95a:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
 23fb95c:	f104 070a 	add.w	r7, r4, #10
        delay(1);
 23fb960:	2001      	movs	r0, #1
 23fb962:	f000 fc2b 	bl	23fc1bc <delay>
        receiveACK[i]= Wire.read();
 23fb966:	f001 faa1 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb96a:	6803      	ldr	r3, [r0, #0]
 23fb96c:	695b      	ldr	r3, [r3, #20]
 23fb96e:	4798      	blx	r3
 23fb970:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
 23fb974:	42be      	cmp	r6, r7
 23fb976:	d1f3      	bne.n	23fb960 <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
 23fb978:	4620      	mov	r0, r4
 23fb97a:	f7ff ffb5 	bl	23fb8e8 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
 23fb97e:	2800      	cmp	r0, #0
 23fb980:	d0dd      	beq.n	23fb93e <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
 23fb982:	f001 fa93 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb986:	1f2a      	subs	r2, r5, #4
 23fb988:	2124      	movs	r1, #36	; 0x24
 23fb98a:	f000 fcda 	bl	23fc342 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
 23fb98e:	f001 fa8d 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb992:	6803      	ldr	r3, [r0, #0]
    for(int i = 0; i < x - 6; i++){
 23fb994:	f06f 0709 	mvn.w	r7, #9
    Wire.read();
 23fb998:	695b      	ldr	r3, [r3, #20]
 23fb99a:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
 23fb99c:	3d06      	subs	r5, #6
 23fb99e:	1b3f      	subs	r7, r7, r4
 23fb9a0:	19bb      	adds	r3, r7, r6
 23fb9a2:	429d      	cmp	r5, r3
 23fb9a4:	dd49      	ble.n	23fba3a <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
 23fb9a6:	2001      	movs	r0, #1
 23fb9a8:	f000 fc08 	bl	23fc1bc <delay>
        receiveACK[6 + i] = Wire.read();
 23fb9ac:	f001 fa7e 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb9b0:	6803      	ldr	r3, [r0, #0]
 23fb9b2:	695b      	ldr	r3, [r3, #20]
 23fb9b4:	4798      	blx	r3
 23fb9b6:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
 23fb9ba:	e7f1      	b.n	23fb9a0 <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
 23fb9bc:	2b00      	cmp	r3, #0
 23fb9be:	d13c      	bne.n	23fba3a <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
 23fb9c0:	201e      	movs	r0, #30
 23fb9c2:	f000 fbfb 	bl	23fc1bc <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
 23fb9c6:	f001 fa71 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb9ca:	2208      	movs	r2, #8
 23fb9cc:	2124      	movs	r1, #36	; 0x24
 23fb9ce:	f000 fcb8 	bl	23fc342 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
 23fb9d2:	f001 fa6b 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb9d6:	6803      	ldr	r3, [r0, #0]
 23fb9d8:	1d26      	adds	r6, r4, #4
 23fb9da:	695b      	ldr	r3, [r3, #20]
 23fb9dc:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
 23fb9de:	f104 070a 	add.w	r7, r4, #10
        delay(1);
 23fb9e2:	2001      	movs	r0, #1
 23fb9e4:	f000 fbea 	bl	23fc1bc <delay>
        receiveACK[i]= Wire.read();
 23fb9e8:	f001 fa60 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fb9ec:	6803      	ldr	r3, [r0, #0]
 23fb9ee:	695b      	ldr	r3, [r3, #20]
 23fb9f0:	4798      	blx	r3
 23fb9f2:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
 23fb9f6:	42be      	cmp	r6, r7
 23fb9f8:	d1f3      	bne.n	23fb9e2 <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
 23fb9fa:	201e      	movs	r0, #30
 23fb9fc:	f000 fbde 	bl	23fc1bc <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
 23fba00:	f001 fa54 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fba04:	1f2a      	subs	r2, r5, #4
 23fba06:	2124      	movs	r1, #36	; 0x24
 23fba08:	f000 fc9b 	bl	23fc342 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
 23fba0c:	f001 fa4e 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fba10:	6803      	ldr	r3, [r0, #0]
    for(int i = 0; i < x - 6; i++){
 23fba12:	f06f 0709 	mvn.w	r7, #9
    Wire.read();
 23fba16:	695b      	ldr	r3, [r3, #20]
 23fba18:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
 23fba1a:	3d06      	subs	r5, #6
 23fba1c:	1b3f      	subs	r7, r7, r4
 23fba1e:	19bb      	adds	r3, r7, r6
 23fba20:	429d      	cmp	r5, r3
 23fba22:	dd0a      	ble.n	23fba3a <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
 23fba24:	2001      	movs	r0, #1
 23fba26:	f000 fbc9 	bl	23fc1bc <delay>
        receiveACK[6 + i] = Wire.read();
 23fba2a:	f001 fa3f 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fba2e:	6803      	ldr	r3, [r0, #0]
 23fba30:	695b      	ldr	r3, [r3, #20]
 23fba32:	4798      	blx	r3
 23fba34:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
 23fba38:	e7f1      	b.n	23fba1e <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
 23fba3a:	2206      	movs	r2, #6
 23fba3c:	4668      	mov	r0, sp
 23fba3e:	1d21      	adds	r1, r4, #4
 23fba40:	f001 fb6c 	bl	23fd11c <strncmp>
 23fba44:	fab0 f080 	clz	r0, r0
 23fba48:	0940      	lsrs	r0, r0, #5
 23fba4a:	e779      	b.n	23fb940 <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

023fba4c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fba4c:	b509      	push	{r0, r3, lr}
 23fba4e:	4804      	ldr	r0, [pc, #16]	; (23fba60 <os_mutex_recursive_create+0x14>)
 23fba50:	6800      	ldr	r0, [r0, #0]
 23fba52:	4b04      	ldr	r3, [pc, #16]	; (23fba64 <os_mutex_recursive_create+0x18>)
 23fba54:	4403      	add	r3, r0
 23fba56:	681b      	ldr	r3, [r3, #0]
 23fba58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fba5a:	9302      	str	r3, [sp, #8]
 23fba5c:	bd09      	pop	{r0, r3, pc}
 23fba5e:	0000      	.short	0x0000
 23fba60:	1007821c 	.word	0x1007821c
 23fba64:	00000030 	.word	0x00000030

023fba68 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fba68:	b509      	push	{r0, r3, lr}
 23fba6a:	4804      	ldr	r0, [pc, #16]	; (23fba7c <HAL_RNG_GetRandomNumber+0x14>)
 23fba6c:	6800      	ldr	r0, [r0, #0]
 23fba6e:	4b04      	ldr	r3, [pc, #16]	; (23fba80 <HAL_RNG_GetRandomNumber+0x18>)
 23fba70:	4403      	add	r3, r0
 23fba72:	681b      	ldr	r3, [r3, #0]
 23fba74:	685b      	ldr	r3, [r3, #4]
 23fba76:	9302      	str	r3, [sp, #8]
 23fba78:	bd09      	pop	{r0, r3, pc}
 23fba7a:	0000      	.short	0x0000
 23fba7c:	1007821c 	.word	0x1007821c
 23fba80:	00000000 	.word	0x00000000

023fba84 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fba84:	b509      	push	{r0, r3, lr}
 23fba86:	4804      	ldr	r0, [pc, #16]	; (23fba98 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fba88:	6800      	ldr	r0, [r0, #0]
 23fba8a:	4b04      	ldr	r3, [pc, #16]	; (23fba9c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fba8c:	4403      	add	r3, r0
 23fba8e:	681b      	ldr	r3, [r3, #0]
 23fba90:	695b      	ldr	r3, [r3, #20]
 23fba92:	9302      	str	r3, [sp, #8]
 23fba94:	bd09      	pop	{r0, r3, pc}
 23fba96:	0000      	.short	0x0000
 23fba98:	1007821c 	.word	0x1007821c
 23fba9c:	00000000 	.word	0x00000000

023fbaa0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fbaa0:	b509      	push	{r0, r3, lr}
 23fbaa2:	4804      	ldr	r0, [pc, #16]	; (23fbab4 <hal_gpio_mode+0x14>)
 23fbaa4:	6800      	ldr	r0, [r0, #0]
 23fbaa6:	4b04      	ldr	r3, [pc, #16]	; (23fbab8 <hal_gpio_mode+0x18>)
 23fbaa8:	4403      	add	r3, r0
 23fbaaa:	681b      	ldr	r3, [r3, #0]
 23fbaac:	689b      	ldr	r3, [r3, #8]
 23fbaae:	9302      	str	r3, [sp, #8]
 23fbab0:	bd09      	pop	{r0, r3, pc}
 23fbab2:	0000      	.short	0x0000
 23fbab4:	1007821c 	.word	0x1007821c
 23fbab8:	00000014 	.word	0x00000014

023fbabc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fbabc:	b509      	push	{r0, r3, lr}
 23fbabe:	4804      	ldr	r0, [pc, #16]	; (23fbad0 <hal_gpio_get_mode+0x14>)
 23fbac0:	6800      	ldr	r0, [r0, #0]
 23fbac2:	4b04      	ldr	r3, [pc, #16]	; (23fbad4 <hal_gpio_get_mode+0x18>)
 23fbac4:	4403      	add	r3, r0
 23fbac6:	681b      	ldr	r3, [r3, #0]
 23fbac8:	68db      	ldr	r3, [r3, #12]
 23fbaca:	9302      	str	r3, [sp, #8]
 23fbacc:	bd09      	pop	{r0, r3, pc}
 23fbace:	0000      	.short	0x0000
 23fbad0:	1007821c 	.word	0x1007821c
 23fbad4:	00000014 	.word	0x00000014

023fbad8 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fbad8:	b509      	push	{r0, r3, lr}
 23fbada:	4804      	ldr	r0, [pc, #16]	; (23fbaec <hal_gpio_write+0x14>)
 23fbadc:	6800      	ldr	r0, [r0, #0]
 23fbade:	4b04      	ldr	r3, [pc, #16]	; (23fbaf0 <hal_gpio_write+0x18>)
 23fbae0:	4403      	add	r3, r0
 23fbae2:	681b      	ldr	r3, [r3, #0]
 23fbae4:	691b      	ldr	r3, [r3, #16]
 23fbae6:	9302      	str	r3, [sp, #8]
 23fbae8:	bd09      	pop	{r0, r3, pc}
 23fbaea:	0000      	.short	0x0000
 23fbaec:	1007821c 	.word	0x1007821c
 23fbaf0:	00000014 	.word	0x00000014

023fbaf4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fbaf4:	b509      	push	{r0, r3, lr}
 23fbaf6:	4804      	ldr	r0, [pc, #16]	; (23fbb08 <hal_gpio_read+0x14>)
 23fbaf8:	6800      	ldr	r0, [r0, #0]
 23fbafa:	4b04      	ldr	r3, [pc, #16]	; (23fbb0c <hal_gpio_read+0x18>)
 23fbafc:	4403      	add	r3, r0
 23fbafe:	681b      	ldr	r3, [r3, #0]
 23fbb00:	695b      	ldr	r3, [r3, #20]
 23fbb02:	9302      	str	r3, [sp, #8]
 23fbb04:	bd09      	pop	{r0, r3, pc}
 23fbb06:	0000      	.short	0x0000
 23fbb08:	1007821c 	.word	0x1007821c
 23fbb0c:	00000014 	.word	0x00000014

023fbb10 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fbb10:	b509      	push	{r0, r3, lr}
 23fbb12:	4804      	ldr	r0, [pc, #16]	; (23fbb24 <hal_i2c_begin+0x14>)
 23fbb14:	6800      	ldr	r0, [r0, #0]
 23fbb16:	4b04      	ldr	r3, [pc, #16]	; (23fbb28 <hal_i2c_begin+0x18>)
 23fbb18:	4403      	add	r3, r0
 23fbb1a:	681b      	ldr	r3, [r3, #0]
 23fbb1c:	68db      	ldr	r3, [r3, #12]
 23fbb1e:	9302      	str	r3, [sp, #8]
 23fbb20:	bd09      	pop	{r0, r3, pc}
 23fbb22:	0000      	.short	0x0000
 23fbb24:	1007821c 	.word	0x1007821c
 23fbb28:	00000010 	.word	0x00000010

023fbb2c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fbb2c:	b509      	push	{r0, r3, lr}
 23fbb2e:	4804      	ldr	r0, [pc, #16]	; (23fbb40 <hal_i2c_begin_transmission+0x14>)
 23fbb30:	6800      	ldr	r0, [r0, #0]
 23fbb32:	4b04      	ldr	r3, [pc, #16]	; (23fbb44 <hal_i2c_begin_transmission+0x18>)
 23fbb34:	4403      	add	r3, r0
 23fbb36:	681b      	ldr	r3, [r3, #0]
 23fbb38:	699b      	ldr	r3, [r3, #24]
 23fbb3a:	9302      	str	r3, [sp, #8]
 23fbb3c:	bd09      	pop	{r0, r3, pc}
 23fbb3e:	0000      	.short	0x0000
 23fbb40:	1007821c 	.word	0x1007821c
 23fbb44:	00000010 	.word	0x00000010

023fbb48 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fbb48:	b509      	push	{r0, r3, lr}
 23fbb4a:	4804      	ldr	r0, [pc, #16]	; (23fbb5c <hal_i2c_end_transmission+0x14>)
 23fbb4c:	6800      	ldr	r0, [r0, #0]
 23fbb4e:	4b04      	ldr	r3, [pc, #16]	; (23fbb60 <hal_i2c_end_transmission+0x18>)
 23fbb50:	4403      	add	r3, r0
 23fbb52:	681b      	ldr	r3, [r3, #0]
 23fbb54:	69db      	ldr	r3, [r3, #28]
 23fbb56:	9302      	str	r3, [sp, #8]
 23fbb58:	bd09      	pop	{r0, r3, pc}
 23fbb5a:	0000      	.short	0x0000
 23fbb5c:	1007821c 	.word	0x1007821c
 23fbb60:	00000010 	.word	0x00000010

023fbb64 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fbb64:	b509      	push	{r0, r3, lr}
 23fbb66:	4804      	ldr	r0, [pc, #16]	; (23fbb78 <hal_i2c_write+0x14>)
 23fbb68:	6800      	ldr	r0, [r0, #0]
 23fbb6a:	4b04      	ldr	r3, [pc, #16]	; (23fbb7c <hal_i2c_write+0x18>)
 23fbb6c:	4403      	add	r3, r0
 23fbb6e:	681b      	ldr	r3, [r3, #0]
 23fbb70:	6a1b      	ldr	r3, [r3, #32]
 23fbb72:	9302      	str	r3, [sp, #8]
 23fbb74:	bd09      	pop	{r0, r3, pc}
 23fbb76:	0000      	.short	0x0000
 23fbb78:	1007821c 	.word	0x1007821c
 23fbb7c:	00000010 	.word	0x00000010

023fbb80 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fbb80:	b509      	push	{r0, r3, lr}
 23fbb82:	4804      	ldr	r0, [pc, #16]	; (23fbb94 <hal_i2c_available+0x14>)
 23fbb84:	6800      	ldr	r0, [r0, #0]
 23fbb86:	4b04      	ldr	r3, [pc, #16]	; (23fbb98 <hal_i2c_available+0x18>)
 23fbb88:	4403      	add	r3, r0
 23fbb8a:	681b      	ldr	r3, [r3, #0]
 23fbb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbb8e:	9302      	str	r3, [sp, #8]
 23fbb90:	bd09      	pop	{r0, r3, pc}
 23fbb92:	0000      	.short	0x0000
 23fbb94:	1007821c 	.word	0x1007821c
 23fbb98:	00000010 	.word	0x00000010

023fbb9c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fbb9c:	b509      	push	{r0, r3, lr}
 23fbb9e:	4804      	ldr	r0, [pc, #16]	; (23fbbb0 <hal_i2c_read+0x14>)
 23fbba0:	6800      	ldr	r0, [r0, #0]
 23fbba2:	4b04      	ldr	r3, [pc, #16]	; (23fbbb4 <hal_i2c_read+0x18>)
 23fbba4:	4403      	add	r3, r0
 23fbba6:	681b      	ldr	r3, [r3, #0]
 23fbba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbbaa:	9302      	str	r3, [sp, #8]
 23fbbac:	bd09      	pop	{r0, r3, pc}
 23fbbae:	0000      	.short	0x0000
 23fbbb0:	1007821c 	.word	0x1007821c
 23fbbb4:	00000010 	.word	0x00000010

023fbbb8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fbbb8:	b509      	push	{r0, r3, lr}
 23fbbba:	4804      	ldr	r0, [pc, #16]	; (23fbbcc <hal_i2c_peek+0x14>)
 23fbbbc:	6800      	ldr	r0, [r0, #0]
 23fbbbe:	4b04      	ldr	r3, [pc, #16]	; (23fbbd0 <hal_i2c_peek+0x18>)
 23fbbc0:	4403      	add	r3, r0
 23fbbc2:	681b      	ldr	r3, [r3, #0]
 23fbbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbbc6:	9302      	str	r3, [sp, #8]
 23fbbc8:	bd09      	pop	{r0, r3, pc}
 23fbbca:	0000      	.short	0x0000
 23fbbcc:	1007821c 	.word	0x1007821c
 23fbbd0:	00000010 	.word	0x00000010

023fbbd4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fbbd4:	b509      	push	{r0, r3, lr}
 23fbbd6:	4804      	ldr	r0, [pc, #16]	; (23fbbe8 <hal_i2c_flush+0x14>)
 23fbbd8:	6800      	ldr	r0, [r0, #0]
 23fbbda:	4b04      	ldr	r3, [pc, #16]	; (23fbbec <hal_i2c_flush+0x18>)
 23fbbdc:	4403      	add	r3, r0
 23fbbde:	681b      	ldr	r3, [r3, #0]
 23fbbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fbbe2:	9302      	str	r3, [sp, #8]
 23fbbe4:	bd09      	pop	{r0, r3, pc}
 23fbbe6:	0000      	.short	0x0000
 23fbbe8:	1007821c 	.word	0x1007821c
 23fbbec:	00000010 	.word	0x00000010

023fbbf0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fbbf0:	b509      	push	{r0, r3, lr}
 23fbbf2:	4804      	ldr	r0, [pc, #16]	; (23fbc04 <hal_i2c_is_enabled+0x14>)
 23fbbf4:	6800      	ldr	r0, [r0, #0]
 23fbbf6:	4b04      	ldr	r3, [pc, #16]	; (23fbc08 <hal_i2c_is_enabled+0x18>)
 23fbbf8:	4403      	add	r3, r0
 23fbbfa:	681b      	ldr	r3, [r3, #0]
 23fbbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fbbfe:	9302      	str	r3, [sp, #8]
 23fbc00:	bd09      	pop	{r0, r3, pc}
 23fbc02:	0000      	.short	0x0000
 23fbc04:	1007821c 	.word	0x1007821c
 23fbc08:	00000010 	.word	0x00000010

023fbc0c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fbc0c:	b509      	push	{r0, r3, lr}
 23fbc0e:	4804      	ldr	r0, [pc, #16]	; (23fbc20 <hal_i2c_init+0x14>)
 23fbc10:	6800      	ldr	r0, [r0, #0]
 23fbc12:	4b04      	ldr	r3, [pc, #16]	; (23fbc24 <hal_i2c_init+0x18>)
 23fbc14:	4403      	add	r3, r0
 23fbc16:	681b      	ldr	r3, [r3, #0]
 23fbc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbc1a:	9302      	str	r3, [sp, #8]
 23fbc1c:	bd09      	pop	{r0, r3, pc}
 23fbc1e:	0000      	.short	0x0000
 23fbc20:	1007821c 	.word	0x1007821c
 23fbc24:	00000010 	.word	0x00000010

023fbc28 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fbc28:	b509      	push	{r0, r3, lr}
 23fbc2a:	4804      	ldr	r0, [pc, #16]	; (23fbc3c <hal_i2c_request_ex+0x14>)
 23fbc2c:	6800      	ldr	r0, [r0, #0]
 23fbc2e:	4b04      	ldr	r3, [pc, #16]	; (23fbc40 <hal_i2c_request_ex+0x18>)
 23fbc30:	4403      	add	r3, r0
 23fbc32:	681b      	ldr	r3, [r3, #0]
 23fbc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fbc36:	9302      	str	r3, [sp, #8]
 23fbc38:	bd09      	pop	{r0, r3, pc}
 23fbc3a:	0000      	.short	0x0000
 23fbc3c:	1007821c 	.word	0x1007821c
 23fbc40:	00000010 	.word	0x00000010

023fbc44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fbc44:	b509      	push	{r0, r3, lr}
 23fbc46:	4804      	ldr	r0, [pc, #16]	; (23fbc58 <inet_inet_ntop+0x14>)
 23fbc48:	6800      	ldr	r0, [r0, #0]
 23fbc4a:	4b04      	ldr	r3, [pc, #16]	; (23fbc5c <inet_inet_ntop+0x18>)
 23fbc4c:	4403      	add	r3, r0
 23fbc4e:	681b      	ldr	r3, [r3, #0]
 23fbc50:	695b      	ldr	r3, [r3, #20]
 23fbc52:	9302      	str	r3, [sp, #8]
 23fbc54:	bd09      	pop	{r0, r3, pc}
 23fbc56:	0000      	.short	0x0000
 23fbc58:	1007821c 	.word	0x1007821c
 23fbc5c:	0000004c 	.word	0x0000004c

023fbc60 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fbc60:	b509      	push	{r0, r3, lr}
 23fbc62:	4804      	ldr	r0, [pc, #16]	; (23fbc74 <netdb_freeaddrinfo+0x14>)
 23fbc64:	6800      	ldr	r0, [r0, #0]
 23fbc66:	4b04      	ldr	r3, [pc, #16]	; (23fbc78 <netdb_freeaddrinfo+0x18>)
 23fbc68:	4403      	add	r3, r0
 23fbc6a:	681b      	ldr	r3, [r3, #0]
 23fbc6c:	689b      	ldr	r3, [r3, #8]
 23fbc6e:	9302      	str	r3, [sp, #8]
 23fbc70:	bd09      	pop	{r0, r3, pc}
 23fbc72:	0000      	.short	0x0000
 23fbc74:	1007821c 	.word	0x1007821c
 23fbc78:	00000050 	.word	0x00000050

023fbc7c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fbc7c:	b509      	push	{r0, r3, lr}
 23fbc7e:	4804      	ldr	r0, [pc, #16]	; (23fbc90 <netdb_getaddrinfo+0x14>)
 23fbc80:	6800      	ldr	r0, [r0, #0]
 23fbc82:	4b04      	ldr	r3, [pc, #16]	; (23fbc94 <netdb_getaddrinfo+0x18>)
 23fbc84:	4403      	add	r3, r0
 23fbc86:	681b      	ldr	r3, [r3, #0]
 23fbc88:	68db      	ldr	r3, [r3, #12]
 23fbc8a:	9302      	str	r3, [sp, #8]
 23fbc8c:	bd09      	pop	{r0, r3, pc}
 23fbc8e:	0000      	.short	0x0000
 23fbc90:	1007821c 	.word	0x1007821c
 23fbc94:	00000050 	.word	0x00000050

023fbc98 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fbc98:	b509      	push	{r0, r3, lr}
 23fbc9a:	4804      	ldr	r0, [pc, #16]	; (23fbcac <hal_spi_begin+0x14>)
 23fbc9c:	6800      	ldr	r0, [r0, #0]
 23fbc9e:	4b04      	ldr	r3, [pc, #16]	; (23fbcb0 <hal_spi_begin+0x18>)
 23fbca0:	4403      	add	r3, r0
 23fbca2:	681b      	ldr	r3, [r3, #0]
 23fbca4:	681b      	ldr	r3, [r3, #0]
 23fbca6:	9302      	str	r3, [sp, #8]
 23fbca8:	bd09      	pop	{r0, r3, pc}
 23fbcaa:	0000      	.short	0x0000
 23fbcac:	1007821c 	.word	0x1007821c
 23fbcb0:	00000018 	.word	0x00000018

023fbcb4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fbcb4:	b509      	push	{r0, r3, lr}
 23fbcb6:	4804      	ldr	r0, [pc, #16]	; (23fbcc8 <hal_spi_transfer+0x14>)
 23fbcb8:	6800      	ldr	r0, [r0, #0]
 23fbcba:	4b04      	ldr	r3, [pc, #16]	; (23fbccc <hal_spi_transfer+0x18>)
 23fbcbc:	4403      	add	r3, r0
 23fbcbe:	681b      	ldr	r3, [r3, #0]
 23fbcc0:	695b      	ldr	r3, [r3, #20]
 23fbcc2:	9302      	str	r3, [sp, #8]
 23fbcc4:	bd09      	pop	{r0, r3, pc}
 23fbcc6:	0000      	.short	0x0000
 23fbcc8:	1007821c 	.word	0x1007821c
 23fbccc:	00000018 	.word	0x00000018

023fbcd0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fbcd0:	b509      	push	{r0, r3, lr}
 23fbcd2:	4804      	ldr	r0, [pc, #16]	; (23fbce4 <hal_spi_init+0x14>)
 23fbcd4:	6800      	ldr	r0, [r0, #0]
 23fbcd6:	4b04      	ldr	r3, [pc, #16]	; (23fbce8 <hal_spi_init+0x18>)
 23fbcd8:	4403      	add	r3, r0
 23fbcda:	681b      	ldr	r3, [r3, #0]
 23fbcdc:	69db      	ldr	r3, [r3, #28]
 23fbcde:	9302      	str	r3, [sp, #8]
 23fbce0:	bd09      	pop	{r0, r3, pc}
 23fbce2:	0000      	.short	0x0000
 23fbce4:	1007821c 	.word	0x1007821c
 23fbce8:	00000018 	.word	0x00000018

023fbcec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fbcec:	b509      	push	{r0, r3, lr}
 23fbcee:	4804      	ldr	r0, [pc, #16]	; (23fbd00 <hal_spi_is_enabled+0x14>)
 23fbcf0:	6800      	ldr	r0, [r0, #0]
 23fbcf2:	4b04      	ldr	r3, [pc, #16]	; (23fbd04 <hal_spi_is_enabled+0x18>)
 23fbcf4:	4403      	add	r3, r0
 23fbcf6:	681b      	ldr	r3, [r3, #0]
 23fbcf8:	6a1b      	ldr	r3, [r3, #32]
 23fbcfa:	9302      	str	r3, [sp, #8]
 23fbcfc:	bd09      	pop	{r0, r3, pc}
 23fbcfe:	0000      	.short	0x0000
 23fbd00:	1007821c 	.word	0x1007821c
 23fbd04:	00000018 	.word	0x00000018

023fbd08 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fbd08:	b509      	push	{r0, r3, lr}
 23fbd0a:	4804      	ldr	r0, [pc, #16]	; (23fbd1c <hal_spi_info+0x14>)
 23fbd0c:	6800      	ldr	r0, [r0, #0]
 23fbd0e:	4b04      	ldr	r3, [pc, #16]	; (23fbd20 <hal_spi_info+0x18>)
 23fbd10:	4403      	add	r3, r0
 23fbd12:	681b      	ldr	r3, [r3, #0]
 23fbd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fbd16:	9302      	str	r3, [sp, #8]
 23fbd18:	bd09      	pop	{r0, r3, pc}
 23fbd1a:	0000      	.short	0x0000
 23fbd1c:	1007821c 	.word	0x1007821c
 23fbd20:	00000018 	.word	0x00000018

023fbd24 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fbd24:	b509      	push	{r0, r3, lr}
 23fbd26:	4804      	ldr	r0, [pc, #16]	; (23fbd38 <hal_spi_set_settings+0x14>)
 23fbd28:	6800      	ldr	r0, [r0, #0]
 23fbd2a:	4b04      	ldr	r3, [pc, #16]	; (23fbd3c <hal_spi_set_settings+0x18>)
 23fbd2c:	4403      	add	r3, r0
 23fbd2e:	681b      	ldr	r3, [r3, #0]
 23fbd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbd32:	9302      	str	r3, [sp, #8]
 23fbd34:	bd09      	pop	{r0, r3, pc}
 23fbd36:	0000      	.short	0x0000
 23fbd38:	1007821c 	.word	0x1007821c
 23fbd3c:	00000018 	.word	0x00000018

023fbd40 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fbd40:	b509      	push	{r0, r3, lr}
 23fbd42:	4804      	ldr	r0, [pc, #16]	; (23fbd54 <hal_spi_acquire+0x14>)
 23fbd44:	6800      	ldr	r0, [r0, #0]
 23fbd46:	4b04      	ldr	r3, [pc, #16]	; (23fbd58 <hal_spi_acquire+0x18>)
 23fbd48:	4403      	add	r3, r0
 23fbd4a:	681b      	ldr	r3, [r3, #0]
 23fbd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbd4e:	9302      	str	r3, [sp, #8]
 23fbd50:	bd09      	pop	{r0, r3, pc}
 23fbd52:	0000      	.short	0x0000
 23fbd54:	1007821c 	.word	0x1007821c
 23fbd58:	00000018 	.word	0x00000018

023fbd5c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fbd5c:	b509      	push	{r0, r3, lr}
 23fbd5e:	4804      	ldr	r0, [pc, #16]	; (23fbd70 <hal_spi_release+0x14>)
 23fbd60:	6800      	ldr	r0, [r0, #0]
 23fbd62:	4b04      	ldr	r3, [pc, #16]	; (23fbd74 <hal_spi_release+0x18>)
 23fbd64:	4403      	add	r3, r0
 23fbd66:	681b      	ldr	r3, [r3, #0]
 23fbd68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fbd6a:	9302      	str	r3, [sp, #8]
 23fbd6c:	bd09      	pop	{r0, r3, pc}
 23fbd6e:	0000      	.short	0x0000
 23fbd70:	1007821c 	.word	0x1007821c
 23fbd74:	00000018 	.word	0x00000018

023fbd78 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fbd78:	b509      	push	{r0, r3, lr}
 23fbd7a:	4804      	ldr	r0, [pc, #16]	; (23fbd8c <hal_usart_write+0x14>)
 23fbd7c:	6800      	ldr	r0, [r0, #0]
 23fbd7e:	4b04      	ldr	r3, [pc, #16]	; (23fbd90 <hal_usart_write+0x18>)
 23fbd80:	4403      	add	r3, r0
 23fbd82:	681b      	ldr	r3, [r3, #0]
 23fbd84:	68db      	ldr	r3, [r3, #12]
 23fbd86:	9302      	str	r3, [sp, #8]
 23fbd88:	bd09      	pop	{r0, r3, pc}
 23fbd8a:	0000      	.short	0x0000
 23fbd8c:	1007821c 	.word	0x1007821c
 23fbd90:	00000024 	.word	0x00000024

023fbd94 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fbd94:	b509      	push	{r0, r3, lr}
 23fbd96:	4804      	ldr	r0, [pc, #16]	; (23fbda8 <hal_usart_available+0x14>)
 23fbd98:	6800      	ldr	r0, [r0, #0]
 23fbd9a:	4b04      	ldr	r3, [pc, #16]	; (23fbdac <hal_usart_available+0x18>)
 23fbd9c:	4403      	add	r3, r0
 23fbd9e:	681b      	ldr	r3, [r3, #0]
 23fbda0:	691b      	ldr	r3, [r3, #16]
 23fbda2:	9302      	str	r3, [sp, #8]
 23fbda4:	bd09      	pop	{r0, r3, pc}
 23fbda6:	0000      	.short	0x0000
 23fbda8:	1007821c 	.word	0x1007821c
 23fbdac:	00000024 	.word	0x00000024

023fbdb0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fbdb0:	b509      	push	{r0, r3, lr}
 23fbdb2:	4804      	ldr	r0, [pc, #16]	; (23fbdc4 <hal_usart_read+0x14>)
 23fbdb4:	6800      	ldr	r0, [r0, #0]
 23fbdb6:	4b04      	ldr	r3, [pc, #16]	; (23fbdc8 <hal_usart_read+0x18>)
 23fbdb8:	4403      	add	r3, r0
 23fbdba:	681b      	ldr	r3, [r3, #0]
 23fbdbc:	695b      	ldr	r3, [r3, #20]
 23fbdbe:	9302      	str	r3, [sp, #8]
 23fbdc0:	bd09      	pop	{r0, r3, pc}
 23fbdc2:	0000      	.short	0x0000
 23fbdc4:	1007821c 	.word	0x1007821c
 23fbdc8:	00000024 	.word	0x00000024

023fbdcc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fbdcc:	b509      	push	{r0, r3, lr}
 23fbdce:	4804      	ldr	r0, [pc, #16]	; (23fbde0 <hal_usart_peek+0x14>)
 23fbdd0:	6800      	ldr	r0, [r0, #0]
 23fbdd2:	4b04      	ldr	r3, [pc, #16]	; (23fbde4 <hal_usart_peek+0x18>)
 23fbdd4:	4403      	add	r3, r0
 23fbdd6:	681b      	ldr	r3, [r3, #0]
 23fbdd8:	699b      	ldr	r3, [r3, #24]
 23fbdda:	9302      	str	r3, [sp, #8]
 23fbddc:	bd09      	pop	{r0, r3, pc}
 23fbdde:	0000      	.short	0x0000
 23fbde0:	1007821c 	.word	0x1007821c
 23fbde4:	00000024 	.word	0x00000024

023fbde8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fbde8:	b509      	push	{r0, r3, lr}
 23fbdea:	4804      	ldr	r0, [pc, #16]	; (23fbdfc <hal_usart_flush+0x14>)
 23fbdec:	6800      	ldr	r0, [r0, #0]
 23fbdee:	4b04      	ldr	r3, [pc, #16]	; (23fbe00 <hal_usart_flush+0x18>)
 23fbdf0:	4403      	add	r3, r0
 23fbdf2:	681b      	ldr	r3, [r3, #0]
 23fbdf4:	69db      	ldr	r3, [r3, #28]
 23fbdf6:	9302      	str	r3, [sp, #8]
 23fbdf8:	bd09      	pop	{r0, r3, pc}
 23fbdfa:	0000      	.short	0x0000
 23fbdfc:	1007821c 	.word	0x1007821c
 23fbe00:	00000024 	.word	0x00000024

023fbe04 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fbe04:	b509      	push	{r0, r3, lr}
 23fbe06:	4804      	ldr	r0, [pc, #16]	; (23fbe18 <hal_usart_is_enabled+0x14>)
 23fbe08:	6800      	ldr	r0, [r0, #0]
 23fbe0a:	4b04      	ldr	r3, [pc, #16]	; (23fbe1c <hal_usart_is_enabled+0x18>)
 23fbe0c:	4403      	add	r3, r0
 23fbe0e:	681b      	ldr	r3, [r3, #0]
 23fbe10:	6a1b      	ldr	r3, [r3, #32]
 23fbe12:	9302      	str	r3, [sp, #8]
 23fbe14:	bd09      	pop	{r0, r3, pc}
 23fbe16:	0000      	.short	0x0000
 23fbe18:	1007821c 	.word	0x1007821c
 23fbe1c:	00000024 	.word	0x00000024

023fbe20 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fbe20:	b509      	push	{r0, r3, lr}
 23fbe22:	4804      	ldr	r0, [pc, #16]	; (23fbe34 <hal_usart_available_data_for_write+0x14>)
 23fbe24:	6800      	ldr	r0, [r0, #0]
 23fbe26:	4b04      	ldr	r3, [pc, #16]	; (23fbe38 <hal_usart_available_data_for_write+0x18>)
 23fbe28:	4403      	add	r3, r0
 23fbe2a:	681b      	ldr	r3, [r3, #0]
 23fbe2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fbe2e:	9302      	str	r3, [sp, #8]
 23fbe30:	bd09      	pop	{r0, r3, pc}
 23fbe32:	0000      	.short	0x0000
 23fbe34:	1007821c 	.word	0x1007821c
 23fbe38:	00000024 	.word	0x00000024

023fbe3c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fbe3c:	b509      	push	{r0, r3, lr}
 23fbe3e:	4804      	ldr	r0, [pc, #16]	; (23fbe50 <hal_usart_init_ex+0x14>)
 23fbe40:	6800      	ldr	r0, [r0, #0]
 23fbe42:	4b04      	ldr	r3, [pc, #16]	; (23fbe54 <hal_usart_init_ex+0x18>)
 23fbe44:	4403      	add	r3, r0
 23fbe46:	681b      	ldr	r3, [r3, #0]
 23fbe48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fbe4a:	9302      	str	r3, [sp, #8]
 23fbe4c:	bd09      	pop	{r0, r3, pc}
 23fbe4e:	0000      	.short	0x0000
 23fbe50:	1007821c 	.word	0x1007821c
 23fbe54:	00000024 	.word	0x00000024

023fbe58 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fbe58:	b509      	push	{r0, r3, lr}
 23fbe5a:	4804      	ldr	r0, [pc, #16]	; (23fbe6c <HAL_USB_USART_Init+0x14>)
 23fbe5c:	6800      	ldr	r0, [r0, #0]
 23fbe5e:	4b04      	ldr	r3, [pc, #16]	; (23fbe70 <HAL_USB_USART_Init+0x18>)
 23fbe60:	4403      	add	r3, r0
 23fbe62:	681b      	ldr	r3, [r3, #0]
 23fbe64:	681b      	ldr	r3, [r3, #0]
 23fbe66:	9302      	str	r3, [sp, #8]
 23fbe68:	bd09      	pop	{r0, r3, pc}
 23fbe6a:	0000      	.short	0x0000
 23fbe6c:	1007821c 	.word	0x1007821c
 23fbe70:	00000034 	.word	0x00000034

023fbe74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fbe74:	b509      	push	{r0, r3, lr}
 23fbe76:	4804      	ldr	r0, [pc, #16]	; (23fbe88 <HAL_USB_USART_Begin+0x14>)
 23fbe78:	6800      	ldr	r0, [r0, #0]
 23fbe7a:	4b04      	ldr	r3, [pc, #16]	; (23fbe8c <HAL_USB_USART_Begin+0x18>)
 23fbe7c:	4403      	add	r3, r0
 23fbe7e:	681b      	ldr	r3, [r3, #0]
 23fbe80:	685b      	ldr	r3, [r3, #4]
 23fbe82:	9302      	str	r3, [sp, #8]
 23fbe84:	bd09      	pop	{r0, r3, pc}
 23fbe86:	0000      	.short	0x0000
 23fbe88:	1007821c 	.word	0x1007821c
 23fbe8c:	00000034 	.word	0x00000034

023fbe90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fbe90:	b509      	push	{r0, r3, lr}
 23fbe92:	4804      	ldr	r0, [pc, #16]	; (23fbea4 <HAL_USB_USART_Available_Data+0x14>)
 23fbe94:	6800      	ldr	r0, [r0, #0]
 23fbe96:	4b04      	ldr	r3, [pc, #16]	; (23fbea8 <HAL_USB_USART_Available_Data+0x18>)
 23fbe98:	4403      	add	r3, r0
 23fbe9a:	681b      	ldr	r3, [r3, #0]
 23fbe9c:	691b      	ldr	r3, [r3, #16]
 23fbe9e:	9302      	str	r3, [sp, #8]
 23fbea0:	bd09      	pop	{r0, r3, pc}
 23fbea2:	0000      	.short	0x0000
 23fbea4:	1007821c 	.word	0x1007821c
 23fbea8:	00000034 	.word	0x00000034

023fbeac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fbeac:	b509      	push	{r0, r3, lr}
 23fbeae:	4804      	ldr	r0, [pc, #16]	; (23fbec0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fbeb0:	6800      	ldr	r0, [r0, #0]
 23fbeb2:	4b04      	ldr	r3, [pc, #16]	; (23fbec4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fbeb4:	4403      	add	r3, r0
 23fbeb6:	681b      	ldr	r3, [r3, #0]
 23fbeb8:	695b      	ldr	r3, [r3, #20]
 23fbeba:	9302      	str	r3, [sp, #8]
 23fbebc:	bd09      	pop	{r0, r3, pc}
 23fbebe:	0000      	.short	0x0000
 23fbec0:	1007821c 	.word	0x1007821c
 23fbec4:	00000034 	.word	0x00000034

023fbec8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbec8:	b509      	push	{r0, r3, lr}
 23fbeca:	4804      	ldr	r0, [pc, #16]	; (23fbedc <HAL_USB_USART_Receive_Data+0x14>)
 23fbecc:	6800      	ldr	r0, [r0, #0]
 23fbece:	4b04      	ldr	r3, [pc, #16]	; (23fbee0 <HAL_USB_USART_Receive_Data+0x18>)
 23fbed0:	4403      	add	r3, r0
 23fbed2:	681b      	ldr	r3, [r3, #0]
 23fbed4:	699b      	ldr	r3, [r3, #24]
 23fbed6:	9302      	str	r3, [sp, #8]
 23fbed8:	bd09      	pop	{r0, r3, pc}
 23fbeda:	0000      	.short	0x0000
 23fbedc:	1007821c 	.word	0x1007821c
 23fbee0:	00000034 	.word	0x00000034

023fbee4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fbee4:	b509      	push	{r0, r3, lr}
 23fbee6:	4804      	ldr	r0, [pc, #16]	; (23fbef8 <HAL_USB_USART_Send_Data+0x14>)
 23fbee8:	6800      	ldr	r0, [r0, #0]
 23fbeea:	4b04      	ldr	r3, [pc, #16]	; (23fbefc <HAL_USB_USART_Send_Data+0x18>)
 23fbeec:	4403      	add	r3, r0
 23fbeee:	681b      	ldr	r3, [r3, #0]
 23fbef0:	69db      	ldr	r3, [r3, #28]
 23fbef2:	9302      	str	r3, [sp, #8]
 23fbef4:	bd09      	pop	{r0, r3, pc}
 23fbef6:	0000      	.short	0x0000
 23fbef8:	1007821c 	.word	0x1007821c
 23fbefc:	00000034 	.word	0x00000034

023fbf00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fbf00:	b509      	push	{r0, r3, lr}
 23fbf02:	4804      	ldr	r0, [pc, #16]	; (23fbf14 <HAL_USB_USART_Flush_Data+0x14>)
 23fbf04:	6800      	ldr	r0, [r0, #0]
 23fbf06:	4b04      	ldr	r3, [pc, #16]	; (23fbf18 <HAL_USB_USART_Flush_Data+0x18>)
 23fbf08:	4403      	add	r3, r0
 23fbf0a:	681b      	ldr	r3, [r3, #0]
 23fbf0c:	6a1b      	ldr	r3, [r3, #32]
 23fbf0e:	9302      	str	r3, [sp, #8]
 23fbf10:	bd09      	pop	{r0, r3, pc}
 23fbf12:	0000      	.short	0x0000
 23fbf14:	1007821c 	.word	0x1007821c
 23fbf18:	00000034 	.word	0x00000034

023fbf1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fbf1c:	b509      	push	{r0, r3, lr}
 23fbf1e:	4804      	ldr	r0, [pc, #16]	; (23fbf30 <set_system_mode+0x14>)
 23fbf20:	6800      	ldr	r0, [r0, #0]
 23fbf22:	4b04      	ldr	r3, [pc, #16]	; (23fbf34 <set_system_mode+0x18>)
 23fbf24:	4403      	add	r3, r0
 23fbf26:	681b      	ldr	r3, [r3, #0]
 23fbf28:	685b      	ldr	r3, [r3, #4]
 23fbf2a:	9302      	str	r3, [sp, #8]
 23fbf2c:	bd09      	pop	{r0, r3, pc}
 23fbf2e:	0000      	.short	0x0000
 23fbf30:	1007821c 	.word	0x1007821c
 23fbf34:	00000008 	.word	0x00000008

023fbf38 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fbf38:	b509      	push	{r0, r3, lr}
 23fbf3a:	4804      	ldr	r0, [pc, #16]	; (23fbf4c <system_delay_ms+0x14>)
 23fbf3c:	6800      	ldr	r0, [r0, #0]
 23fbf3e:	4b04      	ldr	r3, [pc, #16]	; (23fbf50 <system_delay_ms+0x18>)
 23fbf40:	4403      	add	r3, r0
 23fbf42:	681b      	ldr	r3, [r3, #0]
 23fbf44:	695b      	ldr	r3, [r3, #20]
 23fbf46:	9302      	str	r3, [sp, #8]
 23fbf48:	bd09      	pop	{r0, r3, pc}
 23fbf4a:	0000      	.short	0x0000
 23fbf4c:	1007821c 	.word	0x1007821c
 23fbf50:	00000008 	.word	0x00000008

023fbf54 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fbf54:	b509      	push	{r0, r3, lr}
 23fbf56:	4804      	ldr	r0, [pc, #16]	; (23fbf68 <system_thread_set_state+0x14>)
 23fbf58:	6800      	ldr	r0, [r0, #0]
 23fbf5a:	4b04      	ldr	r3, [pc, #16]	; (23fbf6c <system_thread_set_state+0x18>)
 23fbf5c:	4403      	add	r3, r0
 23fbf5e:	681b      	ldr	r3, [r3, #0]
 23fbf60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbf62:	9302      	str	r3, [sp, #8]
 23fbf64:	bd09      	pop	{r0, r3, pc}
 23fbf66:	0000      	.short	0x0000
 23fbf68:	1007821c 	.word	0x1007821c
 23fbf6c:	00000008 	.word	0x00000008

023fbf70 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fbf70:	b509      	push	{r0, r3, lr}
 23fbf72:	4804      	ldr	r0, [pc, #16]	; (23fbf84 <system_ctrl_set_app_request_handler+0x14>)
 23fbf74:	6800      	ldr	r0, [r0, #0]
 23fbf76:	4b04      	ldr	r3, [pc, #16]	; (23fbf88 <system_ctrl_set_app_request_handler+0x18>)
 23fbf78:	4403      	add	r3, r0
 23fbf7a:	681b      	ldr	r3, [r3, #0]
 23fbf7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fbf80:	9302      	str	r3, [sp, #8]
 23fbf82:	bd09      	pop	{r0, r3, pc}
 23fbf84:	1007821c 	.word	0x1007821c
 23fbf88:	00000008 	.word	0x00000008

023fbf8c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fbf8c:	b509      	push	{r0, r3, lr}
 23fbf8e:	4804      	ldr	r0, [pc, #16]	; (23fbfa0 <system_ctrl_set_result+0x14>)
 23fbf90:	6800      	ldr	r0, [r0, #0]
 23fbf92:	4b04      	ldr	r3, [pc, #16]	; (23fbfa4 <system_ctrl_set_result+0x18>)
 23fbf94:	4403      	add	r3, r0
 23fbf96:	681b      	ldr	r3, [r3, #0]
 23fbf98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fbf9c:	9302      	str	r3, [sp, #8]
 23fbf9e:	bd09      	pop	{r0, r3, pc}
 23fbfa0:	1007821c 	.word	0x1007821c
 23fbfa4:	00000008 	.word	0x00000008

023fbfa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fbfa8:	b509      	push	{r0, r3, lr}
 23fbfaa:	4804      	ldr	r0, [pc, #16]	; (23fbfbc <spark_set_random_seed_from_cloud_handler+0x14>)
 23fbfac:	6800      	ldr	r0, [r0, #0]
 23fbfae:	4b04      	ldr	r3, [pc, #16]	; (23fbfc0 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fbfb0:	4403      	add	r3, r0
 23fbfb2:	681b      	ldr	r3, [r3, #0]
 23fbfb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fbfb6:	9302      	str	r3, [sp, #8]
 23fbfb8:	bd09      	pop	{r0, r3, pc}
 23fbfba:	0000      	.short	0x0000
 23fbfbc:	1007821c 	.word	0x1007821c
 23fbfc0:	0000002c 	.word	0x0000002c

023fbfc4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fbfc4:	b509      	push	{r0, r3, lr}
 23fbfc6:	4804      	ldr	r0, [pc, #16]	; (23fbfd8 <network_connect+0x14>)
 23fbfc8:	6800      	ldr	r0, [r0, #0]
 23fbfca:	4b04      	ldr	r3, [pc, #16]	; (23fbfdc <network_connect+0x18>)
 23fbfcc:	4403      	add	r3, r0
 23fbfce:	681b      	ldr	r3, [r3, #0]
 23fbfd0:	685b      	ldr	r3, [r3, #4]
 23fbfd2:	9302      	str	r3, [sp, #8]
 23fbfd4:	bd09      	pop	{r0, r3, pc}
 23fbfd6:	0000      	.short	0x0000
 23fbfd8:	1007821c 	.word	0x1007821c
 23fbfdc:	00000028 	.word	0x00000028

023fbfe0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fbfe0:	b509      	push	{r0, r3, lr}
 23fbfe2:	4804      	ldr	r0, [pc, #16]	; (23fbff4 <network_connecting+0x14>)
 23fbfe4:	6800      	ldr	r0, [r0, #0]
 23fbfe6:	4b04      	ldr	r3, [pc, #16]	; (23fbff8 <network_connecting+0x18>)
 23fbfe8:	4403      	add	r3, r0
 23fbfea:	681b      	ldr	r3, [r3, #0]
 23fbfec:	689b      	ldr	r3, [r3, #8]
 23fbfee:	9302      	str	r3, [sp, #8]
 23fbff0:	bd09      	pop	{r0, r3, pc}
 23fbff2:	0000      	.short	0x0000
 23fbff4:	1007821c 	.word	0x1007821c
 23fbff8:	00000028 	.word	0x00000028

023fbffc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fbffc:	b509      	push	{r0, r3, lr}
 23fbffe:	4804      	ldr	r0, [pc, #16]	; (23fc010 <network_disconnect+0x14>)
 23fc000:	6800      	ldr	r0, [r0, #0]
 23fc002:	4b04      	ldr	r3, [pc, #16]	; (23fc014 <network_disconnect+0x18>)
 23fc004:	4403      	add	r3, r0
 23fc006:	681b      	ldr	r3, [r3, #0]
 23fc008:	68db      	ldr	r3, [r3, #12]
 23fc00a:	9302      	str	r3, [sp, #8]
 23fc00c:	bd09      	pop	{r0, r3, pc}
 23fc00e:	0000      	.short	0x0000
 23fc010:	1007821c 	.word	0x1007821c
 23fc014:	00000028 	.word	0x00000028

023fc018 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fc018:	b509      	push	{r0, r3, lr}
 23fc01a:	4804      	ldr	r0, [pc, #16]	; (23fc02c <network_ready+0x14>)
 23fc01c:	6800      	ldr	r0, [r0, #0]
 23fc01e:	4b04      	ldr	r3, [pc, #16]	; (23fc030 <network_ready+0x18>)
 23fc020:	4403      	add	r3, r0
 23fc022:	681b      	ldr	r3, [r3, #0]
 23fc024:	691b      	ldr	r3, [r3, #16]
 23fc026:	9302      	str	r3, [sp, #8]
 23fc028:	bd09      	pop	{r0, r3, pc}
 23fc02a:	0000      	.short	0x0000
 23fc02c:	1007821c 	.word	0x1007821c
 23fc030:	00000028 	.word	0x00000028

023fc034 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc034:	b509      	push	{r0, r3, lr}
 23fc036:	4804      	ldr	r0, [pc, #16]	; (23fc048 <network_on+0x14>)
 23fc038:	6800      	ldr	r0, [r0, #0]
 23fc03a:	4b04      	ldr	r3, [pc, #16]	; (23fc04c <network_on+0x18>)
 23fc03c:	4403      	add	r3, r0
 23fc03e:	681b      	ldr	r3, [r3, #0]
 23fc040:	695b      	ldr	r3, [r3, #20]
 23fc042:	9302      	str	r3, [sp, #8]
 23fc044:	bd09      	pop	{r0, r3, pc}
 23fc046:	0000      	.short	0x0000
 23fc048:	1007821c 	.word	0x1007821c
 23fc04c:	00000028 	.word	0x00000028

023fc050 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fc050:	b509      	push	{r0, r3, lr}
 23fc052:	4804      	ldr	r0, [pc, #16]	; (23fc064 <network_off+0x14>)
 23fc054:	6800      	ldr	r0, [r0, #0]
 23fc056:	4b04      	ldr	r3, [pc, #16]	; (23fc068 <network_off+0x18>)
 23fc058:	4403      	add	r3, r0
 23fc05a:	681b      	ldr	r3, [r3, #0]
 23fc05c:	699b      	ldr	r3, [r3, #24]
 23fc05e:	9302      	str	r3, [sp, #8]
 23fc060:	bd09      	pop	{r0, r3, pc}
 23fc062:	0000      	.short	0x0000
 23fc064:	1007821c 	.word	0x1007821c
 23fc068:	00000028 	.word	0x00000028

023fc06c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fc06c:	b509      	push	{r0, r3, lr}
 23fc06e:	4804      	ldr	r0, [pc, #16]	; (23fc080 <network_listen+0x14>)
 23fc070:	6800      	ldr	r0, [r0, #0]
 23fc072:	4b04      	ldr	r3, [pc, #16]	; (23fc084 <network_listen+0x18>)
 23fc074:	4403      	add	r3, r0
 23fc076:	681b      	ldr	r3, [r3, #0]
 23fc078:	69db      	ldr	r3, [r3, #28]
 23fc07a:	9302      	str	r3, [sp, #8]
 23fc07c:	bd09      	pop	{r0, r3, pc}
 23fc07e:	0000      	.short	0x0000
 23fc080:	1007821c 	.word	0x1007821c
 23fc084:	00000028 	.word	0x00000028

023fc088 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fc088:	b509      	push	{r0, r3, lr}
 23fc08a:	4804      	ldr	r0, [pc, #16]	; (23fc09c <network_listening+0x14>)
 23fc08c:	6800      	ldr	r0, [r0, #0]
 23fc08e:	4b04      	ldr	r3, [pc, #16]	; (23fc0a0 <network_listening+0x18>)
 23fc090:	4403      	add	r3, r0
 23fc092:	681b      	ldr	r3, [r3, #0]
 23fc094:	6a1b      	ldr	r3, [r3, #32]
 23fc096:	9302      	str	r3, [sp, #8]
 23fc098:	bd09      	pop	{r0, r3, pc}
 23fc09a:	0000      	.short	0x0000
 23fc09c:	1007821c 	.word	0x1007821c
 23fc0a0:	00000028 	.word	0x00000028

023fc0a4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fc0a4:	b509      	push	{r0, r3, lr}
 23fc0a6:	4804      	ldr	r0, [pc, #16]	; (23fc0b8 <network_set_listen_timeout+0x14>)
 23fc0a8:	6800      	ldr	r0, [r0, #0]
 23fc0aa:	4b04      	ldr	r3, [pc, #16]	; (23fc0bc <network_set_listen_timeout+0x18>)
 23fc0ac:	4403      	add	r3, r0
 23fc0ae:	681b      	ldr	r3, [r3, #0]
 23fc0b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fc0b2:	9302      	str	r3, [sp, #8]
 23fc0b4:	bd09      	pop	{r0, r3, pc}
 23fc0b6:	0000      	.short	0x0000
 23fc0b8:	1007821c 	.word	0x1007821c
 23fc0bc:	00000028 	.word	0x00000028

023fc0c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fc0c0:	b509      	push	{r0, r3, lr}
 23fc0c2:	4804      	ldr	r0, [pc, #16]	; (23fc0d4 <network_get_listen_timeout+0x14>)
 23fc0c4:	6800      	ldr	r0, [r0, #0]
 23fc0c6:	4b04      	ldr	r3, [pc, #16]	; (23fc0d8 <network_get_listen_timeout+0x18>)
 23fc0c8:	4403      	add	r3, r0
 23fc0ca:	681b      	ldr	r3, [r3, #0]
 23fc0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc0ce:	9302      	str	r3, [sp, #8]
 23fc0d0:	bd09      	pop	{r0, r3, pc}
 23fc0d2:	0000      	.short	0x0000
 23fc0d4:	1007821c 	.word	0x1007821c
 23fc0d8:	00000028 	.word	0x00000028

023fc0dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fc0dc:	b509      	push	{r0, r3, lr}
 23fc0de:	4804      	ldr	r0, [pc, #16]	; (23fc0f0 <network_is_on+0x14>)
 23fc0e0:	6800      	ldr	r0, [r0, #0]
 23fc0e2:	4b04      	ldr	r3, [pc, #16]	; (23fc0f4 <network_is_on+0x18>)
 23fc0e4:	4403      	add	r3, r0
 23fc0e6:	681b      	ldr	r3, [r3, #0]
 23fc0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc0ea:	9302      	str	r3, [sp, #8]
 23fc0ec:	bd09      	pop	{r0, r3, pc}
 23fc0ee:	0000      	.short	0x0000
 23fc0f0:	1007821c 	.word	0x1007821c
 23fc0f4:	00000028 	.word	0x00000028

023fc0f8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fc0f8:	b509      	push	{r0, r3, lr}
 23fc0fa:	4804      	ldr	r0, [pc, #16]	; (23fc10c <network_is_off+0x14>)
 23fc0fc:	6800      	ldr	r0, [r0, #0]
 23fc0fe:	4b04      	ldr	r3, [pc, #16]	; (23fc110 <network_is_off+0x18>)
 23fc100:	4403      	add	r3, r0
 23fc102:	681b      	ldr	r3, [r3, #0]
 23fc104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc106:	9302      	str	r3, [sp, #8]
 23fc108:	bd09      	pop	{r0, r3, pc}
 23fc10a:	0000      	.short	0x0000
 23fc10c:	1007821c 	.word	0x1007821c
 23fc110:	00000028 	.word	0x00000028

023fc114 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fc114:	b509      	push	{r0, r3, lr}
 23fc116:	4804      	ldr	r0, [pc, #16]	; (23fc128 <malloc+0x14>)
 23fc118:	6800      	ldr	r0, [r0, #0]
 23fc11a:	4b04      	ldr	r3, [pc, #16]	; (23fc12c <malloc+0x18>)
 23fc11c:	4403      	add	r3, r0
 23fc11e:	681b      	ldr	r3, [r3, #0]
 23fc120:	681b      	ldr	r3, [r3, #0]
 23fc122:	9302      	str	r3, [sp, #8]
 23fc124:	bd09      	pop	{r0, r3, pc}
 23fc126:	0000      	.short	0x0000
 23fc128:	1007821c 	.word	0x1007821c
 23fc12c:	00000004 	.word	0x00000004

023fc130 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fc130:	b509      	push	{r0, r3, lr}
 23fc132:	4804      	ldr	r0, [pc, #16]	; (23fc144 <free+0x14>)
 23fc134:	6800      	ldr	r0, [r0, #0]
 23fc136:	4b04      	ldr	r3, [pc, #16]	; (23fc148 <free+0x18>)
 23fc138:	4403      	add	r3, r0
 23fc13a:	681b      	ldr	r3, [r3, #0]
 23fc13c:	685b      	ldr	r3, [r3, #4]
 23fc13e:	9302      	str	r3, [sp, #8]
 23fc140:	bd09      	pop	{r0, r3, pc}
 23fc142:	0000      	.short	0x0000
 23fc144:	1007821c 	.word	0x1007821c
 23fc148:	00000004 	.word	0x00000004

023fc14c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fc14c:	b509      	push	{r0, r3, lr}
 23fc14e:	4804      	ldr	r0, [pc, #16]	; (23fc160 <realloc+0x14>)
 23fc150:	6800      	ldr	r0, [r0, #0]
 23fc152:	4b04      	ldr	r3, [pc, #16]	; (23fc164 <realloc+0x18>)
 23fc154:	4403      	add	r3, r0
 23fc156:	681b      	ldr	r3, [r3, #0]
 23fc158:	689b      	ldr	r3, [r3, #8]
 23fc15a:	9302      	str	r3, [sp, #8]
 23fc15c:	bd09      	pop	{r0, r3, pc}
 23fc15e:	0000      	.short	0x0000
 23fc160:	1007821c 	.word	0x1007821c
 23fc164:	00000004 	.word	0x00000004

023fc168 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fc168:	b509      	push	{r0, r3, lr}
 23fc16a:	4804      	ldr	r0, [pc, #16]	; (23fc17c <vsnprintf+0x14>)
 23fc16c:	6800      	ldr	r0, [r0, #0]
 23fc16e:	4b04      	ldr	r3, [pc, #16]	; (23fc180 <vsnprintf+0x18>)
 23fc170:	4403      	add	r3, r0
 23fc172:	681b      	ldr	r3, [r3, #0]
 23fc174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fc176:	9302      	str	r3, [sp, #8]
 23fc178:	bd09      	pop	{r0, r3, pc}
 23fc17a:	0000      	.short	0x0000
 23fc17c:	1007821c 	.word	0x1007821c
 23fc180:	00000004 	.word	0x00000004

023fc184 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fc184:	b509      	push	{r0, r3, lr}
 23fc186:	4804      	ldr	r0, [pc, #16]	; (23fc198 <__assert_func+0x14>)
 23fc188:	6800      	ldr	r0, [r0, #0]
 23fc18a:	4b04      	ldr	r3, [pc, #16]	; (23fc19c <__assert_func+0x18>)
 23fc18c:	4403      	add	r3, r0
 23fc18e:	681b      	ldr	r3, [r3, #0]
 23fc190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fc192:	9302      	str	r3, [sp, #8]
 23fc194:	bd09      	pop	{r0, r3, pc}
 23fc196:	0000      	.short	0x0000
 23fc198:	1007821c 	.word	0x1007821c
 23fc19c:	00000004 	.word	0x00000004

023fc1a0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fc1a0:	b509      	push	{r0, r3, lr}
 23fc1a2:	4804      	ldr	r0, [pc, #16]	; (23fc1b4 <newlib_impure_ptr_callback+0x14>)
 23fc1a4:	6800      	ldr	r0, [r0, #0]
 23fc1a6:	4b04      	ldr	r3, [pc, #16]	; (23fc1b8 <newlib_impure_ptr_callback+0x18>)
 23fc1a8:	4403      	add	r3, r0
 23fc1aa:	681b      	ldr	r3, [r3, #0]
 23fc1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fc1ae:	9302      	str	r3, [sp, #8]
 23fc1b0:	bd09      	pop	{r0, r3, pc}
 23fc1b2:	0000      	.short	0x0000
 23fc1b4:	1007821c 	.word	0x1007821c
 23fc1b8:	00000004 	.word	0x00000004

023fc1bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fc1bc:	2100      	movs	r1, #0
 23fc1be:	f7ff bebb 	b.w	23fbf38 <system_delay_ms>
	...

023fc1c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fc1c4:	2300      	movs	r3, #0
 23fc1c6:	4802      	ldr	r0, [pc, #8]	; (23fc1d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fc1c8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fc1ca:	f7ff bc3f 	b.w	23fba4c <os_mutex_recursive_create>
 23fc1ce:	bf00      	nop
 23fc1d0:	1007ae8c 	.word	0x1007ae8c

023fc1d4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc1d4:	2200      	movs	r2, #0
 23fc1d6:	6840      	ldr	r0, [r0, #4]
 23fc1d8:	4611      	mov	r1, r2
 23fc1da:	f7ff bf55 	b.w	23fc088 <network_listening>

023fc1de <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc1de:	2200      	movs	r2, #0
 23fc1e0:	6840      	ldr	r0, [r0, #4]
 23fc1e2:	4611      	mov	r1, r2
 23fc1e4:	f7ff bf6c 	b.w	23fc0c0 <network_get_listen_timeout>

023fc1e8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc1e8:	2200      	movs	r2, #0
 23fc1ea:	6840      	ldr	r0, [r0, #4]
 23fc1ec:	f7ff bf5a 	b.w	23fc0a4 <network_set_listen_timeout>

023fc1f0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc1f0:	2200      	movs	r2, #0
 23fc1f2:	6840      	ldr	r0, [r0, #4]
 23fc1f4:	f081 0101 	eor.w	r1, r1, #1
 23fc1f8:	f7ff bf38 	b.w	23fc06c <network_listen>

023fc1fc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc1fc:	2300      	movs	r3, #0
 23fc1fe:	6840      	ldr	r0, [r0, #4]
 23fc200:	461a      	mov	r2, r3
 23fc202:	4619      	mov	r1, r3
 23fc204:	f7ff bf24 	b.w	23fc050 <network_off>

023fc208 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc208:	2300      	movs	r3, #0
 23fc20a:	6840      	ldr	r0, [r0, #4]
 23fc20c:	461a      	mov	r2, r3
 23fc20e:	4619      	mov	r1, r3
 23fc210:	f7ff bf10 	b.w	23fc034 <network_on>

023fc214 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc214:	2200      	movs	r2, #0
 23fc216:	6840      	ldr	r0, [r0, #4]
 23fc218:	4611      	mov	r1, r2
 23fc21a:	f7ff befd 	b.w	23fc018 <network_ready>

023fc21e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc21e:	2200      	movs	r2, #0
 23fc220:	6840      	ldr	r0, [r0, #4]
 23fc222:	4611      	mov	r1, r2
 23fc224:	f7ff bedc 	b.w	23fbfe0 <network_connecting>

023fc228 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc228:	2200      	movs	r2, #0
 23fc22a:	2102      	movs	r1, #2
 23fc22c:	6840      	ldr	r0, [r0, #4]
 23fc22e:	f7ff bee5 	b.w	23fbffc <network_disconnect>

023fc232 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc232:	2300      	movs	r3, #0
 23fc234:	6840      	ldr	r0, [r0, #4]
 23fc236:	461a      	mov	r2, r3
 23fc238:	f7ff bec4 	b.w	23fbfc4 <network_connect>

023fc23c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fc23c:	2203      	movs	r2, #3
 23fc23e:	4b02      	ldr	r3, [pc, #8]	; (23fc248 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc240:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc242:	4a02      	ldr	r2, [pc, #8]	; (23fc24c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc244:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc246:	4770      	bx	lr
 23fc248:	1007ae90 	.word	0x1007ae90
 23fc24c:	023ffde8 	.word	0x023ffde8

023fc250 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fc250:	4770      	bx	lr

023fc252 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fc252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc254:	4606      	mov	r6, r0
 23fc256:	4615      	mov	r5, r2
 23fc258:	460c      	mov	r4, r1
 23fc25a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fc25c:	42bc      	cmp	r4, r7
 23fc25e:	d006      	beq.n	23fc26e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fc260:	6833      	ldr	r3, [r6, #0]
 23fc262:	4630      	mov	r0, r6
 23fc264:	689b      	ldr	r3, [r3, #8]
 23fc266:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fc26a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fc26c:	e7f6      	b.n	23fc25c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fc26e:	4628      	mov	r0, r5
 23fc270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc272 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fc272:	2200      	movs	r2, #0
 23fc274:	7c00      	ldrb	r0, [r0, #16]
 23fc276:	f7ff bc75 	b.w	23fbb64 <hal_i2c_write>

023fc27a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fc27a:	2100      	movs	r1, #0
 23fc27c:	7c00      	ldrb	r0, [r0, #16]
 23fc27e:	f7ff bc7f 	b.w	23fbb80 <hal_i2c_available>

023fc282 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fc282:	2100      	movs	r1, #0
 23fc284:	7c00      	ldrb	r0, [r0, #16]
 23fc286:	f7ff bc89 	b.w	23fbb9c <hal_i2c_read>

023fc28a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fc28a:	2100      	movs	r1, #0
 23fc28c:	7c00      	ldrb	r0, [r0, #16]
 23fc28e:	f7ff bc93 	b.w	23fbbb8 <hal_i2c_peek>

023fc292 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fc292:	2100      	movs	r1, #0
 23fc294:	7c00      	ldrb	r0, [r0, #16]
 23fc296:	f7ff bc9d 	b.w	23fbbd4 <hal_i2c_flush>

023fc29a <_ZN7TwoWireD0Ev>:
 23fc29a:	b510      	push	{r4, lr}
 23fc29c:	4604      	mov	r4, r0
 23fc29e:	2114      	movs	r1, #20
 23fc2a0:	f7fe fcc9 	bl	23fac36 <_ZdlPvj>
 23fc2a4:	4620      	mov	r0, r4
 23fc2a6:	bd10      	pop	{r4, pc}

023fc2a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc2a8:	b538      	push	{r3, r4, r5, lr}
 23fc2aa:	4604      	mov	r4, r0
 23fc2ac:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fc2ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc2b2:	2200      	movs	r2, #0
 23fc2b4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc2b8:	4b09      	ldr	r3, [pc, #36]	; (23fc2e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fc2ba:	4608      	mov	r0, r1
  _i2c = i2c;
 23fc2bc:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fc2be:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fc2c0:	4629      	mov	r1, r5
 23fc2c2:	f7ff fca3 	bl	23fbc0c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc2c6:	30bf      	adds	r0, #191	; 0xbf
 23fc2c8:	d108      	bne.n	23fc2dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fc2ca:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fc2cc:	07db      	lsls	r3, r3, #31
 23fc2ce:	d505      	bpl.n	23fc2dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fc2d0:	6868      	ldr	r0, [r5, #4]
 23fc2d2:	f7ff ff2d 	bl	23fc130 <free>
    free(conf.tx_buffer);
 23fc2d6:	68e8      	ldr	r0, [r5, #12]
 23fc2d8:	f7ff ff2a 	bl	23fc130 <free>
}
 23fc2dc:	4620      	mov	r0, r4
 23fc2de:	bd38      	pop	{r3, r4, r5, pc}
 23fc2e0:	023ffe24 	.word	0x023ffe24

023fc2e4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fc2e4:	2300      	movs	r3, #0
 23fc2e6:	7c00      	ldrb	r0, [r0, #16]
 23fc2e8:	461a      	mov	r2, r3
 23fc2ea:	4619      	mov	r1, r3
 23fc2ec:	f7ff bc10 	b.w	23fbb10 <hal_i2c_begin>

023fc2f0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fc2f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fc2f2:	2200      	movs	r2, #0
 23fc2f4:	2314      	movs	r3, #20
 23fc2f6:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fc2fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fc2fe:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fc300:	7c00      	ldrb	r0, [r0, #16]
 23fc302:	f88d 3008 	strb.w	r3, [sp, #8]
 23fc306:	684b      	ldr	r3, [r1, #4]
 23fc308:	9303      	str	r3, [sp, #12]
 23fc30a:	68cb      	ldr	r3, [r1, #12]
 23fc30c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fc30e:	7a0b      	ldrb	r3, [r1, #8]
 23fc310:	a901      	add	r1, sp, #4
 23fc312:	9305      	str	r3, [sp, #20]
 23fc314:	f7ff fc88 	bl	23fbc28 <hal_i2c_request_ex>
}
 23fc318:	b007      	add	sp, #28
 23fc31a:	f85d fb04 	ldr.w	pc, [sp], #4

023fc31e <_ZN7TwoWire11requestFromEhjh>:
{
 23fc31e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fc320:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fc322:	f88d 1000 	strb.w	r1, [sp]
 23fc326:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fc32a:	bf18      	it	ne
 23fc32c:	2301      	movne	r3, #1
 23fc32e:	9103      	str	r1, [sp, #12]
 23fc330:	4669      	mov	r1, sp
    size_ = size;
 23fc332:	9201      	str	r2, [sp, #4]
 23fc334:	f88d 3008 	strb.w	r3, [sp, #8]
 23fc338:	f7ff ffda 	bl	23fc2f0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fc33c:	b005      	add	sp, #20
 23fc33e:	f85d fb04 	ldr.w	pc, [sp], #4

023fc342 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fc342:	2301      	movs	r3, #1
 23fc344:	f7ff bfeb 	b.w	23fc31e <_ZN7TwoWire11requestFromEhjh>

023fc348 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fc348:	2200      	movs	r2, #0
 23fc34a:	7c00      	ldrb	r0, [r0, #16]
 23fc34c:	f7ff bbee 	b.w	23fbb2c <hal_i2c_begin_transmission>

023fc350 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 23fc350:	b2c9      	uxtb	r1, r1
 23fc352:	f7ff bff9 	b.w	23fc348 <_ZN7TwoWire17beginTransmissionEh>

023fc356 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fc356:	2200      	movs	r2, #0
 23fc358:	7c00      	ldrb	r0, [r0, #16]
 23fc35a:	f7ff bbf5 	b.w	23fbb48 <hal_i2c_end_transmission>

023fc35e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fc35e:	2101      	movs	r1, #1
 23fc360:	f7ff bff9 	b.w	23fc356 <_ZN7TwoWire15endTransmissionEh>

023fc364 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fc364:	4770      	bx	lr

023fc366 <_ZN9IPAddressD0Ev>:
 23fc366:	b510      	push	{r4, lr}
 23fc368:	4604      	mov	r4, r0
 23fc36a:	2118      	movs	r1, #24
 23fc36c:	f7fe fc63 	bl	23fac36 <_ZdlPvj>
 23fc370:	4620      	mov	r0, r4
 23fc372:	bd10      	pop	{r4, pc}

023fc374 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc374:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc376:	7d03      	ldrb	r3, [r0, #20]
{
 23fc378:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc37a:	2b06      	cmp	r3, #6
 23fc37c:	f04f 0400 	mov.w	r4, #0
{
 23fc380:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc382:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc386:	d012      	beq.n	23fc3ae <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc388:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc38c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc390:	220a      	movs	r2, #10
 23fc392:	4630      	mov	r0, r6
 23fc394:	f000 f953 	bl	23fc63e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc398:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc39a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc39c:	d019      	beq.n	23fc3d2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc39e:	2c00      	cmp	r4, #0
 23fc3a0:	d0f4      	beq.n	23fc38c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc3a2:	212e      	movs	r1, #46	; 0x2e
 23fc3a4:	4630      	mov	r0, r6
 23fc3a6:	f000 f93b 	bl	23fc620 <_ZN5Print5printEc>
 23fc3aa:	4404      	add	r4, r0
 23fc3ac:	e7ee      	b.n	23fc38c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc3ae:	232f      	movs	r3, #47	; 0x2f
 23fc3b0:	466a      	mov	r2, sp
 23fc3b2:	4639      	mov	r1, r7
 23fc3b4:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc3b6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc3ba:	f7ff fc43 	bl	23fbc44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc3be:	4668      	mov	r0, sp
 23fc3c0:	f7fe fc12 	bl	23fabe8 <strlen>
 23fc3c4:	6833      	ldr	r3, [r6, #0]
 23fc3c6:	4602      	mov	r2, r0
 23fc3c8:	4669      	mov	r1, sp
 23fc3ca:	4630      	mov	r0, r6
 23fc3cc:	68db      	ldr	r3, [r3, #12]
 23fc3ce:	4798      	blx	r3
 23fc3d0:	4604      	mov	r4, r0
    }
    return n;
}
 23fc3d2:	4620      	mov	r0, r4
 23fc3d4:	b00d      	add	sp, #52	; 0x34
 23fc3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc3d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc3d8:	b510      	push	{r4, lr}
 23fc3da:	4604      	mov	r4, r0
 23fc3dc:	4b04      	ldr	r3, [pc, #16]	; (23fc3f0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc3de:	2211      	movs	r2, #17
 23fc3e0:	2100      	movs	r1, #0
 23fc3e2:	f840 3b04 	str.w	r3, [r0], #4
 23fc3e6:	f000 fe5a 	bl	23fd09e <memset>
}
 23fc3ea:	4620      	mov	r0, r4
 23fc3ec:	bd10      	pop	{r4, pc}
 23fc3ee:	bf00      	nop
 23fc3f0:	023ffe4c 	.word	0x023ffe4c

023fc3f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc3f4:	4603      	mov	r3, r0
 23fc3f6:	4a07      	ldr	r2, [pc, #28]	; (23fc414 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc3f8:	b510      	push	{r4, lr}
 23fc3fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc3fe:	f101 0210 	add.w	r2, r1, #16
 23fc402:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc406:	4291      	cmp	r1, r2
 23fc408:	f843 4b04 	str.w	r4, [r3], #4
 23fc40c:	d1f9      	bne.n	23fc402 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc40e:	780a      	ldrb	r2, [r1, #0]
 23fc410:	701a      	strb	r2, [r3, #0]
}
 23fc412:	bd10      	pop	{r4, pc}
 23fc414:	023ffe4c 	.word	0x023ffe4c

023fc418 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc418:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc41a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc41e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc422:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc426:	2304      	movs	r3, #4
 23fc428:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc42c:	6041      	str	r1, [r0, #4]
 23fc42e:	7503      	strb	r3, [r0, #20]
}
 23fc430:	bd10      	pop	{r4, pc}
	...

023fc434 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc434:	b507      	push	{r0, r1, r2, lr}
 23fc436:	4b06      	ldr	r3, [pc, #24]	; (23fc450 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc438:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc43a:	78cb      	ldrb	r3, [r1, #3]
 23fc43c:	9300      	str	r3, [sp, #0]
 23fc43e:	788b      	ldrb	r3, [r1, #2]
 23fc440:	784a      	ldrb	r2, [r1, #1]
 23fc442:	7809      	ldrb	r1, [r1, #0]
 23fc444:	f7ff ffe8 	bl	23fc418 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc448:	b003      	add	sp, #12
 23fc44a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc44e:	bf00      	nop
 23fc450:	023ffe4c 	.word	0x023ffe4c

023fc454 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fc454:	4b01      	ldr	r3, [pc, #4]	; (23fc45c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fc456:	4a02      	ldr	r2, [pc, #8]	; (23fc460 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fc458:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fc45a:	4770      	bx	lr
 23fc45c:	1007ae98 	.word	0x1007ae98
 23fc460:	023ffe58 	.word	0x023ffe58

023fc464 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fc464:	2300      	movs	r3, #0
 23fc466:	6840      	ldr	r0, [r0, #4]
 23fc468:	461a      	mov	r2, r3
 23fc46a:	f7ff bdab 	b.w	23fbfc4 <network_connect>

023fc46e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fc46e:	2200      	movs	r2, #0
 23fc470:	2102      	movs	r1, #2
 23fc472:	6840      	ldr	r0, [r0, #4]
 23fc474:	f7ff bdc2 	b.w	23fbffc <network_disconnect>

023fc478 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fc478:	2200      	movs	r2, #0
 23fc47a:	6840      	ldr	r0, [r0, #4]
 23fc47c:	4611      	mov	r1, r2
 23fc47e:	f7ff bdaf 	b.w	23fbfe0 <network_connecting>

023fc482 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fc482:	2200      	movs	r2, #0
 23fc484:	6840      	ldr	r0, [r0, #4]
 23fc486:	4611      	mov	r1, r2
 23fc488:	f7ff bdc6 	b.w	23fc018 <network_ready>

023fc48c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fc48c:	2300      	movs	r3, #0
 23fc48e:	6840      	ldr	r0, [r0, #4]
 23fc490:	461a      	mov	r2, r3
 23fc492:	4619      	mov	r1, r3
 23fc494:	f7ff bdce 	b.w	23fc034 <network_on>

023fc498 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fc498:	2300      	movs	r3, #0
 23fc49a:	6840      	ldr	r0, [r0, #4]
 23fc49c:	461a      	mov	r2, r3
 23fc49e:	4619      	mov	r1, r3
 23fc4a0:	f7ff bdd6 	b.w	23fc050 <network_off>

023fc4a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fc4a4:	2100      	movs	r1, #0
 23fc4a6:	6840      	ldr	r0, [r0, #4]
 23fc4a8:	f7ff be18 	b.w	23fc0dc <network_is_on>

023fc4ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fc4ac:	2100      	movs	r1, #0
 23fc4ae:	6840      	ldr	r0, [r0, #4]
 23fc4b0:	f7ff be22 	b.w	23fc0f8 <network_is_off>

023fc4b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fc4b4:	2200      	movs	r2, #0
 23fc4b6:	6840      	ldr	r0, [r0, #4]
 23fc4b8:	f081 0101 	eor.w	r1, r1, #1
 23fc4bc:	f7ff bdd6 	b.w	23fc06c <network_listen>

023fc4c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fc4c0:	2200      	movs	r2, #0
 23fc4c2:	6840      	ldr	r0, [r0, #4]
 23fc4c4:	f7ff bdee 	b.w	23fc0a4 <network_set_listen_timeout>

023fc4c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fc4c8:	2200      	movs	r2, #0
 23fc4ca:	6840      	ldr	r0, [r0, #4]
 23fc4cc:	4611      	mov	r1, r2
 23fc4ce:	f7ff bdf7 	b.w	23fc0c0 <network_get_listen_timeout>

023fc4d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fc4d2:	2200      	movs	r2, #0
 23fc4d4:	6840      	ldr	r0, [r0, #4]
 23fc4d6:	4611      	mov	r1, r2
 23fc4d8:	f7ff bdd6 	b.w	23fc088 <network_listening>

023fc4dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fc4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc4e0:	b095      	sub	sp, #84	; 0x54
 23fc4e2:	4614      	mov	r4, r2
 23fc4e4:	460d      	mov	r5, r1
 23fc4e6:	4607      	mov	r7, r0
    IPAddress addr;
 23fc4e8:	f7ff ff76 	bl	23fc3d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fc4ec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fc4ee:	221c      	movs	r2, #28
 23fc4f0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fc4f2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fc4f4:	f000 fdd3 	bl	23fd09e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fc4f8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc4fa:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fc4fc:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fc4fe:	2100      	movs	r1, #0
 23fc500:	466b      	mov	r3, sp
 23fc502:	aa0c      	add	r2, sp, #48	; 0x30
 23fc504:	f7ff fbba 	bl	23fbc7c <netdb_getaddrinfo>
    if (!r) {
 23fc508:	4604      	mov	r4, r0
 23fc50a:	2800      	cmp	r0, #0
 23fc50c:	d14b      	bne.n	23fc5a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc50e:	4602      	mov	r2, r0
 23fc510:	2101      	movs	r1, #1
 23fc512:	6868      	ldr	r0, [r5, #4]
 23fc514:	f7ff fd80 	bl	23fc018 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc518:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fc51a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc51c:	4622      	mov	r2, r4
 23fc51e:	6868      	ldr	r0, [r5, #4]
 23fc520:	f7ff fd7a 	bl	23fc018 <network_ready>
        bool ok = false;
 23fc524:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fc526:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fc528:	9e00      	ldr	r6, [sp, #0]
 23fc52a:	2e00      	cmp	r6, #0
 23fc52c:	d03b      	beq.n	23fc5a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fc52e:	2900      	cmp	r1, #0
 23fc530:	d139      	bne.n	23fc5a6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fc532:	6873      	ldr	r3, [r6, #4]
 23fc534:	2b02      	cmp	r3, #2
 23fc536:	d003      	beq.n	23fc540 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fc538:	2b0a      	cmp	r3, #10
 23fc53a:	d011      	beq.n	23fc560 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fc53c:	69f6      	ldr	r6, [r6, #28]
 23fc53e:	e7f4      	b.n	23fc52a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fc540:	f1b8 0f00 	cmp.w	r8, #0
 23fc544:	d0fa      	beq.n	23fc53c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fc546:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fc548:	a806      	add	r0, sp, #24
 23fc54a:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fc54c:	1d3c      	adds	r4, r7, #4
 23fc54e:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fc550:	f7ff ff70 	bl	23fc434 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fc554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc558:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc55a:	4641      	mov	r1, r8
 23fc55c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fc55e:	e7ed      	b.n	23fc53c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fc560:	f1b9 0f00 	cmp.w	r9, #0
 23fc564:	d0ea      	beq.n	23fc53c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fc566:	2210      	movs	r2, #16
 23fc568:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fc56a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fc56c:	f000 fd97 	bl	23fd09e <memset>
                    a.v = 6;
 23fc570:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc572:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fc574:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fc578:	f104 0308 	add.w	r3, r4, #8
 23fc57c:	3418      	adds	r4, #24
 23fc57e:	462a      	mov	r2, r5
 23fc580:	6818      	ldr	r0, [r3, #0]
 23fc582:	6859      	ldr	r1, [r3, #4]
 23fc584:	3308      	adds	r3, #8
 23fc586:	c203      	stmia	r2!, {r0, r1}
 23fc588:	42a3      	cmp	r3, r4
 23fc58a:	4615      	mov	r5, r2
 23fc58c:	d1f7      	bne.n	23fc57e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fc58e:	a901      	add	r1, sp, #4
 23fc590:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fc592:	1d3c      	adds	r4, r7, #4
 23fc594:	ad07      	add	r5, sp, #28
 23fc596:	f7ff ff2d 	bl	23fc3f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fc59a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fc59c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fc59e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fc5a0:	4649      	mov	r1, r9
 23fc5a2:	7023      	strb	r3, [r4, #0]
                    break;
 23fc5a4:	e7ca      	b.n	23fc53c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fc5a6:	9800      	ldr	r0, [sp, #0]
 23fc5a8:	f7ff fb5a 	bl	23fbc60 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fc5ac:	4638      	mov	r0, r7
 23fc5ae:	b015      	add	sp, #84	; 0x54
 23fc5b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fc5b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fc5b4:	4b02      	ldr	r3, [pc, #8]	; (23fc5c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fc5b6:	4a03      	ldr	r2, [pc, #12]	; (23fc5c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fc5b8:	601a      	str	r2, [r3, #0]
 23fc5ba:	2200      	movs	r2, #0
 23fc5bc:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fc5be:	4770      	bx	lr
 23fc5c0:	1007ae9c 	.word	0x1007ae9c
 23fc5c4:	023ffe64 	.word	0x023ffe64

023fc5c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fc5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc5ca:	4606      	mov	r6, r0
 23fc5cc:	460d      	mov	r5, r1
  size_t n = 0;
 23fc5ce:	2400      	movs	r4, #0
 23fc5d0:	188f      	adds	r7, r1, r2
  while (size--) {
 23fc5d2:	42bd      	cmp	r5, r7
 23fc5d4:	d00c      	beq.n	23fc5f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fc5d6:	6833      	ldr	r3, [r6, #0]
 23fc5d8:	4630      	mov	r0, r6
 23fc5da:	689b      	ldr	r3, [r3, #8]
 23fc5dc:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fc5e0:	4798      	blx	r3
     if (chunk>=0)
 23fc5e2:	1e03      	subs	r3, r0, #0
 23fc5e4:	db01      	blt.n	23fc5ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fc5e6:	441c      	add	r4, r3
  while (size--) {
 23fc5e8:	e7f3      	b.n	23fc5d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fc5ea:	2c00      	cmp	r4, #0
 23fc5ec:	bf08      	it	eq
 23fc5ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fc5f0:	4620      	mov	r0, r4
 23fc5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc5f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fc5f4:	b513      	push	{r0, r1, r4, lr}
 23fc5f6:	4604      	mov	r4, r0
    }
 23fc5f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fc5fa:	b159      	cbz	r1, 23fc614 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fc5fc:	9101      	str	r1, [sp, #4]
 23fc5fe:	f7fe faf3 	bl	23fabe8 <strlen>
 23fc602:	4602      	mov	r2, r0
 23fc604:	4620      	mov	r0, r4
 23fc606:	6823      	ldr	r3, [r4, #0]
 23fc608:	9901      	ldr	r1, [sp, #4]
 23fc60a:	68db      	ldr	r3, [r3, #12]
    }
 23fc60c:	b002      	add	sp, #8
 23fc60e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fc612:	4718      	bx	r3
    }
 23fc614:	b002      	add	sp, #8
 23fc616:	bd10      	pop	{r4, pc}

023fc618 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fc618:	b508      	push	{r3, lr}
  return write(str);
 23fc61a:	f7ff ffeb 	bl	23fc5f4 <_ZN5Print5writeEPKc>
}
 23fc61e:	bd08      	pop	{r3, pc}

023fc620 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fc620:	6803      	ldr	r3, [r0, #0]
 23fc622:	689b      	ldr	r3, [r3, #8]
 23fc624:	4718      	bx	r3

023fc626 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fc626:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fc628:	210d      	movs	r1, #13
{
 23fc62a:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fc62c:	f7ff fff8 	bl	23fc620 <_ZN5Print5printEc>
  n += print('\n');
 23fc630:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fc632:	4604      	mov	r4, r0
  n += print('\n');
 23fc634:	4628      	mov	r0, r5
 23fc636:	f7ff fff3 	bl	23fc620 <_ZN5Print5printEc>
  return n;
}
 23fc63a:	4420      	add	r0, r4
 23fc63c:	bd38      	pop	{r3, r4, r5, pc}

023fc63e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fc63e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fc640:	2a01      	cmp	r2, #1
 23fc642:	bf98      	it	ls
 23fc644:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fc646:	b530      	push	{r4, r5, lr}
 23fc648:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fc64a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fc64e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fc650:	460d      	mov	r5, r1
 23fc652:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fc656:	fb01 5312 	mls	r3, r1, r2, r5
 23fc65a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fc65e:	2b09      	cmp	r3, #9
 23fc660:	bf94      	ite	ls
 23fc662:	3330      	addls	r3, #48	; 0x30
 23fc664:	3337      	addhi	r3, #55	; 0x37
 23fc666:	b2db      	uxtb	r3, r3
  } while(n);
 23fc668:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fc66a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fc66e:	d9ef      	bls.n	23fc650 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fc670:	4621      	mov	r1, r4
 23fc672:	f7ff ffbf 	bl	23fc5f4 <_ZN5Print5writeEPKc>
}
 23fc676:	b00b      	add	sp, #44	; 0x2c
 23fc678:	bd30      	pop	{r4, r5, pc}

023fc67a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
 23fc67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fc67e:	b086      	sub	sp, #24
 23fc680:	af00      	add	r7, sp, #0
 23fc682:	4605      	mov	r5, r0
 23fc684:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
 23fc686:	1d38      	adds	r0, r7, #4
 23fc688:	2114      	movs	r1, #20
{
 23fc68a:	4614      	mov	r4, r2
    va_copy(args2, args);
 23fc68c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
 23fc68e:	f7ff fd6b 	bl	23fc168 <vsnprintf>

    if (n<bufsize)
 23fc692:	2813      	cmp	r0, #19
 23fc694:	d80e      	bhi.n	23fc6b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
 23fc696:	4628      	mov	r0, r5
 23fc698:	1d39      	adds	r1, r7, #4
 23fc69a:	f7ff ffab 	bl	23fc5f4 <_ZN5Print5writeEPKc>
 23fc69e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
 23fc6a0:	b11e      	cbz	r6, 23fc6aa <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
 23fc6a2:	4628      	mov	r0, r5
 23fc6a4:	f7ff ffbf 	bl	23fc626 <_ZN5Print7printlnEv>
 23fc6a8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
 23fc6aa:	4620      	mov	r0, r4
 23fc6ac:	3718      	adds	r7, #24
 23fc6ae:	46bd      	mov	sp, r7
 23fc6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
 23fc6b4:	f100 0308 	add.w	r3, r0, #8
 23fc6b8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
 23fc6bc:	46e8      	mov	r8, sp
        char bigger[n+1];
 23fc6be:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
 23fc6c2:	4622      	mov	r2, r4
 23fc6c4:	1c41      	adds	r1, r0, #1
 23fc6c6:	683b      	ldr	r3, [r7, #0]
 23fc6c8:	4668      	mov	r0, sp
 23fc6ca:	f7ff fd4d 	bl	23fc168 <vsnprintf>
  return write(str);
 23fc6ce:	4669      	mov	r1, sp
 23fc6d0:	4628      	mov	r0, r5
 23fc6d2:	f7ff ff8f 	bl	23fc5f4 <_ZN5Print5writeEPKc>
 23fc6d6:	4604      	mov	r4, r0
 23fc6d8:	46c5      	mov	sp, r8
 23fc6da:	e7e1      	b.n	23fc6a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

023fc6dc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fc6dc:	2200      	movs	r2, #0
 23fc6de:	4b01      	ldr	r3, [pc, #4]	; (23fc6e4 <_GLOBAL__sub_I_RGB+0x8>)
 23fc6e0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fc6e2:	4770      	bx	lr
 23fc6e4:	1007aea4 	.word	0x1007aea4

023fc6e8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fc6e8:	2100      	movs	r1, #0
 23fc6ea:	f7ff bb37 	b.w	23fbd5c <hal_spi_release>

023fc6ee <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fc6ee:	2100      	movs	r1, #0
 23fc6f0:	f7ff bb26 	b.w	23fbd40 <hal_spi_acquire>

023fc6f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fc6f4:	b510      	push	{r4, lr}
 23fc6f6:	4604      	mov	r4, r0
 23fc6f8:	4608      	mov	r0, r1
{
    _spi = spi;
 23fc6fa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fc6fc:	f7ff fae8 	bl	23fbcd0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fc700:	2300      	movs	r3, #0
}
 23fc702:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fc704:	6063      	str	r3, [r4, #4]
}
 23fc706:	bd10      	pop	{r4, pc}

023fc708 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fc708:	b513      	push	{r0, r1, r4, lr}
 23fc70a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fc70c:	7800      	ldrb	r0, [r0, #0]
 23fc70e:	f7ff ffee 	bl	23fc6ee <_ZN8SPIClass4lockEv.isra.0>
 23fc712:	b958      	cbnz	r0, 23fc72c <_ZN8SPIClass5beginEv+0x24>
 23fc714:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fc716:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fc71a:	9001      	str	r0, [sp, #4]
 23fc71c:	f7ff fabc 	bl	23fbc98 <hal_spi_begin>
        unlock();
 23fc720:	9801      	ldr	r0, [sp, #4]
    }
}
 23fc722:	b002      	add	sp, #8
 23fc724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc728:	f7ff bfde 	b.w	23fc6e8 <_ZN8SPIClass6unlockEv.isra.0>
 23fc72c:	b002      	add	sp, #8
 23fc72e:	bd10      	pop	{r4, pc}

023fc730 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fc730:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fc732:	2400      	movs	r4, #0
 23fc734:	0840      	lsrs	r0, r0, #1
 23fc736:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fc738:	6818      	ldr	r0, [r3, #0]
 23fc73a:	b2e5      	uxtb	r5, r4
 23fc73c:	4288      	cmp	r0, r1
 23fc73e:	d906      	bls.n	23fc74e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fc740:	3401      	adds	r4, #1
 23fc742:	2c08      	cmp	r4, #8
 23fc744:	d002      	beq.n	23fc74c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fc746:	0840      	lsrs	r0, r0, #1
 23fc748:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fc74a:	e7f5      	b.n	23fc738 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fc74c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fc74e:	4b02      	ldr	r3, [pc, #8]	; (23fc758 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fc750:	5d5b      	ldrb	r3, [r3, r5]
 23fc752:	7013      	strb	r3, [r2, #0]
}
 23fc754:	bd30      	pop	{r4, r5, pc}
 23fc756:	bf00      	nop
 23fc758:	023ffe98 	.word	0x023ffe98

023fc75c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fc75c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc760:	4606      	mov	r6, r0
 23fc762:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fc764:	7800      	ldrb	r0, [r0, #0]
{
 23fc766:	460c      	mov	r4, r1
    CHECK(lock());
 23fc768:	f7ff ffc1 	bl	23fc6ee <_ZN8SPIClass4lockEv.isra.0>
 23fc76c:	2800      	cmp	r0, #0
 23fc76e:	db1b      	blt.n	23fc7a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fc770:	2214      	movs	r2, #20
 23fc772:	2100      	movs	r1, #0
 23fc774:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fc776:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fc778:	f000 fc91 	bl	23fd09e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fc77c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fc77e:	2200      	movs	r2, #0
 23fc780:	4628      	mov	r0, r5
 23fc782:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fc784:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fc788:	f7ff fabe 	bl	23fbd08 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fc78c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fc790:	b113      	cbz	r3, 23fc798 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fc792:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fc796:	b155      	cbz	r5, 23fc7ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fc798:	2700      	movs	r7, #0
 23fc79a:	2501      	movs	r5, #1
 23fc79c:	46b9      	mov	r9, r7
 23fc79e:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fc7a0:	7923      	ldrb	r3, [r4, #4]
 23fc7a2:	b15d      	cbz	r5, 23fc7bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fc7a4:	b1c3      	cbz	r3, 23fc7d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fc7a6:	2000      	movs	r0, #0
}
 23fc7a8:	b00f      	add	sp, #60	; 0x3c
 23fc7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fc7ae:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fc7b2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fc7b6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fc7ba:	e7f1      	b.n	23fc7a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fc7bc:	2b00      	cmp	r3, #0
 23fc7be:	d135      	bne.n	23fc82c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fc7c0:	68a3      	ldr	r3, [r4, #8]
 23fc7c2:	4543      	cmp	r3, r8
 23fc7c4:	d108      	bne.n	23fc7d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fc7c6:	f88d 9020 	strb.w	r9, [sp, #32]
 23fc7ca:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fc7ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fc7d2:	89a3      	ldrh	r3, [r4, #12]
 23fc7d4:	429a      	cmp	r2, r3
 23fc7d6:	d0e6      	beq.n	23fc7a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fc7d8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fc7da:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fc7dc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fc7e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fc7e2:	ab04      	add	r3, sp, #16
 23fc7e4:	f10d 020f 	add.w	r2, sp, #15
 23fc7e8:	f7ff ffa2 	bl	23fc730 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fc7ec:	7921      	ldrb	r1, [r4, #4]
 23fc7ee:	b985      	cbnz	r5, 23fc812 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fc7f0:	b989      	cbnz	r1, 23fc816 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fc7f2:	68a3      	ldr	r3, [r4, #8]
 23fc7f4:	4543      	cmp	r3, r8
 23fc7f6:	d30e      	bcc.n	23fc816 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fc7f8:	f88d 9020 	strb.w	r9, [sp, #32]
 23fc7fc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fc800:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fc804:	89a3      	ldrh	r3, [r4, #12]
 23fc806:	429a      	cmp	r2, r3
 23fc808:	d105      	bne.n	23fc816 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fc80a:	9b04      	ldr	r3, [sp, #16]
 23fc80c:	4543      	cmp	r3, r8
 23fc80e:	d102      	bne.n	23fc816 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fc810:	e7c9      	b.n	23fc7a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fc812:	2900      	cmp	r1, #0
 23fc814:	d1f9      	bne.n	23fc80a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fc816:	2300      	movs	r3, #0
 23fc818:	9301      	str	r3, [sp, #4]
 23fc81a:	7b63      	ldrb	r3, [r4, #13]
 23fc81c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fc820:	9300      	str	r3, [sp, #0]
 23fc822:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fc824:	7830      	ldrb	r0, [r6, #0]
 23fc826:	f7ff fa7d 	bl	23fbd24 <hal_spi_set_settings>
 23fc82a:	e7bc      	b.n	23fc7a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fc82c:	462b      	mov	r3, r5
 23fc82e:	462a      	mov	r2, r5
 23fc830:	2101      	movs	r1, #1
 23fc832:	e9cd 5500 	strd	r5, r5, [sp]
 23fc836:	e7f5      	b.n	23fc824 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fc838 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fc838:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fc83a:	7800      	ldrb	r0, [r0, #0]
 23fc83c:	f7ff fa3a 	bl	23fbcb4 <hal_spi_transfer>
}
 23fc840:	b2c0      	uxtb	r0, r0
 23fc842:	bd08      	pop	{r3, pc}

023fc844 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23fc844:	b510      	push	{r4, lr}
 23fc846:	4604      	mov	r4, r0
{
	free(buffer);
 23fc848:	6800      	ldr	r0, [r0, #0]
 23fc84a:	f7ff fc71 	bl	23fc130 <free>
}
 23fc84e:	4620      	mov	r0, r4
 23fc850:	bd10      	pop	{r4, pc}

023fc852 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23fc852:	b510      	push	{r4, lr}
 23fc854:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23fc856:	6800      	ldr	r0, [r0, #0]
 23fc858:	b108      	cbz	r0, 23fc85e <_ZN6String10invalidateEv+0xc>
 23fc85a:	f7ff fc69 	bl	23fc130 <free>
	buffer = NULL;
 23fc85e:	2300      	movs	r3, #0
	capacity = len = 0;
 23fc860:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23fc864:	6023      	str	r3, [r4, #0]
}
 23fc866:	bd10      	pop	{r4, pc}

023fc868 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fc868:	b538      	push	{r3, r4, r5, lr}
 23fc86a:	4604      	mov	r4, r0
 23fc86c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fc86e:	6800      	ldr	r0, [r0, #0]
 23fc870:	3101      	adds	r1, #1
 23fc872:	f7ff fc6b 	bl	23fc14c <realloc>
	if (newbuffer) {
 23fc876:	b110      	cbz	r0, 23fc87e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23fc878:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23fc87c:	2001      	movs	r0, #1
	}
	return 0;
}
 23fc87e:	bd38      	pop	{r3, r4, r5, pc}

023fc880 <_ZN6String7reserveEj>:
{
 23fc880:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23fc882:	6803      	ldr	r3, [r0, #0]
{
 23fc884:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23fc886:	b123      	cbz	r3, 23fc892 <_ZN6String7reserveEj+0x12>
 23fc888:	6843      	ldr	r3, [r0, #4]
 23fc88a:	428b      	cmp	r3, r1
 23fc88c:	d301      	bcc.n	23fc892 <_ZN6String7reserveEj+0x12>
 23fc88e:	2001      	movs	r0, #1
}
 23fc890:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23fc892:	4620      	mov	r0, r4
 23fc894:	f7ff ffe8 	bl	23fc868 <_ZN6String12changeBufferEj>
 23fc898:	2800      	cmp	r0, #0
 23fc89a:	d0f9      	beq.n	23fc890 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23fc89c:	68a3      	ldr	r3, [r4, #8]
 23fc89e:	2b00      	cmp	r3, #0
 23fc8a0:	d1f5      	bne.n	23fc88e <_ZN6String7reserveEj+0xe>
 23fc8a2:	6822      	ldr	r2, [r4, #0]
 23fc8a4:	7013      	strb	r3, [r2, #0]
 23fc8a6:	e7f2      	b.n	23fc88e <_ZN6String7reserveEj+0xe>

023fc8a8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fc8a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc8aa:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23fc8ac:	4611      	mov	r1, r2
 23fc8ae:	9201      	str	r2, [sp, #4]
{
 23fc8b0:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23fc8b2:	f7ff ffe5 	bl	23fc880 <_ZN6String7reserveEj>
 23fc8b6:	9a01      	ldr	r2, [sp, #4]
 23fc8b8:	b928      	cbnz	r0, 23fc8c6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23fc8ba:	4620      	mov	r0, r4
 23fc8bc:	f7ff ffc9 	bl	23fc852 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23fc8c0:	4620      	mov	r0, r4
 23fc8c2:	b003      	add	sp, #12
 23fc8c4:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23fc8c6:	4629      	mov	r1, r5
	len = length;
 23fc8c8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23fc8ca:	6820      	ldr	r0, [r4, #0]
 23fc8cc:	f000 fbda 	bl	23fd084 <memcpy>
	buffer[len] = 0;
 23fc8d0:	2100      	movs	r1, #0
 23fc8d2:	6822      	ldr	r2, [r4, #0]
 23fc8d4:	68a3      	ldr	r3, [r4, #8]
 23fc8d6:	54d1      	strb	r1, [r2, r3]
	return *this;
 23fc8d8:	e7f2      	b.n	23fc8c0 <_ZN6String4copyEPKcj+0x18>

023fc8da <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23fc8da:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fc8dc:	b513      	push	{r0, r1, r4, lr}
 23fc8de:	4604      	mov	r4, r0
	capacity = 0;
 23fc8e0:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fc8e4:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fc8e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23fc8e8:	b141      	cbz	r1, 23fc8fc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23fc8ea:	4608      	mov	r0, r1
 23fc8ec:	9101      	str	r1, [sp, #4]
 23fc8ee:	f7fe f97b 	bl	23fabe8 <strlen>
 23fc8f2:	9901      	ldr	r1, [sp, #4]
 23fc8f4:	4602      	mov	r2, r0
 23fc8f6:	4620      	mov	r0, r4
 23fc8f8:	f7ff ffd6 	bl	23fc8a8 <_ZN6String4copyEPKcj>
}
 23fc8fc:	4620      	mov	r0, r4
 23fc8fe:	b002      	add	sp, #8
 23fc900:	bd10      	pop	{r4, pc}

023fc902 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 23fc902:	4288      	cmp	r0, r1
{
 23fc904:	b510      	push	{r4, lr}
 23fc906:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 23fc908:	d005      	beq.n	23fc916 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 23fc90a:	680b      	ldr	r3, [r1, #0]
 23fc90c:	b12b      	cbz	r3, 23fc91a <_ZN6StringaSERKS_+0x18>
 23fc90e:	688a      	ldr	r2, [r1, #8]
 23fc910:	4619      	mov	r1, r3
 23fc912:	f7ff ffc9 	bl	23fc8a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fc916:	4620      	mov	r0, r4
 23fc918:	bd10      	pop	{r4, pc}
	else invalidate();
 23fc91a:	f7ff ff9a 	bl	23fc852 <_ZN6String10invalidateEv>
 23fc91e:	e7fa      	b.n	23fc916 <_ZN6StringaSERKS_+0x14>

023fc920 <_ZN6StringC1ERKS_>:
	buffer = NULL;
 23fc920:	2300      	movs	r3, #0
String::String(const String &value)
 23fc922:	b510      	push	{r4, lr}
 23fc924:	4604      	mov	r4, r0
	capacity = 0;
 23fc926:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23fc92a:	6083      	str	r3, [r0, #8]
	flags = 0;
 23fc92c:	7303      	strb	r3, [r0, #12]
	*this = value;
 23fc92e:	f7ff ffe8 	bl	23fc902 <_ZN6StringaSERKS_>
}
 23fc932:	4620      	mov	r0, r4
 23fc934:	bd10      	pop	{r4, pc}

023fc936 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23fc936:	b513      	push	{r0, r1, r4, lr}
 23fc938:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23fc93a:	b159      	cbz	r1, 23fc954 <_ZN6StringaSEPKc+0x1e>
 23fc93c:	4608      	mov	r0, r1
 23fc93e:	9101      	str	r1, [sp, #4]
 23fc940:	f7fe f952 	bl	23fabe8 <strlen>
 23fc944:	9901      	ldr	r1, [sp, #4]
 23fc946:	4602      	mov	r2, r0
 23fc948:	4620      	mov	r0, r4
 23fc94a:	f7ff ffad 	bl	23fc8a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23fc94e:	4620      	mov	r0, r4
 23fc950:	b002      	add	sp, #8
 23fc952:	bd10      	pop	{r4, pc}
	else invalidate();
 23fc954:	f7ff ff7d 	bl	23fc852 <_ZN6String10invalidateEv>
 23fc958:	e7f9      	b.n	23fc94e <_ZN6StringaSEPKc+0x18>

023fc95a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fc95a:	b570      	push	{r4, r5, r6, lr}
 23fc95c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23fc95e:	460e      	mov	r6, r1
 23fc960:	b909      	cbnz	r1, 23fc966 <_ZN6String6concatEPKcj+0xc>
 23fc962:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23fc964:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23fc966:	b16a      	cbz	r2, 23fc984 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23fc968:	6884      	ldr	r4, [r0, #8]
 23fc96a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23fc96c:	4621      	mov	r1, r4
 23fc96e:	f7ff ff87 	bl	23fc880 <_ZN6String7reserveEj>
 23fc972:	2800      	cmp	r0, #0
 23fc974:	d0f5      	beq.n	23fc962 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23fc976:	6828      	ldr	r0, [r5, #0]
 23fc978:	68ab      	ldr	r3, [r5, #8]
 23fc97a:	4631      	mov	r1, r6
 23fc97c:	4418      	add	r0, r3
 23fc97e:	f000 fbc5 	bl	23fd10c <strcpy>
	len = newlen;
 23fc982:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23fc984:	2001      	movs	r0, #1
 23fc986:	e7ed      	b.n	23fc964 <_ZN6String6concatEPKcj+0xa>

023fc988 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23fc988:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fc98a:	688a      	ldr	r2, [r1, #8]
 23fc98c:	6809      	ldr	r1, [r1, #0]
{
 23fc98e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23fc990:	f7ff ffe3 	bl	23fc95a <_ZN6String6concatEPKcj>
 23fc994:	b910      	cbnz	r0, 23fc99c <_ZplRK15StringSumHelperRK6String+0x14>
 23fc996:	4620      	mov	r0, r4
 23fc998:	f7ff ff5b 	bl	23fc852 <_ZN6String10invalidateEv>
	return a;
}
 23fc99c:	4620      	mov	r0, r4
 23fc99e:	bd10      	pop	{r4, pc}

023fc9a0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 23fc9a0:	b513      	push	{r0, r1, r4, lr}
 23fc9a2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fc9a4:	b929      	cbnz	r1, 23fc9b2 <_ZplRK15StringSumHelperPKc+0x12>
 23fc9a6:	4620      	mov	r0, r4
 23fc9a8:	f7ff ff53 	bl	23fc852 <_ZN6String10invalidateEv>
	return a;
}
 23fc9ac:	4620      	mov	r0, r4
 23fc9ae:	b002      	add	sp, #8
 23fc9b0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 23fc9b2:	4608      	mov	r0, r1
 23fc9b4:	9101      	str	r1, [sp, #4]
 23fc9b6:	f7fe f917 	bl	23fabe8 <strlen>
 23fc9ba:	9901      	ldr	r1, [sp, #4]
 23fc9bc:	4602      	mov	r2, r0
 23fc9be:	4620      	mov	r0, r4
 23fc9c0:	f7ff ffcb 	bl	23fc95a <_ZN6String6concatEPKcj>
 23fc9c4:	2800      	cmp	r0, #0
 23fc9c6:	d0ee      	beq.n	23fc9a6 <_ZplRK15StringSumHelperPKc+0x6>
 23fc9c8:	e7f0      	b.n	23fc9ac <_ZplRK15StringSumHelperPKc+0xc>
	...

023fc9cc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fc9cc:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fc9ce:	2000      	movs	r0, #0
 23fc9d0:	4b04      	ldr	r3, [pc, #16]	; (23fc9e4 <_GLOBAL__sub_I_System+0x18>)
 23fc9d2:	601a      	str	r2, [r3, #0]
 23fc9d4:	4b04      	ldr	r3, [pc, #16]	; (23fc9e8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fc9d6:	4a05      	ldr	r2, [pc, #20]	; (23fc9ec <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fc9d8:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fc9dc:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fc9de:	f7ff ba9d 	b.w	23fbf1c <set_system_mode>
 23fc9e2:	bf00      	nop
 23fc9e4:	1007aec0 	.word	0x1007aec0
 23fc9e8:	1007aeb4 	.word	0x1007aeb4
 23fc9ec:	ffff0000 	.word	0xffff0000

023fc9f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc9f0:	4b02      	ldr	r3, [pc, #8]	; (23fc9fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc9f2:	681a      	ldr	r2, [r3, #0]
 23fc9f4:	4b02      	ldr	r3, [pc, #8]	; (23fca00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc9f6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc9f8:	4770      	bx	lr
 23fc9fa:	bf00      	nop
 23fc9fc:	10078230 	.word	0x10078230
 23fca00:	1007aec4 	.word	0x1007aec4

023fca04 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fca04:	4770      	bx	lr

023fca06 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fca06:	7441      	strb	r1, [r0, #17]
}
 23fca08:	4770      	bx	lr

023fca0a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fca0a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fca0c:	7c00      	ldrb	r0, [r0, #16]
 23fca0e:	f7ff fa07 	bl	23fbe20 <hal_usart_available_data_for_write>
}
 23fca12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fca16:	bd08      	pop	{r3, pc}

023fca18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fca18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fca1a:	7c00      	ldrb	r0, [r0, #16]
 23fca1c:	f7ff f9ba 	bl	23fbd94 <hal_usart_available>
}
 23fca20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fca24:	bd08      	pop	{r3, pc}

023fca26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fca26:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fca28:	7c00      	ldrb	r0, [r0, #16]
 23fca2a:	f7ff f9cf 	bl	23fbdcc <hal_usart_peek>
}
 23fca2e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fca32:	bd08      	pop	{r3, pc}

023fca34 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fca34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fca36:	7c00      	ldrb	r0, [r0, #16]
 23fca38:	f7ff f9ba 	bl	23fbdb0 <hal_usart_read>
}
 23fca3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fca40:	bd08      	pop	{r3, pc}

023fca42 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fca42:	7c00      	ldrb	r0, [r0, #16]
 23fca44:	f7ff b9d0 	b.w	23fbde8 <hal_usart_flush>

023fca48 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fca48:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fca4a:	7c45      	ldrb	r5, [r0, #17]
{
 23fca4c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fca4e:	b12d      	cbz	r5, 23fca5c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fca50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fca52:	b003      	add	sp, #12
 23fca54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fca58:	f7ff b98e 	b.w	23fbd78 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fca5c:	7c00      	ldrb	r0, [r0, #16]
 23fca5e:	9101      	str	r1, [sp, #4]
 23fca60:	f7ff f9de 	bl	23fbe20 <hal_usart_available_data_for_write>
 23fca64:	2800      	cmp	r0, #0
 23fca66:	9901      	ldr	r1, [sp, #4]
 23fca68:	dcf2      	bgt.n	23fca50 <_ZN11USARTSerial5writeEh+0x8>
}
 23fca6a:	4628      	mov	r0, r5
 23fca6c:	b003      	add	sp, #12
 23fca6e:	bd30      	pop	{r4, r5, pc}

023fca70 <_ZN11USARTSerialD0Ev>:
 23fca70:	b510      	push	{r4, lr}
 23fca72:	4604      	mov	r4, r0
 23fca74:	2114      	movs	r1, #20
 23fca76:	f7fe f8de 	bl	23fac36 <_ZdlPvj>
 23fca7a:	4620      	mov	r0, r4
 23fca7c:	bd10      	pop	{r4, pc}
	...

023fca80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fca80:	b510      	push	{r4, lr}
 23fca82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fca86:	4604      	mov	r4, r0
 23fca88:	4608      	mov	r0, r1
 23fca8a:	4611      	mov	r1, r2
 23fca8c:	2200      	movs	r2, #0
 23fca8e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fca92:	4b04      	ldr	r3, [pc, #16]	; (23fcaa4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fca94:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fca96:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fca98:	2301      	movs	r3, #1
 23fca9a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fca9c:	f7ff f9ce 	bl	23fbe3c <hal_usart_init_ex>
}
 23fcaa0:	4620      	mov	r0, r4
 23fcaa2:	bd10      	pop	{r4, pc}
 23fcaa4:	023ffec4 	.word	0x023ffec4

023fcaa8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fcaa8:	7c00      	ldrb	r0, [r0, #16]
 23fcaaa:	f7ff b9ab 	b.w	23fbe04 <hal_usart_is_enabled>

023fcaae <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fcaae:	7441      	strb	r1, [r0, #17]
}
 23fcab0:	4770      	bx	lr

023fcab2 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fcab2:	4770      	bx	lr

023fcab4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fcab4:	4770      	bx	lr

023fcab6 <_ZN9USBSerial4readEv>:
{
 23fcab6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fcab8:	2100      	movs	r1, #0
 23fcaba:	7c00      	ldrb	r0, [r0, #16]
 23fcabc:	f7ff fa04 	bl	23fbec8 <HAL_USB_USART_Receive_Data>
}
 23fcac0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fcac4:	bd08      	pop	{r3, pc}

023fcac6 <_ZN9USBSerial4peekEv>:
{
 23fcac6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fcac8:	2101      	movs	r1, #1
 23fcaca:	7c00      	ldrb	r0, [r0, #16]
 23fcacc:	f7ff f9fc 	bl	23fbec8 <HAL_USB_USART_Receive_Data>
}
 23fcad0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fcad4:	bd08      	pop	{r3, pc}

023fcad6 <_ZN9USBSerial17availableForWriteEv>:
{
 23fcad6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fcad8:	7c00      	ldrb	r0, [r0, #16]
 23fcada:	f7ff f9e7 	bl	23fbeac <HAL_USB_USART_Available_Data_For_Write>
}
 23fcade:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fcae2:	bd08      	pop	{r3, pc}

023fcae4 <_ZN9USBSerial9availableEv>:
{
 23fcae4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fcae6:	7c00      	ldrb	r0, [r0, #16]
 23fcae8:	f7ff f9d2 	bl	23fbe90 <HAL_USB_USART_Available_Data>
}
 23fcaec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fcaf0:	bd08      	pop	{r3, pc}

023fcaf2 <_ZN9USBSerial5writeEh>:
{
 23fcaf2:	b513      	push	{r0, r1, r4, lr}
 23fcaf4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fcaf6:	7c00      	ldrb	r0, [r0, #16]
{
 23fcaf8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fcafa:	f7ff f9d7 	bl	23fbeac <HAL_USB_USART_Available_Data_For_Write>
 23fcafe:	2800      	cmp	r0, #0
 23fcb00:	9901      	ldr	r1, [sp, #4]
 23fcb02:	dc01      	bgt.n	23fcb08 <_ZN9USBSerial5writeEh+0x16>
 23fcb04:	7c60      	ldrb	r0, [r4, #17]
 23fcb06:	b120      	cbz	r0, 23fcb12 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fcb08:	7c20      	ldrb	r0, [r4, #16]
 23fcb0a:	f7ff f9eb 	bl	23fbee4 <HAL_USB_USART_Send_Data>
 23fcb0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fcb12:	b002      	add	sp, #8
 23fcb14:	bd10      	pop	{r4, pc}

023fcb16 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fcb16:	7c00      	ldrb	r0, [r0, #16]
 23fcb18:	f7ff b9f2 	b.w	23fbf00 <HAL_USB_USART_Flush_Data>

023fcb1c <_ZN9USBSerialD0Ev>:
 23fcb1c:	b510      	push	{r4, lr}
 23fcb1e:	4604      	mov	r4, r0
 23fcb20:	2114      	movs	r1, #20
 23fcb22:	f7fe f888 	bl	23fac36 <_ZdlPvj>
 23fcb26:	4620      	mov	r0, r4
 23fcb28:	bd10      	pop	{r4, pc}
	...

023fcb2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fcb2c:	b510      	push	{r4, lr}
 23fcb2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fcb32:	4604      	mov	r4, r0
 23fcb34:	4608      	mov	r0, r1
 23fcb36:	2100      	movs	r1, #0
 23fcb38:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fcb3c:	4b04      	ldr	r3, [pc, #16]	; (23fcb50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fcb3e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fcb40:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fcb42:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fcb44:	4611      	mov	r1, r2
  _blocking = true;
 23fcb46:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fcb48:	f7ff f986 	bl	23fbe58 <HAL_USB_USART_Init>
}
 23fcb4c:	4620      	mov	r0, r4
 23fcb4e:	bd10      	pop	{r4, pc}
 23fcb50:	023ffef4 	.word	0x023ffef4

023fcb54 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fcb54:	2200      	movs	r2, #0
 23fcb56:	7c00      	ldrb	r0, [r0, #16]
 23fcb58:	f7ff b98c 	b.w	23fbe74 <HAL_USB_USART_Begin>

023fcb5c <_Z19acquireSerialBufferv>:
{
 23fcb5c:	b510      	push	{r4, lr}
 23fcb5e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fcb60:	2214      	movs	r2, #20
 23fcb62:	2100      	movs	r1, #0
 23fcb64:	f000 fa9b 	bl	23fd09e <memset>
}
 23fcb68:	4620      	mov	r0, r4
 23fcb6a:	bd10      	pop	{r4, pc}

023fcb6c <_Z16_fetch_usbserialv>:
{
 23fcb6c:	b510      	push	{r4, lr}
 23fcb6e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fcb70:	a803      	add	r0, sp, #12
 23fcb72:	f7ff fff3 	bl	23fcb5c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fcb76:	4c0c      	ldr	r4, [pc, #48]	; (23fcba8 <_Z16_fetch_usbserialv+0x3c>)
 23fcb78:	e8d4 1f8f 	ldab	r1, [r4]
 23fcb7c:	f011 0101 	ands.w	r1, r1, #1
 23fcb80:	d10f      	bne.n	23fcba2 <_Z16_fetch_usbserialv+0x36>
 23fcb82:	4620      	mov	r0, r4
 23fcb84:	9101      	str	r1, [sp, #4]
 23fcb86:	f7fe f858 	bl	23fac3a <__cxa_guard_acquire>
 23fcb8a:	9901      	ldr	r1, [sp, #4]
 23fcb8c:	b148      	cbz	r0, 23fcba2 <_Z16_fetch_usbserialv+0x36>
 23fcb8e:	aa03      	add	r2, sp, #12
 23fcb90:	4806      	ldr	r0, [pc, #24]	; (23fcbac <_Z16_fetch_usbserialv+0x40>)
 23fcb92:	f7ff ffcb 	bl	23fcb2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fcb96:	4620      	mov	r0, r4
 23fcb98:	f7fe f854 	bl	23fac44 <__cxa_guard_release>
 23fcb9c:	4804      	ldr	r0, [pc, #16]	; (23fcbb0 <_Z16_fetch_usbserialv+0x44>)
 23fcb9e:	f000 fa6b 	bl	23fd078 <atexit>
	return _usbserial;
}
 23fcba2:	4802      	ldr	r0, [pc, #8]	; (23fcbac <_Z16_fetch_usbserialv+0x40>)
 23fcba4:	b008      	add	sp, #32
 23fcba6:	bd10      	pop	{r4, pc}
 23fcba8:	1007aec8 	.word	0x1007aec8
 23fcbac:	1007aecc 	.word	0x1007aecc
 23fcbb0:	023fcab3 	.word	0x023fcab3

023fcbb4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fcbb4:	2200      	movs	r2, #0
 23fcbb6:	6840      	ldr	r0, [r0, #4]
 23fcbb8:	4611      	mov	r1, r2
 23fcbba:	f7ff ba2d 	b.w	23fc018 <network_ready>

023fcbbe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fcbbe:	2200      	movs	r2, #0
 23fcbc0:	6840      	ldr	r0, [r0, #4]
 23fcbc2:	4611      	mov	r1, r2
 23fcbc4:	f7ff ba60 	b.w	23fc088 <network_listening>

023fcbc8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fcbc8:	2200      	movs	r2, #0
 23fcbca:	6840      	ldr	r0, [r0, #4]
 23fcbcc:	4611      	mov	r1, r2
 23fcbce:	f7ff ba77 	b.w	23fc0c0 <network_get_listen_timeout>

023fcbd2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fcbd2:	2200      	movs	r2, #0
 23fcbd4:	6840      	ldr	r0, [r0, #4]
 23fcbd6:	f7ff ba65 	b.w	23fc0a4 <network_set_listen_timeout>

023fcbda <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fcbda:	2200      	movs	r2, #0
 23fcbdc:	6840      	ldr	r0, [r0, #4]
 23fcbde:	f081 0101 	eor.w	r1, r1, #1
 23fcbe2:	f7ff ba43 	b.w	23fc06c <network_listen>

023fcbe6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fcbe6:	2300      	movs	r3, #0
 23fcbe8:	6840      	ldr	r0, [r0, #4]
 23fcbea:	461a      	mov	r2, r3
 23fcbec:	4619      	mov	r1, r3
 23fcbee:	f7ff ba2f 	b.w	23fc050 <network_off>

023fcbf2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fcbf2:	2300      	movs	r3, #0
 23fcbf4:	6840      	ldr	r0, [r0, #4]
 23fcbf6:	461a      	mov	r2, r3
 23fcbf8:	4619      	mov	r1, r3
 23fcbfa:	f7ff ba1b 	b.w	23fc034 <network_on>

023fcbfe <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fcbfe:	2200      	movs	r2, #0
 23fcc00:	6840      	ldr	r0, [r0, #4]
 23fcc02:	4611      	mov	r1, r2
 23fcc04:	f7ff b9ec 	b.w	23fbfe0 <network_connecting>

023fcc08 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fcc08:	2200      	movs	r2, #0
 23fcc0a:	2102      	movs	r1, #2
 23fcc0c:	6840      	ldr	r0, [r0, #4]
 23fcc0e:	f7ff b9f5 	b.w	23fbffc <network_disconnect>

023fcc12 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fcc12:	2300      	movs	r3, #0
 23fcc14:	6840      	ldr	r0, [r0, #4]
 23fcc16:	461a      	mov	r2, r3
 23fcc18:	f7ff b9d4 	b.w	23fbfc4 <network_connect>

023fcc1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fcc1c:	2204      	movs	r2, #4
 23fcc1e:	4b02      	ldr	r3, [pc, #8]	; (23fcc28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fcc20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fcc22:	4a02      	ldr	r2, [pc, #8]	; (23fcc2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fcc24:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fcc26:	4770      	bx	lr
 23fcc28:	1007aee0 	.word	0x1007aee0
 23fcc2c:	023fff24 	.word	0x023fff24

023fcc30 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fcc30:	4b01      	ldr	r3, [pc, #4]	; (23fcc38 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fcc32:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fcc34:	4770      	bx	lr
 23fcc36:	bf00      	nop
 23fcc38:	10078234 	.word	0x10078234

023fcc3c <serialEventRun>:
{
 23fcc3c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fcc3e:	4b0f      	ldr	r3, [pc, #60]	; (23fcc7c <serialEventRun+0x40>)
 23fcc40:	b143      	cbz	r3, 23fcc54 <serialEventRun+0x18>
 23fcc42:	f7ff ff93 	bl	23fcb6c <_Z16_fetch_usbserialv>
 23fcc46:	6803      	ldr	r3, [r0, #0]
 23fcc48:	691b      	ldr	r3, [r3, #16]
 23fcc4a:	4798      	blx	r3
 23fcc4c:	2800      	cmp	r0, #0
 23fcc4e:	dd01      	ble.n	23fcc54 <serialEventRun+0x18>
        serialEvent();
 23fcc50:	e000      	b.n	23fcc54 <serialEventRun+0x18>
 23fcc52:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fcc54:	4b0a      	ldr	r3, [pc, #40]	; (23fcc80 <serialEventRun+0x44>)
 23fcc56:	b143      	cbz	r3, 23fcc6a <serialEventRun+0x2e>
 23fcc58:	f000 f97c 	bl	23fcf54 <_Z22__fetch_global_Serial1v>
 23fcc5c:	6803      	ldr	r3, [r0, #0]
 23fcc5e:	691b      	ldr	r3, [r3, #16]
 23fcc60:	4798      	blx	r3
 23fcc62:	2800      	cmp	r0, #0
 23fcc64:	dd01      	ble.n	23fcc6a <serialEventRun+0x2e>
        serialEvent1();
 23fcc66:	e000      	b.n	23fcc6a <serialEventRun+0x2e>
 23fcc68:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fcc6a:	4b06      	ldr	r3, [pc, #24]	; (23fcc84 <serialEventRun+0x48>)
 23fcc6c:	b10b      	cbz	r3, 23fcc72 <serialEventRun+0x36>
 23fcc6e:	f000 f9b7 	bl	23fcfe0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fcc72:	4b05      	ldr	r3, [pc, #20]	; (23fcc88 <serialEventRun+0x4c>)
 23fcc74:	b10b      	cbz	r3, 23fcc7a <serialEventRun+0x3e>
 23fcc76:	f000 f9e9 	bl	23fd04c <_Z15serialEventRun3v>
}
 23fcc7a:	bd08      	pop	{r3, pc}
	...

023fcc8c <_post_loop>:
{
 23fcc8c:	b508      	push	{r3, lr}
	serialEventRun();
 23fcc8e:	f7ff ffd5 	bl	23fcc3c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fcc92:	f7fe fef7 	bl	23fba84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fcc96:	4b01      	ldr	r3, [pc, #4]	; (23fcc9c <_post_loop+0x10>)
 23fcc98:	6018      	str	r0, [r3, #0]
}
 23fcc9a:	bd08      	pop	{r3, pc}
 23fcc9c:	1007aef0 	.word	0x1007aef0

023fcca0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcca0:	4805      	ldr	r0, [pc, #20]	; (23fccb8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fcca2:	4a06      	ldr	r2, [pc, #24]	; (23fccbc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fcca4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fcca6:	1a12      	subs	r2, r2, r0
 23fcca8:	4905      	ldr	r1, [pc, #20]	; (23fccc0 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fccaa:	f000 f9eb 	bl	23fd084 <memcpy>
    __backup_sram_signature = signature;
 23fccae:	4b05      	ldr	r3, [pc, #20]	; (23fccc4 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fccb0:	4a05      	ldr	r2, [pc, #20]	; (23fccc8 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fccb2:	601a      	str	r2, [r3, #0]
}
 23fccb4:	bd08      	pop	{r3, pc}
 23fccb6:	bf00      	nop
 23fccb8:	1007b400 	.word	0x1007b400
 23fccbc:	1007b404 	.word	0x1007b404
 23fccc0:	085ff538 	.word	0x085ff538
 23fccc4:	1007b400 	.word	0x1007b400
 23fccc8:	9a271c1e 	.word	0x9a271c1e

023fcccc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcccc:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fccce:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fccd0:	461a      	mov	r2, r3
 23fccd2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fccd6:	9300      	str	r3, [sp, #0]
 23fccd8:	f7ff f958 	bl	23fbf8c <system_ctrl_set_result>
}
 23fccdc:	b003      	add	sp, #12
 23fccde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fcce4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fcce4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fcce6:	8843      	ldrh	r3, [r0, #2]
 23fcce8:	2b0a      	cmp	r3, #10
 23fccea:	d008      	beq.n	23fccfe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fccec:	2b50      	cmp	r3, #80	; 0x50
 23fccee:	d10b      	bne.n	23fcd08 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fccf0:	4b09      	ldr	r3, [pc, #36]	; (23fcd18 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fccf2:	681b      	ldr	r3, [r3, #0]
 23fccf4:	b14b      	cbz	r3, 23fcd0a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fccf6:	b003      	add	sp, #12
 23fccf8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fccfc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fccfe:	f7ff ffe5 	bl	23fcccc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fcd02:	b003      	add	sp, #12
 23fcd04:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fcd08:	2300      	movs	r3, #0
 23fcd0a:	461a      	mov	r2, r3
 23fcd0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fcd10:	9300      	str	r3, [sp, #0]
 23fcd12:	f7ff f93b 	bl	23fbf8c <system_ctrl_set_result>
}
 23fcd16:	e7f4      	b.n	23fcd02 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fcd18:	1007aeec 	.word	0x1007aeec

023fcd1c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcd1c:	2100      	movs	r1, #0
{
 23fcd1e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fcd20:	4811      	ldr	r0, [pc, #68]	; (23fcd68 <module_user_init_hook+0x4c>)
 23fcd22:	f7ff fa3d 	bl	23fc1a0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fcd26:	4b11      	ldr	r3, [pc, #68]	; (23fcd6c <module_user_init_hook+0x50>)
 23fcd28:	681a      	ldr	r2, [r3, #0]
 23fcd2a:	4b11      	ldr	r3, [pc, #68]	; (23fcd70 <module_user_init_hook+0x54>)
 23fcd2c:	429a      	cmp	r2, r3
 23fcd2e:	bf0c      	ite	eq
 23fcd30:	2201      	moveq	r2, #1
 23fcd32:	2200      	movne	r2, #0
 23fcd34:	4b0f      	ldr	r3, [pc, #60]	; (23fcd74 <module_user_init_hook+0x58>)
 23fcd36:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fcd38:	d001      	beq.n	23fcd3e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fcd3a:	f7ff ffb1 	bl	23fcca0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fcd3e:	f7fe fe93 	bl	23fba68 <HAL_RNG_GetRandomNumber>
 23fcd42:	4604      	mov	r4, r0
    srand(seed);
 23fcd44:	f000 f9b4 	bl	23fd0b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fcd48:	4b0b      	ldr	r3, [pc, #44]	; (23fcd78 <module_user_init_hook+0x5c>)
 23fcd4a:	b113      	cbz	r3, 23fcd52 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fcd4c:	4620      	mov	r0, r4
 23fcd4e:	e000      	b.n	23fcd52 <module_user_init_hook+0x36>
 23fcd50:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fcd52:	2100      	movs	r1, #0
 23fcd54:	4808      	ldr	r0, [pc, #32]	; (23fcd78 <module_user_init_hook+0x5c>)
 23fcd56:	f7ff f927 	bl	23fbfa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fcd5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fcd5e:	2100      	movs	r1, #0
 23fcd60:	4806      	ldr	r0, [pc, #24]	; (23fcd7c <module_user_init_hook+0x60>)
 23fcd62:	f7ff b905 	b.w	23fbf70 <system_ctrl_set_app_request_handler>
 23fcd66:	bf00      	nop
 23fcd68:	023fcc31 	.word	0x023fcc31
 23fcd6c:	1007b400 	.word	0x1007b400
 23fcd70:	9a271c1e 	.word	0x9a271c1e
 23fcd74:	1007aee8 	.word	0x1007aee8
 23fcd78:	00000000 	.word	0x00000000
 23fcd7c:	023fcce5 	.word	0x023fcce5

023fcd80 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fcd80:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fcd82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fcd84:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fcd86:	d902      	bls.n	23fcd8e <pinAvailable+0xe>
    return false;
 23fcd88:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fcd8a:	b003      	add	sp, #12
 23fcd8c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fcd8e:	f1a0 030f 	sub.w	r3, r0, #15
 23fcd92:	2b02      	cmp	r3, #2
 23fcd94:	d90b      	bls.n	23fcdae <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fcd96:	2801      	cmp	r0, #1
 23fcd98:	d821      	bhi.n	23fcdde <pinAvailable+0x5e>
 23fcd9a:	f000 f887 	bl	23fceac <_Z19__fetch_global_Wirev>
 23fcd9e:	2100      	movs	r1, #0
 23fcda0:	7c00      	ldrb	r0, [r0, #16]
 23fcda2:	f7fe ff25 	bl	23fbbf0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fcda6:	f080 0001 	eor.w	r0, r0, #1
 23fcdaa:	b2c0      	uxtb	r0, r0
 23fcdac:	e7ed      	b.n	23fcd8a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fcdae:	4d11      	ldr	r5, [pc, #68]	; (23fcdf4 <pinAvailable+0x74>)
 23fcdb0:	e8d5 1f8f 	ldab	r1, [r5]
 23fcdb4:	f011 0101 	ands.w	r1, r1, #1
 23fcdb8:	d10b      	bne.n	23fcdd2 <pinAvailable+0x52>
 23fcdba:	4628      	mov	r0, r5
 23fcdbc:	9101      	str	r1, [sp, #4]
 23fcdbe:	f7fd ff3c 	bl	23fac3a <__cxa_guard_acquire>
 23fcdc2:	9901      	ldr	r1, [sp, #4]
 23fcdc4:	b128      	cbz	r0, 23fcdd2 <pinAvailable+0x52>
 23fcdc6:	480c      	ldr	r0, [pc, #48]	; (23fcdf8 <pinAvailable+0x78>)
 23fcdc8:	f7ff fc94 	bl	23fc6f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fcdcc:	4628      	mov	r0, r5
 23fcdce:	f7fd ff39 	bl	23fac44 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fcdd2:	4b09      	ldr	r3, [pc, #36]	; (23fcdf8 <pinAvailable+0x78>)
 23fcdd4:	7818      	ldrb	r0, [r3, #0]
 23fcdd6:	f7fe ff89 	bl	23fbcec <hal_spi_is_enabled>
 23fcdda:	2800      	cmp	r0, #0
 23fcddc:	d1d4      	bne.n	23fcd88 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fcdde:	3c08      	subs	r4, #8
 23fcde0:	2c01      	cmp	r4, #1
 23fcde2:	d805      	bhi.n	23fcdf0 <pinAvailable+0x70>
 23fcde4:	f000 f8b6 	bl	23fcf54 <_Z22__fetch_global_Serial1v>
 23fcde8:	7c00      	ldrb	r0, [r0, #16]
 23fcdea:	f7ff f80b 	bl	23fbe04 <hal_usart_is_enabled>
 23fcdee:	e7da      	b.n	23fcda6 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fcdf0:	2001      	movs	r0, #1
 23fcdf2:	e7ca      	b.n	23fcd8a <pinAvailable+0xa>
 23fcdf4:	1007ae80 	.word	0x1007ae80
 23fcdf8:	1007ae84 	.word	0x1007ae84

023fcdfc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fcdfc:	281b      	cmp	r0, #27
{
 23fcdfe:	b538      	push	{r3, r4, r5, lr}
 23fce00:	4604      	mov	r4, r0
 23fce02:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fce04:	d80a      	bhi.n	23fce1c <pinMode+0x20>
 23fce06:	29ff      	cmp	r1, #255	; 0xff
 23fce08:	d008      	beq.n	23fce1c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fce0a:	f7ff ffb9 	bl	23fcd80 <pinAvailable>
 23fce0e:	b128      	cbz	r0, 23fce1c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fce10:	4629      	mov	r1, r5
 23fce12:	4620      	mov	r0, r4
}
 23fce14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fce18:	f7fe be42 	b.w	23fbaa0 <hal_gpio_mode>
}
 23fce1c:	bd38      	pop	{r3, r4, r5, pc}

023fce1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fce1e:	b538      	push	{r3, r4, r5, lr}
 23fce20:	4604      	mov	r4, r0
 23fce22:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fce24:	f7fe fe4a 	bl	23fbabc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fce28:	28ff      	cmp	r0, #255	; 0xff
 23fce2a:	d010      	beq.n	23fce4e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fce2c:	2806      	cmp	r0, #6
 23fce2e:	d804      	bhi.n	23fce3a <digitalWrite+0x1c>
 23fce30:	234d      	movs	r3, #77	; 0x4d
 23fce32:	fa23 f000 	lsr.w	r0, r3, r0
 23fce36:	07c3      	lsls	r3, r0, #31
 23fce38:	d409      	bmi.n	23fce4e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fce3a:	4620      	mov	r0, r4
 23fce3c:	f7ff ffa0 	bl	23fcd80 <pinAvailable>
 23fce40:	b128      	cbz	r0, 23fce4e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fce42:	4629      	mov	r1, r5
 23fce44:	4620      	mov	r0, r4
}
 23fce46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fce4a:	f7fe be45 	b.w	23fbad8 <hal_gpio_write>
}
 23fce4e:	bd38      	pop	{r3, r4, r5, pc}

023fce50 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23fce50:	b510      	push	{r4, lr}
 23fce52:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23fce54:	f7fe fe32 	bl	23fbabc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23fce58:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23fce5a:	b2db      	uxtb	r3, r3
 23fce5c:	2b01      	cmp	r3, #1
 23fce5e:	d908      	bls.n	23fce72 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23fce60:	4620      	mov	r0, r4
 23fce62:	f7ff ff8d 	bl	23fcd80 <pinAvailable>
 23fce66:	b120      	cbz	r0, 23fce72 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23fce68:	4620      	mov	r0, r4
}
 23fce6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23fce6e:	f7fe be41 	b.w	23fbaf4 <hal_gpio_read>
}
 23fce72:	2000      	movs	r0, #0
 23fce74:	bd10      	pop	{r4, pc}

023fce76 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fce76:	4770      	bx	lr

023fce78 <_Z17acquireWireBufferv>:
{
 23fce78:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fce7a:	4b0a      	ldr	r3, [pc, #40]	; (23fcea4 <_Z17acquireWireBufferv+0x2c>)
{
 23fce7c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fce7e:	6003      	str	r3, [r0, #0]
 23fce80:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fce82:	4909      	ldr	r1, [pc, #36]	; (23fcea8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fce84:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fce86:	2020      	movs	r0, #32
 23fce88:	f000 f8f4 	bl	23fd074 <_ZnajRKSt9nothrow_t>
	};
 23fce8c:	2520      	movs	r5, #32
 23fce8e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fce90:	4905      	ldr	r1, [pc, #20]	; (23fcea8 <_Z17acquireWireBufferv+0x30>)
 23fce92:	4628      	mov	r0, r5
	};
 23fce94:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fce96:	f000 f8ed 	bl	23fd074 <_ZnajRKSt9nothrow_t>
	};
 23fce9a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fce9e:	4620      	mov	r0, r4
 23fcea0:	bd38      	pop	{r3, r4, r5, pc}
 23fcea2:	bf00      	nop
 23fcea4:	00010018 	.word	0x00010018
 23fcea8:	023fff58 	.word	0x023fff58

023fceac <_Z19__fetch_global_Wirev>:
{
 23fceac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fceae:	4d0e      	ldr	r5, [pc, #56]	; (23fcee8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fceb0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fceb2:	e8d5 1f8f 	ldab	r1, [r5]
 23fceb6:	f011 0401 	ands.w	r4, r1, #1
 23fceba:	d111      	bne.n	23fcee0 <_Z19__fetch_global_Wirev+0x34>
 23fcebc:	4628      	mov	r0, r5
 23fcebe:	f7fd febc 	bl	23fac3a <__cxa_guard_acquire>
 23fcec2:	b168      	cbz	r0, 23fcee0 <_Z19__fetch_global_Wirev+0x34>
 23fcec4:	4668      	mov	r0, sp
 23fcec6:	f7ff ffd7 	bl	23fce78 <_Z17acquireWireBufferv>
 23fceca:	466a      	mov	r2, sp
 23fcecc:	4621      	mov	r1, r4
 23fcece:	4807      	ldr	r0, [pc, #28]	; (23fceec <_Z19__fetch_global_Wirev+0x40>)
 23fced0:	f7ff f9ea 	bl	23fc2a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fced4:	4628      	mov	r0, r5
 23fced6:	f7fd feb5 	bl	23fac44 <__cxa_guard_release>
 23fceda:	4805      	ldr	r0, [pc, #20]	; (23fcef0 <_Z19__fetch_global_Wirev+0x44>)
 23fcedc:	f000 f8cc 	bl	23fd078 <atexit>
	return wire;
}
 23fcee0:	4802      	ldr	r0, [pc, #8]	; (23fceec <_Z19__fetch_global_Wirev+0x40>)
 23fcee2:	b007      	add	sp, #28
 23fcee4:	bd30      	pop	{r4, r5, pc}
 23fcee6:	bf00      	nop
 23fcee8:	1007aef4 	.word	0x1007aef4
 23fceec:	1007aef8 	.word	0x1007aef8
 23fcef0:	023fce77 	.word	0x023fce77

023fcef4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fcef4:	4770      	bx	lr
	...

023fcef8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fcef8:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fcefa:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fcefc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fcefe:	462a      	mov	r2, r5
 23fcf00:	2100      	movs	r1, #0
 23fcf02:	f000 f8cc 	bl	23fd09e <memset>
 23fcf06:	8025      	strh	r5, [r4, #0]
 23fcf08:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcf0a:	4907      	ldr	r1, [pc, #28]	; (23fcf28 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fcf0c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fcf0e:	8125      	strh	r5, [r4, #8]
 23fcf10:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcf12:	f000 f8af 	bl	23fd074 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcf16:	4904      	ldr	r1, [pc, #16]	; (23fcf28 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fcf18:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fcf1a:	4628      	mov	r0, r5
 23fcf1c:	f000 f8aa 	bl	23fd074 <_ZnajRKSt9nothrow_t>
    };
 23fcf20:	60e0      	str	r0, [r4, #12]
}
 23fcf22:	4620      	mov	r0, r4
 23fcf24:	bd38      	pop	{r3, r4, r5, pc}
 23fcf26:	bf00      	nop
 23fcf28:	023fff58 	.word	0x023fff58

023fcf2c <__tcf_2>:
 23fcf2c:	4770      	bx	lr

023fcf2e <__tcf_1>:
 23fcf2e:	4770      	bx	lr

023fcf30 <_Z20acquireSerial1Bufferv>:
{
 23fcf30:	b510      	push	{r4, lr}
 23fcf32:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fcf34:	f7ff ffe0 	bl	23fcef8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fcf38:	4620      	mov	r0, r4
 23fcf3a:	bd10      	pop	{r4, pc}

023fcf3c <_Z20acquireSerial2Bufferv>:
 23fcf3c:	b510      	push	{r4, lr}
 23fcf3e:	4604      	mov	r4, r0
 23fcf40:	f7ff ffda 	bl	23fcef8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fcf44:	4620      	mov	r0, r4
 23fcf46:	bd10      	pop	{r4, pc}

023fcf48 <_Z20acquireSerial3Bufferv>:
 23fcf48:	b510      	push	{r4, lr}
 23fcf4a:	4604      	mov	r4, r0
 23fcf4c:	f7ff ffd4 	bl	23fcef8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fcf50:	4620      	mov	r0, r4
 23fcf52:	bd10      	pop	{r4, pc}

023fcf54 <_Z22__fetch_global_Serial1v>:
{
 23fcf54:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fcf56:	4d0e      	ldr	r5, [pc, #56]	; (23fcf90 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fcf58:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fcf5a:	e8d5 1f8f 	ldab	r1, [r5]
 23fcf5e:	f011 0401 	ands.w	r4, r1, #1
 23fcf62:	d111      	bne.n	23fcf88 <_Z22__fetch_global_Serial1v+0x34>
 23fcf64:	4628      	mov	r0, r5
 23fcf66:	f7fd fe68 	bl	23fac3a <__cxa_guard_acquire>
 23fcf6a:	b168      	cbz	r0, 23fcf88 <_Z22__fetch_global_Serial1v+0x34>
 23fcf6c:	a801      	add	r0, sp, #4
 23fcf6e:	f7ff ffdf 	bl	23fcf30 <_Z20acquireSerial1Bufferv>
 23fcf72:	4621      	mov	r1, r4
 23fcf74:	aa01      	add	r2, sp, #4
 23fcf76:	4807      	ldr	r0, [pc, #28]	; (23fcf94 <_Z22__fetch_global_Serial1v+0x40>)
 23fcf78:	f7ff fd82 	bl	23fca80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fcf7c:	4628      	mov	r0, r5
 23fcf7e:	f7fd fe61 	bl	23fac44 <__cxa_guard_release>
 23fcf82:	4805      	ldr	r0, [pc, #20]	; (23fcf98 <_Z22__fetch_global_Serial1v+0x44>)
 23fcf84:	f000 f878 	bl	23fd078 <atexit>
    return serial1;
}
 23fcf88:	4802      	ldr	r0, [pc, #8]	; (23fcf94 <_Z22__fetch_global_Serial1v+0x40>)
 23fcf8a:	b007      	add	sp, #28
 23fcf8c:	bd30      	pop	{r4, r5, pc}
 23fcf8e:	bf00      	nop
 23fcf90:	1007af0c 	.word	0x1007af0c
 23fcf94:	1007af18 	.word	0x1007af18
 23fcf98:	023fcef5 	.word	0x023fcef5

023fcf9c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fcf9c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fcf9e:	4c0d      	ldr	r4, [pc, #52]	; (23fcfd4 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fcfa0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fcfa2:	e8d4 3f8f 	ldab	r3, [r4]
 23fcfa6:	07db      	lsls	r3, r3, #31
 23fcfa8:	d411      	bmi.n	23fcfce <_Z22__fetch_global_Serial2v+0x32>
 23fcfaa:	4620      	mov	r0, r4
 23fcfac:	f7fd fe45 	bl	23fac3a <__cxa_guard_acquire>
 23fcfb0:	b168      	cbz	r0, 23fcfce <_Z22__fetch_global_Serial2v+0x32>
 23fcfb2:	a801      	add	r0, sp, #4
 23fcfb4:	f7ff ffc2 	bl	23fcf3c <_Z20acquireSerial2Bufferv>
 23fcfb8:	2101      	movs	r1, #1
 23fcfba:	aa01      	add	r2, sp, #4
 23fcfbc:	4806      	ldr	r0, [pc, #24]	; (23fcfd8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fcfbe:	f7ff fd5f 	bl	23fca80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fcfc2:	4620      	mov	r0, r4
 23fcfc4:	f7fd fe3e 	bl	23fac44 <__cxa_guard_release>
 23fcfc8:	4804      	ldr	r0, [pc, #16]	; (23fcfdc <_Z22__fetch_global_Serial2v+0x40>)
 23fcfca:	f000 f855 	bl	23fd078 <atexit>
	return serial2;
}
 23fcfce:	4802      	ldr	r0, [pc, #8]	; (23fcfd8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fcfd0:	b006      	add	sp, #24
 23fcfd2:	bd10      	pop	{r4, pc}
 23fcfd4:	1007af10 	.word	0x1007af10
 23fcfd8:	1007af2c 	.word	0x1007af2c
 23fcfdc:	023fcf2f 	.word	0x023fcf2f

023fcfe0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fcfe0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fcfe2:	f7ff ffdb 	bl	23fcf9c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fcfe6:	4b07      	ldr	r3, [pc, #28]	; (23fd004 <_Z15serialEventRun2v+0x24>)
 23fcfe8:	4604      	mov	r4, r0
 23fcfea:	b153      	cbz	r3, 23fd002 <_Z15serialEventRun2v+0x22>
 23fcfec:	f7ff fd5c 	bl	23fcaa8 <_ZN11USARTSerial9isEnabledEv>
 23fcff0:	b138      	cbz	r0, 23fd002 <_Z15serialEventRun2v+0x22>
 23fcff2:	6823      	ldr	r3, [r4, #0]
 23fcff4:	4620      	mov	r0, r4
 23fcff6:	691b      	ldr	r3, [r3, #16]
 23fcff8:	4798      	blx	r3
 23fcffa:	2800      	cmp	r0, #0
 23fcffc:	dd01      	ble.n	23fd002 <_Z15serialEventRun2v+0x22>
        handler();
 23fcffe:	e000      	b.n	23fd002 <_Z15serialEventRun2v+0x22>
 23fd000:	bf00      	nop
}
 23fd002:	bd10      	pop	{r4, pc}
 23fd004:	00000000 	.word	0x00000000

023fd008 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fd008:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fd00a:	4c0d      	ldr	r4, [pc, #52]	; (23fd040 <_Z22__fetch_global_Serial3v+0x38>)
{
 23fd00c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fd00e:	e8d4 3f8f 	ldab	r3, [r4]
 23fd012:	07db      	lsls	r3, r3, #31
 23fd014:	d411      	bmi.n	23fd03a <_Z22__fetch_global_Serial3v+0x32>
 23fd016:	4620      	mov	r0, r4
 23fd018:	f7fd fe0f 	bl	23fac3a <__cxa_guard_acquire>
 23fd01c:	b168      	cbz	r0, 23fd03a <_Z22__fetch_global_Serial3v+0x32>
 23fd01e:	a801      	add	r0, sp, #4
 23fd020:	f7ff ff92 	bl	23fcf48 <_Z20acquireSerial3Bufferv>
 23fd024:	2102      	movs	r1, #2
 23fd026:	aa01      	add	r2, sp, #4
 23fd028:	4806      	ldr	r0, [pc, #24]	; (23fd044 <_Z22__fetch_global_Serial3v+0x3c>)
 23fd02a:	f7ff fd29 	bl	23fca80 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fd02e:	4620      	mov	r0, r4
 23fd030:	f7fd fe08 	bl	23fac44 <__cxa_guard_release>
 23fd034:	4804      	ldr	r0, [pc, #16]	; (23fd048 <_Z22__fetch_global_Serial3v+0x40>)
 23fd036:	f000 f81f 	bl	23fd078 <atexit>
	return serial3;
}
 23fd03a:	4802      	ldr	r0, [pc, #8]	; (23fd044 <_Z22__fetch_global_Serial3v+0x3c>)
 23fd03c:	b006      	add	sp, #24
 23fd03e:	bd10      	pop	{r4, pc}
 23fd040:	1007af14 	.word	0x1007af14
 23fd044:	1007af40 	.word	0x1007af40
 23fd048:	023fcf2d 	.word	0x023fcf2d

023fd04c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fd04c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fd04e:	f7ff ffdb 	bl	23fd008 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fd052:	4b07      	ldr	r3, [pc, #28]	; (23fd070 <_Z15serialEventRun3v+0x24>)
 23fd054:	4604      	mov	r4, r0
 23fd056:	b153      	cbz	r3, 23fd06e <_Z15serialEventRun3v+0x22>
 23fd058:	f7ff fd26 	bl	23fcaa8 <_ZN11USARTSerial9isEnabledEv>
 23fd05c:	b138      	cbz	r0, 23fd06e <_Z15serialEventRun3v+0x22>
 23fd05e:	6823      	ldr	r3, [r4, #0]
 23fd060:	4620      	mov	r0, r4
 23fd062:	691b      	ldr	r3, [r3, #16]
 23fd064:	4798      	blx	r3
 23fd066:	2800      	cmp	r0, #0
 23fd068:	dd01      	ble.n	23fd06e <_Z15serialEventRun3v+0x22>
        handler();
 23fd06a:	e000      	b.n	23fd06e <_Z15serialEventRun3v+0x22>
 23fd06c:	bf00      	nop
}
 23fd06e:	bd10      	pop	{r4, pc}
 23fd070:	00000000 	.word	0x00000000

023fd074 <_ZnajRKSt9nothrow_t>:
 23fd074:	f7fd bddd 	b.w	23fac32 <_Znaj>

023fd078 <atexit>:
 23fd078:	2300      	movs	r3, #0
 23fd07a:	4601      	mov	r1, r0
 23fd07c:	461a      	mov	r2, r3
 23fd07e:	4618      	mov	r0, r3
 23fd080:	f000 b860 	b.w	23fd144 <__register_exitproc>

023fd084 <memcpy>:
 23fd084:	440a      	add	r2, r1
 23fd086:	1e43      	subs	r3, r0, #1
 23fd088:	4291      	cmp	r1, r2
 23fd08a:	d100      	bne.n	23fd08e <memcpy+0xa>
 23fd08c:	4770      	bx	lr
 23fd08e:	b510      	push	{r4, lr}
 23fd090:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fd094:	4291      	cmp	r1, r2
 23fd096:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fd09a:	d1f9      	bne.n	23fd090 <memcpy+0xc>
 23fd09c:	bd10      	pop	{r4, pc}

023fd09e <memset>:
 23fd09e:	4402      	add	r2, r0
 23fd0a0:	4603      	mov	r3, r0
 23fd0a2:	4293      	cmp	r3, r2
 23fd0a4:	d100      	bne.n	23fd0a8 <memset+0xa>
 23fd0a6:	4770      	bx	lr
 23fd0a8:	f803 1b01 	strb.w	r1, [r3], #1
 23fd0ac:	e7f9      	b.n	23fd0a2 <memset+0x4>
	...

023fd0b0 <srand>:
 23fd0b0:	b538      	push	{r3, r4, r5, lr}
 23fd0b2:	4b10      	ldr	r3, [pc, #64]	; (23fd0f4 <srand+0x44>)
 23fd0b4:	4604      	mov	r4, r0
 23fd0b6:	681d      	ldr	r5, [r3, #0]
 23fd0b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd0ba:	b9b3      	cbnz	r3, 23fd0ea <srand+0x3a>
 23fd0bc:	2018      	movs	r0, #24
 23fd0be:	f7ff f829 	bl	23fc114 <malloc>
 23fd0c2:	4602      	mov	r2, r0
 23fd0c4:	63a8      	str	r0, [r5, #56]	; 0x38
 23fd0c6:	b920      	cbnz	r0, 23fd0d2 <srand+0x22>
 23fd0c8:	4b0b      	ldr	r3, [pc, #44]	; (23fd0f8 <srand+0x48>)
 23fd0ca:	2142      	movs	r1, #66	; 0x42
 23fd0cc:	480b      	ldr	r0, [pc, #44]	; (23fd0fc <srand+0x4c>)
 23fd0ce:	f7ff f859 	bl	23fc184 <__assert_func>
 23fd0d2:	490b      	ldr	r1, [pc, #44]	; (23fd100 <srand+0x50>)
 23fd0d4:	4b0b      	ldr	r3, [pc, #44]	; (23fd104 <srand+0x54>)
 23fd0d6:	e9c0 1300 	strd	r1, r3, [r0]
 23fd0da:	4b0b      	ldr	r3, [pc, #44]	; (23fd108 <srand+0x58>)
 23fd0dc:	2100      	movs	r1, #0
 23fd0de:	6083      	str	r3, [r0, #8]
 23fd0e0:	230b      	movs	r3, #11
 23fd0e2:	8183      	strh	r3, [r0, #12]
 23fd0e4:	2001      	movs	r0, #1
 23fd0e6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fd0ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fd0ec:	2200      	movs	r2, #0
 23fd0ee:	611c      	str	r4, [r3, #16]
 23fd0f0:	615a      	str	r2, [r3, #20]
 23fd0f2:	bd38      	pop	{r3, r4, r5, pc}
 23fd0f4:	10078234 	.word	0x10078234
 23fd0f8:	023fff59 	.word	0x023fff59
 23fd0fc:	023fff70 	.word	0x023fff70
 23fd100:	abcd330e 	.word	0xabcd330e
 23fd104:	e66d1234 	.word	0xe66d1234
 23fd108:	0005deec 	.word	0x0005deec

023fd10c <strcpy>:
 23fd10c:	4603      	mov	r3, r0
 23fd10e:	f811 2b01 	ldrb.w	r2, [r1], #1
 23fd112:	f803 2b01 	strb.w	r2, [r3], #1
 23fd116:	2a00      	cmp	r2, #0
 23fd118:	d1f9      	bne.n	23fd10e <strcpy+0x2>
 23fd11a:	4770      	bx	lr

023fd11c <strncmp>:
 23fd11c:	b510      	push	{r4, lr}
 23fd11e:	b17a      	cbz	r2, 23fd140 <strncmp+0x24>
 23fd120:	4603      	mov	r3, r0
 23fd122:	3901      	subs	r1, #1
 23fd124:	1884      	adds	r4, r0, r2
 23fd126:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fd12a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23fd12e:	4290      	cmp	r0, r2
 23fd130:	d101      	bne.n	23fd136 <strncmp+0x1a>
 23fd132:	42a3      	cmp	r3, r4
 23fd134:	d101      	bne.n	23fd13a <strncmp+0x1e>
 23fd136:	1a80      	subs	r0, r0, r2
 23fd138:	bd10      	pop	{r4, pc}
 23fd13a:	2800      	cmp	r0, #0
 23fd13c:	d1f3      	bne.n	23fd126 <strncmp+0xa>
 23fd13e:	e7fa      	b.n	23fd136 <strncmp+0x1a>
 23fd140:	4610      	mov	r0, r2
 23fd142:	e7f9      	b.n	23fd138 <strncmp+0x1c>

023fd144 <__register_exitproc>:
 23fd144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fd148:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fd208 <__register_exitproc+0xc4>
 23fd14c:	4606      	mov	r6, r0
 23fd14e:	461f      	mov	r7, r3
 23fd150:	460d      	mov	r5, r1
 23fd152:	f8d8 0000 	ldr.w	r0, [r8]
 23fd156:	4691      	mov	r9, r2
 23fd158:	f000 f858 	bl	23fd20c <__retarget_lock_acquire_recursive>
 23fd15c:	4b26      	ldr	r3, [pc, #152]	; (23fd1f8 <__register_exitproc+0xb4>)
 23fd15e:	681c      	ldr	r4, [r3, #0]
 23fd160:	b934      	cbnz	r4, 23fd170 <__register_exitproc+0x2c>
 23fd162:	4c26      	ldr	r4, [pc, #152]	; (23fd1fc <__register_exitproc+0xb8>)
 23fd164:	601c      	str	r4, [r3, #0]
 23fd166:	4b26      	ldr	r3, [pc, #152]	; (23fd200 <__register_exitproc+0xbc>)
 23fd168:	b113      	cbz	r3, 23fd170 <__register_exitproc+0x2c>
 23fd16a:	681b      	ldr	r3, [r3, #0]
 23fd16c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fd170:	6863      	ldr	r3, [r4, #4]
 23fd172:	2b1f      	cmp	r3, #31
 23fd174:	dd07      	ble.n	23fd186 <__register_exitproc+0x42>
 23fd176:	f8d8 0000 	ldr.w	r0, [r8]
 23fd17a:	f000 f849 	bl	23fd210 <__retarget_lock_release_recursive>
 23fd17e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fd182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fd186:	b35e      	cbz	r6, 23fd1e0 <__register_exitproc+0x9c>
 23fd188:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fd18c:	b988      	cbnz	r0, 23fd1b2 <__register_exitproc+0x6e>
 23fd18e:	4b1d      	ldr	r3, [pc, #116]	; (23fd204 <__register_exitproc+0xc0>)
 23fd190:	b923      	cbnz	r3, 23fd19c <__register_exitproc+0x58>
 23fd192:	f8d8 0000 	ldr.w	r0, [r8]
 23fd196:	f000 f83a 	bl	23fd20e <__retarget_lock_release>
 23fd19a:	e7f0      	b.n	23fd17e <__register_exitproc+0x3a>
 23fd19c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fd1a0:	f7fe ffb8 	bl	23fc114 <malloc>
 23fd1a4:	2800      	cmp	r0, #0
 23fd1a6:	d0f4      	beq.n	23fd192 <__register_exitproc+0x4e>
 23fd1a8:	2300      	movs	r3, #0
 23fd1aa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fd1ae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fd1b2:	6863      	ldr	r3, [r4, #4]
 23fd1b4:	2201      	movs	r2, #1
 23fd1b6:	2e02      	cmp	r6, #2
 23fd1b8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fd1bc:	fa02 f203 	lsl.w	r2, r2, r3
 23fd1c0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fd1c4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fd1c8:	ea43 0302 	orr.w	r3, r3, r2
 23fd1cc:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fd1d0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fd1d4:	bf02      	ittt	eq
 23fd1d6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fd1da:	4313      	orreq	r3, r2
 23fd1dc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fd1e0:	6863      	ldr	r3, [r4, #4]
 23fd1e2:	f8d8 0000 	ldr.w	r0, [r8]
 23fd1e6:	1c5a      	adds	r2, r3, #1
 23fd1e8:	3302      	adds	r3, #2
 23fd1ea:	6062      	str	r2, [r4, #4]
 23fd1ec:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fd1f0:	f000 f80e 	bl	23fd210 <__retarget_lock_release_recursive>
 23fd1f4:	2000      	movs	r0, #0
 23fd1f6:	e7c4      	b.n	23fd182 <__register_exitproc+0x3e>
 23fd1f8:	1007afe0 	.word	0x1007afe0
 23fd1fc:	1007af54 	.word	0x1007af54
 23fd200:	00000000 	.word	0x00000000
 23fd204:	023fc115 	.word	0x023fc115
 23fd208:	10078298 	.word	0x10078298

023fd20c <__retarget_lock_acquire_recursive>:
 23fd20c:	4770      	bx	lr

023fd20e <__retarget_lock_release>:
 23fd20e:	4770      	bx	lr

023fd210 <__retarget_lock_release_recursive>:
 23fd210:	4770      	bx	lr
	...

023fd214 <dynalib_user>:
 23fd214:	abf9 023f ac21 023f ac25 023f 0000 0000     ..?.!.?.%.?.....
 23fd224:	2e33 3235 6e69 6863 6520 702d 7061 7265     3.52inch e-paper
 23fd234:	7420 7365 0d74 200a 6500 502d 7061 7265      test.. .e-Paper
 23fd244:	4320 656c 7261 0a0d 0020 2d65 6150 6570      Clear.. .e-Pape
 23fd254:	2072 6e69 7469 6620 6961 656c 0064 7453     r init failed.St
 23fd264:	7261 6873 7069 5220 6f6f 006d 614d 7372     arship Room.Mars
 23fd274:	6820 7265 2065 6577 6320 6d6f 0065 3031      here we come.10
 23fd284:	303a 0030 3231 303a 0030 6c45 6e6f 4d00     :00.12:00.Elon.M
 23fd294:	7375 006b 5245 4f52 0052 4f52 4d4f 203a     usk.ERROR.ROOM: 
 23fd2a4:	5400 5449 454c 203a 5400 4d49 3a45 0020     .TITLE: .TIME: .
 23fd2b4:	2d20 0020 5053 4145 454b 3a52 0020 2d65      - .SPEAKER: .e-
 23fd2c4:	6150 6570 2072 7562 7973 0d20 200a 6500     Paper busy .. .e
 23fd2d4:	502d 7061 7265 6220 7375 2079 6572 656c     -Paper busy rele
 23fd2e4:	7361 2065 0a0d 0020                         ase .. .

023fd2ec <_ZL20EPD_3IN52_lut_R20_GC>:
 23fd2ec:	0f01 0f0f 0101 0001 0000 0000 0000 0000     ................
	...

023fd324 <_ZL20EPD_3IN52_lut_R21_GC>:
 23fd324:	4f01 0f8f 0101 0001 0000 0000 0000 0000     .O..............
	...

023fd34e <_ZL20EPD_3IN52_lut_R22_GC>:
 23fd34e:	0f01 0f8f 0101 0001 0000 0000 0000 0000     ................
	...

023fd386 <_ZL20EPD_3IN52_lut_R23_GC>:
 23fd386:	4f01 4f8f 0101 0001 0000 0000 0000 0000     .O.O............
	...

023fd3be <_ZL20EPD_3IN52_lut_R24_GC>:
 23fd3be:	0f01 4f8f 0101 0001 0000 0000 0000 0000     ...O............
	...
 23fd3e6:	0000 6564 6166 6c75 2074 4d00 4253 4c00     ..default .MSB.L
 23fd3f6:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
 23fd406:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
 23fd416:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
 23fd426:	4544 7525 003e                              DE%u>.

023fd42c <_ZTVN8particle11SPISettingsE>:
	...
 23fd434:	b4a1 023f b475 023f b477 023f               ..?.u.?.w.?.

023fd440 <_ZL12Font20_Table>:
	...
 23fd468:	0000 0007 0007 0007 0007 0007 0007 0007     ................
 23fd478:	0002 0002 0000 0000 0007 0007 0000 0000     ................
	...
 23fd494:	e01c e01c e01c 4008 4008 4008 0000 0000     .......@.@.@....
	...
 23fd4b8:	c00c c00c c00c c00c c00c f03f f03f c00c     ..........?.?...
 23fd4c8:	c00c f03f f03f c00c c00c c00c c00c c00c     ..?.?...........
	...
 23fd4e0:	0003 0003 e007 e00f 6018 0018 001f c00f     .........`......
 23fd4f0:	e000 6018 6018 c01f 801f 0003 0003 0003     ...`.`..........
	...
 23fd508:	0000 001c 0022 0022 0022 601c e001 800f     ...."."."..`....
 23fd518:	003c c031 2002 2002 2002 c001 0000 0000     <.1.. . . ......
	...
 23fd534:	0000 e003 e00f 000c 000c 0006 300f f01f     .............0..
 23fd544:	e019 c018 f01f b007 0000 0000 0000 0000     ................
	...
 23fd55c:	8003 8003 8003 0001 0001 0001 0000 0000     ................
	...
 23fd580:	0000 c000 c000 8001 8001 8001 0003 0003     ................
 23fd590:	0003 0003 0003 0003 8001 8001 8001 c000     ................
 23fd5a0:	c000 0000 0000 0000 0000 000c 000c 0006     ................
 23fd5b0:	0006 0006 0003 0003 0003 0003 0003 0003     ................
 23fd5c0:	0006 0006 0006 000c 000c 0000 0000 0000     ................
 23fd5d0:	0000 0003 0003 0003 601b e01f 8007 8007     .........`......
 23fd5e0:	c00f c00c 0000 0000 0000 0000 0000 0000     ................
	...
 23fd5fc:	0000 0003 0003 0003 0003 f03f f03f 0003     ..........?.?...
 23fd60c:	0003 0003 0003 0000 0000 0000 0000 0000     ................
	...
 23fd634:	0000 8003 0003 0003 0006 0006 0004 0000     ................
	...
 23fd654:	0000 e03f e03f 0000 0000 0000 0000 0000     ..?.?...........
	...
 23fd684:	0000 8003 8003 8003 0000 0000 0000 0000     ................
 23fd694:	0000 0000 6000 6000 c000 c000 c000 8001     .....`.`........
 23fd6a4:	8001 0003 0003 0006 0006 000c 000c 000c     ................
 23fd6b4:	0018 0018 0000 0000 0000 0000 0000 800f     ................
 23fd6c4:	c01f c018 6030 6030 6030 6030 6030 6030     ....0`0`0`0`0`0`
 23fd6d4:	6030 c018 c01f 800f 0000 0000 0000 0000     0`..............
 23fd6e4:	0000 0000 0000 0003 001f 001f 0003 0003     ................
 23fd6f4:	0003 0003 0003 0003 0003 0003 e01f e01f     ................
	...
 23fd710:	0000 800f c01f e038 6030 6000 c000 8001     ......8.0`.`....
 23fd720:	0003 0006 000c 0018 e03f e03f 0000 0000     ........?.?.....
	...
 23fd738:	0000 800f c03f e030 6000 e000 c007 c007     ....?.0..`......
 23fd748:	e000 6000 6000 e060 c07f 803f 0000 0000     ...`.``...?.....
	...
 23fd760:	0000 c001 c003 c003 c006 c00c c00c c018     ................
 23fd770:	c030 e03f e03f c000 e003 e003 0000 0000     0.?.?...........
	...
 23fd788:	0000 c01f c01f 0018 0018 801f c01f e018     ................
 23fd798:	6000 6000 6000 e030 c03f 801f 0000 0000     .`.`.`0.?.......
	...
 23fd7b0:	0000 e003 e00f 001e 0018 0038 8037 c03f     ..........8.7.?.
 23fd7c0:	e038 6030 6030 e018 c01f 8007 0000 0000     8.0`0`..........
	...
 23fd7d8:	0000 e03f e03f 6030 6000 c000 c000 c000     ..?.?.0`.`......
 23fd7e8:	8001 8001 8001 0003 0003 0003 0000 0000     ................
	...
 23fd800:	0000 800f c01f e038 6030 e038 c01f c01f     ......8.0`8.....
 23fd810:	e038 6030 6030 e038 c01f 800f 0000 0000     8.0`0`8.........
	...
 23fd828:	0000 000f c01f c038 6030 6030 e038 e01f     ......8.0`0`8...
 23fd838:	600f e000 c000 c003 803f 003e 0000 0000     .`......?.>.....
	...
 23fd858:	0000 8003 8003 8003 0000 0000 0000 8003     ................
 23fd868:	8003 8003 0000 0000 0000 0000 0000 0000     ................
	...
 23fd880:	0000 c001 c001 c001 0000 0000 0000 8003     ................
 23fd890:	0003 0006 0006 0004 0000 0000 0000 0000     ................
 23fd8a0:	0000 0000 0000 3000 f000 c003 0007 001c     .......0........
 23fd8b0:	0078 001c 0007 c003 f000 3000 0000 0000     x..........0....
	...
 23fd8d0:	0000 f07f f07f 0000 0000 f07f f07f 0000     ................
	...
 23fd8f4:	0000 0030 003c 000f 8003 e000 7800 e000     ..0.<........x..
 23fd904:	8003 000f 003c 0030 0000 0000 0000 0000     ....<.0.........
	...
 23fd91c:	800f c01f 6018 6018 6000 c001 8003 0003     .....`.`.`......
 23fd92c:	0000 0000 0007 0007 0000 0000 0000 0000     ................
 23fd93c:	0000 0000 0000 8003 800c 4008 4010 4010     ...........@.@.@
 23fd94c:	c011 4012 4012 4012 c011 0010 0008 4008     ...@.@.@.......@
 23fd95c:	8007 0000 0000 0000 0000 0000 0000 0000     ................
 23fd96c:	801f 801f 8003 c006 c006 c00c 600c e01f     .............`..
 23fd97c:	e01f 3030 7878 7878 0000 0000 0000 0000     ..00xxxx........
	...
 23fd994:	803f c03f 6018 6018 e018 c01f e01f 7018     ?.?..`.`.......p
 23fd9a4:	3018 3018 f03f e03f 0000 0000 0000 0000     .0.0?.?.........
	...
 23fd9bc:	b007 f00f 701c 3038 0030 0030 0030 0030     .....p800.0.0.0.
 23fd9cc:	3038 701c e00f c007 0000 0000 0000 0000     80.p............
	...
 23fd9e4:	807f c07f e030 7030 3030 3030 3030 3030     ....0.0p00000000
 23fd9f4:	7030 e030 c07f 807f 0000 0000 0000 0000     0p0.............
	...
 23fda0c:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
 23fda1c:	3018 3018 f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
 23fda34:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
 23fda44:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
 23fda5c:	b007 f01f 7018 3030 0030 0030 f831 f831     .....p000.0.1.1.
 23fda6c:	3030 3018 f01f c007 0000 0000 0000 0000     00.0............
	...
 23fda84:	f03c f03c 6018 6018 6018 e01f e01f 6018     <.<..`.`.`.....`
 23fda94:	6018 6018 f03c f03c 0000 0000 0000 0000     .`.`<.<.........
	...
 23fdaac:	e01f e01f 0003 0003 0003 0003 0003 0003     ................
 23fdabc:	0003 0003 e01f e01f 0000 0000 0000 0000     ................
	...
 23fdad4:	f803 f803 6000 6000 6000 6000 6030 6030     .....`.`.`.`0`0`
 23fdae4:	6030 e030 c03f 800f 0000 0000 0000 0000     0`0.?...........
	...
 23fdafc:	f83e f83e e018 8019 001b 001f 801d c018     >.>.............
 23fdb0c:	c018 6018 783e 383e 0000 0000 0000 0000     ...`>x>8........
	...
 23fdb24:	003f 003f 000c 000c 000c 000c 000c 300c     ?.?............0
 23fdb34:	300c 300c f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
 23fdb4c:	7878 7878 7038 f03c b034 b037 b037 3033     xxxx8p<.4.7.7.30
 23fdb5c:	3033 3030 f87c f87c 0000 0000 0000 0000     3000|.|.........
	...
 23fdb74:	f039 f03d 601c 601e 601e 601b 601b e019     9.=..`.`.`.`.`..
 23fdb84:	e019 e018 e03e 603e 0000 0000 0000 0000     ....>.>`........
	...
 23fdb9c:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
 23fdbac:	7038 e01c c00f 8007 0000 0000 0000 0000     8p..............
	...
 23fdbc4:	c03f e03f 7018 3018 3018 7018 e01f c01f     ?.?..p.0.0.p....
 23fdbd4:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
 23fdbec:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
 23fdbfc:	7038 e01c c00f 8007 b007 f00f e00c 0000     8p..............
	...
 23fdc14:	c03f e03f 7018 3018 7018 e01f c01f e018     ?.?..p.0.p......
 23fdc24:	6018 7018 383e 183e 0000 0000 0000 0000     .`.p>8>.........
	...
 23fdc3c:	b00f f01f 7038 3030 0038 801f e007 7000     ....8p008......p
 23fdc4c:	3030 7038 e03f c037 0000 0000 0000 0000     008p?.7.........
	...
 23fdc64:	f03f f03f 3033 3033 3033 0003 0003 0003     ?.?.303030......
 23fdc74:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
 23fdc8c:	f03c f03c 6018 6018 6018 6018 6018 6018     <.<..`.`.`.`.`.`
 23fdc9c:	6018 e01c c00f 8007 0000 0000 0000 0000     .`..............
	...
 23fdcb4:	f078 f078 6030 6030 c018 c018 800d 800d     x.x.0`0`........
 23fdcc4:	800d 0007 0007 0007 0000 0000 0000 0000     ................
	...
 23fdcdc:	7c7c 7c7c 1830 9833 9833 9833 d836 d016     ||||0.3.3.3.6...
 23fdcec:	701c 701c 701c 3018 0000 0000 0000 0000     .p.p.p.0........
	...
 23fdd04:	f078 f078 6030 c018 800d 0007 0007 800d     x.x.0`..........
 23fdd14:	c018 6030 f078 f078 0000 0000 0000 0000     ..0`x.x.........
	...
 23fdd2c:	f03c f03c 6018 c00c 8007 8007 0003 0003     <.<..`..........
 23fdd3c:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
 23fdd54:	e01f e01f 6018 c018 8001 0003 0003 0006     .....`..........
 23fdd64:	600c 6018 e01f e01f 0000 0000 0000 0000     .`.`............
 23fdd74:	0000 0000 0000 c003 c003 0003 0003 0003     ................
 23fdd84:	0003 0003 0003 0003 0003 0003 0003 0003     ................
 23fdd94:	0003 c003 c003 0000 0000 0000 0018 0018     ................
 23fdda4:	000c 000c 000c 0006 0006 0003 0003 8001     ................
 23fddb4:	8001 c000 c000 c000 6000 6000 0000 0000     .........`.`....
 23fddc4:	0000 0000 0000 000f 000f 0003 0003 0003     ................
 23fddd4:	0003 0003 0003 0003 0003 0003 0003 0003     ................
 23fdde4:	0003 000f 000f 0000 0000 0000 0000 0002     ................
 23fddf4:	0007 800d c018 6030 2020 0000 0000 0000     ......0`  ......
	...
 23fde3c:	fcff fcff 0000 0004 0003 8000 0000 0000     ................
	...
 23fde70:	0000 c00f e01f 6000 e00f e01f 6038 e030     .......`....8`0.
 23fde80:	f03f 701f 0000 0000 0000 0000 0000 0000     ?..p............
 23fde90:	0000 0070 0070 0030 0030 8037 e03f 6038     ..p.p.0.0.7.?.8`
 23fdea0:	3030 3030 3030 6038 e07f 8077 0000 0000     0000008`..w.....
	...
 23fdec0:	0000 b007 f01f 3018 3030 0030 0030 3038     .......0000.0.80
 23fded0:	f01f c00f 0000 0000 0000 0000 0000 0000     ................
 23fdee0:	0000 7000 7000 3000 3000 b007 f01f 7018     ...p.p.0.0.....p
 23fdef0:	3030 3030 3030 7038 f81f b807 0000 0000     0000008p........
	...
 23fdf10:	0000 8007 e01f 6018 f03f f03f 0030 3018     .......`?.?.0..0
 23fdf20:	f01f c007 0000 0000 0000 0000 0000 0000     ................
 23fdf30:	0000 f003 f007 0006 0006 e01f e01f 0006     ................
 23fdf40:	0006 0006 0006 0006 e01f e01f 0000 0000     ................
	...
 23fdf60:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
 23fdf70:	f01f b007 3000 7000 e00f c00f 0000 0000     .....0.p........
 23fdf80:	0000 0038 0038 0018 0018 c01b e01f 601c     ..8.8..........`
 23fdf90:	6018 6018 6018 6018 f03c f03c 0000 0000     .`.`.`.`<.<.....
	...
 23fdfa8:	0000 0003 0003 0000 0000 001f 001f 0003     ................
 23fdfb8:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
 23fdfd0:	0000 0003 0003 0000 0000 c01f c01f c000     ................
 23fdfe0:	c000 c000 c000 c000 c000 c000 c000 c001     ................
 23fdff0:	803f 003f 0000 0000 0000 0038 0038 0018     ?.?.......8.8...
 23fe000:	0018 e01b e01b 001b 001e 001e 001b 8019     ................
 23fe010:	f039 f039 0000 0000 0000 0000 0000 0000     9.9.............
 23fe020:	0000 001f 001f 0003 0003 0003 0003 0003     ................
 23fe030:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
 23fe050:	0000 e07e f07f 3033 3033 3033 3033 3033     ..~...3030303030
 23fe060:	b87b b87b 0000 0000 0000 0000 0000 0000     {.{.............
	...
 23fe078:	0000 c03b e03f 601c 6018 6018 6018 6018     ..;.?..`.`.`.`.`
 23fe088:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
 23fe0a0:	0000 8007 e01f 6018 3030 3030 3030 6018     .......`000000.`
 23fe0b0:	e01f 8007 0000 0000 0000 0000 0000 0000     ................
	...
 23fe0c8:	0000 8077 e07f 6038 3030 3030 3030 6038     ..w...8`0000008`
 23fe0d8:	e03f 8037 0030 0030 007c 007c 0000 0000     ?.7.0.0.|.|.....
	...
 23fe0f0:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
 23fe100:	f01f b007 3000 3000 f800 f800 0000 0000     .....0.0........
	...
 23fe118:	0000 e03c f03d 300f 000e 000c 000c 000c     ..<.=..0........
 23fe128:	c03f c03f 0000 0000 0000 0000 0000 0000     ?.?.............
	...
 23fe140:	0000 e007 e01f 6018 001e c00f e001 6018     .......`.......`
 23fe150:	e01f 801f 0000 0000 0000 0000 0000 0000     ................
 23fe160:	0000 0000 000c 000c 000c e03f e03f 000c     ..........?.?...
 23fe170:	000c 000c 000c 300c f00f c007 0000 0000     .......0........
	...
 23fe190:	0000 e038 e038 6018 6018 6018 6018 e018     ..8.8..`.`.`.`..
 23fe1a0:	f01f 700f 0000 0000 0000 0000 0000 0000     ...p............
	...
 23fe1b8:	0000 f078 f078 6030 c018 c018 800d 800d     ..x.x.0`........
 23fe1c8:	0007 0007 0000 0000 0000 0000 0000 0000     ................
	...
 23fe1e0:	0000 f078 f078 6032 6032 e037 c01d c01d     ..x.x.2`2`7.....
 23fe1f0:	c018 c018 0000 0000 0000 0000 0000 0000     ................
	...
 23fe208:	0000 f03c f03c c00c 8007 0003 8007 c00c     ..<.<...........
 23fe218:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
 23fe230:	0000 f078 f078 6030 c018 c018 800d 800f     ..x.x.0`........
 23fe240:	0007 0006 0006 000c 007f 007f 0000 0000     ................
	...
 23fe258:	0000 e01f e01f c018 8001 0003 0006 600c     ...............`
 23fe268:	e01f e01f 0000 0000 0000 0000 0000 0000     ................
 23fe278:	0000 c001 c003 0003 0003 0003 0003 0003     ................
 23fe288:	0007 000e 0007 0003 0003 0003 0003 c003     ................
 23fe298:	c001 0000 0000 0000 0000 0003 0003 0003     ................
 23fe2a8:	0003 0003 0003 0003 0003 0003 0003 0003     ................
 23fe2b8:	0003 0003 0003 0003 0003 0000 0000 0000     ................
 23fe2c8:	0000 001c 001e 0006 0006 0006 0006 0006     ................
 23fe2d8:	0007 8003 0007 0006 0006 0006 0006 001e     ................
 23fe2e8:	001c 0000 0000 0000 0000 0000 0000 0000     ................
 23fe2f8:	0000 0000 000e 303f f033 e001 0000 0000     ......?03.......
	...

023fe318 <_ZL12Font24_Table>:
	...
 23fe364:	0000 8003 0300 0080 8003 0300 0080 8003     ................
 23fe374:	0300 0080 8003 0300 0080 8003 0100 0000     ................
 23fe384:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
 23fe3b0:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
 23fe3c0:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
 23fe3f4:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
 23fe404:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
 23fe414:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
 23fe424:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
 23fe434:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
 23fe444:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
 23fe454:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
 23fe464:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
 23fe484:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
 23fe494:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
 23fe4a4:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
 23fe4d4:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
 23fe4e4:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
 23fe4f4:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
 23fe518:	0300 0080 8003 0300 0080 0001 0100 0000     ................
 23fe528:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
 23fe55c:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
 23fe56c:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
 23fe57c:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
 23fe58c:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
 23fe5a4:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
 23fe5b4:	0700 0000 8003 0300 0080 8003 0300 0080     ................
 23fe5c4:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
 23fe5d4:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
 23fe5ec:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
 23fe5fc:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
 23fe63c:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
 23fe64c:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
 23fe65c:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
 23fe6a0:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
 23fe6b0:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
 23fe6d8:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
 23fe730:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
 23fe750:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
 23fe760:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
 23fe770:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
 23fe780:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
 23fe79c:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
 23fe7ac:	1800 0018 1818 1800 0018 1818 1800 0018     ................
 23fe7bc:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
 23fe7e4:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
 23fe7f4:	0100 0080 8001 0100 0080 8001 0100 0080     ................
 23fe804:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
 23fe82c:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
 23fe83c:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
 23fe84c:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
 23fe874:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
 23fe884:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
 23fe894:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
 23fe8bc:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
 23fe8cc:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
 23fe8dc:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
 23fe904:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
 23fe914:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
 23fe924:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
 23fe94c:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
 23fe95c:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
 23fe96c:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
 23fe994:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
 23fe9a4:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
 23fe9b4:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
 23fe9dc:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
 23fe9ec:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
 23fe9fc:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
 23fea24:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
 23fea34:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
 23fea44:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
 23fea78:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
 23fea90:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
 23feac0:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
 23fead8:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
 23feb04:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
 23feb14:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
 23feb24:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
 23feb54:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
 23feb64:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23feb94:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
 23feba4:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
 23febb4:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
 23febd8:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
 23febe8:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
 23febf8:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
 23fec1c:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
 23fec2c:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
 23fec3c:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
 23fec4c:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
 23fec68:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
 23fec78:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
 23fec88:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
 23fecb0:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
 23fecc0:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
 23fecd0:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
 23fecf8:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
 23fed08:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
 23fed18:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
 23fed40:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
 23fed50:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
 23fed60:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
 23fed88:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
 23fed98:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
 23feda8:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
 23fedd0:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
 23fede0:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
 23fedf0:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
 23fee18:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
 23fee28:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
 23fee38:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
 23fee60:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
 23fee70:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
 23fee80:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
 23feea8:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
 23feeb8:	8001 0100 0080 8001 0100 0080 8001 0100     ................
 23feec8:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
 23feef0:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
 23fef00:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
 23fef10:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
 23fef38:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
 23fef48:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
 23fef58:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
 23fef80:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
 23fef90:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
 23fefa0:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
 23fefc8:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
 23fefd8:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
 23fefe8:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
 23ff010:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
 23ff020:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
 23ff030:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
 23ff058:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
 23ff068:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
 23ff078:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
 23ff0a0:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
 23ff0b0:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
 23ff0c0:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
 23ff0e8:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
 23ff0f8:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
 23ff108:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
 23ff118:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
 23ff130:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
 23ff140:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
 23ff150:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
 23ff178:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
 23ff188:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
 23ff198:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
 23ff1c0:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
 23ff1d0:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
 23ff1e0:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
 23ff208:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
 23ff218:	1818 1800 0018 1818 1800 0018 1818 1800     ................
 23ff228:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
 23ff250:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
 23ff260:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
 23ff270:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
 23ff298:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
 23ff2a8:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
 23ff2b8:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
 23ff2e0:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
 23ff2f0:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
 23ff300:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
 23ff328:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
 23ff338:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
 23ff348:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
 23ff370:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
 23ff380:	c018 0100 0080 0003 0600 0018 180c 1800     ................
 23ff390:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
 23ff3b4:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
 23ff3c4:	0100 0080 8001 0100 0080 8001 0100 0080     ................
 23ff3d4:	8001 0100 0080 8001 0100 0080 8001 0100     ................
 23ff3e4:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
 23ff3f4:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
 23ff404:	000e 0600 0000 0006 0300 0000 0003 0100     ................
 23ff414:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
 23ff424:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
 23ff444:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
 23ff454:	0100 0080 8001 0100 0080 8001 0100 0080     ................
 23ff464:	8001 0100 0080 8001 0100 0080 8001 0100     ................
 23ff474:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
 23ff48c:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
 23ff49c:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
 23ff510:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
 23ff520:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
 23ff570:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
 23ff580:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
 23ff590:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ff5ac:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
 23ff5bc:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
 23ff5cc:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
 23ff600:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
 23ff610:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
 23ff620:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ff63c:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
 23ff64c:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
 23ff65c:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
 23ff690:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
 23ff6a0:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
 23ff6b0:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ff6cc:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
 23ff6dc:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
 23ff6ec:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
 23ff720:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
 23ff730:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
 23ff740:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
 23ff750:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
 23ff760:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
 23ff770:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
 23ff780:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
 23ff7a4:	0000 8001 0100 0080 0000 0000 0000 801f     ................
 23ff7b4:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
 23ff7c4:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
 23ff7ec:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
 23ff7fc:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
 23ff80c:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
 23ff81c:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
 23ff834:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
 23ff844:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
 23ff854:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
 23ff87c:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
 23ff88c:	0100 0080 8001 0100 0080 8001 0100 0080     ................
 23ff89c:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
 23ff8d0:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
 23ff8e0:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
 23ff8f0:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ff918:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
 23ff928:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
 23ff938:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
 23ff960:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
 23ff970:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
 23ff980:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ff9a8:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
 23ff9b8:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
 23ff9c8:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
 23ff9f0:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
 23ffa00:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
 23ffa10:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
 23ffa20:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ffa38:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
 23ffa48:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
 23ffa58:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
 23ffa80:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
 23ffa90:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
 23ffaa0:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ffabc:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
 23ffacc:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
 23ffadc:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
 23ffb10:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
 23ffb20:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
 23ffb30:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ffb58:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
 23ffb68:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
 23ffb78:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ffba0:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
 23ffbb0:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
 23ffbc0:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
 23ffbe8:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
 23ffbf8:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
 23ffc08:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
 23ffc30:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
 23ffc40:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
 23ffc50:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
 23ffc60:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ffc78:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
 23ffc88:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
 23ffc98:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
 23ffcb4:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
 23ffcc4:	0100 0080 8001 0100 0080 8003 0700 0000     ................
 23ffcd4:	8003 0100 0080 8001 0100 0080 8001 0100     ................
 23ffce4:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
 23ffcfc:	0000 8001 0100 0080 8001 0100 0080 8001     ................
 23ffd0c:	0100 0080 8001 0100 0080 8001 0100 0080     ................
 23ffd1c:	8001 0100 0080 8001 0100 0080 8001 0100     ................
 23ffd2c:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
 23ffd44:	0000 0007 0700 0080 8001 0100 0080 8001     ................
 23ffd54:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
 23ffd64:	c001 0100 0080 8001 0100 0080 8001 0100     ................
 23ffd74:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
 23ffda0:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...

023ffdd0 <_ZTV17DFRobot_PN532_IIC>:
	...
 23ffdd8:	b821 023f b90f 023f                         !.?...?.

023ffde0 <_ZTVN5spark13EthernetClassE>:
	...
 23ffde8:	c233 023f c229 023f c21f 023f c215 023f     3.?.).?...?...?.
 23ffdf8:	c209 023f c1fd 023f c4a5 023f c4ad 023f     ..?...?...?...?.
 23ffe08:	c1f1 023f c1e9 023f c1df 023f c1d5 023f     ..?...?...?...?.
 23ffe18:	c4dd 023f                                   ..?.

023ffe1c <_ZTV7TwoWire>:
	...
 23ffe24:	c251 023f c29b 023f c273 023f c253 023f     Q.?...?.s.?.S.?.
 23ffe34:	c27b 023f c283 023f c28b 023f c293 023f     {.?...?...?...?.

023ffe44 <_ZTV9IPAddress>:
	...
 23ffe4c:	c375 023f c365 023f c367 023f 7061 0070     u.?.e.?.g.?.app.

023ffe5c <_ZTVN5spark12NetworkClassE>:
	...
 23ffe64:	c465 023f c46f 023f c479 023f c483 023f     e.?.o.?.y.?...?.
 23ffe74:	c48d 023f c499 023f c4a5 023f c4ad 023f     ..?...?...?...?.
 23ffe84:	c4b5 023f c4c1 023f c4c9 023f c4d3 023f     ..?...?...?...?.
 23ffe94:	c4dd 023f                                   ..?.

023ffe98 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffe98:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffea8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffeb8:	6d69 0065                                   ime.

023ffebc <_ZTV11USARTSerial>:
	...
 23ffec4:	ca05 023f ca71 023f ca49 023f c5c9 023f     ..?.q.?.I.?...?.
 23ffed4:	ca19 023f ca35 023f ca27 023f ca43 023f     ..?.5.?.'.?.C.?.
 23ffee4:	ca07 023f ca0b 023f                         ..?...?.

023ffeec <_ZTV9USBSerial>:
	...
 23ffef4:	cab5 023f cb1d 023f caf3 023f c5c9 023f     ..?...?...?...?.
 23fff04:	cae5 023f cab7 023f cac7 023f cb17 023f     ..?...?...?...?.
 23fff14:	cad7 023f caaf 023f                         ..?...?.

023fff1c <_ZTVN5spark9WiFiClassE>:
	...
 23fff24:	cc13 023f cc09 023f cbff 023f cbb5 023f     ..?...?...?...?.
 23fff34:	cbf3 023f cbe7 023f c4a5 023f c4ad 023f     ..?...?...?...?.
 23fff44:	cbdb 023f cbd3 023f cbc9 023f cbbf 023f     ..?...?...?...?.
 23fff54:	c4dd 023f                                   ..?.

023fff58 <_ZSt7nothrow>:
 23fff58:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff68:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff78:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff88:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fff98:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffa8:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffb8:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffc9 <link_const_data_end>:
 23fffc9:	00          	.byte	0x00
	...

023fffcc <link_constructors_location>:
 23fffcc:	023faf51 	.word	0x023faf51
 23fffd0:	023fc1c5 	.word	0x023fc1c5
 23fffd4:	023fc23d 	.word	0x023fc23d
 23fffd8:	023fc455 	.word	0x023fc455
 23fffdc:	023fc5b5 	.word	0x023fc5b5
 23fffe0:	023fc6dd 	.word	0x023fc6dd
 23fffe4:	023fc9cd 	.word	0x023fc9cd
 23fffe8:	023fc9f1 	.word	0x023fc9f1
 23fffec:	023fcc1d 	.word	0x023fcc1d
