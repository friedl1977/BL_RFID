
/Users/friedl/Desktop/Projects/PN532_RFID/target/5.4.1/b5som/PN532_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c2d8  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c02f4  000c02f4  000102f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000074  2003e530  000c0318  0001e530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000024c  2003e5a4  2003e5a4  0002e5a4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000c038c  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000c0390  000c0390  00020390  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000c0396  000c0396  00020396  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000c03ba  000c03ba  000203ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001410bb  00000000  00000000  000203be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015f3f  00000000  00000000  00161479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003fc3f  00000000  00000000  001773b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002e78  00000000  00000000  001b6ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b110  00000000  00000000  001b9e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f565  00000000  00000000  001c4f7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004b721  00000000  00000000  002044e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141d92  00000000  00000000  0024fc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008540  00000000  00000000  00391998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f002 fe7c 	bl	b6d4e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f002 fe84 	bl	b6d6a <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e530 	.word	0x2003e530
   b406c:	000c0318 	.word	0x000c0318
   b4070:	2003e5a4 	.word	0x2003e5a4
   b4074:	2003e5a4 	.word	0x2003e5a4
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f002 fd2d 	bl	b6ae0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000c02d0 	.word	0x000c02d0
   b40a0:	000c02f4 	.word	0x000c02f4

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b9f0 	b.w	b4488 <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f963 	bl	b4374 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f002 bccd 	b.w	b6a50 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f001 bbf1 	b.w	b589c <malloc>

000b40ba <_Znaj>:
   b40ba:	f001 bbef 	b.w	b589c <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f001 bbf5 	b.w	b58ac <free>

000b40c2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c2:	7800      	ldrb	r0, [r0, #0]
   b40c4:	fab0 f080 	clz	r0, r0
   b40c8:	0940      	lsrs	r0, r0, #5
   b40ca:	4770      	bx	lr

000b40cc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40cc:	2301      	movs	r3, #1
   b40ce:	7003      	strb	r3, [r0, #0]
   b40d0:	4770      	bx	lr
	...

000b40d4 <_Z4RFIDv>:
        Particle.publish("done");
        Serial.println("Done");
}


void RFID () {
   b40d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

if (nfc.scan()) {
   b40d6:	481d      	ldr	r0, [pc, #116]	; (b414c <_Z4RFIDv+0x78>)
   b40d8:	f000 ffd5 	bl	b5086 <_ZN13DFRobot_PN5324scanEv>
   b40dc:	b3a0      	cbz	r0, b4148 <_Z4RFIDv+0x74>
    if (nfc.readData(dataRead, READ_BLOCK_NO) != 1) {
   b40de:	491c      	ldr	r1, [pc, #112]	; (b4150 <_Z4RFIDv+0x7c>)
   b40e0:	481a      	ldr	r0, [pc, #104]	; (b414c <_Z4RFIDv+0x78>)
   b40e2:	2202      	movs	r2, #2
   b40e4:	f001 f886 	bl	b51f4 <_ZN13DFRobot_PN5328readDataEPhh>
   b40e8:	2801      	cmp	r0, #1
   b40ea:	d00a      	beq.n	b4102 <_Z4RFIDv+0x2e>
      // Serial.print("Block ");
      // Serial.print(READ_BLOCK_NO);
      Serial.println("FAILED - PLEASE SCAN AGAIN!");
   b40ec:	f002 fc2c 	bl	b6948 <_Z16_fetch_usbserialv>
   b40f0:	4918      	ldr	r1, [pc, #96]	; (b4154 <_Z4RFIDv+0x80>)
   b40f2:	f002 f966 	bl	b63c2 <_ZN5Print7printlnEPKc>
      }
      Serial.println();
    }
    delay(500);
  }
}
   b40f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(500);
   b40fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b40fe:	f001 bc0d 	b.w	b591c <delay>
      Serial.println("ENJOY THE EVENT!");
   b4102:	f002 fc21 	bl	b6948 <_Z16_fetch_usbserialv>
   b4106:	4914      	ldr	r1, [pc, #80]	; (b4158 <_Z4RFIDv+0x84>)
   b4108:	4d11      	ldr	r5, [pc, #68]	; (b4150 <_Z4RFIDv+0x7c>)
        Serial.print(" ");
   b410a:	4f14      	ldr	r7, [pc, #80]	; (b415c <_Z4RFIDv+0x88>)
      Serial.println("ENJOY THE EVENT!");
   b410c:	f002 f959 	bl	b63c2 <_ZN5Print7printlnEPKc>
      Serial.print("UID: ");
   b4110:	f002 fc1a 	bl	b6948 <_Z16_fetch_usbserialv>
   b4114:	4912      	ldr	r1, [pc, #72]	; (b4160 <_Z4RFIDv+0x8c>)
   b4116:	f002 f941 	bl	b639c <_ZN5Print5printEPKc>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b411a:	2400      	movs	r4, #0
        dataRead[i] = 0;
   b411c:	4626      	mov	r6, r4
        Serial.print(dataRead[i], HEX);
   b411e:	f002 fc13 	bl	b6948 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4122:	7829      	ldrb	r1, [r5, #0]
   b4124:	2210      	movs	r2, #16
   b4126:	f002 f956 	bl	b63d6 <_ZN5Print11printNumberEmh>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b412a:	3401      	adds	r4, #1
        Serial.print(" ");
   b412c:	f002 fc0c 	bl	b6948 <_Z16_fetch_usbserialv>
   b4130:	4639      	mov	r1, r7
   b4132:	f002 f933 	bl	b639c <_ZN5Print5printEPKc>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b4136:	2c0a      	cmp	r4, #10
        dataRead[i] = 0;
   b4138:	f805 6b01 	strb.w	r6, [r5], #1
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b413c:	d1ef      	bne.n	b411e <_Z4RFIDv+0x4a>
      Serial.println();
   b413e:	f002 fc03 	bl	b6948 <_Z16_fetch_usbserialv>
   b4142:	f002 f932 	bl	b63aa <_ZN5Print7printlnEv>
   b4146:	e7d6      	b.n	b40f6 <_Z4RFIDv+0x22>
}
   b4148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b414a:	bf00      	nop
   b414c:	2003e644 	.word	0x2003e644
   b4150:	2003e616 	.word	0x2003e616
   b4154:	000b6f2c 	.word	0x000b6f2c
   b4158:	000b6f48 	.word	0x000b6f48
   b415c:	000b6f75 	.word	0x000b6f75
   b4160:	000b6f59 	.word	0x000b6f59

000b4164 <_Z3EPDv>:


//////////////////// E-PAPER START //////////////////////


void EPD() {
   b4164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  
  
  Serial.print("4.2inch e-paper test\r\n ");

  //   /* This clears the SRAM of the e-paper display */
   epd.ClearFrame();
   b4168:	4d7b      	ldr	r5, [pc, #492]	; (b4358 <_Z3EPDv+0x1f4>)

   unsigned char image[1500];
   Paint paint(image, 400, 28);    //width should be the multiple of 8 

   paint.Clear(UNCOLORED);
   paint.DrawStringAt(0, 0, "e-Paper Demo", &Font24, COLORED);
   b416a:	4f7c      	ldr	r7, [pc, #496]	; (b435c <_Z3EPDv+0x1f8>)
void EPD() {
   b416c:	f5ad 6dc0 	sub.w	sp, sp, #1536	; 0x600
  Serial.print("4.2inch e-paper test\r\n ");
   b4170:	f002 fbea 	bl	b6948 <_Z16_fetch_usbserialv>
   b4174:	497a      	ldr	r1, [pc, #488]	; (b4360 <_Z3EPDv+0x1fc>)
   b4176:	f002 f911 	bl	b639c <_ZN5Print5printEPKc>
   epd.ClearFrame();
   b417a:	4628      	mov	r0, r5
   b417c:	f000 fb97 	bl	b48ae <_ZN3Epd10ClearFrameEv>
   Paint paint(image, 400, 28);    //width should be the multiple of 8 
   b4180:	231c      	movs	r3, #28
   b4182:	f44f 72c8 	mov.w	r2, #400	; 0x190
   b4186:	a909      	add	r1, sp, #36	; 0x24
   b4188:	a805      	add	r0, sp, #20
   paint.DrawStringAt(0, 0, "e-Paper Demo", &Font24, COLORED);
   b418a:	2400      	movs	r4, #0
   Paint paint(image, 400, 28);    //width should be the multiple of 8 
   b418c:	f000 fc8b 	bl	b4aa6 <_ZN5PaintC1EPhii>
   paint.Clear(UNCOLORED);
   b4190:	a805      	add	r0, sp, #20
   b4192:	2101      	movs	r1, #1
   b4194:	f000 fcb8 	bl	b4b08 <_ZN5Paint5ClearEi>
   paint.DrawStringAt(0, 0, "e-Paper Demo", &Font24, COLORED);
   b4198:	4622      	mov	r2, r4
   b419a:	4621      	mov	r1, r4
   b419c:	4b71      	ldr	r3, [pc, #452]	; (b4364 <_Z3EPDv+0x200>)
   b419e:	9401      	str	r4, [sp, #4]
   b41a0:	9700      	str	r7, [sp, #0]
   b41a2:	a805      	add	r0, sp, #20
   b41a4:	f000 fd58 	bl	b4c58 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   epd.SetPartialWindowBlack(paint.GetImage(), 100, 40, paint.GetWidth(), paint.GetHeight());
   b41a8:	a805      	add	r0, sp, #20
   b41aa:	f000 fcc2 	bl	b4b32 <_ZN5Paint8GetImageEv>
   b41ae:	9003      	str	r0, [sp, #12]
   b41b0:	a805      	add	r0, sp, #20
   b41b2:	f000 fcc0 	bl	b4b36 <_ZN5Paint8GetWidthEv>
   b41b6:	4606      	mov	r6, r0
   b41b8:	a805      	add	r0, sp, #20
   b41ba:	f000 fccc 	bl	b4b56 <_ZN5Paint9GetHeightEv>
   b41be:	9903      	ldr	r1, [sp, #12]
   b41c0:	e9cd 6000 	strd	r6, r0, [sp]
   b41c4:	2328      	movs	r3, #40	; 0x28
   b41c6:	2264      	movs	r2, #100	; 0x64
   b41c8:	4628      	mov	r0, r5
   b41ca:	f000 fa64 	bl	b4696 <_ZN3Epd21SetPartialWindowBlackEPKhiiii>

   paint.Clear(COLORED);
   paint.DrawStringAt(100, 2, "Hello world", &Font24, UNCOLORED);
   b41ce:	2601      	movs	r6, #1
   paint.Clear(COLORED);
   b41d0:	4621      	mov	r1, r4
   b41d2:	a805      	add	r0, sp, #20
   b41d4:	f000 fc98 	bl	b4b08 <_ZN5Paint5ClearEi>
   paint.DrawStringAt(100, 2, "Hello world", &Font24, UNCOLORED);
   b41d8:	4b63      	ldr	r3, [pc, #396]	; (b4368 <_Z3EPDv+0x204>)
   b41da:	2202      	movs	r2, #2
   b41dc:	2164      	movs	r1, #100	; 0x64
   b41de:	e9cd 7600 	strd	r7, r6, [sp]
   b41e2:	a805      	add	r0, sp, #20
   b41e4:	f000 fd38 	bl	b4c58 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   epd.SetPartialWindowRed(paint.GetImage(), 0, 64, paint.GetWidth(), paint.GetHeight());
   b41e8:	a805      	add	r0, sp, #20
   b41ea:	f000 fca2 	bl	b4b32 <_ZN5Paint8GetImageEv>
   b41ee:	9003      	str	r0, [sp, #12]
   b41f0:	a805      	add	r0, sp, #20
   b41f2:	f000 fca0 	bl	b4b36 <_ZN5Paint8GetWidthEv>
   b41f6:	4607      	mov	r7, r0
   b41f8:	a805      	add	r0, sp, #20
   b41fa:	f000 fcac 	bl	b4b56 <_ZN5Paint9GetHeightEv>
   b41fe:	4622      	mov	r2, r4
   b4200:	2340      	movs	r3, #64	; 0x40
   b4202:	e9cd 7000 	strd	r7, r0, [sp]
   b4206:	9903      	ldr	r1, [sp, #12]
   b4208:	4628      	mov	r0, r5
   b420a:	f000 faac 	bl	b4766 <_ZN3Epd19SetPartialWindowRedEPKhiiii>
  
   paint.SetWidth(64);
   b420e:	a805      	add	r0, sp, #20
   b4210:	2140      	movs	r1, #64	; 0x40
   b4212:	f000 fc92 	bl	b4b3a <_ZN5Paint8SetWidthEi>
   paint.SetHeight(64);
   b4216:	a805      	add	r0, sp, #20
   b4218:	2140      	movs	r1, #64	; 0x40
   b421a:	f000 fc9e 	bl	b4b5a <_ZN5Paint9SetHeightEi>

   paint.Clear(UNCOLORED);
   paint.DrawRectangle(0, 0, 40, 50, COLORED);
   b421e:	2732      	movs	r7, #50	; 0x32
   paint.Clear(UNCOLORED);
   b4220:	4631      	mov	r1, r6
   b4222:	a805      	add	r0, sp, #20
   b4224:	f000 fc70 	bl	b4b08 <_ZN5Paint5ClearEi>
   paint.DrawRectangle(0, 0, 40, 50, COLORED);
   b4228:	9401      	str	r4, [sp, #4]
   b422a:	9700      	str	r7, [sp, #0]
   b422c:	4622      	mov	r2, r4
   b422e:	4621      	mov	r1, r4
   b4230:	a805      	add	r0, sp, #20
   b4232:	2328      	movs	r3, #40	; 0x28
   b4234:	f000 fd81 	bl	b4d3a <_ZN5Paint13DrawRectangleEiiiii>
   paint.DrawLine(0, 0, 40, 50, COLORED);
   b4238:	e9cd 7400 	strd	r7, r4, [sp]
   b423c:	4622      	mov	r2, r4
   b423e:	4621      	mov	r1, r4
   b4240:	a805      	add	r0, sp, #20
   b4242:	2328      	movs	r3, #40	; 0x28
   b4244:	f000 fd20 	bl	b4c88 <_ZN5Paint8DrawLineEiiiii>
   paint.DrawLine(40, 0, 0, 50, COLORED);
   b4248:	4623      	mov	r3, r4
   b424a:	4622      	mov	r2, r4
   b424c:	2128      	movs	r1, #40	; 0x28
   b424e:	e9cd 7400 	strd	r7, r4, [sp]
   b4252:	a805      	add	r0, sp, #20
   b4254:	f000 fd18 	bl	b4c88 <_ZN5Paint8DrawLineEiiiii>
   epd.SetPartialWindowBlack(paint.GetImage(), 72, 120, paint.GetWidth(), paint.GetHeight());
   b4258:	a805      	add	r0, sp, #20
   b425a:	f000 fc6a 	bl	b4b32 <_ZN5Paint8GetImageEv>
   b425e:	9003      	str	r0, [sp, #12]
   b4260:	a805      	add	r0, sp, #20
   b4262:	f000 fc68 	bl	b4b36 <_ZN5Paint8GetWidthEv>
   b4266:	4680      	mov	r8, r0
   b4268:	a805      	add	r0, sp, #20
   b426a:	f000 fc74 	bl	b4b56 <_ZN5Paint9GetHeightEv>
   b426e:	9903      	ldr	r1, [sp, #12]
   b4270:	e9cd 8000 	strd	r8, r0, [sp]
   b4274:	2378      	movs	r3, #120	; 0x78
   b4276:	2248      	movs	r2, #72	; 0x48
   b4278:	4628      	mov	r0, r5
   b427a:	f000 fa0c 	bl	b4696 <_ZN3Epd21SetPartialWindowBlackEPKhiiii>
  
   paint.Clear(UNCOLORED);
   b427e:	4631      	mov	r1, r6
   b4280:	a805      	add	r0, sp, #20
   b4282:	f000 fc41 	bl	b4b08 <_ZN5Paint5ClearEi>
   paint.DrawCircle(32, 32, 30, COLORED);
   b4286:	2220      	movs	r2, #32
   b4288:	4611      	mov	r1, r2
   b428a:	231e      	movs	r3, #30
   b428c:	9400      	str	r4, [sp, #0]
   b428e:	a805      	add	r0, sp, #20
   b4290:	f000 fdb5 	bl	b4dfe <_ZN5Paint10DrawCircleEiiii>
   epd.SetPartialWindowBlack(paint.GetImage(), 200, 120, paint.GetWidth(), paint.GetHeight());
   b4294:	a805      	add	r0, sp, #20
   b4296:	f000 fc4c 	bl	b4b32 <_ZN5Paint8GetImageEv>
   b429a:	9003      	str	r0, [sp, #12]
   b429c:	a805      	add	r0, sp, #20
   b429e:	f000 fc4a 	bl	b4b36 <_ZN5Paint8GetWidthEv>
   b42a2:	4680      	mov	r8, r0
   b42a4:	a805      	add	r0, sp, #20
   b42a6:	f000 fc56 	bl	b4b56 <_ZN5Paint9GetHeightEv>
   b42aa:	9903      	ldr	r1, [sp, #12]
   b42ac:	e9cd 8000 	strd	r8, r0, [sp]
   b42b0:	2378      	movs	r3, #120	; 0x78
   b42b2:	22c8      	movs	r2, #200	; 0xc8
   b42b4:	4628      	mov	r0, r5
   b42b6:	f000 f9ee 	bl	b4696 <_ZN3Epd21SetPartialWindowBlackEPKhiiii>

   paint.Clear(UNCOLORED);
   b42ba:	4631      	mov	r1, r6
   b42bc:	a805      	add	r0, sp, #20
   b42be:	f000 fc23 	bl	b4b08 <_ZN5Paint5ClearEi>
   paint.DrawFilledRectangle(0, 0, 40, 50, COLORED);
   b42c2:	4622      	mov	r2, r4
   b42c4:	4621      	mov	r1, r4
   b42c6:	2328      	movs	r3, #40	; 0x28
   b42c8:	e9cd 7400 	strd	r7, r4, [sp]
   b42cc:	a805      	add	r0, sp, #20
   b42ce:	f000 fd70 	bl	b4db2 <_ZN5Paint19DrawFilledRectangleEiiiii>
   epd.SetPartialWindowRed(paint.GetImage(), 72, 200, paint.GetWidth(), paint.GetHeight());
   b42d2:	a805      	add	r0, sp, #20
   b42d4:	f000 fc2d 	bl	b4b32 <_ZN5Paint8GetImageEv>
   b42d8:	9003      	str	r0, [sp, #12]
   b42da:	a805      	add	r0, sp, #20
   b42dc:	f000 fc2b 	bl	b4b36 <_ZN5Paint8GetWidthEv>
   b42e0:	4607      	mov	r7, r0
   b42e2:	a805      	add	r0, sp, #20
   b42e4:	f000 fc37 	bl	b4b56 <_ZN5Paint9GetHeightEv>
   b42e8:	9903      	ldr	r1, [sp, #12]
   b42ea:	e9cd 7000 	strd	r7, r0, [sp]
   b42ee:	23c8      	movs	r3, #200	; 0xc8
   b42f0:	2248      	movs	r2, #72	; 0x48
   b42f2:	4628      	mov	r0, r5
   b42f4:	f000 fa37 	bl	b4766 <_ZN3Epd19SetPartialWindowRedEPKhiiii>

   paint.Clear(UNCOLORED);
   b42f8:	4631      	mov	r1, r6
   b42fa:	a805      	add	r0, sp, #20
   b42fc:	f000 fc04 	bl	b4b08 <_ZN5Paint5ClearEi>
   paint.DrawFilledCircle(32, 32, 30, COLORED);
   b4300:	2220      	movs	r2, #32
   b4302:	4611      	mov	r1, r2
   b4304:	231e      	movs	r3, #30
   b4306:	9400      	str	r4, [sp, #0]
   b4308:	a805      	add	r0, sp, #20
   b430a:	f000 fdb9 	bl	b4e80 <_ZN5Paint16DrawFilledCircleEiiii>
   epd.SetPartialWindowRed(paint.GetImage(), 200, 200, paint.GetWidth(), paint.GetHeight());
   b430e:	a805      	add	r0, sp, #20
   b4310:	f000 fc0f 	bl	b4b32 <_ZN5Paint8GetImageEv>
   b4314:	9003      	str	r0, [sp, #12]
   b4316:	a805      	add	r0, sp, #20
   b4318:	f000 fc0d 	bl	b4b36 <_ZN5Paint8GetWidthEv>
   b431c:	4604      	mov	r4, r0
   b431e:	a805      	add	r0, sp, #20
   b4320:	f000 fc19 	bl	b4b56 <_ZN5Paint9GetHeightEv>
   b4324:	23c8      	movs	r3, #200	; 0xc8
   b4326:	461a      	mov	r2, r3
   b4328:	9903      	ldr	r1, [sp, #12]
   b432a:	e9cd 4000 	strd	r4, r0, [sp]
   b432e:	4628      	mov	r0, r5
   b4330:	f000 fa19 	bl	b4766 <_ZN3Epd19SetPartialWindowRedEPKhiiii>

  // /* This displays the data from the SRAM in e-Paper module */
   epd.DisplayFrame();
   b4334:	4628      	mov	r0, r5
   b4336:	f000 faeb 	bl	b4910 <_ZN3Epd12DisplayFrameEv>

  /* This displays an image */
  epd.DisplayFrame(IMAGE_BLACK, IMAGE_RED);
   b433a:	4a0c      	ldr	r2, [pc, #48]	; (b436c <_Z3EPDv+0x208>)
   b433c:	490c      	ldr	r1, [pc, #48]	; (b4370 <_Z3EPDv+0x20c>)
   b433e:	4628      	mov	r0, r5
   b4340:	f000 fa79 	bl	b4836 <_ZN3Epd12DisplayFrameEPKhS1_>

  /* Deep sleep */
  epd.Sleep();
   b4344:	4628      	mov	r0, r5
   b4346:	f000 faf0 	bl	b492a <_ZN3Epd5SleepEv>
   Paint paint(image, 400, 28);    //width should be the multiple of 8 
   b434a:	a805      	add	r0, sp, #20
   b434c:	f000 fbbe 	bl	b4acc <_ZN5PaintD1Ev>

}
   b4350:	f50d 6dc0 	add.w	sp, sp, #1536	; 0x600
   b4354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4358:	2003e628 	.word	0x2003e628
   b435c:	2003e530 	.word	0x2003e530
   b4360:	000b6f5f 	.word	0x000b6f5f
   b4364:	000b6f77 	.word	0x000b6f77
   b4368:	000b6f84 	.word	0x000b6f84
   b436c:	000bc5d8 	.word	0x000bc5d8
   b4370:	000b8b40 	.word	0x000b8b40

000b4374 <loop>:
void loop() {

  //I2C_Scanner();
  //Fuel_Gauge();
  //EPD();
  RFID();
   b4374:	f7ff beae 	b.w	b40d4 <_Z4RFIDv>

000b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4378:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b437a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b437c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b437e:	b17c      	cbz	r4, b43a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4380:	6863      	ldr	r3, [r4, #4]
   b4382:	3b01      	subs	r3, #1
   b4384:	6063      	str	r3, [r4, #4]
   b4386:	b95b      	cbnz	r3, b43a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4388:	6823      	ldr	r3, [r4, #0]
   b438a:	4620      	mov	r0, r4
   b438c:	689b      	ldr	r3, [r3, #8]
   b438e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4390:	68a3      	ldr	r3, [r4, #8]
   b4392:	3b01      	subs	r3, #1
   b4394:	60a3      	str	r3, [r4, #8]
   b4396:	b91b      	cbnz	r3, b43a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4398:	6823      	ldr	r3, [r4, #0]
   b439a:	4620      	mov	r0, r4
   b439c:	68db      	ldr	r3, [r3, #12]
   b439e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b43a0:	4628      	mov	r0, r5
   b43a2:	bd38      	pop	{r3, r4, r5, pc}

000b43a4 <_Z11I2C_Scannerv>:
void I2C_Scanner() {
   b43a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(1000);
   b43a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void I2C_Scanner() {
   b43ac:	b089      	sub	sp, #36	; 0x24
  delay(1000);
   b43ae:	f001 fab5 	bl	b591c <delay>
  for(address = 1; address < 127; address++ )
   b43b2:	4f2e      	ldr	r7, [pc, #184]	; (b446c <_Z11I2C_Scannerv+0xc8>)
          Serial.print("0");
   b43b4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4480 <_Z11I2C_Scannerv+0xdc>
      Serial.print("I2C device found at address 0x");
   b43b8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b4484 <_Z11I2C_Scannerv+0xe0>
  delay(1000);
   b43bc:	2401      	movs	r4, #1
  nDevices = 0;
   b43be:	2500      	movs	r5, #0
   b43c0:	b2e6      	uxtb	r6, r4
    Wire.beginTransmission(address);
   b43c2:	f002 fc55 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b43c6:	4631      	mov	r1, r6
   b43c8:	f001 fe80 	bl	b60cc <_ZN7TwoWire17beginTransmissionEh>
    error = Wire.endTransmission();
   b43cc:	f002 fc50 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b43d0:	f001 fe87 	bl	b60e2 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
   b43d4:	bb40      	cbnz	r0, b4428 <_Z11I2C_Scannerv+0x84>
      Serial.print("I2C device found at address 0x");
   b43d6:	f002 fab7 	bl	b6948 <_Z16_fetch_usbserialv>
   b43da:	4649      	mov	r1, r9
   b43dc:	f001 ffde 	bl	b639c <_ZN5Print5printEPKc>
      Serial.println(address,HEX);
   b43e0:	f002 fab2 	bl	b6948 <_Z16_fetch_usbserialv>
   b43e4:	2210      	movs	r2, #16
   b43e6:	4606      	mov	r6, r0
   b43e8:	4621      	mov	r1, r4
   b43ea:	f001 fff4 	bl	b63d6 <_ZN5Print11printNumberEmh>
        n += println();
   b43ee:	4630      	mov	r0, r6
   b43f0:	f001 ffdb 	bl	b63aa <_ZN5Print7printlnEv>
      nDevices++;
   b43f4:	3501      	adds	r5, #1
  for(address = 1; address < 127; address++ )
   b43f6:	3401      	adds	r4, #1
   b43f8:	2c7f      	cmp	r4, #127	; 0x7f
   b43fa:	d1e1      	bne.n	b43c0 <_Z11I2C_Scannerv+0x1c>
  if (nDevices == 0)
   b43fc:	4b1c      	ldr	r3, [pc, #112]	; (b4470 <_Z11I2C_Scannerv+0xcc>)
   b43fe:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4400:	f88d 3000 	strb.w	r3, [sp]
   b4404:	233c      	movs	r3, #60	; 0x3c
   b4406:	bb75      	cbnz	r5, b4466 <_Z11I2C_Scannerv+0xc2>
   b4408:	491a      	ldr	r1, [pc, #104]	; (b4474 <_Z11I2C_Scannerv+0xd0>)
   b440a:	462a      	mov	r2, r5
   b440c:	a804      	add	r0, sp, #16
   b440e:	f001 fc37 	bl	b5c80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4412:	a805      	add	r0, sp, #20
   b4414:	f7ff ffb0 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Done");
   b4418:	f002 fa96 	bl	b6948 <_Z16_fetch_usbserialv>
   b441c:	4916      	ldr	r1, [pc, #88]	; (b4478 <_Z11I2C_Scannerv+0xd4>)
}
   b441e:	b009      	add	sp, #36	; 0x24
   b4420:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        Serial.println("Done");
   b4424:	f001 bfcd 	b.w	b63c2 <_ZN5Print7printlnEPKc>
      else if (error==4)
   b4428:	2804      	cmp	r0, #4
   b442a:	d1e4      	bne.n	b43f6 <_Z11I2C_Scannerv+0x52>
          if (address<16)
   b442c:	2c0f      	cmp	r4, #15
   b442e:	d804      	bhi.n	b443a <_Z11I2C_Scannerv+0x96>
          Serial.print("0");
   b4430:	f002 fa8a 	bl	b6948 <_Z16_fetch_usbserialv>
   b4434:	4641      	mov	r1, r8
   b4436:	f001 ffb1 	bl	b639c <_ZN5Print5printEPKc>
          Particle.publish(String(address,HEX), PRIVATE);
   b443a:	2210      	movs	r2, #16
   b443c:	4631      	mov	r1, r6
   b443e:	eb0d 0002 	add.w	r0, sp, r2
   b4442:	f002 f965 	bl	b6710 <_ZN6StringC1Ehh>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4446:	783b      	ldrb	r3, [r7, #0]
   b4448:	9904      	ldr	r1, [sp, #16]
   b444a:	f88d 3000 	strb.w	r3, [sp]
   b444e:	2200      	movs	r2, #0
   b4450:	233c      	movs	r3, #60	; 0x3c
   b4452:	a802      	add	r0, sp, #8
   b4454:	f001 fc14 	bl	b5c80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4458:	a803      	add	r0, sp, #12
   b445a:	f7ff ff8d 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b445e:	a804      	add	r0, sp, #16
   b4460:	f002 f8bc 	bl	b65dc <_ZN6StringD1Ev>
   b4464:	e7c7      	b.n	b43f6 <_Z11I2C_Scannerv+0x52>
   b4466:	4905      	ldr	r1, [pc, #20]	; (b447c <_Z11I2C_Scannerv+0xd8>)
   b4468:	2200      	movs	r2, #0
   b446a:	e7cf      	b.n	b440c <_Z11I2C_Scannerv+0x68>
   b446c:	2003e615 	.word	0x2003e615
   b4470:	2003e614 	.word	0x2003e614
   b4474:	000b6fb1 	.word	0x000b6fb1
   b4478:	000b6fc3 	.word	0x000b6fc3
   b447c:	000b6fbe 	.word	0x000b6fbe
   b4480:	000b6faf 	.word	0x000b6faf
   b4484:	000b6f90 	.word	0x000b6f90

000b4488 <setup>:
void setup() {
   b4488:	b538      	push	{r3, r4, r5, lr}
Serial.begin(115200);
   b448a:	f002 fa5d 	bl	b6948 <_Z16_fetch_usbserialv>
   b448e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4492:	f002 fa4d 	bl	b6930 <_ZN9USBSerial5beginEl>
Serial.println();
   b4496:	f002 fa57 	bl	b6948 <_Z16_fetch_usbserialv>
   b449a:	f001 ff86 	bl	b63aa <_ZN5Print7printlnEv>
Serial.print("Initializing e-Paper display");
   b449e:	f002 fa53 	bl	b6948 <_Z16_fetch_usbserialv>
   b44a2:	491b      	ldr	r1, [pc, #108]	; (b4510 <setup+0x88>)
   b44a4:	f001 ff7a 	bl	b639c <_ZN5Print5printEPKc>
if (epd.Init() != 0) { 
   b44a8:	481a      	ldr	r0, [pc, #104]	; (b4514 <setup+0x8c>)
   b44aa:	f000 f8d7 	bl	b465c <_ZN3Epd4InitEv>
   b44ae:	b130      	cbz	r0, b44be <setup+0x36>
  Serial.print("Failed to initialize display");
   b44b0:	f002 fa4a 	bl	b6948 <_Z16_fetch_usbserialv>
}
   b44b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Serial.print("Failed to initialize display");
   b44b8:	4917      	ldr	r1, [pc, #92]	; (b4518 <setup+0x90>)
   b44ba:	f001 bf6f 	b.w	b639c <_ZN5Print5printEPKc>
Serial.println();
   b44be:	f002 fa43 	bl	b6948 <_Z16_fetch_usbserialv>
   b44c2:	f001 ff72 	bl	b63aa <_ZN5Print7printlnEv>
Serial.print("Initializing PN532");
   b44c6:	f002 fa3f 	bl	b6948 <_Z16_fetch_usbserialv>
   b44ca:	4914      	ldr	r1, [pc, #80]	; (b451c <setup+0x94>)
while (!nfc.begin()) {
   b44cc:	4d14      	ldr	r5, [pc, #80]	; (b4520 <setup+0x98>)
  Serial.print(".");
   b44ce:	4c15      	ldr	r4, [pc, #84]	; (b4524 <setup+0x9c>)
Serial.print("Initializing PN532");
   b44d0:	f001 ff64 	bl	b639c <_ZN5Print5printEPKc>
while (!nfc.begin()) {
   b44d4:	4628      	mov	r0, r5
   b44d6:	f000 ffa1 	bl	b541c <_ZN17DFRobot_PN532_IIC5beginEv>
   b44da:	b948      	cbnz	r0, b44f0 <setup+0x68>
  Serial.print(".");
   b44dc:	f002 fa34 	bl	b6948 <_Z16_fetch_usbserialv>
   b44e0:	4621      	mov	r1, r4
   b44e2:	f001 ff5b 	bl	b639c <_ZN5Print5printEPKc>
  delay (1000);
   b44e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b44ea:	f001 fa17 	bl	b591c <delay>
while (!nfc.begin()) {
   b44ee:	e7f1      	b.n	b44d4 <setup+0x4c>
EPD();
   b44f0:	f7ff fe38 	bl	b4164 <_Z3EPDv>
 Serial.println();
   b44f4:	f002 fa28 	bl	b6948 <_Z16_fetch_usbserialv>
   b44f8:	f001 ff57 	bl	b63aa <_ZN5Print7printlnEv>
 Serial.println("Waiting for a card......");  
   b44fc:	f002 fa24 	bl	b6948 <_Z16_fetch_usbserialv>
   b4500:	4909      	ldr	r1, [pc, #36]	; (b4528 <setup+0xa0>)
   b4502:	f001 ff5e 	bl	b63c2 <_ZN5Print7printlnEPKc>
}
   b4506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
I2C_Scanner();
   b450a:	f7ff bf4b 	b.w	b43a4 <_Z11I2C_Scannerv>
   b450e:	bf00      	nop
   b4510:	000b6fc8 	.word	0x000b6fc8
   b4514:	2003e628 	.word	0x2003e628
   b4518:	000b6fe5 	.word	0x000b6fe5
   b451c:	000b7002 	.word	0x000b7002
   b4520:	2003e644 	.word	0x2003e644
   b4524:	000b702c 	.word	0x000b702c
   b4528:	000b7015 	.word	0x000b7015

000b452c <_GLOBAL__sub_I_epd>:
        val_(val) {
   b452c:	4b17      	ldr	r3, [pc, #92]	; (b458c <_GLOBAL__sub_I_epd+0x60>)
Epd epd;
   b452e:	4818      	ldr	r0, [pc, #96]	; (b4590 <_GLOBAL__sub_I_epd+0x64>)
  //delay(10000);
  
}
   b4530:	b510      	push	{r4, lr}
   b4532:	2400      	movs	r4, #0
   b4534:	701c      	strb	r4, [r3, #0]
   b4536:	4b17      	ldr	r3, [pc, #92]	; (b4594 <_GLOBAL__sub_I_epd+0x68>)
   b4538:	2201      	movs	r2, #1
   b453a:	701a      	strb	r2, [r3, #0]
Epd epd;
   b453c:	f000 f840 	bl	b45c0 <_ZN3EpdC1Ev>
String VAR1;
   b4540:	4915      	ldr	r1, [pc, #84]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b4542:	4816      	ldr	r0, [pc, #88]	; (b459c <_GLOBAL__sub_I_epd+0x70>)
   b4544:	f002 f895 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR2;
   b4548:	4913      	ldr	r1, [pc, #76]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b454a:	4815      	ldr	r0, [pc, #84]	; (b45a0 <_GLOBAL__sub_I_epd+0x74>)
   b454c:	f002 f891 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR3;
   b4550:	4911      	ldr	r1, [pc, #68]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b4552:	4814      	ldr	r0, [pc, #80]	; (b45a4 <_GLOBAL__sub_I_epd+0x78>)
   b4554:	f002 f88d 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR4;
   b4558:	490f      	ldr	r1, [pc, #60]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b455a:	4813      	ldr	r0, [pc, #76]	; (b45a8 <_GLOBAL__sub_I_epd+0x7c>)
   b455c:	f002 f889 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR5;
   b4560:	490d      	ldr	r1, [pc, #52]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b4562:	4812      	ldr	r0, [pc, #72]	; (b45ac <_GLOBAL__sub_I_epd+0x80>)
   b4564:	f002 f885 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR6;
   b4568:	490b      	ldr	r1, [pc, #44]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b456a:	4811      	ldr	r0, [pc, #68]	; (b45b0 <_GLOBAL__sub_I_epd+0x84>)
   b456c:	f002 f881 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
String SCAN;
   b4570:	4909      	ldr	r1, [pc, #36]	; (b4598 <_GLOBAL__sub_I_epd+0x6c>)
   b4572:	4810      	ldr	r0, [pc, #64]	; (b45b4 <_GLOBAL__sub_I_epd+0x88>)
   b4574:	f002 f87d 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b4578:	4622      	mov	r2, r4
   b457a:	480f      	ldr	r0, [pc, #60]	; (b45b8 <_GLOBAL__sub_I_epd+0x8c>)
   b457c:	2102      	movs	r1, #2
   b457e:	f000 fe89 	bl	b5294 <_ZN17DFRobot_PN532_IICC1Ehh>
}
   b4582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
max1720x gauge;
   b4586:	480d      	ldr	r0, [pc, #52]	; (b45bc <_GLOBAL__sub_I_epd+0x90>)
   b4588:	f000 bcd2 	b.w	b4f30 <_ZN8max1720xC1Ev>
   b458c:	2003e614 	.word	0x2003e614
   b4590:	2003e628 	.word	0x2003e628
   b4594:	2003e615 	.word	0x2003e615
   b4598:	000b6f76 	.word	0x000b6f76
   b459c:	2003e5b4 	.word	0x2003e5b4
   b45a0:	2003e5c4 	.word	0x2003e5c4
   b45a4:	2003e5d4 	.word	0x2003e5d4
   b45a8:	2003e5e4 	.word	0x2003e5e4
   b45ac:	2003e5f4 	.word	0x2003e5f4
   b45b0:	2003e604 	.word	0x2003e604
   b45b4:	2003e5a4 	.word	0x2003e5a4
   b45b8:	2003e644 	.word	0x2003e644
   b45bc:	2003e640 	.word	0x2003e640

000b45c0 <_ZN3EpdC1Ev>:
#include "epd4in2b_V2.h"

Epd::~Epd() {
};

Epd::Epd() {
   b45c0:	b510      	push	{r4, lr}
   b45c2:	4604      	mov	r4, r0
   b45c4:	f000 fa0c 	bl	b49e0 <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b45c8:	2206      	movs	r2, #6
   b45ca:	2305      	movs	r3, #5
   b45cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b45d0:	2108      	movs	r1, #8
   b45d2:	2307      	movs	r3, #7
   b45d4:	e9c4 1304 	strd	r1, r3, [r4, #16]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b45d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b45dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
   b45e0:	e9c4 0300 	strd	r0, r3, [r4]
};
   b45e4:	4620      	mov	r0, r4
   b45e6:	bd10      	pop	{r4, pc}

000b45e8 <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
   b45e8:	b510      	push	{r4, lr}
   b45ea:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
   b45ec:	68c0      	ldr	r0, [r0, #12]
   b45ee:	2100      	movs	r1, #0
   b45f0:	f000 f9f7 	bl	b49e2 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
   b45f4:	4620      	mov	r0, r4
}
   b45f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
   b45fa:	f000 ba43 	b.w	b4a84 <_ZN5EpdIf11SpiTransferEh>

000b45fe <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
   b45fe:	b510      	push	{r4, lr}
   b4600:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
   b4602:	68c0      	ldr	r0, [r0, #12]
   b4604:	2101      	movs	r1, #1
   b4606:	f000 f9ec 	bl	b49e2 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
   b460a:	4620      	mov	r0, r4
}
   b460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
   b4610:	f000 ba38 	b.w	b4a84 <_ZN5EpdIf11SpiTransferEh>

000b4614 <_ZN3Epd13WaitUntilIdleEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::WaitUntilIdle(void) {
   b4614:	b510      	push	{r4, lr}
   b4616:	4604      	mov	r4, r0
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b4618:	6960      	ldr	r0, [r4, #20]
   b461a:	f000 f9e6 	bl	b49ea <_ZN5EpdIf11DigitalReadEi>
   b461e:	b918      	cbnz	r0, b4628 <_ZN3Epd13WaitUntilIdleEv+0x14>
        DelayMs(100);
   b4620:	2064      	movs	r0, #100	; 0x64
   b4622:	f000 f9e5 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b4626:	e7f7      	b.n	b4618 <_ZN3Epd13WaitUntilIdleEv+0x4>
    }      
}
   b4628:	bd10      	pop	{r4, pc}

000b462a <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset. 
 *          often used to awaken the module in deep sleep, 
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
   b462a:	b510      	push	{r4, lr}
    DigitalWrite(reset_pin, HIGH);
   b462c:	2101      	movs	r1, #1
void Epd::Reset(void) {
   b462e:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
   b4630:	6880      	ldr	r0, [r0, #8]
   b4632:	f000 f9d6 	bl	b49e2 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
   b4636:	20c8      	movs	r0, #200	; 0xc8
   b4638:	f000 f9da 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);
   b463c:	68a0      	ldr	r0, [r4, #8]
   b463e:	2100      	movs	r1, #0
   b4640:	f000 f9cf 	bl	b49e2 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
   b4644:	2002      	movs	r0, #2
   b4646:	f000 f9d3 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
   b464a:	68a0      	ldr	r0, [r4, #8]
   b464c:	2101      	movs	r1, #1
   b464e:	f000 f9c8 	bl	b49e2 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
}
   b4652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);   
   b4656:	20c8      	movs	r0, #200	; 0xc8
   b4658:	f000 b9ca 	b.w	b49f0 <_ZN5EpdIf7DelayMsEj>

000b465c <_ZN3Epd4InitEv>:
int Epd::Init(void) {
   b465c:	b538      	push	{r3, r4, r5, lr}
   b465e:	4604      	mov	r4, r0
    if (IfInit() != 0) {
   b4660:	f000 f9e4 	bl	b4a2c <_ZN5EpdIf6IfInitEv>
   b4664:	4605      	mov	r5, r0
   b4666:	b998      	cbnz	r0, b4690 <_ZN3Epd4InitEv+0x34>
    Reset();
   b4668:	4620      	mov	r0, r4
   b466a:	f7ff ffde 	bl	b462a <_ZN3Epd5ResetEv>
    SendCommand(POWER_ON);
   b466e:	2104      	movs	r1, #4
   b4670:	4620      	mov	r0, r4
   b4672:	f7ff ffb9 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b4676:	4620      	mov	r0, r4
   b4678:	f7ff ffcc 	bl	b4614 <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(PANEL_SETTING);
   b467c:	4629      	mov	r1, r5
   b467e:	4620      	mov	r0, r4
   b4680:	f7ff ffb2 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendData(0x0F);     // LUT from OTP
   b4684:	210f      	movs	r1, #15
   b4686:	4620      	mov	r0, r4
   b4688:	f7ff ffb9 	bl	b45fe <_ZN3Epd8SendDataEh>
}
   b468c:	4628      	mov	r0, r5
   b468e:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   b4690:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4694:	e7fa      	b.n	b468c <_ZN3Epd4InitEv+0x30>

000b4696 <_ZN3Epd21SetPartialWindowBlackEPKhiiii>:
}

/**
 *  @brief: transmit partial data to the black part of SRAM
 */
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b4696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b469a:	4604      	mov	r4, r0
   b469c:	460f      	mov	r7, r1
    SendCommand(PARTIAL_IN);
   b469e:	2191      	movs	r1, #145	; 0x91
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b46a0:	4616      	mov	r6, r2
   b46a2:	4699      	mov	r9, r3
   b46a4:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    SendCommand(PARTIAL_IN);
   b46a8:	f7ff ff9e 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendCommand(PARTIAL_WINDOW);
   b46ac:	2190      	movs	r1, #144	; 0x90
   b46ae:	4620      	mov	r0, r4
    SendData(x >> 8);
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b46b0:	f006 0af8 	and.w	sl, r6, #248	; 0xf8
    SendCommand(PARTIAL_WINDOW);
   b46b4:	f7ff ff98 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendData(x >> 8);
   b46b8:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b46bc:	4620      	mov	r0, r4
   b46be:	f7ff ff9e 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b46c2:	4651      	mov	r1, sl
   b46c4:	4620      	mov	r0, r4
   b46c6:	f7ff ff9a 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) >> 8);
   b46ca:	4651      	mov	r1, sl
   b46cc:	4429      	add	r1, r5
   b46ce:	3901      	subs	r1, #1
   b46d0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b46d4:	4620      	mov	r0, r4
   b46d6:	f7ff ff92 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) | 0x07);
   b46da:	1e69      	subs	r1, r5, #1
   b46dc:	4451      	add	r1, sl
   b46de:	f041 0107 	orr.w	r1, r1, #7
   b46e2:	b2c9      	uxtb	r1, r1
   b46e4:	4620      	mov	r0, r4
   b46e6:	f7ff ff8a 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(y >> 8);        
    SendData(y & 0xff);
   b46ea:	fa5f f689 	uxtb.w	r6, r9
    SendData(y >> 8);        
   b46ee:	f3c9 2107 	ubfx	r1, r9, #8, #8
   b46f2:	4620      	mov	r0, r4
   b46f4:	f7ff ff83 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(y & 0xff);
   b46f8:	4631      	mov	r1, r6
   b46fa:	4620      	mov	r0, r4
   b46fc:	f7ff ff7f 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) >> 8);        
   b4700:	eb09 0108 	add.w	r1, r9, r8
   b4704:	3901      	subs	r1, #1
   b4706:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b470a:	4620      	mov	r0, r4
   b470c:	f7ff ff77 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) & 0xff);
   b4710:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   b4714:	4431      	add	r1, r6
   b4716:	b2c9      	uxtb	r1, r1
   b4718:	4620      	mov	r0, r4
   b471a:	f7ff ff70 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(0x01);         // Gates scan both inside and outside of the partial window. (default) 
   b471e:	2101      	movs	r1, #1
   b4720:	4620      	mov	r0, r4
   b4722:	f7ff ff6c 	bl	b45fe <_ZN3Epd8SendDataEh>
    DelayMs(2);
   b4726:	2002      	movs	r0, #2
   b4728:	f000 f962 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_1);
   b472c:	2110      	movs	r1, #16
   b472e:	4620      	mov	r0, r4
   b4730:	f7ff ff5a 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    if (buffer_black != NULL) {
   b4734:	b177      	cbz	r7, b4754 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
        for(int i = 0; i < w  / 8 * l; i++) {
   b4736:	2d00      	cmp	r5, #0
   b4738:	bfb8      	it	lt
   b473a:	3507      	addlt	r5, #7
   b473c:	10ed      	asrs	r5, r5, #3
   b473e:	fb08 f505 	mul.w	r5, r8, r5
   b4742:	2600      	movs	r6, #0
   b4744:	42b5      	cmp	r5, r6
   b4746:	dd05      	ble.n	b4754 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
            SendData(buffer_black[i]);  
   b4748:	5db9      	ldrb	r1, [r7, r6]
   b474a:	4620      	mov	r0, r4
   b474c:	f7ff ff57 	bl	b45fe <_ZN3Epd8SendDataEh>
        for(int i = 0; i < w  / 8 * l; i++) {
   b4750:	3601      	adds	r6, #1
   b4752:	e7f7      	b.n	b4744 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xae>
        }  
    }
    DelayMs(2);
   b4754:	2002      	movs	r0, #2
   b4756:	f000 f94b 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    SendCommand(PARTIAL_OUT);  
   b475a:	4620      	mov	r0, r4
   b475c:	2192      	movs	r1, #146	; 0x92
}
   b475e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SendCommand(PARTIAL_OUT);  
   b4762:	f7ff bf41 	b.w	b45e8 <_ZN3Epd11SendCommandEh>

000b4766 <_ZN3Epd19SetPartialWindowRedEPKhiiii>:

/**
 *  @brief: transmit partial data to the red part of SRAM
 */
void Epd::SetPartialWindowRed(const unsigned char* buffer_red, int x, int y, int w, int l) {
   b4766:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b476a:	4604      	mov	r4, r0
   b476c:	460f      	mov	r7, r1
    SendCommand(PARTIAL_IN);
   b476e:	2191      	movs	r1, #145	; 0x91
void Epd::SetPartialWindowRed(const unsigned char* buffer_red, int x, int y, int w, int l) {
   b4770:	4616      	mov	r6, r2
   b4772:	4699      	mov	r9, r3
   b4774:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    SendCommand(PARTIAL_IN);
   b4778:	f7ff ff36 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendCommand(PARTIAL_WINDOW);
   b477c:	2190      	movs	r1, #144	; 0x90
   b477e:	4620      	mov	r0, r4
    SendData(x >> 8);
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b4780:	f006 0af8 	and.w	sl, r6, #248	; 0xf8
    SendCommand(PARTIAL_WINDOW);
   b4784:	f7ff ff30 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendData(x >> 8);
   b4788:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b478c:	4620      	mov	r0, r4
   b478e:	f7ff ff36 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b4792:	4651      	mov	r1, sl
   b4794:	4620      	mov	r0, r4
   b4796:	f7ff ff32 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) >> 8);
   b479a:	4651      	mov	r1, sl
   b479c:	4429      	add	r1, r5
   b479e:	3901      	subs	r1, #1
   b47a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b47a4:	4620      	mov	r0, r4
   b47a6:	f7ff ff2a 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) | 0x07);
   b47aa:	1e69      	subs	r1, r5, #1
   b47ac:	4451      	add	r1, sl
   b47ae:	f041 0107 	orr.w	r1, r1, #7
   b47b2:	b2c9      	uxtb	r1, r1
   b47b4:	4620      	mov	r0, r4
   b47b6:	f7ff ff22 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(y >> 8);        
    SendData(y & 0xff);
   b47ba:	fa5f f689 	uxtb.w	r6, r9
    SendData(y >> 8);        
   b47be:	f3c9 2107 	ubfx	r1, r9, #8, #8
   b47c2:	4620      	mov	r0, r4
   b47c4:	f7ff ff1b 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(y & 0xff);
   b47c8:	4631      	mov	r1, r6
   b47ca:	4620      	mov	r0, r4
   b47cc:	f7ff ff17 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) >> 8);        
   b47d0:	eb09 0108 	add.w	r1, r9, r8
   b47d4:	3901      	subs	r1, #1
   b47d6:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b47da:	4620      	mov	r0, r4
   b47dc:	f7ff ff0f 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) & 0xff);
   b47e0:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   b47e4:	4431      	add	r1, r6
   b47e6:	b2c9      	uxtb	r1, r1
   b47e8:	4620      	mov	r0, r4
   b47ea:	f7ff ff08 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendData(0x01);         // Gates scan both inside and outside of the partial window. (default) 
   b47ee:	2101      	movs	r1, #1
   b47f0:	4620      	mov	r0, r4
   b47f2:	f7ff ff04 	bl	b45fe <_ZN3Epd8SendDataEh>
    DelayMs(2);
   b47f6:	2002      	movs	r0, #2
   b47f8:	f000 f8fa 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_2);
   b47fc:	2113      	movs	r1, #19
   b47fe:	4620      	mov	r0, r4
   b4800:	f7ff fef2 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    if (buffer_red != NULL) {
   b4804:	b177      	cbz	r7, b4824 <_ZN3Epd19SetPartialWindowRedEPKhiiii+0xbe>
        for(int i = 0; i < w  / 8 * l; i++) {
   b4806:	2d00      	cmp	r5, #0
   b4808:	bfb8      	it	lt
   b480a:	3507      	addlt	r5, #7
   b480c:	10ed      	asrs	r5, r5, #3
   b480e:	fb08 f505 	mul.w	r5, r8, r5
   b4812:	2600      	movs	r6, #0
   b4814:	42b5      	cmp	r5, r6
   b4816:	dd05      	ble.n	b4824 <_ZN3Epd19SetPartialWindowRedEPKhiiii+0xbe>
            SendData(buffer_red[i]);  
   b4818:	5db9      	ldrb	r1, [r7, r6]
   b481a:	4620      	mov	r0, r4
   b481c:	f7ff feef 	bl	b45fe <_ZN3Epd8SendDataEh>
        for(int i = 0; i < w  / 8 * l; i++) {
   b4820:	3601      	adds	r6, #1
   b4822:	e7f7      	b.n	b4814 <_ZN3Epd19SetPartialWindowRedEPKhiiii+0xae>
        }  
    }
    DelayMs(2);
   b4824:	2002      	movs	r0, #2
   b4826:	f000 f8e3 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    SendCommand(PARTIAL_OUT);  
   b482a:	4620      	mov	r0, r4
   b482c:	2192      	movs	r1, #146	; 0x92
}
   b482e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SendCommand(PARTIAL_OUT);  
   b4832:	f7ff bed9 	b.w	b45e8 <_ZN3Epd11SendCommandEh>

000b4836 <_ZN3Epd12DisplayFrameEPKhS1_>:

/**
 * @brief: refresh and displays the frame
 */
void Epd::DisplayFrame(const unsigned char* frame_black, const unsigned char* frame_red) {
   b4836:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4838:	4604      	mov	r4, r0
   b483a:	4615      	mov	r5, r2
    if (frame_black != NULL) {
   b483c:	460f      	mov	r7, r1
   b483e:	b1a9      	cbz	r1, b486c <_ZN3Epd12DisplayFrameEPKhS1_+0x36>
        SendCommand(DATA_START_TRANSMISSION_1);
   b4840:	2110      	movs	r1, #16
   b4842:	f7ff fed1 	bl	b45e8 <_ZN3Epd11SendCommandEh>
        DelayMs(2);
   b4846:	2002      	movs	r0, #2
   b4848:	f000 f8d2 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
        for (int i = 0; i < this->width / 8 * this->height; i++) {
   b484c:	2600      	movs	r6, #0
   b484e:	6823      	ldr	r3, [r4, #0]
   b4850:	6862      	ldr	r2, [r4, #4]
   b4852:	08db      	lsrs	r3, r3, #3
   b4854:	4353      	muls	r3, r2
   b4856:	42b3      	cmp	r3, r6
   b4858:	d905      	bls.n	b4866 <_ZN3Epd12DisplayFrameEPKhS1_+0x30>
            SendData(pgm_read_byte(&frame_black[i]));
   b485a:	5db9      	ldrb	r1, [r7, r6]
   b485c:	4620      	mov	r0, r4
   b485e:	f7ff fece 	bl	b45fe <_ZN3Epd8SendDataEh>
        for (int i = 0; i < this->width / 8 * this->height; i++) {
   b4862:	3601      	adds	r6, #1
   b4864:	e7f3      	b.n	b484e <_ZN3Epd12DisplayFrameEPKhS1_+0x18>
        }
        DelayMs(2);
   b4866:	2002      	movs	r0, #2
   b4868:	f000 f8c2 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    }
    if (frame_red != NULL) {
   b486c:	b1b5      	cbz	r5, b489c <_ZN3Epd12DisplayFrameEPKhS1_+0x66>
        SendCommand(DATA_START_TRANSMISSION_2);
   b486e:	2113      	movs	r1, #19
   b4870:	4620      	mov	r0, r4
   b4872:	f7ff feb9 	bl	b45e8 <_ZN3Epd11SendCommandEh>
        DelayMs(2);
   b4876:	2002      	movs	r0, #2
   b4878:	f000 f8ba 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
        for (int i = 0; i < this->width / 8 * this->height; i++) {
   b487c:	2600      	movs	r6, #0
   b487e:	6823      	ldr	r3, [r4, #0]
   b4880:	6862      	ldr	r2, [r4, #4]
   b4882:	08db      	lsrs	r3, r3, #3
   b4884:	4353      	muls	r3, r2
   b4886:	42b3      	cmp	r3, r6
   b4888:	d905      	bls.n	b4896 <_ZN3Epd12DisplayFrameEPKhS1_+0x60>
            SendData(pgm_read_byte(&frame_red[i]));
   b488a:	5da9      	ldrb	r1, [r5, r6]
   b488c:	4620      	mov	r0, r4
   b488e:	f7ff feb6 	bl	b45fe <_ZN3Epd8SendDataEh>
        for (int i = 0; i < this->width / 8 * this->height; i++) {
   b4892:	3601      	adds	r6, #1
   b4894:	e7f3      	b.n	b487e <_ZN3Epd12DisplayFrameEPKhS1_+0x48>
        }
        DelayMs(2);
   b4896:	2002      	movs	r0, #2
   b4898:	f000 f8aa 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    }
    SendCommand(DISPLAY_REFRESH);
   b489c:	4620      	mov	r0, r4
   b489e:	2112      	movs	r1, #18
   b48a0:	f7ff fea2 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b48a4:	4620      	mov	r0, r4
}
   b48a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    WaitUntilIdle();
   b48aa:	f7ff beb3 	b.w	b4614 <_ZN3Epd13WaitUntilIdleEv>

000b48ae <_ZN3Epd10ClearFrameEv>:

/**
 * @brief: clear the frame data from the SRAM, this won't refresh the display
 */
void Epd::ClearFrame(void) {
   b48ae:	b538      	push	{r3, r4, r5, lr}
    SendCommand(DATA_START_TRANSMISSION_1);           
   b48b0:	2110      	movs	r1, #16
void Epd::ClearFrame(void) {
   b48b2:	4604      	mov	r4, r0
    SendCommand(DATA_START_TRANSMISSION_1);           
   b48b4:	f7ff fe98 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b48b8:	2002      	movs	r0, #2
   b48ba:	f000 f899 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b48be:	2500      	movs	r5, #0
   b48c0:	6823      	ldr	r3, [r4, #0]
   b48c2:	6862      	ldr	r2, [r4, #4]
   b48c4:	08db      	lsrs	r3, r3, #3
   b48c6:	4353      	muls	r3, r2
   b48c8:	42ab      	cmp	r3, r5
   b48ca:	d905      	bls.n	b48d8 <_ZN3Epd10ClearFrameEv+0x2a>
        SendData(0xFF);  
   b48cc:	21ff      	movs	r1, #255	; 0xff
   b48ce:	4620      	mov	r0, r4
   b48d0:	f7ff fe95 	bl	b45fe <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b48d4:	3501      	adds	r5, #1
   b48d6:	e7f3      	b.n	b48c0 <_ZN3Epd10ClearFrameEv+0x12>
    }  
    DelayMs(2);
   b48d8:	2002      	movs	r0, #2
   b48da:	f000 f889 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_2);           
   b48de:	2113      	movs	r1, #19
   b48e0:	4620      	mov	r0, r4
   b48e2:	f7ff fe81 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b48e6:	2002      	movs	r0, #2
   b48e8:	f000 f882 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b48ec:	2500      	movs	r5, #0
   b48ee:	6823      	ldr	r3, [r4, #0]
   b48f0:	6862      	ldr	r2, [r4, #4]
   b48f2:	08db      	lsrs	r3, r3, #3
   b48f4:	4353      	muls	r3, r2
   b48f6:	42ab      	cmp	r3, r5
   b48f8:	d905      	bls.n	b4906 <_ZN3Epd10ClearFrameEv+0x58>
        SendData(0xFF);  
   b48fa:	21ff      	movs	r1, #255	; 0xff
   b48fc:	4620      	mov	r0, r4
   b48fe:	f7ff fe7e 	bl	b45fe <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b4902:	3501      	adds	r5, #1
   b4904:	e7f3      	b.n	b48ee <_ZN3Epd10ClearFrameEv+0x40>
    }  
    DelayMs(2);
}
   b4906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    DelayMs(2);
   b490a:	2002      	movs	r0, #2
   b490c:	f000 b870 	b.w	b49f0 <_ZN5EpdIf7DelayMsEj>

000b4910 <_ZN3Epd12DisplayFrameEv>:

/**
 * @brief: This displays the frame data from SRAM
 */
void Epd::DisplayFrame(void) {
   b4910:	b510      	push	{r4, lr}
    SendCommand(DISPLAY_REFRESH); 
   b4912:	2112      	movs	r1, #18
void Epd::DisplayFrame(void) {
   b4914:	4604      	mov	r4, r0
    SendCommand(DISPLAY_REFRESH); 
   b4916:	f7ff fe67 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    DelayMs(100);
   b491a:	2064      	movs	r0, #100	; 0x64
   b491c:	f000 f868 	bl	b49f0 <_ZN5EpdIf7DelayMsEj>
    WaitUntilIdle();
   b4920:	4620      	mov	r0, r4
}
   b4922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WaitUntilIdle();
   b4926:	f7ff be75 	b.w	b4614 <_ZN3Epd13WaitUntilIdleEv>

000b492a <_ZN3Epd5SleepEv>:
 * @brief: After this command is transmitted, the chip would enter the deep-sleep mode to save power. 
 *         The deep sleep mode would return to standby by hardware reset. The only one parameter is a 
 *         check code, the command would be executed if check code = 0xA5. 
 *         You can use Epd::Reset() to awaken and use Epd::Init() to initialize.
 */
void Epd::Sleep() {
   b492a:	b510      	push	{r4, lr}
    SendCommand(VCOM_AND_DATA_INTERVAL_SETTING);
   b492c:	2150      	movs	r1, #80	; 0x50
void Epd::Sleep() {
   b492e:	4604      	mov	r4, r0
    SendCommand(VCOM_AND_DATA_INTERVAL_SETTING);
   b4930:	f7ff fe5a 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendData(0xF7);     // border floating
   b4934:	4620      	mov	r0, r4
   b4936:	21f7      	movs	r1, #247	; 0xf7
   b4938:	f7ff fe61 	bl	b45fe <_ZN3Epd8SendDataEh>
    SendCommand(POWER_OFF);
   b493c:	2102      	movs	r1, #2
   b493e:	4620      	mov	r0, r4
   b4940:	f7ff fe52 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b4944:	4620      	mov	r0, r4
   b4946:	f7ff fe65 	bl	b4614 <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(DEEP_SLEEP);
   b494a:	4620      	mov	r0, r4
   b494c:	2107      	movs	r1, #7
   b494e:	f7ff fe4b 	bl	b45e8 <_ZN3Epd11SendCommandEh>
    SendData(0xA5);     // check code
   b4952:	4620      	mov	r0, r4
   b4954:	21a5      	movs	r1, #165	; 0xa5
}
   b4956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SendData(0xA5);     // check code
   b495a:	f7ff be50 	b.w	b45fe <_ZN3Epd8SendDataEh>

000b495e <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b495e:	4770      	bx	lr

000b4960 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4960:	b510      	push	{r4, lr}
  }
   b4962:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4964:	4604      	mov	r4, r0
  }
   b4966:	f7ff fbaa 	bl	b40be <_ZdlPvj>
   b496a:	4620      	mov	r0, r4
   b496c:	bd10      	pop	{r4, pc}

000b496e <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b496e:	b40e      	push	{r1, r2, r3}
   b4970:	b503      	push	{r0, r1, lr}
   b4972:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4974:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4976:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b497a:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b497c:	f001 fd49 	bl	b6412 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4980:	b002      	add	sp, #8
   b4982:	f85d eb04 	ldr.w	lr, [sp], #4
   b4986:	b003      	add	sp, #12
   b4988:	4770      	bx	lr
	...

000b498c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b498c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b498e:	4604      	mov	r4, r0
   b4990:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4992:	7922      	ldrb	r2, [r4, #4]
   b4994:	68a3      	ldr	r3, [r4, #8]
   b4996:	b132      	cbz	r2, b49a6 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4998:	b9a3      	cbnz	r3, b49c4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b499a:	490b      	ldr	r1, [pc, #44]	; (b49c8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b499c:	b002      	add	sp, #8
   b499e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b49a2:	f001 bcfb 	b.w	b639c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49a6:	4a09      	ldr	r2, [pc, #36]	; (b49cc <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b49a8:	7b26      	ldrb	r6, [r4, #12]
   b49aa:	4d09      	ldr	r5, [pc, #36]	; (b49d0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b49ac:	4909      	ldr	r1, [pc, #36]	; (b49d4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b49ae:	7b64      	ldrb	r4, [r4, #13]
   b49b0:	2e01      	cmp	r6, #1
   b49b2:	bf18      	it	ne
   b49b4:	4629      	movne	r1, r5
   b49b6:	e9cd 1400 	strd	r1, r4, [sp]
   b49ba:	4907      	ldr	r1, [pc, #28]	; (b49d8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b49bc:	f7ff ffd7 	bl	b496e <_ZN5Print6printfEPKcz>
  }
   b49c0:	b002      	add	sp, #8
   b49c2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b49c4:	4a05      	ldr	r2, [pc, #20]	; (b49dc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b49c6:	e7ef      	b.n	b49a8 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b49c8:	000b703f 	.word	0x000b703f
   b49cc:	000b6f76 	.word	0x000b6f76
   b49d0:	000b703b 	.word	0x000b703b
   b49d4:	000b7037 	.word	0x000b7037
   b49d8:	000b7055 	.word	0x000b7055
   b49dc:	000b702e 	.word	0x000b702e

000b49e0 <_ZN5EpdIfC1Ev>:
#include "../lib/E_Paper/src/epdif.h"

#include <SPI.h>

EpdIf::EpdIf() {
};
   b49e0:	4770      	bx	lr

000b49e2 <_ZN5EpdIf12DigitalWriteEii>:

EpdIf::~EpdIf() {
};

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
   b49e2:	b2c9      	uxtb	r1, r1
   b49e4:	b280      	uxth	r0, r0
   b49e6:	f002 b8fc 	b.w	b6be2 <digitalWrite>

000b49ea <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
   b49ea:	b280      	uxth	r0, r0
   b49ec:	f002 b912 	b.w	b6c14 <digitalRead>

000b49f0 <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
   b49f0:	f000 bf94 	b.w	b591c <delay>

000b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b49f4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b49f6:	4c0b      	ldr	r4, [pc, #44]	; (b4a24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b49f8:	7821      	ldrb	r1, [r4, #0]
   b49fa:	f3bf 8f5b 	dmb	ish
   b49fe:	f011 0101 	ands.w	r1, r1, #1
   b4a02:	d10b      	bne.n	b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4a04:	4620      	mov	r0, r4
   b4a06:	9101      	str	r1, [sp, #4]
   b4a08:	f7ff fb5b 	bl	b40c2 <__cxa_guard_acquire>
   b4a0c:	9901      	ldr	r1, [sp, #4]
   b4a0e:	b128      	cbz	r0, b4a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4a10:	4805      	ldr	r0, [pc, #20]	; (b4a28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4a12:	f001 fd3b 	bl	b648c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4a16:	4620      	mov	r0, r4
   b4a18:	f7ff fb58 	bl	b40cc <__cxa_guard_release>
        return instance;
    }
   b4a1c:	4802      	ldr	r0, [pc, #8]	; (b4a28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4a1e:	b002      	add	sp, #8
   b4a20:	bd10      	pop	{r4, pc}
   b4a22:	bf00      	nop
   b4a24:	2003e690 	.word	0x2003e690
   b4a28:	2003e694 	.word	0x2003e694

000b4a2c <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
   b4a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
   b4a2e:	2101      	movs	r1, #1
   b4a30:	2008      	movs	r0, #8
   b4a32:	f002 f8c5 	bl	b6bc0 <pinMode>
    pinMode(RST_PIN, OUTPUT);
   b4a36:	2101      	movs	r1, #1
   b4a38:	2006      	movs	r0, #6
   b4a3a:	f002 f8c1 	bl	b6bc0 <pinMode>
    pinMode(DC_PIN, OUTPUT);
   b4a3e:	2101      	movs	r1, #1
   b4a40:	2005      	movs	r0, #5
   b4a42:	f002 f8bd 	bl	b6bc0 <pinMode>
    pinMode(BUSY_PIN, INPUT); 
   b4a46:	2100      	movs	r1, #0
   b4a48:	2007      	movs	r0, #7
   b4a4a:	f002 f8b9 	bl	b6bc0 <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4a4e:	f7ff ffd1 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a52:	f001 fd25 	bl	b64a0 <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
   b4a56:	4b09      	ldr	r3, [pc, #36]	; (b4a7c <_ZN5EpdIf6IfInitEv+0x50>)
   b4a58:	9300      	str	r3, [sp, #0]
   b4a5a:	4b09      	ldr	r3, [pc, #36]	; (b4a80 <_ZN5EpdIf6IfInitEv+0x54>)
   b4a5c:	9302      	str	r3, [sp, #8]
   b4a5e:	2400      	movs	r4, #0
   b4a60:	2301      	movs	r3, #1
   b4a62:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a66:	f88d 4004 	strb.w	r4, [sp, #4]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b4a6a:	f7ff ffc3 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a6e:	4669      	mov	r1, sp
   b4a70:	f001 fd40 	bl	b64f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    return 0;
}
   b4a74:	4620      	mov	r0, r4
   b4a76:	b004      	add	sp, #16
   b4a78:	bd10      	pop	{r4, pc}
   b4a7a:	bf00      	nop
   b4a7c:	000b707c 	.word	0x000b707c
   b4a80:	001e8480 	.word	0x001e8480

000b4a84 <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
   b4a84:	b510      	push	{r4, lr}
    digitalWrite(CS_PIN, LOW);
   b4a86:	2100      	movs	r1, #0
void EpdIf::SpiTransfer(unsigned char data) {
   b4a88:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
   b4a8a:	2008      	movs	r0, #8
   b4a8c:	f002 f8a9 	bl	b6be2 <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4a90:	f7ff ffb0 	bl	b49f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a94:	4621      	mov	r1, r4
   b4a96:	f001 fd9b 	bl	b65d0 <_ZN8SPIClass8transferEh>
}
   b4a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
   b4a9e:	2101      	movs	r1, #1
   b4aa0:	2008      	movs	r0, #8
   b4aa2:	f002 b89e 	b.w	b6be2 <digitalWrite>

000b4aa6 <_ZN5PaintC1EPhii>:

#include <avr/pgmspace.h>
//#include "epdpaint.h"
#include "../lib/E_Paper/src/epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
   b4aa6:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
   b4aa8:	2400      	movs	r4, #0
   b4aaa:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4aac:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
   b4ab0:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4ab2:	d008      	beq.n	b4ac6 <_ZN5PaintC1EPhii+0x20>
   b4ab4:	f102 0508 	add.w	r5, r2, #8
   b4ab8:	4252      	negs	r2, r2
   b4aba:	f002 0107 	and.w	r1, r2, #7
   b4abe:	4622      	mov	r2, r4
   b4ac0:	bf58      	it	pl
   b4ac2:	424a      	negpl	r2, r1
   b4ac4:	1aaa      	subs	r2, r5, r2
    this->height = height;
   b4ac6:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
   b4aca:	bd30      	pop	{r4, r5, pc}

000b4acc <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
   b4acc:	4770      	bx	lr

000b4ace <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4ace:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
   b4ad0:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4ad2:	db15      	blt.n	b4b00 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4ad4:	6844      	ldr	r4, [r0, #4]
   b4ad6:	428c      	cmp	r4, r1
   b4ad8:	dd12      	ble.n	b4b00 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4ada:	2a00      	cmp	r2, #0
   b4adc:	db10      	blt.n	b4b00 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4ade:	6885      	ldr	r5, [r0, #8]
   b4ae0:	4295      	cmp	r5, r2
   b4ae2:	dd0d      	ble.n	b4b00 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b4ae4:	fb02 1204 	mla	r2, r2, r4, r1
   b4ae8:	6805      	ldr	r5, [r0, #0]
   b4aea:	10d2      	asrs	r2, r2, #3
   b4aec:	f001 0107 	and.w	r1, r1, #7
   b4af0:	2480      	movs	r4, #128	; 0x80
   b4af2:	fa44 f101 	asr.w	r1, r4, r1
   b4af6:	56a8      	ldrsb	r0, [r5, r2]
   b4af8:	b249      	sxtb	r1, r1
        if (colored) {
   b4afa:	b113      	cbz	r3, b4b02 <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b4afc:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b4afe:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
   b4b00:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b4b02:	ea20 0001 	bic.w	r0, r0, r1
   b4b06:	e7fa      	b.n	b4afe <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

000b4b08 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
   b4b08:	b570      	push	{r4, r5, r6, lr}
   b4b0a:	460b      	mov	r3, r1
   b4b0c:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
   b4b0e:	2500      	movs	r5, #0
   b4b10:	6862      	ldr	r2, [r4, #4]
   b4b12:	42aa      	cmp	r2, r5
   b4b14:	dd0c      	ble.n	b4b30 <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
   b4b16:	2600      	movs	r6, #0
   b4b18:	68a2      	ldr	r2, [r4, #8]
   b4b1a:	42b2      	cmp	r2, r6
   b4b1c:	dd06      	ble.n	b4b2c <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
   b4b1e:	4632      	mov	r2, r6
   b4b20:	4629      	mov	r1, r5
   b4b22:	4620      	mov	r0, r4
   b4b24:	f7ff ffd3 	bl	b4ace <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
   b4b28:	3601      	adds	r6, #1
   b4b2a:	e7f5      	b.n	b4b18 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
   b4b2c:	3501      	adds	r5, #1
   b4b2e:	e7ef      	b.n	b4b10 <_ZN5Paint5ClearEi+0x8>
}
   b4b30:	bd70      	pop	{r4, r5, r6, pc}

000b4b32 <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
   b4b32:	6800      	ldr	r0, [r0, #0]
   b4b34:	4770      	bx	lr

000b4b36 <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
   b4b36:	6840      	ldr	r0, [r0, #4]
   b4b38:	4770      	bx	lr

000b4b3a <_ZN5Paint8SetWidthEi>:

void Paint::SetWidth(int width) {
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4b3a:	f011 0207 	ands.w	r2, r1, #7
void Paint::SetWidth(int width) {
   b4b3e:	b510      	push	{r4, lr}
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4b40:	d007      	beq.n	b4b52 <_ZN5Paint8SetWidthEi+0x18>
   b4b42:	f101 0408 	add.w	r4, r1, #8
   b4b46:	4249      	negs	r1, r1
   b4b48:	f001 0307 	and.w	r3, r1, #7
   b4b4c:	bf58      	it	pl
   b4b4e:	425a      	negpl	r2, r3
   b4b50:	1aa1      	subs	r1, r4, r2
   b4b52:	6041      	str	r1, [r0, #4]
}
   b4b54:	bd10      	pop	{r4, pc}

000b4b56 <_ZN5Paint9GetHeightEv>:

int Paint::GetHeight(void) {
    return this->height;
}
   b4b56:	6880      	ldr	r0, [r0, #8]
   b4b58:	4770      	bx	lr

000b4b5a <_ZN5Paint9SetHeightEi>:

void Paint::SetHeight(int height) {
    this->height = height;
   b4b5a:	6081      	str	r1, [r0, #8]
}
   b4b5c:	4770      	bx	lr

000b4b5e <_ZN5Paint9DrawPixelEiii>:
}

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
   b4b5e:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
   b4b60:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
   b4b62:	460d      	mov	r5, r1
   b4b64:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
   b4b66:	b967      	cbnz	r7, b4b82 <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4b68:	2900      	cmp	r1, #0
   b4b6a:	db37      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b6c:	6847      	ldr	r7, [r0, #4]
   b4b6e:	428f      	cmp	r7, r1
   b4b70:	dd34      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b72:	2a00      	cmp	r2, #0
   b4b74:	db32      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b76:	6885      	ldr	r5, [r0, #8]
   b4b78:	4295      	cmp	r5, r2
   b4b7a:	dd2f      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
   b4b7c:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
   b4b7e:	f7ff bfa6 	b.w	b4ace <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
   b4b82:	2f01      	cmp	r7, #1
   b4b84:	d10c      	bne.n	b4ba0 <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b4b86:	2900      	cmp	r1, #0
   b4b88:	db28      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b8a:	6882      	ldr	r2, [r0, #8]
   b4b8c:	428a      	cmp	r2, r1
   b4b8e:	dd25      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b90:	2c00      	cmp	r4, #0
   b4b92:	db23      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b94:	6841      	ldr	r1, [r0, #4]
   b4b96:	42a1      	cmp	r1, r4
   b4b98:	dd20      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4b9a:	462a      	mov	r2, r5
   b4b9c:	1b09      	subs	r1, r1, r4
   b4b9e:	e7ed      	b.n	b4b7c <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
   b4ba0:	2f02      	cmp	r7, #2
   b4ba2:	d10c      	bne.n	b4bbe <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4ba4:	2900      	cmp	r1, #0
   b4ba6:	db19      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4ba8:	6841      	ldr	r1, [r0, #4]
   b4baa:	42a9      	cmp	r1, r5
   b4bac:	dd16      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4bae:	2a00      	cmp	r2, #0
   b4bb0:	db14      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4bb2:	6882      	ldr	r2, [r0, #8]
   b4bb4:	42a2      	cmp	r2, r4
   b4bb6:	dd11      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4bb8:	1b12      	subs	r2, r2, r4
   b4bba:	1b49      	subs	r1, r1, r5
   b4bbc:	e7de      	b.n	b4b7c <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
   b4bbe:	2f03      	cmp	r7, #3
   b4bc0:	d10c      	bne.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b4bc2:	2900      	cmp	r1, #0
   b4bc4:	db0a      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4bc6:	6882      	ldr	r2, [r0, #8]
   b4bc8:	428a      	cmp	r2, r1
   b4bca:	dd07      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4bcc:	2c00      	cmp	r4, #0
   b4bce:	db05      	blt.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
   b4bd0:	6841      	ldr	r1, [r0, #4]
   b4bd2:	42a1      	cmp	r1, r4
   b4bd4:	dd02      	ble.n	b4bdc <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4bd6:	1b52      	subs	r2, r2, r5
   b4bd8:	4621      	mov	r1, r4
   b4bda:	e7cf      	b.n	b4b7c <_ZN5Paint9DrawPixelEiii+0x1e>
}
   b4bdc:	bcf0      	pop	{r4, r5, r6, r7}
   b4bde:	4770      	bx	lr

000b4be0 <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4be4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b4be6:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4be8:	4691      	mov	r9, r2
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b4bea:	f014 0207 	ands.w	r2, r4, #7
   b4bee:	bf18      	it	ne
   b4bf0:	2201      	movne	r2, #1
   b4bf2:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
   b4bf6:	88ec      	ldrh	r4, [r5, #6]
   b4bf8:	3b20      	subs	r3, #32
   b4bfa:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
   b4bfc:	682c      	ldr	r4, [r5, #0]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4bfe:	4688      	mov	r8, r1
    const unsigned char* ptr = &font->table[char_offset];
   b4c00:	fb03 4402 	mla	r4, r3, r2, r4

    for (j = 0; j < font->Height; j++) {
   b4c04:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b4c06:	f04f 0b80 	mov.w	fp, #128	; 0x80
    for (j = 0; j < font->Height; j++) {
   b4c0a:	88eb      	ldrh	r3, [r5, #6]
   b4c0c:	42bb      	cmp	r3, r7
   b4c0e:	dd20      	ble.n	b4c52 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
   b4c10:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
   b4c12:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
   b4c16:	88ab      	ldrh	r3, [r5, #4]
   b4c18:	42b3      	cmp	r3, r6
   b4c1a:	dd15      	ble.n	b4c48 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b4c1c:	7821      	ldrb	r1, [r4, #0]
   b4c1e:	f006 0a07 	and.w	sl, r6, #7
   b4c22:	fa4b f30a 	asr.w	r3, fp, sl
   b4c26:	4219      	tst	r1, r3
   b4c28:	d008      	beq.n	b4c3c <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
   b4c2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4c2c:	9201      	str	r2, [sp, #4]
   b4c2e:	eb06 0108 	add.w	r1, r6, r8
   b4c32:	9000      	str	r0, [sp, #0]
   b4c34:	f7ff ff93 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
   b4c38:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
   b4c3c:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
   b4c40:	bf08      	it	eq
   b4c42:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
   b4c44:	3601      	adds	r6, #1
   b4c46:	e7e6      	b.n	b4c16 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
   b4c48:	075b      	lsls	r3, r3, #29
            ptr++;
   b4c4a:	bf18      	it	ne
   b4c4c:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
   b4c4e:	3701      	adds	r7, #1
   b4c50:	e7db      	b.n	b4c0a <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
   b4c52:	b003      	add	sp, #12
   b4c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4c58 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
   b4c58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4c5c:	9f08      	ldr	r7, [sp, #32]
   b4c5e:	4606      	mov	r6, r0
   b4c60:	460c      	mov	r4, r1
   b4c62:	4690      	mov	r8, r2
   b4c64:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
   b4c66:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4c6a:	b153      	cbz	r3, b4c82 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
   b4c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4c6e:	4621      	mov	r1, r4
   b4c70:	e9cd 7200 	strd	r7, r2, [sp]
   b4c74:	4630      	mov	r0, r6
   b4c76:	4642      	mov	r2, r8
   b4c78:	f7ff ffb2 	bl	b4be0 <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
   b4c7c:	88bb      	ldrh	r3, [r7, #4]
   b4c7e:	441c      	add	r4, r3
    while (*p_text != 0) {
   b4c80:	e7f1      	b.n	b4c66 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
   b4c82:	b002      	add	sp, #8
   b4c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4c88 <_ZN5Paint8DrawLineEiiiii>:

/**
*  @brief: this draws a line on the frame buffer
*/
void Paint::DrawLine(int x0, int y0, int x1, int y1, int colored) {
   b4c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4c8c:	b085      	sub	sp, #20
    /* Bresenham algorithm */
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
   b4c8e:	1a5d      	subs	r5, r3, r1
void Paint::DrawLine(int x0, int y0, int x1, int y1, int colored) {
   b4c90:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
   b4c94:	2d00      	cmp	r5, #0
    int sx = x0 < x1 ? 1 : -1;
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
   b4c96:	eba8 0602 	sub.w	r6, r8, r2
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
   b4c9a:	bfb8      	it	lt
   b4c9c:	426d      	neglt	r5, r5
    int sx = x0 < x1 ? 1 : -1;
   b4c9e:	428b      	cmp	r3, r1
   b4ca0:	bfcc      	ite	gt
   b4ca2:	f04f 0a01 	movgt.w	sl, #1
   b4ca6:	f04f 3aff 	movle.w	sl, #4294967295	; 0xffffffff
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
   b4caa:	2e00      	cmp	r6, #0
   b4cac:	bfb8      	it	lt
   b4cae:	4276      	neglt	r6, r6
void Paint::DrawLine(int x0, int y0, int x1, int y1, int colored) {
   b4cb0:	461f      	mov	r7, r3
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
   b4cb2:	f1c6 0b00 	rsb	fp, r6, #0
    int sy = y0 < y1 ? 1 : -1;
   b4cb6:	4590      	cmp	r8, r2
   b4cb8:	bfcc      	ite	gt
   b4cba:	f04f 0901 	movgt.w	r9, #1
   b4cbe:	f04f 39ff 	movle.w	r9, #4294967295	; 0xffffffff
    int err = dx + dy;
   b4cc2:	1bac      	subs	r4, r5, r6

    while((x0 != x1) && (y0 != y1)) {
   b4cc4:	42b9      	cmp	r1, r7
   b4cc6:	d015      	beq.n	b4cf4 <_ZN5Paint8DrawLineEiiiii+0x6c>
   b4cc8:	4542      	cmp	r2, r8
   b4cca:	d013      	beq.n	b4cf4 <_ZN5Paint8DrawLineEiiiii+0x6c>
        DrawPixel(x0, y0 , colored);
   b4ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   b4cce:	9001      	str	r0, [sp, #4]
   b4cd0:	e9cd 1202 	strd	r1, r2, [sp, #8]
   b4cd4:	f7ff ff43 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        if (2 * err >= dy) {     
   b4cd8:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
   b4cdc:	ebbb 0f44 	cmp.w	fp, r4, lsl #1
   b4ce0:	bfdc      	itt	le
   b4ce2:	1ba4      	suble	r4, r4, r6
            err += dy;
            x0 += sx;
   b4ce4:	4451      	addle	r1, sl
        }
        if (2 * err <= dx) {
   b4ce6:	ebb5 0f44 	cmp.w	r5, r4, lsl #1
        if (2 * err >= dy) {     
   b4cea:	9a03      	ldr	r2, [sp, #12]
        if (2 * err <= dx) {
   b4cec:	dbea      	blt.n	b4cc4 <_ZN5Paint8DrawLineEiiiii+0x3c>
            err += dx; 
   b4cee:	442c      	add	r4, r5
            y0 += sy;
   b4cf0:	444a      	add	r2, r9
   b4cf2:	e7e7      	b.n	b4cc4 <_ZN5Paint8DrawLineEiiiii+0x3c>
        }
    }
}
   b4cf4:	b005      	add	sp, #20
   b4cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4cfa <_ZN5Paint18DrawHorizontalLineEiiii>:

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
   b4cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4cfc:	4606      	mov	r6, r0
   b4cfe:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
   b4d00:	460c      	mov	r4, r1
   b4d02:	18cd      	adds	r5, r1, r3
   b4d04:	42a5      	cmp	r5, r4
   b4d06:	dd07      	ble.n	b4d18 <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
   b4d08:	4621      	mov	r1, r4
   b4d0a:	9b06      	ldr	r3, [sp, #24]
   b4d0c:	463a      	mov	r2, r7
   b4d0e:	4630      	mov	r0, r6
   b4d10:	f7ff ff25 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
   b4d14:	3401      	adds	r4, #1
   b4d16:	e7f5      	b.n	b4d04 <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
   b4d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d1a <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
   b4d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4d1c:	4606      	mov	r6, r0
   b4d1e:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
   b4d20:	4614      	mov	r4, r2
   b4d22:	18d5      	adds	r5, r2, r3
   b4d24:	42a5      	cmp	r5, r4
   b4d26:	dd07      	ble.n	b4d38 <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
   b4d28:	4622      	mov	r2, r4
   b4d2a:	9b06      	ldr	r3, [sp, #24]
   b4d2c:	4639      	mov	r1, r7
   b4d2e:	4630      	mov	r0, r6
   b4d30:	f7ff ff15 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
   b4d34:	3401      	adds	r4, #1
   b4d36:	e7f5      	b.n	b4d24 <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
   b4d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4d3a <_ZN5Paint13DrawRectangleEiiiii>:

/**
*  @brief: this draws a rectangle
*/
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b4d3a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4d3e:	460f      	mov	r7, r1
   b4d40:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
   b4d44:	42bb      	cmp	r3, r7
   b4d46:	4619      	mov	r1, r3
   b4d48:	bfa8      	it	ge
   b4d4a:	4639      	movge	r1, r7
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b4d4c:	42bb      	cmp	r3, r7
   b4d4e:	bfb8      	it	lt
   b4d50:	463b      	movlt	r3, r7
   b4d52:	4294      	cmp	r4, r2
   b4d54:	4627      	mov	r7, r4
   b4d56:	461d      	mov	r5, r3
    min_y = y1 > y0 ? y0 : y1;
   b4d58:	bfa8      	it	ge
   b4d5a:	4617      	movge	r7, r2
    max_y = y1 > y0 ? y1 : y0;
    
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b4d5c:	1a5b      	subs	r3, r3, r1
   b4d5e:	4294      	cmp	r4, r2
   b4d60:	bfb8      	it	lt
   b4d62:	4614      	movlt	r4, r2
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b4d64:	4606      	mov	r6, r0
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b4d66:	3301      	adds	r3, #1
   b4d68:	463a      	mov	r2, r7
   b4d6a:	f8cd 8000 	str.w	r8, [sp]
   b4d6e:	9303      	str	r3, [sp, #12]
   b4d70:	9102      	str	r1, [sp, #8]
   b4d72:	f7ff ffc2 	bl	b4cfa <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawHorizontalLine(min_x, max_y, max_x - min_x + 1, colored);
   b4d76:	9b03      	ldr	r3, [sp, #12]
   b4d78:	9902      	ldr	r1, [sp, #8]
   b4d7a:	f8cd 8000 	str.w	r8, [sp]
   b4d7e:	4622      	mov	r2, r4
   b4d80:	4630      	mov	r0, r6
   b4d82:	9103      	str	r1, [sp, #12]
   b4d84:	f7ff ffb9 	bl	b4cfa <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawVerticalLine(min_x, min_y, max_y - min_y + 1, colored);
   b4d88:	1be3      	subs	r3, r4, r7
   b4d8a:	9903      	ldr	r1, [sp, #12]
   b4d8c:	f8cd 8000 	str.w	r8, [sp]
   b4d90:	3301      	adds	r3, #1
   b4d92:	463a      	mov	r2, r7
   b4d94:	4630      	mov	r0, r6
   b4d96:	9302      	str	r3, [sp, #8]
   b4d98:	f7ff ffbf 	bl	b4d1a <_ZN5Paint16DrawVerticalLineEiiii>
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b4d9c:	9b02      	ldr	r3, [sp, #8]
   b4d9e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4da2:	463a      	mov	r2, r7
   b4da4:	4629      	mov	r1, r5
   b4da6:	4630      	mov	r0, r6
}
   b4da8:	b004      	add	sp, #16
   b4daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b4dae:	f7ff bfb4 	b.w	b4d1a <_ZN5Paint16DrawVerticalLineEiiii>

000b4db2 <_ZN5Paint19DrawFilledRectangleEiiiii>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
   b4db2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4db6:	428b      	cmp	r3, r1
   b4db8:	4604      	mov	r4, r0
   b4dba:	9808      	ldr	r0, [sp, #32]
   b4dbc:	461e      	mov	r6, r3
   b4dbe:	bfa8      	it	ge
   b4dc0:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b4dc2:	428b      	cmp	r3, r1
   b4dc4:	bfb8      	it	lt
   b4dc6:	460b      	movlt	r3, r1
   b4dc8:	4290      	cmp	r0, r2
   b4dca:	4680      	mov	r8, r0
   b4dcc:	bfa8      	it	ge
   b4dce:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b4dd0:	4290      	cmp	r0, r2
   b4dd2:	bfac      	ite	ge
   b4dd4:	ebc8 0700 	rsbge	r7, r8, r0
   b4dd8:	ebc8 0702 	rsblt	r7, r8, r2
   b4ddc:	461d      	mov	r5, r3
   b4dde:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
   b4de0:	42ae      	cmp	r6, r5
   b4de2:	dc09      	bgt.n	b4df8 <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b4de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4de6:	9300      	str	r3, [sp, #0]
   b4de8:	4631      	mov	r1, r6
   b4dea:	463b      	mov	r3, r7
   b4dec:	4642      	mov	r2, r8
   b4dee:	4620      	mov	r0, r4
   b4df0:	f7ff ff93 	bl	b4d1a <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
   b4df4:	3601      	adds	r6, #1
   b4df6:	e7f3      	b.n	b4de0 <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
   b4df8:	b002      	add	sp, #8
   b4dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4dfe <_ZN5Paint10DrawCircleEiiii>:

/**
*  @brief: this draws a circle
*/
void Paint::DrawCircle(int x, int y, int radius, int colored) {
   b4dfe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    /* Bresenham algorithm */
    int x_pos = -radius;
   b4e02:	425d      	negs	r5, r3
    int y_pos = 0;
    int err = 2 - 2 * radius;
   b4e04:	f1c3 0301 	rsb	r3, r3, #1
void Paint::DrawCircle(int x, int y, int radius, int colored) {
   b4e08:	4681      	mov	r9, r0
   b4e0a:	460f      	mov	r7, r1
   b4e0c:	4690      	mov	r8, r2
    int err = 2 - 2 * radius;
   b4e0e:	005c      	lsls	r4, r3, #1
    int y_pos = 0;
   b4e10:	2600      	movs	r6, #0
    int e2;

    do {
        DrawPixel(x - x_pos, y + y_pos, colored);
   b4e12:	eba7 0a05 	sub.w	sl, r7, r5
   b4e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4e18:	eb06 0208 	add.w	r2, r6, r8
   b4e1c:	4651      	mov	r1, sl
   b4e1e:	4648      	mov	r0, r9
   b4e20:	9200      	str	r2, [sp, #0]
   b4e22:	f7ff fe9c 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawPixel(x + x_pos, y + y_pos, colored);
   b4e26:	19e9      	adds	r1, r5, r7
   b4e28:	9a00      	ldr	r2, [sp, #0]
   b4e2a:	9101      	str	r1, [sp, #4]
   b4e2c:	4648      	mov	r0, r9
   b4e2e:	f7ff fe96 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawPixel(x + x_pos, y - y_pos, colored);
   b4e32:	eba8 0206 	sub.w	r2, r8, r6
   b4e36:	9901      	ldr	r1, [sp, #4]
   b4e38:	9200      	str	r2, [sp, #0]
   b4e3a:	4648      	mov	r0, r9
   b4e3c:	f7ff fe8f 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawPixel(x - x_pos, y - y_pos, colored);
   b4e40:	9a00      	ldr	r2, [sp, #0]
   b4e42:	4651      	mov	r1, sl
   b4e44:	4648      	mov	r0, r9
   b4e46:	f7ff fe8a 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        e2 = err;
        if (e2 <= y_pos) {
   b4e4a:	42a6      	cmp	r6, r4
   b4e4c:	db14      	blt.n	b4e78 <_ZN5Paint10DrawCircleEiiii+0x7a>
            err += ++y_pos * 2 + 1;
   b4e4e:	3601      	adds	r6, #1
   b4e50:	eb04 0346 	add.w	r3, r4, r6, lsl #1
            if(-x_pos == y_pos && e2 <= x_pos) {
   b4e54:	42ee      	cmn	r6, r5
            err += ++y_pos * 2 + 1;
   b4e56:	f103 0301 	add.w	r3, r3, #1
            if(-x_pos == y_pos && e2 <= x_pos) {
   b4e5a:	d102      	bne.n	b4e62 <_ZN5Paint10DrawCircleEiiii+0x64>
   b4e5c:	42a5      	cmp	r5, r4
   b4e5e:	db02      	blt.n	b4e66 <_ZN5Paint10DrawCircleEiiii+0x68>
              e2 = 0;
   b4e60:	2400      	movs	r4, #0
            }
        }
        if (e2 > x_pos) {
   b4e62:	42a5      	cmp	r5, r4
   b4e64:	da0a      	bge.n	b4e7c <_ZN5Paint10DrawCircleEiiii+0x7e>
            err += ++x_pos * 2 + 1;
   b4e66:	3501      	adds	r5, #1
   b4e68:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   b4e6c:	1c5c      	adds	r4, r3, #1
        }
    } while (x_pos <= 0);
   b4e6e:	2d00      	cmp	r5, #0
   b4e70:	ddcf      	ble.n	b4e12 <_ZN5Paint10DrawCircleEiiii+0x14>
}
   b4e72:	b002      	add	sp, #8
   b4e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4e78:	4623      	mov	r3, r4
   b4e7a:	e7f2      	b.n	b4e62 <_ZN5Paint10DrawCircleEiiii+0x64>
   b4e7c:	461c      	mov	r4, r3
   b4e7e:	e7f6      	b.n	b4e6e <_ZN5Paint10DrawCircleEiiii+0x70>

000b4e80 <_ZN5Paint16DrawFilledCircleEiiii>:

/**
*  @brief: this draws a filled circle
*/
void Paint::DrawFilledCircle(int x, int y, int radius, int colored) {
   b4e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e84:	b087      	sub	sp, #28
    /* Bresenham algorithm */
    int x_pos = -radius;
   b4e86:	425d      	negs	r5, r3
    int y_pos = 0;
    int err = 2 - 2 * radius;
   b4e88:	f1c3 0301 	rsb	r3, r3, #1
void Paint::DrawFilledCircle(int x, int y, int radius, int colored) {
   b4e8c:	9103      	str	r1, [sp, #12]
   b4e8e:	4691      	mov	r9, r2
    int err = 2 - 2 * radius;
   b4e90:	005c      	lsls	r4, r3, #1
    int y_pos = 0;
   b4e92:	2600      	movs	r6, #0
    int e2;

    do {
        DrawPixel(x - x_pos, y + y_pos, colored);
   b4e94:	9b03      	ldr	r3, [sp, #12]
   b4e96:	9004      	str	r0, [sp, #16]
   b4e98:	eba3 0a05 	sub.w	sl, r3, r5
   b4e9c:	eb06 0809 	add.w	r8, r6, r9
   b4ea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4ea2:	4642      	mov	r2, r8
   b4ea4:	4651      	mov	r1, sl
   b4ea6:	f7ff fe5a 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawPixel(x + x_pos, y + y_pos, colored);
   b4eaa:	9a03      	ldr	r2, [sp, #12]
   b4eac:	9804      	ldr	r0, [sp, #16]
   b4eae:	18af      	adds	r7, r5, r2
        DrawPixel(x + x_pos, y - y_pos, colored);
   b4eb0:	eba9 0b06 	sub.w	fp, r9, r6
        DrawPixel(x + x_pos, y + y_pos, colored);
   b4eb4:	4642      	mov	r2, r8
   b4eb6:	4639      	mov	r1, r7
   b4eb8:	f7ff fe51 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawPixel(x + x_pos, y - y_pos, colored);
   b4ebc:	9804      	ldr	r0, [sp, #16]
   b4ebe:	465a      	mov	r2, fp
   b4ec0:	4639      	mov	r1, r7
   b4ec2:	f7ff fe4c 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawPixel(x - x_pos, y - y_pos, colored);
   b4ec6:	9804      	ldr	r0, [sp, #16]
   b4ec8:	465a      	mov	r2, fp
   b4eca:	4651      	mov	r1, sl
   b4ecc:	f7ff fe47 	bl	b4b5e <_ZN5Paint9DrawPixelEiii>
        DrawHorizontalLine(x + x_pos, y + y_pos, 2 * (-x_pos) + 1, colored);
   b4ed0:	f06f 0301 	mvn.w	r3, #1
   b4ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   b4ed6:	9804      	ldr	r0, [sp, #16]
   b4ed8:	9200      	str	r2, [sp, #0]
   b4eda:	436b      	muls	r3, r5
   b4edc:	3301      	adds	r3, #1
   b4ede:	4642      	mov	r2, r8
   b4ee0:	4639      	mov	r1, r7
   b4ee2:	9305      	str	r3, [sp, #20]
   b4ee4:	f7ff ff09 	bl	b4cfa <_ZN5Paint18DrawHorizontalLineEiiii>
        DrawHorizontalLine(x + x_pos, y - y_pos, 2 * (-x_pos) + 1, colored);
   b4ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4eea:	9804      	ldr	r0, [sp, #16]
   b4eec:	9300      	str	r3, [sp, #0]
   b4eee:	465a      	mov	r2, fp
   b4ef0:	9b05      	ldr	r3, [sp, #20]
   b4ef2:	4639      	mov	r1, r7
   b4ef4:	f7ff ff01 	bl	b4cfa <_ZN5Paint18DrawHorizontalLineEiiii>
        e2 = err;
        if (e2 <= y_pos) {
   b4ef8:	42a6      	cmp	r6, r4
   b4efa:	9804      	ldr	r0, [sp, #16]
   b4efc:	db14      	blt.n	b4f28 <_ZN5Paint16DrawFilledCircleEiiii+0xa8>
            err += ++y_pos * 2 + 1;
   b4efe:	3601      	adds	r6, #1
   b4f00:	eb04 0346 	add.w	r3, r4, r6, lsl #1
            if(-x_pos == y_pos && e2 <= x_pos) {
   b4f04:	42ee      	cmn	r6, r5
            err += ++y_pos * 2 + 1;
   b4f06:	f103 0301 	add.w	r3, r3, #1
            if(-x_pos == y_pos && e2 <= x_pos) {
   b4f0a:	d102      	bne.n	b4f12 <_ZN5Paint16DrawFilledCircleEiiii+0x92>
   b4f0c:	42a5      	cmp	r5, r4
   b4f0e:	db02      	blt.n	b4f16 <_ZN5Paint16DrawFilledCircleEiiii+0x96>
                e2 = 0;
   b4f10:	2400      	movs	r4, #0
            }
        }
        if(e2 > x_pos) {
   b4f12:	42a5      	cmp	r5, r4
   b4f14:	da0a      	bge.n	b4f2c <_ZN5Paint16DrawFilledCircleEiiii+0xac>
            err += ++x_pos * 2 + 1;
   b4f16:	3501      	adds	r5, #1
   b4f18:	eb03 0345 	add.w	r3, r3, r5, lsl #1
   b4f1c:	1c5c      	adds	r4, r3, #1
        }
    } while(x_pos <= 0);
   b4f1e:	2d00      	cmp	r5, #0
   b4f20:	ddb8      	ble.n	b4e94 <_ZN5Paint16DrawFilledCircleEiiii+0x14>
}
   b4f22:	b007      	add	sp, #28
   b4f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f28:	4623      	mov	r3, r4
   b4f2a:	e7f2      	b.n	b4f12 <_ZN5Paint16DrawFilledCircleEiiii+0x92>
   b4f2c:	461c      	mov	r4, r3
   b4f2e:	e7f6      	b.n	b4f1e <_ZN5Paint16DrawFilledCircleEiiii+0x9e>

000b4f30 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b4f30:	b510      	push	{r4, lr}
   b4f32:	4604      	mov	r4, r0
    Wire.begin(); 
   b4f34:	f001 fe9c 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f38:	f001 f896 	bl	b6068 <_ZN7TwoWire5beginEv>
}
   b4f3c:	4620      	mov	r0, r4
   b4f3e:	bd10      	pop	{r4, pc}

000b4f40 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4f40:	6803      	ldr	r3, [r0, #0]
   b4f42:	b2c9      	uxtb	r1, r1
   b4f44:	689b      	ldr	r3, [r3, #8]
   b4f46:	4718      	bx	r3

000b4f48 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b4f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b4f4c:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b4f4e:	2002      	movs	r0, #2
    cmdlen++;
   b4f50:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b4f52:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b4f54:	f000 fce2 	bl	b591c <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b4f58:	f001 fe8a 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f5c:	2124      	movs	r1, #36	; 0x24
   b4f5e:	f001 f8b9 	bl	b60d4 <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b4f62:	f001 fe85 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f66:	2100      	movs	r1, #0
   b4f68:	f7ff ffea 	bl	b4f40 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b4f6c:	f001 fe80 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f70:	2100      	movs	r1, #0
   b4f72:	f7ff ffe5 	bl	b4f40 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b4f76:	f001 fe7b 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f7a:	21ff      	movs	r1, #255	; 0xff
   b4f7c:	f7ff ffe0 	bl	b4f40 <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b4f80:	f001 fe76 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f84:	6803      	ldr	r3, [r0, #0]
   b4f86:	4629      	mov	r1, r5
   b4f88:	689b      	ldr	r3, [r3, #8]
   b4f8a:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b4f8c:	f001 fe70 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f90:	4269      	negs	r1, r5
   b4f92:	f7ff ffd5 	bl	b4f40 <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b4f96:	f001 fe6b 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4f9a:	21d4      	movs	r1, #212	; 0xd4
   b4f9c:	f7ff ffd0 	bl	b4f40 <_ZN7TwoWire5writeEi>
   b4fa0:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b4fa2:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b4fa4:	3d01      	subs	r5, #1
   b4fa6:	f104 0801 	add.w	r8, r4, #1
   b4faa:	b2e4      	uxtb	r4, r4
   b4fac:	42ac      	cmp	r4, r5
   b4fae:	da0a      	bge.n	b4fc6 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b4fb0:	f001 fe5e 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4fb4:	6803      	ldr	r3, [r0, #0]
   b4fb6:	5d39      	ldrb	r1, [r7, r4]
   b4fb8:	689b      	ldr	r3, [r3, #8]
   b4fba:	4798      	blx	r3
      checksum += cmd[i];
   b4fbc:	5d39      	ldrb	r1, [r7, r4]
   b4fbe:	440e      	add	r6, r1
   b4fc0:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b4fc2:	4644      	mov	r4, r8
   b4fc4:	e7ef      	b.n	b4fa6 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b4fc6:	f001 fe53 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4fca:	6803      	ldr	r3, [r0, #0]
   b4fcc:	43f1      	mvns	r1, r6
   b4fce:	689b      	ldr	r3, [r3, #8]
   b4fd0:	b2c9      	uxtb	r1, r1
   b4fd2:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b4fd4:	f001 fe4c 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b4fd8:	6803      	ldr	r3, [r0, #0]
   b4fda:	2100      	movs	r1, #0
   b4fdc:	689b      	ldr	r3, [r3, #8]
   b4fde:	4798      	blx	r3
    Wire.endTransmission();
   b4fe0:	f001 fe46 	bl	b6c70 <_Z19__fetch_global_Wirev>
}
   b4fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b4fe8:	f001 b87b 	b.w	b60e2 <_ZN7TwoWire15endTransmissionEv>

000b4fec <_ZN13DFRobot_PN5328checkDCSEi>:
{
   b4fec:	b530      	push	{r4, r5, lr}
   b4fee:	4602      	mov	r2, r0
    if(!this->nfcEnable)
   b4ff0:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b4ff4:	b1a0      	cbz	r0, b5020 <_ZN13DFRobot_PN5328checkDCSEi+0x34>
    for(int i = 6;i < x - 2;i++)
   b4ff6:	f06f 0503 	mvn.w	r5, #3
   b4ffa:	f102 000a 	add.w	r0, r2, #10
    uint32_t sum = 0;
   b4ffe:	2300      	movs	r3, #0
    for(int i = 6;i < x - 2;i++)
   b5000:	3902      	subs	r1, #2
   b5002:	1aad      	subs	r5, r5, r2
   b5004:	182c      	adds	r4, r5, r0
   b5006:	42a1      	cmp	r1, r4
   b5008:	dd03      	ble.n	b5012 <_ZN13DFRobot_PN5328checkDCSEi+0x26>
        sum += this->receiveACK[i];
   b500a:	f810 4b01 	ldrb.w	r4, [r0], #1
   b500e:	4423      	add	r3, r4
    for(int i = 6;i < x - 2;i++)
   b5010:	e7f8      	b.n	b5004 <_ZN13DFRobot_PN5328checkDCSEi+0x18>
    if(dcs==this->receiveACK[x - 2])
   b5012:	440a      	add	r2, r1
    dcs = 0xff - (sum&0xff);
   b5014:	43db      	mvns	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b5016:	7910      	ldrb	r0, [r2, #4]
    dcs = 0xff - (sum&0xff);
   b5018:	b2db      	uxtb	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b501a:	1a1b      	subs	r3, r3, r0
   b501c:	4258      	negs	r0, r3
   b501e:	4158      	adcs	r0, r3
}
   b5020:	bd30      	pop	{r4, r5, pc}

000b5022 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>:
{   //bool success = false;
   b5022:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5024:	4604      	mov	r4, r0
    if(!this->nfcEnable)
   b5026:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b502a:	b350      	cbz	r0, b5082 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    cmdPassWord[0] = COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
   b502c:	2040      	movs	r0, #64	; 0x40
   b502e:	f88d 0000 	strb.w	r0, [sp]
    cmdPassWord[1] = 1;                              /* The quantity number of the maxium card that can be detected in every research*/
   b5032:	2001      	movs	r0, #1
   b5034:	f88d 0001 	strb.w	r0, [sp, #1]
    cmdPassWord[2] = 0x60;                          
   b5038:	2060      	movs	r0, #96	; 0x60
   b503a:	f88d 0002 	strb.w	r0, [sp, #2]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b503e:	6818      	ldr	r0, [r3, #0]
   b5040:	889b      	ldrh	r3, [r3, #4]
   b5042:	f8ad 3008 	strh.w	r3, [sp, #8]
    for(int i = 10;i < 14;i++) cmdPassWord[i] = id[i - 10];           // nfcUid
   b5046:	6813      	ldr	r3, [r2, #0]
   b5048:	f8cd 300a 	str.w	r3, [sp, #10]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b504c:	6823      	ldr	r3, [r4, #0]
    cmdPassWord[3] = block;
   b504e:	f88d 1003 	strb.w	r1, [sp, #3]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b5052:	9001      	str	r0, [sp, #4]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	220e      	movs	r2, #14
   b5058:	4669      	mov	r1, sp
   b505a:	4620      	mov	r0, r4
   b505c:	4798      	blx	r3
    if(!this->readAck(16))
   b505e:	6823      	ldr	r3, [r4, #0]
   b5060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5064:	685b      	ldr	r3, [r3, #4]
   b5066:	2110      	movs	r1, #16
   b5068:	4620      	mov	r0, r4
   b506a:	4798      	blx	r3
   b506c:	b148      	cbz	r0, b5082 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    if(checkDCS(16) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00)   
   b506e:	2110      	movs	r1, #16
   b5070:	4620      	mov	r0, r4
   b5072:	f7ff ffbb 	bl	b4fec <_ZN13DFRobot_PN5328checkDCSEi>
   b5076:	b120      	cbz	r0, b5082 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
   b5078:	8a20      	ldrh	r0, [r4, #16]
   b507a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b507e:	4258      	negs	r0, r3
   b5080:	4158      	adcs	r0, r3
}
   b5082:	b004      	add	sp, #16
   b5084:	bd10      	pop	{r4, pc}

000b5086 <_ZN13DFRobot_PN5324scanEv>:
{   if(!this->nfcEnable)
   b5086:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5088:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   b508c:	4604      	mov	r4, r0
   b508e:	b313      	cbz	r3, b50d6 <_ZN13DFRobot_PN5324scanEv+0x50>
    cmdnfcUid[0] = COMMAND_INLISTPASSIVETARGET;
   b5090:	234a      	movs	r3, #74	; 0x4a
   b5092:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdnfcUid[1] = 1;                              // The quantity number of the maxium card that can be detected in every research
   b5096:	2301      	movs	r3, #1
   b5098:	f88d 3005 	strb.w	r3, [sp, #5]
    cmdnfcUid[2] = MIFARE_ISO14443A;
   b509c:	2300      	movs	r3, #0
   b509e:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdnfcUid,3);
   b50a2:	6803      	ldr	r3, [r0, #0]
   b50a4:	2203      	movs	r2, #3
   b50a6:	681b      	ldr	r3, [r3, #0]
   b50a8:	a901      	add	r1, sp, #4
   b50aa:	4798      	blx	r3
    if(!readAck(25))
   b50ac:	6823      	ldr	r3, [r4, #0]
   b50ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b50b2:	685b      	ldr	r3, [r3, #4]
   b50b4:	2119      	movs	r1, #25
   b50b6:	4620      	mov	r0, r4
   b50b8:	4798      	blx	r3
   b50ba:	4603      	mov	r3, r0
   b50bc:	b158      	cbz	r0, b50d6 <_ZN13DFRobot_PN5324scanEv+0x50>
        nfcUid[i] = receiveACK[i + 19];
   b50be:	7ea3      	ldrb	r3, [r4, #26]
   b50c0:	7de2      	ldrb	r2, [r4, #23]
   b50c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(receiveACK[13]!=1)
   b50c6:	7c63      	ldrb	r3, [r4, #17]
        nfcUid[i] = receiveACK[i + 19];
   b50c8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
   b50cc:	8b22      	ldrh	r2, [r4, #24]
   b50ce:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if(receiveACK[13]!=1)
   b50d0:	1e5a      	subs	r2, r3, #1
   b50d2:	4253      	negs	r3, r2
   b50d4:	4153      	adcs	r3, r2
}
   b50d6:	4618      	mov	r0, r3
   b50d8:	b004      	add	sp, #16
   b50da:	bd10      	pop	{r4, pc}

000b50dc <_ZN13DFRobot_PN5328readDataEi>:
String DFRobot_PN532::readData(int page) {
   b50dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (page > 255)
   b50e0:	2aff      	cmp	r2, #255	; 0xff
String DFRobot_PN532::readData(int page) {
   b50e2:	b08a      	sub	sp, #40	; 0x28
   b50e4:	4605      	mov	r5, r0
   b50e6:	460c      	mov	r4, r1
   b50e8:	4616      	mov	r6, r2
    if (page > 255)
   b50ea:	dd06      	ble.n	b50fa <_ZN13DFRobot_PN5328readDataEi+0x1e>
        return "flase";
   b50ec:	4939      	ldr	r1, [pc, #228]	; (b51d4 <_ZN13DFRobot_PN5328readDataEi+0xf8>)
        return "read timeout!";
   b50ee:	f001 fac0 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b50f2:	4628      	mov	r0, r5
   b50f4:	b00a      	add	sp, #40	; 0x28
   b50f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!this->nfcEnable)
   b50fa:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
   b50fe:	b90b      	cbnz	r3, b5104 <_ZN13DFRobot_PN5328readDataEi+0x28>
        return "wake up error!";
   b5100:	4935      	ldr	r1, [pc, #212]	; (b51d8 <_ZN13DFRobot_PN5328readDataEi+0xfc>)
   b5102:	e7f4      	b.n	b50ee <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!scan())
   b5104:	4608      	mov	r0, r1
   b5106:	f7ff ffbe 	bl	b5086 <_ZN13DFRobot_PN5324scanEv>
   b510a:	b910      	cbnz	r0, b5112 <_ZN13DFRobot_PN5328readDataEi+0x36>
        return "no card!";
   b510c:	4933      	ldr	r1, [pc, #204]	; (b51dc <_ZN13DFRobot_PN5328readDataEi+0x100>)
        return "read timeout!";
   b510e:	4628      	mov	r0, r5
   b5110:	e7ed      	b.n	b50ee <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!passWordCheck(page,nfcUid,nfcPassword))
   b5112:	f104 0327 	add.w	r3, r4, #39	; 0x27
   b5116:	f104 022d 	add.w	r2, r4, #45	; 0x2d
   b511a:	4631      	mov	r1, r6
   b511c:	4620      	mov	r0, r4
   b511e:	f7ff ff80 	bl	b5022 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>
   b5122:	b908      	cbnz	r0, b5128 <_ZN13DFRobot_PN5328readDataEi+0x4c>
        return "read error!";
   b5124:	492e      	ldr	r1, [pc, #184]	; (b51e0 <_ZN13DFRobot_PN5328readDataEi+0x104>)
   b5126:	e7f2      	b.n	b510e <_ZN13DFRobot_PN5328readDataEi+0x32>
        cmdRead[0] = COMMAND_INDATAEXCHANGE;
   b5128:	2340      	movs	r3, #64	; 0x40
   b512a:	f88d 3004 	strb.w	r3, [sp, #4]
        cmdRead[1] = 1;                   /* Card number */
   b512e:	2301      	movs	r3, #1
   b5130:	f88d 3005 	strb.w	r3, [sp, #5]
        cmdRead[2] = CARD_CMD_READING;     /* Mifare Read command = 0x30 */
   b5134:	2330      	movs	r3, #48	; 0x30
   b5136:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdRead,4);
   b513a:	6823      	ldr	r3, [r4, #0]
        cmdRead[3] = page; 
   b513c:	f88d 6007 	strb.w	r6, [sp, #7]
    writeCommand(cmdRead,4);
   b5140:	2204      	movs	r2, #4
   b5142:	eb0d 0102 	add.w	r1, sp, r2
   b5146:	681b      	ldr	r3, [r3, #0]
   b5148:	4620      	mov	r0, r4
   b514a:	4798      	blx	r3
    if(!readAck(32))
   b514c:	6823      	ldr	r3, [r4, #0]
   b514e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5152:	685b      	ldr	r3, [r3, #4]
   b5154:	2120      	movs	r1, #32
   b5156:	4620      	mov	r0, r4
   b5158:	4798      	blx	r3
   b515a:	b908      	cbnz	r0, b5160 <_ZN13DFRobot_PN5328readDataEi+0x84>
        return "read timeout!";
   b515c:	4921      	ldr	r1, [pc, #132]	; (b51e4 <_ZN13DFRobot_PN5328readDataEi+0x108>)
   b515e:	e7d6      	b.n	b510e <_ZN13DFRobot_PN5328readDataEi+0x32>
    String dataSrt = "";
   b5160:	4921      	ldr	r1, [pc, #132]	; (b51e8 <_ZN13DFRobot_PN5328readDataEi+0x10c>)
   b5162:	a802      	add	r0, sp, #8
   b5164:	f001 fa85 	bl	b6672 <_ZN6StringC1EPK19__FlashStringHelper>
    if(checkDCS(32) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00){
   b5168:	2120      	movs	r1, #32
   b516a:	4620      	mov	r0, r4
   b516c:	f7ff ff3e 	bl	b4fec <_ZN13DFRobot_PN5328checkDCSEi>
   b5170:	b330      	cbz	r0, b51c0 <_ZN13DFRobot_PN5328readDataEi+0xe4>
   b5172:	8a23      	ldrh	r3, [r4, #16]
   b5174:	2b41      	cmp	r3, #65	; 0x41
   b5176:	d123      	bne.n	b51c0 <_ZN13DFRobot_PN5328readDataEi+0xe4>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5178:	4f1c      	ldr	r7, [pc, #112]	; (b51ec <_ZN13DFRobot_PN5328readDataEi+0x110>)
   b517a:	f8df 8074 	ldr.w	r8, [pc, #116]	; b51f0 <_ZN13DFRobot_PN5328readDataEi+0x114>
   b517e:	3412      	adds	r4, #18
   b5180:	2600      	movs	r6, #0
            blockData[i] = receiveACK[i + 14];
   b5182:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5186:	77a1      	strb	r1, [r4, #30]
            if(receiveACK[i+14]<=0x0f){
   b5188:	290f      	cmp	r1, #15
   b518a:	d821      	bhi.n	b51d0 <_ZN13DFRobot_PN5328readDataEi+0xf4>
   b518c:	4639      	mov	r1, r7
   b518e:	a802      	add	r0, sp, #8
   b5190:	f001 faeb 	bl	b676a <_ZN6String6concatEPKc>
                dataSrt += String(receiveACK[i + 14],HEX);
   b5194:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   b5198:	2210      	movs	r2, #16
                dataSrt += String(receiveACK[i + 14],HEX);
   b519a:	a806      	add	r0, sp, #24
   b519c:	f001 fab8 	bl	b6710 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b51a0:	a906      	add	r1, sp, #24
   b51a2:	a802      	add	r0, sp, #8
   b51a4:	f001 fadd 	bl	b6762 <_ZN6String6concatERKS_>
   b51a8:	a806      	add	r0, sp, #24
   b51aa:	f001 fa17 	bl	b65dc <_ZN6StringD1Ev>
            if(i<15) dataSrt += " ";
   b51ae:	2e0f      	cmp	r6, #15
   b51b0:	d003      	beq.n	b51ba <_ZN13DFRobot_PN5328readDataEi+0xde>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b51b2:	4641      	mov	r1, r8
   b51b4:	a802      	add	r0, sp, #8
   b51b6:	f001 fad8 	bl	b676a <_ZN6String6concatEPKc>
        for(int i = 0; i<16; i++)
   b51ba:	3601      	adds	r6, #1
   b51bc:	2e10      	cmp	r6, #16
   b51be:	d1e0      	bne.n	b5182 <_ZN13DFRobot_PN5328readDataEi+0xa6>
    return dataSrt;
   b51c0:	a902      	add	r1, sp, #8
   b51c2:	4628      	mov	r0, r5
   b51c4:	f001 fa87 	bl	b66d6 <_ZN6StringC1EOS_>
    String dataSrt = "";
   b51c8:	a802      	add	r0, sp, #8
   b51ca:	f001 fa07 	bl	b65dc <_ZN6StringD1Ev>
   b51ce:	e790      	b.n	b50f2 <_ZN13DFRobot_PN5328readDataEi+0x16>
                dataSrt += String(receiveACK[i + 14],HEX);
   b51d0:	2210      	movs	r2, #16
   b51d2:	e7e2      	b.n	b519a <_ZN13DFRobot_PN5328readDataEi+0xbe>
   b51d4:	000c0088 	.word	0x000c0088
   b51d8:	000c0070 	.word	0x000c0070
   b51dc:	000c007f 	.word	0x000c007f
   b51e0:	000c008e 	.word	0x000c008e
   b51e4:	000c009a 	.word	0x000c009a
   b51e8:	000b6f76 	.word	0x000b6f76
   b51ec:	000b6faf 	.word	0x000b6faf
   b51f0:	000b6f75 	.word	0x000b6f75

000b51f4 <_ZN13DFRobot_PN5328readDataEPhh>:
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b51f4:	b530      	push	{r4, r5, lr}
    if(!this->nfcEnable)
   b51f6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b51fa:	b085      	sub	sp, #20
   b51fc:	4604      	mov	r4, r0
   b51fe:	460d      	mov	r5, r1
    if(!this->nfcEnable)
   b5200:	2b00      	cmp	r3, #0
   b5202:	d039      	beq.n	b5278 <_ZN13DFRobot_PN5328readDataEPhh+0x84>
    String error = this->readData(block);
   b5204:	4601      	mov	r1, r0
   b5206:	4668      	mov	r0, sp
   b5208:	f7ff ff68 	bl	b50dc <_ZN13DFRobot_PN5328readDataEi>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b520c:	491b      	ldr	r1, [pc, #108]	; (b527c <_ZN13DFRobot_PN5328readDataEPhh+0x88>)
   b520e:	4668      	mov	r0, sp
   b5210:	f001 fabc 	bl	b678c <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b5214:	b130      	cbz	r0, b5224 <_ZN13DFRobot_PN5328readDataEPhh+0x30>
        return -1;
   b5216:	24ff      	movs	r4, #255	; 0xff
    String error = this->readData(block);
   b5218:	4668      	mov	r0, sp
   b521a:	f001 f9df 	bl	b65dc <_ZN6StringD1Ev>
}
   b521e:	4620      	mov	r0, r4
   b5220:	b005      	add	sp, #20
   b5222:	bd30      	pop	{r4, r5, pc}
   b5224:	4916      	ldr	r1, [pc, #88]	; (b5280 <_ZN13DFRobot_PN5328readDataEPhh+0x8c>)
   b5226:	4668      	mov	r0, sp
   b5228:	f001 fab0 	bl	b678c <_ZNK6String6equalsEPKc>
    if(error == "no card!" || error == "read error!" || error =="unknown error!"
   b522c:	2800      	cmp	r0, #0
   b522e:	d1f2      	bne.n	b5216 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b5230:	4914      	ldr	r1, [pc, #80]	; (b5284 <_ZN13DFRobot_PN5328readDataEPhh+0x90>)
   b5232:	4668      	mov	r0, sp
   b5234:	f001 faaa 	bl	b678c <_ZNK6String6equalsEPKc>
   b5238:	2800      	cmp	r0, #0
   b523a:	d1ec      	bne.n	b5216 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b523c:	4912      	ldr	r1, [pc, #72]	; (b5288 <_ZN13DFRobot_PN5328readDataEPhh+0x94>)
   b523e:	4668      	mov	r0, sp
   b5240:	f001 faa4 	bl	b678c <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b5244:	2800      	cmp	r0, #0
   b5246:	d1e6      	bne.n	b5216 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b5248:	4910      	ldr	r1, [pc, #64]	; (b528c <_ZN13DFRobot_PN5328readDataEPhh+0x98>)
   b524a:	4668      	mov	r0, sp
   b524c:	f001 fa9e 	bl	b678c <_ZNK6String6equalsEPKc>
   b5250:	2800      	cmp	r0, #0
   b5252:	d1e0      	bne.n	b5216 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b5254:	490e      	ldr	r1, [pc, #56]	; (b5290 <_ZN13DFRobot_PN5328readDataEPhh+0x9c>)
   b5256:	4668      	mov	r0, sp
   b5258:	f001 fa98 	bl	b678c <_ZNK6String6equalsEPKc>
   b525c:	2800      	cmp	r0, #0
   b525e:	d1da      	bne.n	b5216 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
    memcpy(buffer,blockData,16);
   b5260:	f104 0331 	add.w	r3, r4, #49	; 0x31
   b5264:	4629      	mov	r1, r5
   b5266:	3441      	adds	r4, #65	; 0x41
   b5268:	f853 2b04 	ldr.w	r2, [r3], #4
   b526c:	f841 2b04 	str.w	r2, [r1], #4
   b5270:	42a3      	cmp	r3, r4
   b5272:	d1f9      	bne.n	b5268 <_ZN13DFRobot_PN5328readDataEPhh+0x74>
    return  1;
   b5274:	2401      	movs	r4, #1
   b5276:	e7cf      	b.n	b5218 <_ZN13DFRobot_PN5328readDataEPhh+0x24>
        return -1;
   b5278:	24ff      	movs	r4, #255	; 0xff
   b527a:	e7d0      	b.n	b521e <_ZN13DFRobot_PN5328readDataEPhh+0x2a>
   b527c:	000c007f 	.word	0x000c007f
   b5280:	000c008e 	.word	0x000c008e
   b5284:	000c00a8 	.word	0x000c00a8
   b5288:	000c009a 	.word	0x000c009a
   b528c:	000c0070 	.word	0x000c0070
   b5290:	000c0088 	.word	0x000c0088

000b5294 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b5294:	b538      	push	{r3, r4, r5, lr}
   b5296:	4604      	mov	r4, r0
   b5298:	4b06      	ldr	r3, [pc, #24]	; (b52b4 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b529a:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b529e:	4608      	mov	r0, r1
   b52a0:	4615      	mov	r5, r2
   b52a2:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b52a4:	2100      	movs	r1, #0
   b52a6:	f001 fc8b 	bl	b6bc0 <pinMode>
    _mode = mode;
   b52aa:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b52ae:	4620      	mov	r0, r4
   b52b0:	bd38      	pop	{r3, r4, r5, pc}
   b52b2:	bf00      	nop
   b52b4:	000c00c0 	.word	0x000c00c0

000b52b8 <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b52b8:	b538      	push	{r3, r4, r5, lr}
   b52ba:	4605      	mov	r5, r0
   b52bc:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b52be:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b52c2:	f001 fca7 	bl	b6c14 <digitalRead>
   b52c6:	b130      	cbz	r0, b52d6 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b52c8:	3c01      	subs	r4, #1
   b52ca:	b2a4      	uxth	r4, r4
   b52cc:	b12c      	cbz	r4, b52da <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b52ce:	200a      	movs	r0, #10
   b52d0:	f000 fb24 	bl	b591c <delay>
    while(digitalRead(_irq)!=0){
   b52d4:	e7f3      	b.n	b52be <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b52d6:	2001      	movs	r0, #1
}
   b52d8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b52da:	4620      	mov	r0, r4
   b52dc:	e7fc      	b.n	b52d8 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b52de <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b52de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b52e0:	2300      	movs	r3, #0
   b52e2:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b52e6:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b52ea:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b52ee:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b52f2:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b52f6:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b52f8:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b52fa:	4604      	mov	r4, r0
   b52fc:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b52fe:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b5302:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b5306:	d141      	bne.n	b538c <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b5308:	f7ff ffd6 	bl	b52b8 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b530c:	b910      	cbnz	r0, b5314 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b530e:	2000      	movs	r0, #0
}
   b5310:	b003      	add	sp, #12
   b5312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b5314:	f001 fcac 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b5318:	2208      	movs	r2, #8
   b531a:	2124      	movs	r1, #36	; 0x24
   b531c:	f000 fed3 	bl	b60c6 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b5320:	f001 fca6 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b5324:	6803      	ldr	r3, [r0, #0]
   b5326:	695b      	ldr	r3, [r3, #20]
   b5328:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b532a:	1d26      	adds	r6, r4, #4
   b532c:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b5330:	2001      	movs	r0, #1
   b5332:	f000 faf3 	bl	b591c <delay>
        receiveACK[i]= Wire.read();
   b5336:	f001 fc9b 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b533a:	6803      	ldr	r3, [r0, #0]
   b533c:	695b      	ldr	r3, [r3, #20]
   b533e:	4798      	blx	r3
   b5340:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b5344:	42be      	cmp	r6, r7
   b5346:	d1f3      	bne.n	b5330 <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b5348:	4620      	mov	r0, r4
   b534a:	f7ff ffb5 	bl	b52b8 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b534e:	2800      	cmp	r0, #0
   b5350:	d0dd      	beq.n	b530e <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b5352:	f001 fc8d 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b5356:	1f2a      	subs	r2, r5, #4
   b5358:	2124      	movs	r1, #36	; 0x24
   b535a:	f000 feb4 	bl	b60c6 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b535e:	f001 fc87 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b5362:	6803      	ldr	r3, [r0, #0]
   b5364:	695b      	ldr	r3, [r3, #20]
   b5366:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b5368:	f06f 0709 	mvn.w	r7, #9
   b536c:	3d06      	subs	r5, #6
   b536e:	1b3f      	subs	r7, r7, r4
   b5370:	19bb      	adds	r3, r7, r6
   b5372:	429d      	cmp	r5, r3
   b5374:	dd49      	ble.n	b540a <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b5376:	2001      	movs	r0, #1
   b5378:	f000 fad0 	bl	b591c <delay>
        receiveACK[6 + i] = Wire.read();
   b537c:	f001 fc78 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b5380:	6803      	ldr	r3, [r0, #0]
   b5382:	695b      	ldr	r3, [r3, #20]
   b5384:	4798      	blx	r3
   b5386:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b538a:	e7f1      	b.n	b5370 <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b538c:	2b00      	cmp	r3, #0
   b538e:	d13c      	bne.n	b540a <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b5390:	201e      	movs	r0, #30
   b5392:	f000 fac3 	bl	b591c <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b5396:	f001 fc6b 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b539a:	2208      	movs	r2, #8
   b539c:	2124      	movs	r1, #36	; 0x24
   b539e:	f000 fe92 	bl	b60c6 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b53a2:	f001 fc65 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b53a6:	6803      	ldr	r3, [r0, #0]
   b53a8:	695b      	ldr	r3, [r3, #20]
   b53aa:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b53ac:	1d26      	adds	r6, r4, #4
   b53ae:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b53b2:	2001      	movs	r0, #1
   b53b4:	f000 fab2 	bl	b591c <delay>
        receiveACK[i]= Wire.read();
   b53b8:	f001 fc5a 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b53bc:	6803      	ldr	r3, [r0, #0]
   b53be:	695b      	ldr	r3, [r3, #20]
   b53c0:	4798      	blx	r3
   b53c2:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b53c6:	42be      	cmp	r6, r7
   b53c8:	d1f3      	bne.n	b53b2 <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b53ca:	201e      	movs	r0, #30
   b53cc:	f000 faa6 	bl	b591c <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b53d0:	f001 fc4e 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b53d4:	1f2a      	subs	r2, r5, #4
   b53d6:	2124      	movs	r1, #36	; 0x24
   b53d8:	f000 fe75 	bl	b60c6 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b53dc:	f001 fc48 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b53e0:	6803      	ldr	r3, [r0, #0]
   b53e2:	695b      	ldr	r3, [r3, #20]
   b53e4:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b53e6:	f06f 0709 	mvn.w	r7, #9
   b53ea:	3d06      	subs	r5, #6
   b53ec:	1b3f      	subs	r7, r7, r4
   b53ee:	19bb      	adds	r3, r7, r6
   b53f0:	429d      	cmp	r5, r3
   b53f2:	dd0a      	ble.n	b540a <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b53f4:	2001      	movs	r0, #1
   b53f6:	f000 fa91 	bl	b591c <delay>
        receiveACK[6 + i] = Wire.read();
   b53fa:	f001 fc39 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b53fe:	6803      	ldr	r3, [r0, #0]
   b5400:	695b      	ldr	r3, [r3, #20]
   b5402:	4798      	blx	r3
   b5404:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b5408:	e7f1      	b.n	b53ee <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b540a:	2206      	movs	r2, #6
   b540c:	1d21      	adds	r1, r4, #4
   b540e:	4668      	mov	r0, sp
   b5410:	f001 fd07 	bl	b6e22 <strncmp>
   b5414:	fab0 f080 	clz	r0, r0
   b5418:	0940      	lsrs	r0, r0, #5
   b541a:	e779      	b.n	b5310 <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b541c <_ZN17DFRobot_PN532_IIC5beginEv>:
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b541c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    this->nfcPassword[0] = 0xff;
   b541e:	23ff      	movs	r3, #255	; 0xff
   b5420:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    this->nfcPassword[1] = 0xff;
   b5424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b5428:	4604      	mov	r4, r0
    this->nfcPassword[3] = 0xff;
    this->nfcPassword[4] = 0xff;
    this->nfcPassword[5] = 0xff;
    unsigned char cmdWrite[4];
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
    cmdWrite[1] = 0x01; // normal mode;
   b542a:	2501      	movs	r5, #1
    this->nfcPassword[1] = 0xff;
   b542c:	6283      	str	r3, [r0, #40]	; 0x28
    this->nfcPassword[5] = 0xff;
   b542e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
   b5432:	2314      	movs	r3, #20
   b5434:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdWrite[2] = 0x14; // timeout 50ms * 20 = 1 second
   b5438:	f88d 3006 	strb.w	r3, [sp, #6]
    cmdWrite[1] = 0x01; // normal mode;
   b543c:	f88d 5005 	strb.w	r5, [sp, #5]
    cmdWrite[3] = 0x01; // use IRQ pin!
   b5440:	f88d 5007 	strb.w	r5, [sp, #7]
    Wire.begin();
   b5444:	f001 fc14 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b5448:	f000 fe0e 	bl	b6068 <_ZN7TwoWire5beginEv>
    nfcEnable = true;
    writeCommand(cmdWrite,4);
   b544c:	6823      	ldr	r3, [r4, #0]
    nfcEnable = true;
   b544e:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    writeCommand(cmdWrite,4);
   b5452:	2204      	movs	r2, #4
   b5454:	eb0d 0102 	add.w	r1, sp, r2
   b5458:	681b      	ldr	r3, [r3, #0]
   b545a:	4620      	mov	r0, r4
   b545c:	4798      	blx	r3
    delay(10);
   b545e:	200a      	movs	r0, #10
   b5460:	f000 fa5c 	bl	b591c <delay>
    
    if(readAck(14)!= 1){
   b5464:	6823      	ldr	r3, [r4, #0]
   b5466:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b546a:	685b      	ldr	r3, [r3, #4]
   b546c:	210e      	movs	r1, #14
   b546e:	4620      	mov	r0, r4
   b5470:	4798      	blx	r3
   b5472:	b120      	cbz	r0, b547e <_ZN17DFRobot_PN532_IIC5beginEv+0x62>
        
        return false;
    }
    return  ( receiveACK[12] == 0x15);
   b5474:	7c20      	ldrb	r0, [r4, #16]
   b5476:	f1a0 0315 	sub.w	r3, r0, #21
   b547a:	4258      	negs	r0, r3
   b547c:	4158      	adcs	r0, r3
}
   b547e:	b003      	add	sp, #12
   b5480:	bd30      	pop	{r4, r5, pc}
	...

000b5484 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5484:	b508      	push	{r3, lr}
   b5486:	4b02      	ldr	r3, [pc, #8]	; (b5490 <os_mutex_recursive_create+0xc>)
   b5488:	681b      	ldr	r3, [r3, #0]
   b548a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b548c:	9301      	str	r3, [sp, #4]
   b548e:	bd08      	pop	{r3, pc}
   b5490:	00030248 	.word	0x00030248

000b5494 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5494:	b508      	push	{r3, lr}
   b5496:	4b02      	ldr	r3, [pc, #8]	; (b54a0 <HAL_RNG_GetRandomNumber+0xc>)
   b5498:	681b      	ldr	r3, [r3, #0]
   b549a:	685b      	ldr	r3, [r3, #4]
   b549c:	9301      	str	r3, [sp, #4]
   b549e:	bd08      	pop	{r3, pc}
   b54a0:	00030218 	.word	0x00030218

000b54a4 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b54a4:	b508      	push	{r3, lr}
   b54a6:	4b02      	ldr	r3, [pc, #8]	; (b54b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b54a8:	681b      	ldr	r3, [r3, #0]
   b54aa:	695b      	ldr	r3, [r3, #20]
   b54ac:	9301      	str	r3, [sp, #4]
   b54ae:	bd08      	pop	{r3, pc}
   b54b0:	00030218 	.word	0x00030218

000b54b4 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b54b4:	b508      	push	{r3, lr}
   b54b6:	4b02      	ldr	r3, [pc, #8]	; (b54c0 <hal_gpio_mode+0xc>)
   b54b8:	681b      	ldr	r3, [r3, #0]
   b54ba:	689b      	ldr	r3, [r3, #8]
   b54bc:	9301      	str	r3, [sp, #4]
   b54be:	bd08      	pop	{r3, pc}
   b54c0:	0003022c 	.word	0x0003022c

000b54c4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b54c4:	b508      	push	{r3, lr}
   b54c6:	4b02      	ldr	r3, [pc, #8]	; (b54d0 <hal_gpio_get_mode+0xc>)
   b54c8:	681b      	ldr	r3, [r3, #0]
   b54ca:	68db      	ldr	r3, [r3, #12]
   b54cc:	9301      	str	r3, [sp, #4]
   b54ce:	bd08      	pop	{r3, pc}
   b54d0:	0003022c 	.word	0x0003022c

000b54d4 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b54d4:	b508      	push	{r3, lr}
   b54d6:	4b02      	ldr	r3, [pc, #8]	; (b54e0 <hal_gpio_write+0xc>)
   b54d8:	681b      	ldr	r3, [r3, #0]
   b54da:	691b      	ldr	r3, [r3, #16]
   b54dc:	9301      	str	r3, [sp, #4]
   b54de:	bd08      	pop	{r3, pc}
   b54e0:	0003022c 	.word	0x0003022c

000b54e4 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b54e4:	b508      	push	{r3, lr}
   b54e6:	4b02      	ldr	r3, [pc, #8]	; (b54f0 <hal_gpio_read+0xc>)
   b54e8:	681b      	ldr	r3, [r3, #0]
   b54ea:	695b      	ldr	r3, [r3, #20]
   b54ec:	9301      	str	r3, [sp, #4]
   b54ee:	bd08      	pop	{r3, pc}
   b54f0:	0003022c 	.word	0x0003022c

000b54f4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b54f4:	b508      	push	{r3, lr}
   b54f6:	4b02      	ldr	r3, [pc, #8]	; (b5500 <hal_i2c_begin+0xc>)
   b54f8:	681b      	ldr	r3, [r3, #0]
   b54fa:	68db      	ldr	r3, [r3, #12]
   b54fc:	9301      	str	r3, [sp, #4]
   b54fe:	bd08      	pop	{r3, pc}
   b5500:	00030228 	.word	0x00030228

000b5504 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5504:	b508      	push	{r3, lr}
   b5506:	4b02      	ldr	r3, [pc, #8]	; (b5510 <hal_i2c_begin_transmission+0xc>)
   b5508:	681b      	ldr	r3, [r3, #0]
   b550a:	699b      	ldr	r3, [r3, #24]
   b550c:	9301      	str	r3, [sp, #4]
   b550e:	bd08      	pop	{r3, pc}
   b5510:	00030228 	.word	0x00030228

000b5514 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5514:	b508      	push	{r3, lr}
   b5516:	4b02      	ldr	r3, [pc, #8]	; (b5520 <hal_i2c_end_transmission+0xc>)
   b5518:	681b      	ldr	r3, [r3, #0]
   b551a:	69db      	ldr	r3, [r3, #28]
   b551c:	9301      	str	r3, [sp, #4]
   b551e:	bd08      	pop	{r3, pc}
   b5520:	00030228 	.word	0x00030228

000b5524 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5524:	b508      	push	{r3, lr}
   b5526:	4b02      	ldr	r3, [pc, #8]	; (b5530 <hal_i2c_write+0xc>)
   b5528:	681b      	ldr	r3, [r3, #0]
   b552a:	6a1b      	ldr	r3, [r3, #32]
   b552c:	9301      	str	r3, [sp, #4]
   b552e:	bd08      	pop	{r3, pc}
   b5530:	00030228 	.word	0x00030228

000b5534 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5534:	b508      	push	{r3, lr}
   b5536:	4b02      	ldr	r3, [pc, #8]	; (b5540 <hal_i2c_available+0xc>)
   b5538:	681b      	ldr	r3, [r3, #0]
   b553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b553c:	9301      	str	r3, [sp, #4]
   b553e:	bd08      	pop	{r3, pc}
   b5540:	00030228 	.word	0x00030228

000b5544 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5544:	b508      	push	{r3, lr}
   b5546:	4b02      	ldr	r3, [pc, #8]	; (b5550 <hal_i2c_read+0xc>)
   b5548:	681b      	ldr	r3, [r3, #0]
   b554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b554c:	9301      	str	r3, [sp, #4]
   b554e:	bd08      	pop	{r3, pc}
   b5550:	00030228 	.word	0x00030228

000b5554 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5554:	b508      	push	{r3, lr}
   b5556:	4b02      	ldr	r3, [pc, #8]	; (b5560 <hal_i2c_peek+0xc>)
   b5558:	681b      	ldr	r3, [r3, #0]
   b555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b555c:	9301      	str	r3, [sp, #4]
   b555e:	bd08      	pop	{r3, pc}
   b5560:	00030228 	.word	0x00030228

000b5564 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5564:	b508      	push	{r3, lr}
   b5566:	4b02      	ldr	r3, [pc, #8]	; (b5570 <hal_i2c_flush+0xc>)
   b5568:	681b      	ldr	r3, [r3, #0]
   b556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b556c:	9301      	str	r3, [sp, #4]
   b556e:	bd08      	pop	{r3, pc}
   b5570:	00030228 	.word	0x00030228

000b5574 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5574:	b508      	push	{r3, lr}
   b5576:	4b02      	ldr	r3, [pc, #8]	; (b5580 <hal_i2c_is_enabled+0xc>)
   b5578:	681b      	ldr	r3, [r3, #0]
   b557a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b557c:	9301      	str	r3, [sp, #4]
   b557e:	bd08      	pop	{r3, pc}
   b5580:	00030228 	.word	0x00030228

000b5584 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5584:	b508      	push	{r3, lr}
   b5586:	4b02      	ldr	r3, [pc, #8]	; (b5590 <hal_i2c_init+0xc>)
   b5588:	681b      	ldr	r3, [r3, #0]
   b558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b558c:	9301      	str	r3, [sp, #4]
   b558e:	bd08      	pop	{r3, pc}
   b5590:	00030228 	.word	0x00030228

000b5594 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5594:	b508      	push	{r3, lr}
   b5596:	4b02      	ldr	r3, [pc, #8]	; (b55a0 <hal_i2c_request_ex+0xc>)
   b5598:	681b      	ldr	r3, [r3, #0]
   b559a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b559c:	9301      	str	r3, [sp, #4]
   b559e:	bd08      	pop	{r3, pc}
   b55a0:	00030228 	.word	0x00030228

000b55a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b55a4:	b508      	push	{r3, lr}
   b55a6:	4b02      	ldr	r3, [pc, #8]	; (b55b0 <inet_inet_ntop+0xc>)
   b55a8:	681b      	ldr	r3, [r3, #0]
   b55aa:	695b      	ldr	r3, [r3, #20]
   b55ac:	9301      	str	r3, [sp, #4]
   b55ae:	bd08      	pop	{r3, pc}
   b55b0:	00030264 	.word	0x00030264

000b55b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b55b4:	b508      	push	{r3, lr}
   b55b6:	4b02      	ldr	r3, [pc, #8]	; (b55c0 <netdb_freeaddrinfo+0xc>)
   b55b8:	681b      	ldr	r3, [r3, #0]
   b55ba:	689b      	ldr	r3, [r3, #8]
   b55bc:	9301      	str	r3, [sp, #4]
   b55be:	bd08      	pop	{r3, pc}
   b55c0:	00030268 	.word	0x00030268

000b55c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b55c4:	b508      	push	{r3, lr}
   b55c6:	4b02      	ldr	r3, [pc, #8]	; (b55d0 <netdb_getaddrinfo+0xc>)
   b55c8:	681b      	ldr	r3, [r3, #0]
   b55ca:	68db      	ldr	r3, [r3, #12]
   b55cc:	9301      	str	r3, [sp, #4]
   b55ce:	bd08      	pop	{r3, pc}
   b55d0:	00030268 	.word	0x00030268

000b55d4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <hal_spi_begin+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	681b      	ldr	r3, [r3, #0]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	00030230 	.word	0x00030230

000b55e4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <hal_spi_transfer+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	695b      	ldr	r3, [r3, #20]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	00030230 	.word	0x00030230

000b55f4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <hal_spi_init+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	69db      	ldr	r3, [r3, #28]
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	00030230 	.word	0x00030230

000b5604 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <hal_spi_is_enabled+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	6a1b      	ldr	r3, [r3, #32]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	00030230 	.word	0x00030230

000b5614 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <hal_spi_info+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	00030230 	.word	0x00030230

000b5624 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <hal_spi_set_settings+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	00030230 	.word	0x00030230

000b5634 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <hal_spi_acquire+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	00030230 	.word	0x00030230

000b5644 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <hal_spi_release+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	00030230 	.word	0x00030230

000b5654 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <hal_usart_write+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	68db      	ldr	r3, [r3, #12]
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	0003023c 	.word	0x0003023c

000b5664 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <hal_usart_available+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	691b      	ldr	r3, [r3, #16]
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	0003023c 	.word	0x0003023c

000b5674 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <hal_usart_read+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	695b      	ldr	r3, [r3, #20]
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	0003023c 	.word	0x0003023c

000b5684 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <hal_usart_peek+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	699b      	ldr	r3, [r3, #24]
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	0003023c 	.word	0x0003023c

000b5694 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <hal_usart_flush+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	69db      	ldr	r3, [r3, #28]
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	0003023c 	.word	0x0003023c

000b56a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <hal_usart_is_enabled+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	6a1b      	ldr	r3, [r3, #32]
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	0003023c 	.word	0x0003023c

000b56b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <hal_usart_available_data_for_write+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	0003023c 	.word	0x0003023c

000b56c4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <hal_usart_init_ex+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	0003023c 	.word	0x0003023c

000b56d4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <HAL_USB_USART_Init+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	681b      	ldr	r3, [r3, #0]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	0003024c 	.word	0x0003024c

000b56e4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <HAL_USB_USART_Begin+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	685b      	ldr	r3, [r3, #4]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	0003024c 	.word	0x0003024c

000b56f4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <HAL_USB_USART_Available_Data+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	691b      	ldr	r3, [r3, #16]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	0003024c 	.word	0x0003024c

000b5704 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	695b      	ldr	r3, [r3, #20]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	0003024c 	.word	0x0003024c

000b5714 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <HAL_USB_USART_Receive_Data+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	699b      	ldr	r3, [r3, #24]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	0003024c 	.word	0x0003024c

000b5724 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <HAL_USB_USART_Send_Data+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	69db      	ldr	r3, [r3, #28]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	0003024c 	.word	0x0003024c

000b5734 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <HAL_USB_USART_Flush_Data+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	6a1b      	ldr	r3, [r3, #32]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	0003024c 	.word	0x0003024c

000b5744 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <set_system_mode+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	685b      	ldr	r3, [r3, #4]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	00030220 	.word	0x00030220

000b5754 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <system_delay_ms+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	695b      	ldr	r3, [r3, #20]
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	00030220 	.word	0x00030220

000b5764 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <application_thread_current+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	00030220 	.word	0x00030220

000b5774 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <application_thread_invoke+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030220 	.word	0x00030220

000b5784 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b03      	ldr	r3, [pc, #12]	; (b5794 <system_ctrl_set_app_request_handler+0x10>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b578e:	9301      	str	r3, [sp, #4]
   b5790:	bd08      	pop	{r3, pc}
   b5792:	0000      	.short	0x0000
   b5794:	00030220 	.word	0x00030220

000b5798 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5798:	b508      	push	{r3, lr}
   b579a:	4b03      	ldr	r3, [pc, #12]	; (b57a8 <system_ctrl_set_result+0x10>)
   b579c:	681b      	ldr	r3, [r3, #0]
   b579e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b57a2:	9301      	str	r3, [sp, #4]
   b57a4:	bd08      	pop	{r3, pc}
   b57a6:	0000      	.short	0x0000
   b57a8:	00030220 	.word	0x00030220

000b57ac <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b57ac:	b508      	push	{r3, lr}
   b57ae:	4b02      	ldr	r3, [pc, #8]	; (b57b8 <spark_cloud_flag_connected+0xc>)
   b57b0:	681b      	ldr	r3, [r3, #0]
   b57b2:	695b      	ldr	r3, [r3, #20]
   b57b4:	9301      	str	r3, [sp, #4]
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	00030244 	.word	0x00030244

000b57bc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b57bc:	b508      	push	{r3, lr}
   b57be:	4b02      	ldr	r3, [pc, #8]	; (b57c8 <spark_send_event+0xc>)
   b57c0:	681b      	ldr	r3, [r3, #0]
   b57c2:	6a1b      	ldr	r3, [r3, #32]
   b57c4:	9301      	str	r3, [sp, #4]
   b57c6:	bd08      	pop	{r3, pc}
   b57c8:	00030244 	.word	0x00030244

000b57cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b57cc:	b508      	push	{r3, lr}
   b57ce:	4b02      	ldr	r3, [pc, #8]	; (b57d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b57d0:	681b      	ldr	r3, [r3, #0]
   b57d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b57d4:	9301      	str	r3, [sp, #4]
   b57d6:	bd08      	pop	{r3, pc}
   b57d8:	00030244 	.word	0x00030244

000b57dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b57dc:	b508      	push	{r3, lr}
   b57de:	4b02      	ldr	r3, [pc, #8]	; (b57e8 <network_connect+0xc>)
   b57e0:	681b      	ldr	r3, [r3, #0]
   b57e2:	685b      	ldr	r3, [r3, #4]
   b57e4:	9301      	str	r3, [sp, #4]
   b57e6:	bd08      	pop	{r3, pc}
   b57e8:	00030240 	.word	0x00030240

000b57ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b57ec:	b508      	push	{r3, lr}
   b57ee:	4b02      	ldr	r3, [pc, #8]	; (b57f8 <network_connecting+0xc>)
   b57f0:	681b      	ldr	r3, [r3, #0]
   b57f2:	689b      	ldr	r3, [r3, #8]
   b57f4:	9301      	str	r3, [sp, #4]
   b57f6:	bd08      	pop	{r3, pc}
   b57f8:	00030240 	.word	0x00030240

000b57fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b57fc:	b508      	push	{r3, lr}
   b57fe:	4b02      	ldr	r3, [pc, #8]	; (b5808 <network_disconnect+0xc>)
   b5800:	681b      	ldr	r3, [r3, #0]
   b5802:	68db      	ldr	r3, [r3, #12]
   b5804:	9301      	str	r3, [sp, #4]
   b5806:	bd08      	pop	{r3, pc}
   b5808:	00030240 	.word	0x00030240

000b580c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b580c:	b508      	push	{r3, lr}
   b580e:	4b02      	ldr	r3, [pc, #8]	; (b5818 <network_ready+0xc>)
   b5810:	681b      	ldr	r3, [r3, #0]
   b5812:	691b      	ldr	r3, [r3, #16]
   b5814:	9301      	str	r3, [sp, #4]
   b5816:	bd08      	pop	{r3, pc}
   b5818:	00030240 	.word	0x00030240

000b581c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b581c:	b508      	push	{r3, lr}
   b581e:	4b02      	ldr	r3, [pc, #8]	; (b5828 <network_on+0xc>)
   b5820:	681b      	ldr	r3, [r3, #0]
   b5822:	695b      	ldr	r3, [r3, #20]
   b5824:	9301      	str	r3, [sp, #4]
   b5826:	bd08      	pop	{r3, pc}
   b5828:	00030240 	.word	0x00030240

000b582c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b582c:	b508      	push	{r3, lr}
   b582e:	4b02      	ldr	r3, [pc, #8]	; (b5838 <network_off+0xc>)
   b5830:	681b      	ldr	r3, [r3, #0]
   b5832:	699b      	ldr	r3, [r3, #24]
   b5834:	9301      	str	r3, [sp, #4]
   b5836:	bd08      	pop	{r3, pc}
   b5838:	00030240 	.word	0x00030240

000b583c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b583c:	b508      	push	{r3, lr}
   b583e:	4b02      	ldr	r3, [pc, #8]	; (b5848 <network_listen+0xc>)
   b5840:	681b      	ldr	r3, [r3, #0]
   b5842:	69db      	ldr	r3, [r3, #28]
   b5844:	9301      	str	r3, [sp, #4]
   b5846:	bd08      	pop	{r3, pc}
   b5848:	00030240 	.word	0x00030240

000b584c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b584c:	b508      	push	{r3, lr}
   b584e:	4b02      	ldr	r3, [pc, #8]	; (b5858 <network_listening+0xc>)
   b5850:	681b      	ldr	r3, [r3, #0]
   b5852:	6a1b      	ldr	r3, [r3, #32]
   b5854:	9301      	str	r3, [sp, #4]
   b5856:	bd08      	pop	{r3, pc}
   b5858:	00030240 	.word	0x00030240

000b585c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b585c:	b508      	push	{r3, lr}
   b585e:	4b02      	ldr	r3, [pc, #8]	; (b5868 <network_set_listen_timeout+0xc>)
   b5860:	681b      	ldr	r3, [r3, #0]
   b5862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5864:	9301      	str	r3, [sp, #4]
   b5866:	bd08      	pop	{r3, pc}
   b5868:	00030240 	.word	0x00030240

000b586c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b586c:	b508      	push	{r3, lr}
   b586e:	4b02      	ldr	r3, [pc, #8]	; (b5878 <network_get_listen_timeout+0xc>)
   b5870:	681b      	ldr	r3, [r3, #0]
   b5872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5874:	9301      	str	r3, [sp, #4]
   b5876:	bd08      	pop	{r3, pc}
   b5878:	00030240 	.word	0x00030240

000b587c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b587c:	b508      	push	{r3, lr}
   b587e:	4b02      	ldr	r3, [pc, #8]	; (b5888 <network_is_on+0xc>)
   b5880:	681b      	ldr	r3, [r3, #0]
   b5882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5884:	9301      	str	r3, [sp, #4]
   b5886:	bd08      	pop	{r3, pc}
   b5888:	00030240 	.word	0x00030240

000b588c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b588c:	b508      	push	{r3, lr}
   b588e:	4b02      	ldr	r3, [pc, #8]	; (b5898 <network_is_off+0xc>)
   b5890:	681b      	ldr	r3, [r3, #0]
   b5892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5894:	9301      	str	r3, [sp, #4]
   b5896:	bd08      	pop	{r3, pc}
   b5898:	00030240 	.word	0x00030240

000b589c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b589c:	b508      	push	{r3, lr}
   b589e:	4b02      	ldr	r3, [pc, #8]	; (b58a8 <malloc+0xc>)
   b58a0:	681b      	ldr	r3, [r3, #0]
   b58a2:	681b      	ldr	r3, [r3, #0]
   b58a4:	9301      	str	r3, [sp, #4]
   b58a6:	bd08      	pop	{r3, pc}
   b58a8:	0003021c 	.word	0x0003021c

000b58ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b58ac:	b508      	push	{r3, lr}
   b58ae:	4b02      	ldr	r3, [pc, #8]	; (b58b8 <free+0xc>)
   b58b0:	681b      	ldr	r3, [r3, #0]
   b58b2:	685b      	ldr	r3, [r3, #4]
   b58b4:	9301      	str	r3, [sp, #4]
   b58b6:	bd08      	pop	{r3, pc}
   b58b8:	0003021c 	.word	0x0003021c

000b58bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b58bc:	b508      	push	{r3, lr}
   b58be:	4b02      	ldr	r3, [pc, #8]	; (b58c8 <realloc+0xc>)
   b58c0:	681b      	ldr	r3, [r3, #0]
   b58c2:	689b      	ldr	r3, [r3, #8]
   b58c4:	9301      	str	r3, [sp, #4]
   b58c6:	bd08      	pop	{r3, pc}
   b58c8:	0003021c 	.word	0x0003021c

000b58cc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b58cc:	b508      	push	{r3, lr}
   b58ce:	4b02      	ldr	r3, [pc, #8]	; (b58d8 <vsnprintf+0xc>)
   b58d0:	681b      	ldr	r3, [r3, #0]
   b58d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58d4:	9301      	str	r3, [sp, #4]
   b58d6:	bd08      	pop	{r3, pc}
   b58d8:	0003021c 	.word	0x0003021c

000b58dc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b58dc:	b508      	push	{r3, lr}
   b58de:	4b02      	ldr	r3, [pc, #8]	; (b58e8 <abort+0xc>)
   b58e0:	681b      	ldr	r3, [r3, #0]
   b58e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b58e4:	9301      	str	r3, [sp, #4]
   b58e6:	bd08      	pop	{r3, pc}
   b58e8:	0003021c 	.word	0x0003021c

000b58ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b58ec:	b508      	push	{r3, lr}
   b58ee:	4b02      	ldr	r3, [pc, #8]	; (b58f8 <_malloc_r+0xc>)
   b58f0:	681b      	ldr	r3, [r3, #0]
   b58f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b58f4:	9301      	str	r3, [sp, #4]
   b58f6:	bd08      	pop	{r3, pc}
   b58f8:	0003021c 	.word	0x0003021c

000b58fc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b58fc:	b508      	push	{r3, lr}
   b58fe:	4b02      	ldr	r3, [pc, #8]	; (b5908 <__assert_func+0xc>)
   b5900:	681b      	ldr	r3, [r3, #0]
   b5902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	bd08      	pop	{r3, pc}
   b5908:	0003021c 	.word	0x0003021c

000b590c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b590c:	b508      	push	{r3, lr}
   b590e:	4b02      	ldr	r3, [pc, #8]	; (b5918 <newlib_impure_ptr_callback+0xc>)
   b5910:	681b      	ldr	r3, [r3, #0]
   b5912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5914:	9301      	str	r3, [sp, #4]
   b5916:	bd08      	pop	{r3, pc}
   b5918:	0003021c 	.word	0x0003021c

000b591c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b591c:	2100      	movs	r1, #0
   b591e:	f7ff bf19 	b.w	b5754 <system_delay_ms>

000b5922 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b5922:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5924:	6883      	ldr	r3, [r0, #8]
   b5926:	4604      	mov	r4, r0
   b5928:	b90b      	cbnz	r3, b592e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b592a:	f001 fa07 	bl	b6d3c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b592e:	68c3      	ldr	r3, [r0, #12]
   b5930:	4798      	blx	r3
      if (_M_manager)
   b5932:	68a3      	ldr	r3, [r4, #8]
   b5934:	b11b      	cbz	r3, b593e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5936:	2203      	movs	r2, #3
   b5938:	4621      	mov	r1, r4
   b593a:	4620      	mov	r0, r4
   b593c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b593e:	4620      	mov	r0, r4
   b5940:	2110      	movs	r1, #16
}
   b5942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5946:	f7fe bbba 	b.w	b40be <_ZdlPvj>

000b594a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b594a:	b510      	push	{r4, lr}
      if (_M_manager)
   b594c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b594e:	4604      	mov	r4, r0
      if (_M_manager)
   b5950:	b113      	cbz	r3, b5958 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5952:	2203      	movs	r2, #3
   b5954:	4601      	mov	r1, r0
   b5956:	4798      	blx	r3
    }
   b5958:	4620      	mov	r0, r4
   b595a:	bd10      	pop	{r4, pc}

000b595c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b595c:	b513      	push	{r0, r1, r4, lr}
   b595e:	460b      	mov	r3, r1
   b5960:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5962:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5966:	466c      	mov	r4, sp
   b5968:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b596c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5970:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5974:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5978:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b597c:	b002      	add	sp, #8
   b597e:	bd10      	pop	{r4, pc}

000b5980 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5980:	4802      	ldr	r0, [pc, #8]	; (b598c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5982:	2300      	movs	r3, #0
   b5984:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5986:	f7ff bd7d 	b.w	b5484 <os_mutex_recursive_create>
   b598a:	bf00      	nop
   b598c:	2003e69c 	.word	0x2003e69c

000b5990 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5990:	2200      	movs	r2, #0
   b5992:	6840      	ldr	r0, [r0, #4]
   b5994:	4611      	mov	r1, r2
   b5996:	f7ff bf39 	b.w	b580c <network_ready>

000b599a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b599a:	2200      	movs	r2, #0
   b599c:	6840      	ldr	r0, [r0, #4]
   b599e:	4611      	mov	r1, r2
   b59a0:	f7ff bf54 	b.w	b584c <network_listening>

000b59a4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b59a4:	2200      	movs	r2, #0
   b59a6:	6840      	ldr	r0, [r0, #4]
   b59a8:	4611      	mov	r1, r2
   b59aa:	f7ff bf5f 	b.w	b586c <network_get_listen_timeout>

000b59ae <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b59ae:	6840      	ldr	r0, [r0, #4]
   b59b0:	2200      	movs	r2, #0
   b59b2:	f7ff bf53 	b.w	b585c <network_set_listen_timeout>

000b59b6 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b59b6:	6840      	ldr	r0, [r0, #4]
   b59b8:	2200      	movs	r2, #0
   b59ba:	f081 0101 	eor.w	r1, r1, #1
   b59be:	f7ff bf3d 	b.w	b583c <network_listen>

000b59c2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b59c2:	2300      	movs	r3, #0
   b59c4:	6840      	ldr	r0, [r0, #4]
   b59c6:	461a      	mov	r2, r3
   b59c8:	4619      	mov	r1, r3
   b59ca:	f7ff bf2f 	b.w	b582c <network_off>

000b59ce <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b59ce:	2300      	movs	r3, #0
   b59d0:	6840      	ldr	r0, [r0, #4]
   b59d2:	461a      	mov	r2, r3
   b59d4:	4619      	mov	r1, r3
   b59d6:	f7ff bf21 	b.w	b581c <network_on>

000b59da <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b59da:	2200      	movs	r2, #0
   b59dc:	6840      	ldr	r0, [r0, #4]
   b59de:	4611      	mov	r1, r2
   b59e0:	f7ff bf04 	b.w	b57ec <network_connecting>

000b59e4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b59e4:	6840      	ldr	r0, [r0, #4]
   b59e6:	2200      	movs	r2, #0
   b59e8:	2102      	movs	r1, #2
   b59ea:	f7ff bf07 	b.w	b57fc <network_disconnect>

000b59ee <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b59ee:	2300      	movs	r3, #0
   b59f0:	6840      	ldr	r0, [r0, #4]
   b59f2:	461a      	mov	r2, r3
   b59f4:	f7ff bef2 	b.w	b57dc <network_connect>

000b59f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b59f8:	4b08      	ldr	r3, [pc, #32]	; (b5a1c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b59fa:	b510      	push	{r4, lr}
   b59fc:	2428      	movs	r4, #40	; 0x28
   b59fe:	4622      	mov	r2, r4
   b5a00:	4618      	mov	r0, r3
   b5a02:	2100      	movs	r1, #0
   b5a04:	f001 f9b1 	bl	b6d6a <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5a08:	4b05      	ldr	r3, [pc, #20]	; (b5a20 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b5a0a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b5a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5a10:	6042      	str	r2, [r0, #4]
   b5a12:	2204      	movs	r2, #4
   b5a14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b5a16:	4a03      	ldr	r2, [pc, #12]	; (b5a24 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b5a18:	601a      	str	r2, [r3, #0]
   b5a1a:	bd10      	pop	{r4, pc}
   b5a1c:	2003e6a8 	.word	0x2003e6a8
   b5a20:	2003e6a0 	.word	0x2003e6a0
   b5a24:	000c00d0 	.word	0x000c00d0

000b5a28 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5a28:	4770      	bx	lr

000b5a2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b5a2a:	2000      	movs	r0, #0
   b5a2c:	4770      	bx	lr

000b5a2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5a2e:	b510      	push	{r4, lr}
   b5a30:	2110      	movs	r1, #16
   b5a32:	4604      	mov	r4, r0
   b5a34:	f7fe fb43 	bl	b40be <_ZdlPvj>
   b5a38:	4620      	mov	r0, r4
   b5a3a:	bd10      	pop	{r4, pc}

000b5a3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5a3c:	b508      	push	{r3, lr}
      { delete this; }
   b5a3e:	f7ff fff6 	bl	b5a2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5a42:	bd08      	pop	{r3, pc}

000b5a44 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5a44:	b530      	push	{r4, r5, lr}
        type_(type) {
   b5a46:	2200      	movs	r2, #0
   b5a48:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5a4c:	6002      	str	r2, [r0, #0]
   b5a4e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5a50:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a52:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5a54:	680c      	ldr	r4, [r1, #0]
   b5a56:	8085      	strh	r5, [r0, #4]
   b5a58:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b5a5a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b5a5c:	bd30      	pop	{r4, r5, pc}

000b5a5e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b5a5e:	b510      	push	{r4, lr}
   b5a60:	4604      	mov	r4, r0
    free((void*)msg_);
   b5a62:	6800      	ldr	r0, [r0, #0]
   b5a64:	f7ff ff22 	bl	b58ac <free>
}
   b5a68:	4620      	mov	r0, r4
   b5a6a:	bd10      	pop	{r4, pc}

000b5a6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5a6c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b5a6e:	68c4      	ldr	r4, [r0, #12]
   b5a70:	b1f4      	cbz	r4, b5ab0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b5a72:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b5a74:	2b02      	cmp	r3, #2
   b5a76:	d103      	bne.n	b5a80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b5a78:	f104 000c 	add.w	r0, r4, #12
   b5a7c:	f7ff ffef 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b5a80:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b5a82:	b135      	cbz	r5, b5a92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b5a84:	4628      	mov	r0, r5
   b5a86:	f7ff ff60 	bl	b594a <_ZNSt14_Function_baseD1Ev>
   b5a8a:	2110      	movs	r1, #16
   b5a8c:	4628      	mov	r0, r5
   b5a8e:	f7fe fb16 	bl	b40be <_ZdlPvj>
   b5a92:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b5a94:	b135      	cbz	r5, b5aa4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b5a96:	4628      	mov	r0, r5
   b5a98:	f7ff ff57 	bl	b594a <_ZNSt14_Function_baseD1Ev>
   b5a9c:	2110      	movs	r1, #16
   b5a9e:	4628      	mov	r0, r5
   b5aa0:	f7fe fb0d 	bl	b40be <_ZdlPvj>
   b5aa4:	4620      	mov	r0, r4
   b5aa6:	2114      	movs	r1, #20
   b5aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5aac:	f7fe bb07 	b.w	b40be <_ZdlPvj>
   b5ab0:	bd38      	pop	{r3, r4, r5, pc}

000b5ab2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ab2:	680b      	ldr	r3, [r1, #0]
   b5ab4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b5ab6:	684b      	ldr	r3, [r1, #4]
   b5ab8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5aba:	b113      	cbz	r3, b5ac2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5abc:	685a      	ldr	r2, [r3, #4]
   b5abe:	3201      	adds	r2, #1
   b5ac0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b5ac2:	4770      	bx	lr

000b5ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b5ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ac6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5ac8:	4668      	mov	r0, sp
   b5aca:	460d      	mov	r5, r1
   b5acc:	f7ff fff1 	bl	b5ab2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ad0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5ad2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5ad4:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b5ad6:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5ad8:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5ada:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5adc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5ade:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5ae0:	f7fe fc4a 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b5ae4:	b135      	cbz	r5, b5af4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b5ae6:	1d28      	adds	r0, r5, #4
   b5ae8:	f7fe fc46 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5aec:	2108      	movs	r1, #8
   b5aee:	4628      	mov	r0, r5
   b5af0:	f7fe fae5 	bl	b40be <_ZdlPvj>
        return p;
    }
   b5af4:	4620      	mov	r0, r4
   b5af6:	b003      	add	sp, #12
   b5af8:	bd30      	pop	{r4, r5, pc}

000b5afa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b5afa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5afc:	b510      	push	{r4, lr}
      if (_M_empty())
   b5afe:	b90a      	cbnz	r2, b5b04 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5b00:	f001 f91c 	bl	b6d3c <_ZSt25__throw_bad_function_callv>
    }
   b5b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b08:	68c3      	ldr	r3, [r0, #12]
   b5b0a:	4718      	bx	r3

000b5b0c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5b0c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5b0e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5b10:	f100 0110 	add.w	r1, r0, #16
   b5b14:	f7ff fff1 	bl	b5afa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5b18:	bd08      	pop	{r3, pc}

000b5b1a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5b1a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5b1c:	b510      	push	{r4, lr}
      if (_M_empty())
   b5b1e:	b90a      	cbnz	r2, b5b24 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5b20:	f001 f90c 	bl	b6d3c <_ZSt25__throw_bad_function_callv>
    }
   b5b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5b28:	68c3      	ldr	r3, [r0, #12]
   b5b2a:	4718      	bx	r3

000b5b2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5b2c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5b2e:	6800      	ldr	r0, [r0, #0]
   b5b30:	f100 0110 	add.w	r1, r0, #16
   b5b34:	f7ff fff1 	bl	b5b1a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b5b38:	bd08      	pop	{r3, pc}
	...

000b5b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b5b3c:	b538      	push	{r3, r4, r5, lr}
   b5b3e:	2300      	movs	r3, #0
   b5b40:	4604      	mov	r4, r0
   b5b42:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b44:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b5b46:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b48:	f7fe fab5 	bl	b40b6 <_Znwj>
   b5b4c:	b128      	cbz	r0, b5b5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b5b4e:	2301      	movs	r3, #1
   b5b50:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b5b54:	4b02      	ldr	r3, [pc, #8]	; (b5b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b5b56:	6003      	str	r3, [r0, #0]
   b5b58:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b5b5a:	6020      	str	r0, [r4, #0]
	}
   b5b5c:	4620      	mov	r0, r4
   b5b5e:	bd38      	pop	{r3, r4, r5, pc}
   b5b60:	000c010c 	.word	0x000c010c

000b5b64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b5b64:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5b66:	2300      	movs	r3, #0
   b5b68:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5b6a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5b6c:	4604      	mov	r4, r0
   b5b6e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5b70:	b12b      	cbz	r3, b5b7e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5b72:	2202      	movs	r2, #2
   b5b74:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5b76:	68eb      	ldr	r3, [r5, #12]
   b5b78:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5b7a:	68ab      	ldr	r3, [r5, #8]
   b5b7c:	60a3      	str	r3, [r4, #8]
    }
   b5b7e:	4620      	mov	r0, r4
   b5b80:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b5b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b86:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5b88:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5b8a:	4668      	mov	r0, sp
   b5b8c:	f7ff ff5a 	bl	b5a44 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5b90:	f04f 0302 	mov.w	r3, #2
   b5b94:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5b98:	2a00      	cmp	r2, #0
   b5b9a:	d103      	bne.n	b5ba4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5b9c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5ba0:	2900      	cmp	r1, #0
   b5ba2:	d1f7      	bne.n	b5b94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b5ba4:	d125      	bne.n	b5bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b5ba6:	f104 050c 	add.w	r5, r4, #12
   b5baa:	4669      	mov	r1, sp
   b5bac:	4628      	mov	r0, r5
   b5bae:	f7ff ff49 	bl	b5a44 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b5bb2:	f3bf 8f5b 	dmb	ish
   b5bb6:	2301      	movs	r3, #1
   b5bb8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5bba:	2000      	movs	r0, #0
   b5bbc:	f104 0308 	add.w	r3, r4, #8
   b5bc0:	f3bf 8f5b 	dmb	ish
   b5bc4:	e853 6f00 	ldrex	r6, [r3]
   b5bc8:	e843 0200 	strex	r2, r0, [r3]
   b5bcc:	2a00      	cmp	r2, #0
   b5bce:	d1f9      	bne.n	b5bc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5bd0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5bd4:	b16e      	cbz	r6, b5bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b5bd6:	f7ff fdc5 	bl	b5764 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5bda:	b178      	cbz	r0, b5bfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5bdc:	4629      	mov	r1, r5
   b5bde:	4630      	mov	r0, r6
   b5be0:	f7ff ff8b 	bl	b5afa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b5be4:	4630      	mov	r0, r6
   b5be6:	f7ff feb0 	bl	b594a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5bea:	2110      	movs	r1, #16
   b5bec:	4630      	mov	r0, r6
   b5bee:	f7fe fa66 	bl	b40be <_ZdlPvj>
        p_->setError(std::move(error));
   b5bf2:	4668      	mov	r0, sp
   b5bf4:	f7ff ff33 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
    }
   b5bf8:	b009      	add	sp, #36	; 0x24
   b5bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5bfc:	4631      	mov	r1, r6
   b5bfe:	a802      	add	r0, sp, #8
   b5c00:	f7ff ffb0 	bl	b5b64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5c04:	68e0      	ldr	r0, [r4, #12]
   b5c06:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5c0a:	b108      	cbz	r0, b5c10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5c0c:	f001 f8ec 	bl	b6de8 <strdup>
        type_(type) {
   b5c10:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5c12:	2010      	movs	r0, #16
   b5c14:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5c18:	f7fe fa4d 	bl	b40b6 <_Znwj>
   b5c1c:	4605      	mov	r5, r0
   b5c1e:	b1e8      	cbz	r0, b5c5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5c20:	2700      	movs	r7, #0
   b5c22:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c24:	2018      	movs	r0, #24
   b5c26:	f7fe fa46 	bl	b40b6 <_Znwj>
   b5c2a:	4604      	mov	r4, r0
   b5c2c:	b188      	cbz	r0, b5c52 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b5c2e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b5c30:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5c32:	a802      	add	r0, sp, #8
   b5c34:	f7ff fe92 	bl	b595c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c38:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5c3a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c3c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5c3e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5c40:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5c42:	a906      	add	r1, sp, #24
   b5c44:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5c46:	60e3      	str	r3, [r4, #12]
   b5c48:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5c4c:	9205      	str	r2, [sp, #20]
   b5c4e:	f7ff fef9 	bl	b5a44 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b5c52:	4b08      	ldr	r3, [pc, #32]	; (b5c74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b5c54:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5c56:	4b08      	ldr	r3, [pc, #32]	; (b5c78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5c58:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5c5a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5c5c:	a806      	add	r0, sp, #24
   b5c5e:	f7ff fefe 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5c62:	a802      	add	r0, sp, #8
   b5c64:	f7ff fe71 	bl	b594a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5c68:	2200      	movs	r2, #0
   b5c6a:	4629      	mov	r1, r5
   b5c6c:	4803      	ldr	r0, [pc, #12]	; (b5c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5c6e:	f7ff fd81 	bl	b5774 <application_thread_invoke>
   b5c72:	e7b7      	b.n	b5be4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b5c74:	000b5b0d 	.word	0x000b5b0d
   b5c78:	000b5d91 	.word	0x000b5d91
   b5c7c:	000b5923 	.word	0x000b5923

000b5c80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c84:	b08b      	sub	sp, #44	; 0x2c
   b5c86:	4605      	mov	r5, r0
   b5c88:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5c8c:	460f      	mov	r7, r1
   b5c8e:	4690      	mov	r8, r2
   b5c90:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5c92:	f7ff fd8b 	bl	b57ac <spark_cloud_flag_connected>
   b5c96:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5c98:	4683      	mov	fp, r0
   b5c9a:	bb38      	cbnz	r0, b5cec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5c9c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5ca0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5ca2:	a905      	add	r1, sp, #20
   b5ca4:	4630      	mov	r0, r6
   b5ca6:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5caa:	f7ff fecb 	bl	b5a44 <_ZN8particle5ErrorC1EOS0_>
   b5cae:	2014      	movs	r0, #20
   b5cb0:	f7fe fa01 	bl	b40b6 <_Znwj>
   b5cb4:	4604      	mov	r4, r0
   b5cb6:	b148      	cbz	r0, b5ccc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5cb8:	2302      	movs	r3, #2
   b5cba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5cbc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5cbe:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5cc2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b5cc4:	4631      	mov	r1, r6
   b5cc6:	300c      	adds	r0, #12
   b5cc8:	f7ff febc 	bl	b5a44 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5ccc:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5cce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5cd0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b5cd4:	f7ff ff32 	bl	b5b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5cd8:	4630      	mov	r0, r6
   b5cda:	f7ff fec0 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5cde:	a805      	add	r0, sp, #20
   b5ce0:	f7ff febd 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b5ce4:	4628      	mov	r0, r5
   b5ce6:	b00b      	add	sp, #44	; 0x2c
   b5ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5cec:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5cee:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5cf0:	2014      	movs	r0, #20
   b5cf2:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b5cf6:	9307      	str	r3, [sp, #28]
   b5cf8:	f7fe f9dd 	bl	b40b6 <_Znwj>
   b5cfc:	4601      	mov	r1, r0
   b5cfe:	b118      	cbz	r0, b5d08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b5d04:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5d06:	7044      	strb	r4, [r0, #1]
   b5d08:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5d0a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5d0c:	f7ff ff16 	bl	b5b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5d10:	4b1e      	ldr	r3, [pc, #120]	; (b5d8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b5d12:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b5d14:	2008      	movs	r0, #8
   b5d16:	f7fe f9ce 	bl	b40b6 <_Znwj>
   b5d1a:	4604      	mov	r4, r0
   b5d1c:	b110      	cbz	r0, b5d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5d1e:	a903      	add	r1, sp, #12
   b5d20:	f7ff fec7 	bl	b5ab2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5d24:	9600      	str	r6, [sp, #0]
   b5d26:	fa5f f38a 	uxtb.w	r3, sl
   b5d2a:	464a      	mov	r2, r9
   b5d2c:	4641      	mov	r1, r8
   b5d2e:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b5d30:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b5d32:	f7ff fd43 	bl	b57bc <spark_send_event>
   b5d36:	b9b8      	cbnz	r0, b5d68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5d38:	9b03      	ldr	r3, [sp, #12]
   b5d3a:	785b      	ldrb	r3, [r3, #1]
   b5d3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5d40:	b993      	cbnz	r3, b5d68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b5d42:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b5d46:	a905      	add	r1, sp, #20
   b5d48:	a803      	add	r0, sp, #12
   b5d4a:	9205      	str	r2, [sp, #20]
   b5d4c:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5d50:	f7ff ff18 	bl	b5b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5d54:	a805      	add	r0, sp, #20
   b5d56:	f7ff fe82 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5d5a:	a805      	add	r0, sp, #20
   b5d5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5d5e:	f7ff feb1 	bl	b5ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b5d62:	a806      	add	r0, sp, #24
   b5d64:	f7fe fb08 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d68:	a903      	add	r1, sp, #12
   b5d6a:	a805      	add	r0, sp, #20
   b5d6c:	f7ff fea1 	bl	b5ab2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d70:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5d72:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5d74:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b5d76:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5d78:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5d7a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5d7c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5d7e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5d80:	f7fe fafa 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5d84:	a804      	add	r0, sp, #16
   b5d86:	f7fe faf7 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5d8a:	e7ab      	b.n	b5ce4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5d8c:	000b5e0d 	.word	0x000b5e0d

000b5d90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5d90:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d94:	4605      	mov	r5, r0
	switch (__op)
   b5d96:	d103      	bne.n	b5da0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5d98:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5d9a:	6003      	str	r3, [r0, #0]
      }
   b5d9c:	2000      	movs	r0, #0
   b5d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5da0:	2a02      	cmp	r2, #2
   b5da2:	d010      	beq.n	b5dc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b5da4:	2a03      	cmp	r2, #3
   b5da6:	d1f9      	bne.n	b5d9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5da8:	6804      	ldr	r4, [r0, #0]
   b5daa:	2c00      	cmp	r4, #0
   b5dac:	d0f6      	beq.n	b5d9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5dae:	f104 0010 	add.w	r0, r4, #16
   b5db2:	f7ff fe54 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b5db6:	4620      	mov	r0, r4
   b5db8:	f7ff fdc7 	bl	b594a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5dbc:	2118      	movs	r1, #24
   b5dbe:	4620      	mov	r0, r4
   b5dc0:	f7fe f97d 	bl	b40be <_ZdlPvj>
   b5dc4:	e7ea      	b.n	b5d9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5dc6:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5dc8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5dca:	f7fe f974 	bl	b40b6 <_Znwj>
   b5dce:	4604      	mov	r4, r0
   b5dd0:	b150      	cbz	r0, b5de8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b5dd2:	4631      	mov	r1, r6
   b5dd4:	f7ff fec6 	bl	b5b64 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5dd8:	6930      	ldr	r0, [r6, #16]
   b5dda:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5dde:	b108      	cbz	r0, b5de4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5de0:	f001 f802 	bl	b6de8 <strdup>
        type_(type) {
   b5de4:	6120      	str	r0, [r4, #16]
   b5de6:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5de8:	602c      	str	r4, [r5, #0]
	}
   b5dea:	e7d7      	b.n	b5d9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5dec <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5dec:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5dee:	2300      	movs	r3, #0
   b5df0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5df2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5df4:	4604      	mov	r4, r0
   b5df6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5df8:	b12b      	cbz	r3, b5e06 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5dfa:	2202      	movs	r2, #2
   b5dfc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5dfe:	68eb      	ldr	r3, [r5, #12]
   b5e00:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5e02:	68ab      	ldr	r3, [r5, #8]
   b5e04:	60a3      	str	r3, [r4, #8]
    }
   b5e06:	4620      	mov	r0, r4
   b5e08:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5e0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e0e:	b089      	sub	sp, #36	; 0x24
   b5e10:	4604      	mov	r4, r0
   b5e12:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b5e14:	a801      	add	r0, sp, #4
   b5e16:	4611      	mov	r1, r2
   b5e18:	f7ff fe54 	bl	b5ac4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5e1c:	b1a4      	cbz	r4, b5e48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5e1e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5e20:	b11d      	cbz	r5, b5e2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b5e22:	4628      	mov	r0, r5
   b5e24:	f000 ffe0 	bl	b6de8 <strdup>
   b5e28:	4605      	mov	r5, r0
   b5e2a:	a801      	add	r0, sp, #4
   b5e2c:	a903      	add	r1, sp, #12
        type_(type) {
   b5e2e:	9503      	str	r5, [sp, #12]
   b5e30:	f8ad 4010 	strh.w	r4, [sp, #16]
   b5e34:	f7ff fea6 	bl	b5b84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5e38:	a803      	add	r0, sp, #12
   b5e3a:	f7ff fe10 	bl	b5a5e <_ZN8particle5ErrorD1Ev>
   b5e3e:	a802      	add	r0, sp, #8
   b5e40:	f7fe fa9a 	bl	b4378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5e44:	b009      	add	sp, #36	; 0x24
   b5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5e48:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5e4a:	2301      	movs	r3, #1
   b5e4c:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5e50:	2a00      	cmp	r2, #0
   b5e52:	d103      	bne.n	b5e5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b5e54:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5e58:	2900      	cmp	r1, #0
   b5e5a:	d1f7      	bne.n	b5e4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5e5c:	d1ef      	bne.n	b5e3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5e5e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5e60:	f3bf 8f5b 	dmb	ish
   b5e64:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5e66:	1d2b      	adds	r3, r5, #4
   b5e68:	f3bf 8f5b 	dmb	ish
   b5e6c:	e853 6f00 	ldrex	r6, [r3]
   b5e70:	e843 4200 	strex	r2, r4, [r3]
   b5e74:	2a00      	cmp	r2, #0
   b5e76:	d1f9      	bne.n	b5e6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5e78:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5e7c:	2e00      	cmp	r6, #0
   b5e7e:	d0de      	beq.n	b5e3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5e80:	4620      	mov	r0, r4
   b5e82:	f7ff fc6f 	bl	b5764 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5e86:	4607      	mov	r7, r0
   b5e88:	b160      	cbz	r0, b5ea4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5e8a:	f105 010c 	add.w	r1, r5, #12
   b5e8e:	4630      	mov	r0, r6
   b5e90:	f7ff fe43 	bl	b5b1a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b5e94:	4630      	mov	r0, r6
   b5e96:	f7ff fd58 	bl	b594a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5e9a:	2110      	movs	r1, #16
   b5e9c:	4630      	mov	r0, r6
   b5e9e:	f7fe f90e 	bl	b40be <_ZdlPvj>
   b5ea2:	e7cc      	b.n	b5e3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5ea4:	4631      	mov	r1, r6
   b5ea6:	a803      	add	r0, sp, #12
   b5ea8:	f7ff ffa0 	bl	b5dec <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5eac:	7b2b      	ldrb	r3, [r5, #12]
   b5eae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b5eb2:	2010      	movs	r0, #16
   b5eb4:	f7fe f8ff 	bl	b40b6 <_Znwj>
   b5eb8:	4605      	mov	r5, r0
   b5eba:	b1d0      	cbz	r0, b5ef2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5ebc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5ebe:	2014      	movs	r0, #20
   b5ec0:	f7fe f8f9 	bl	b40b6 <_Znwj>
   b5ec4:	4604      	mov	r4, r0
   b5ec6:	b178      	cbz	r0, b5ee8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5ec8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5eca:	4601      	mov	r1, r0
   b5ecc:	a803      	add	r0, sp, #12
   b5ece:	f7ff fd45 	bl	b595c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ed2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5ed4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ed6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5ed8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5eda:	9205      	str	r2, [sp, #20]
   b5edc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5ede:	60e3      	str	r3, [r4, #12]
   b5ee0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b5ee4:	9206      	str	r2, [sp, #24]
   b5ee6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5ee8:	4b06      	ldr	r3, [pc, #24]	; (b5f04 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5eea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5eec:	4b06      	ldr	r3, [pc, #24]	; (b5f08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5eee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5ef0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b5ef2:	a803      	add	r0, sp, #12
   b5ef4:	f7ff fd29 	bl	b594a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5ef8:	2200      	movs	r2, #0
   b5efa:	4629      	mov	r1, r5
   b5efc:	4803      	ldr	r0, [pc, #12]	; (b5f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5efe:	f7ff fc39 	bl	b5774 <application_thread_invoke>
   b5f02:	e7c7      	b.n	b5e94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b5f04:	000b5b2d 	.word	0x000b5b2d
   b5f08:	000b5f11 	.word	0x000b5f11
   b5f0c:	000b5923 	.word	0x000b5923

000b5f10 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5f10:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b5f12:	b570      	push	{r4, r5, r6, lr}
   b5f14:	4604      	mov	r4, r0
	switch (__op)
   b5f16:	d103      	bne.n	b5f20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5f18:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5f1a:	6003      	str	r3, [r0, #0]
      }
   b5f1c:	2000      	movs	r0, #0
   b5f1e:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5f20:	2a02      	cmp	r2, #2
   b5f22:	d00c      	beq.n	b5f3e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b5f24:	2a03      	cmp	r2, #3
   b5f26:	d1f9      	bne.n	b5f1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5f28:	6804      	ldr	r4, [r0, #0]
   b5f2a:	2c00      	cmp	r4, #0
   b5f2c:	d0f6      	beq.n	b5f1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b5f2e:	4620      	mov	r0, r4
   b5f30:	f7ff fd0b 	bl	b594a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5f34:	2114      	movs	r1, #20
   b5f36:	4620      	mov	r0, r4
   b5f38:	f7fe f8c1 	bl	b40be <_ZdlPvj>
   b5f3c:	e7ee      	b.n	b5f1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5f3e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5f40:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5f42:	f7fe f8b8 	bl	b40b6 <_Znwj>
   b5f46:	4605      	mov	r5, r0
   b5f48:	b120      	cbz	r0, b5f54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5f4a:	4631      	mov	r1, r6
   b5f4c:	f7ff ff4e 	bl	b5dec <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5f50:	7c33      	ldrb	r3, [r6, #16]
   b5f52:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b5f54:	6025      	str	r5, [r4, #0]
	}
   b5f56:	e7e1      	b.n	b5f1c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5f58 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5f58:	2200      	movs	r2, #0
   b5f5a:	6840      	ldr	r0, [r0, #4]
   b5f5c:	4611      	mov	r1, r2
   b5f5e:	f7ff bc75 	b.w	b584c <network_listening>

000b5f62 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5f62:	2200      	movs	r2, #0
   b5f64:	6840      	ldr	r0, [r0, #4]
   b5f66:	4611      	mov	r1, r2
   b5f68:	f7ff bc80 	b.w	b586c <network_get_listen_timeout>

000b5f6c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5f6c:	6840      	ldr	r0, [r0, #4]
   b5f6e:	2200      	movs	r2, #0
   b5f70:	f7ff bc74 	b.w	b585c <network_set_listen_timeout>

000b5f74 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5f74:	6840      	ldr	r0, [r0, #4]
   b5f76:	2200      	movs	r2, #0
   b5f78:	f081 0101 	eor.w	r1, r1, #1
   b5f7c:	f7ff bc5e 	b.w	b583c <network_listen>

000b5f80 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5f80:	2300      	movs	r3, #0
   b5f82:	6840      	ldr	r0, [r0, #4]
   b5f84:	461a      	mov	r2, r3
   b5f86:	4619      	mov	r1, r3
   b5f88:	f7ff bc50 	b.w	b582c <network_off>

000b5f8c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5f8c:	2300      	movs	r3, #0
   b5f8e:	6840      	ldr	r0, [r0, #4]
   b5f90:	461a      	mov	r2, r3
   b5f92:	4619      	mov	r1, r3
   b5f94:	f7ff bc42 	b.w	b581c <network_on>

000b5f98 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5f98:	2200      	movs	r2, #0
   b5f9a:	6840      	ldr	r0, [r0, #4]
   b5f9c:	4611      	mov	r1, r2
   b5f9e:	f7ff bc35 	b.w	b580c <network_ready>

000b5fa2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5fa2:	2200      	movs	r2, #0
   b5fa4:	6840      	ldr	r0, [r0, #4]
   b5fa6:	4611      	mov	r1, r2
   b5fa8:	f7ff bc20 	b.w	b57ec <network_connecting>

000b5fac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5fac:	6840      	ldr	r0, [r0, #4]
   b5fae:	2200      	movs	r2, #0
   b5fb0:	2102      	movs	r1, #2
   b5fb2:	f7ff bc23 	b.w	b57fc <network_disconnect>

000b5fb6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5fb6:	2300      	movs	r3, #0
   b5fb8:	6840      	ldr	r0, [r0, #4]
   b5fba:	461a      	mov	r2, r3
   b5fbc:	f7ff bc0e 	b.w	b57dc <network_connect>

000b5fc0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5fc0:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5fc2:	2203      	movs	r2, #3
   b5fc4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5fc6:	4a02      	ldr	r2, [pc, #8]	; (b5fd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5fc8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5fca:	4770      	bx	lr
   b5fcc:	2003e6d0 	.word	0x2003e6d0
   b5fd0:	000c0128 	.word	0x000c0128

000b5fd4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5fd4:	4770      	bx	lr

000b5fd6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5fd8:	4606      	mov	r6, r0
   b5fda:	4615      	mov	r5, r2
   b5fdc:	460c      	mov	r4, r1
   b5fde:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5fe0:	42bc      	cmp	r4, r7
   b5fe2:	d006      	beq.n	b5ff2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5fe4:	6833      	ldr	r3, [r6, #0]
   b5fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5fea:	689b      	ldr	r3, [r3, #8]
   b5fec:	4630      	mov	r0, r6
   b5fee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5ff0:	e7f6      	b.n	b5fe0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5ff2:	4628      	mov	r0, r5
   b5ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ff6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5ff6:	7c00      	ldrb	r0, [r0, #16]
   b5ff8:	2200      	movs	r2, #0
   b5ffa:	f7ff ba93 	b.w	b5524 <hal_i2c_write>

000b5ffe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5ffe:	7c00      	ldrb	r0, [r0, #16]
   b6000:	2100      	movs	r1, #0
   b6002:	f7ff ba97 	b.w	b5534 <hal_i2c_available>

000b6006 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6006:	7c00      	ldrb	r0, [r0, #16]
   b6008:	2100      	movs	r1, #0
   b600a:	f7ff ba9b 	b.w	b5544 <hal_i2c_read>

000b600e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b600e:	7c00      	ldrb	r0, [r0, #16]
   b6010:	2100      	movs	r1, #0
   b6012:	f7ff ba9f 	b.w	b5554 <hal_i2c_peek>

000b6016 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6016:	7c00      	ldrb	r0, [r0, #16]
   b6018:	2100      	movs	r1, #0
   b601a:	f7ff baa3 	b.w	b5564 <hal_i2c_flush>

000b601e <_ZN7TwoWireD0Ev>:
   b601e:	b510      	push	{r4, lr}
   b6020:	2114      	movs	r1, #20
   b6022:	4604      	mov	r4, r0
   b6024:	f7fe f84b 	bl	b40be <_ZdlPvj>
   b6028:	4620      	mov	r0, r4
   b602a:	bd10      	pop	{r4, pc}

000b602c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b602c:	b538      	push	{r3, r4, r5, lr}
   b602e:	4604      	mov	r4, r0
   b6030:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6036:	2200      	movs	r2, #0
   b6038:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b603c:	4b09      	ldr	r3, [pc, #36]	; (b6064 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b603e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6040:	4608      	mov	r0, r1
   b6042:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6044:	4629      	mov	r1, r5
   b6046:	f7ff fa9d 	bl	b5584 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b604a:	30bf      	adds	r0, #191	; 0xbf
   b604c:	d108      	bne.n	b6060 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b604e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6050:	07db      	lsls	r3, r3, #31
   b6052:	d505      	bpl.n	b6060 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6054:	6868      	ldr	r0, [r5, #4]
   b6056:	f7ff fc29 	bl	b58ac <free>
    free(conf.tx_buffer);
   b605a:	68e8      	ldr	r0, [r5, #12]
   b605c:	f7ff fc26 	bl	b58ac <free>
}
   b6060:	4620      	mov	r0, r4
   b6062:	bd38      	pop	{r3, r4, r5, pc}
   b6064:	000c0164 	.word	0x000c0164

000b6068 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6068:	2300      	movs	r3, #0
   b606a:	7c00      	ldrb	r0, [r0, #16]
   b606c:	461a      	mov	r2, r3
   b606e:	4619      	mov	r1, r3
   b6070:	f7ff ba40 	b.w	b54f4 <hal_i2c_begin>

000b6074 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6074:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6076:	2200      	movs	r2, #0
   b6078:	2314      	movs	r3, #20
   b607a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b607e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6082:	780b      	ldrb	r3, [r1, #0]
   b6084:	f88d 3008 	strb.w	r3, [sp, #8]
   b6088:	684b      	ldr	r3, [r1, #4]
   b608a:	9303      	str	r3, [sp, #12]
   b608c:	68cb      	ldr	r3, [r1, #12]
   b608e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6090:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6092:	7a0b      	ldrb	r3, [r1, #8]
   b6094:	9305      	str	r3, [sp, #20]
   b6096:	a901      	add	r1, sp, #4
   b6098:	f7ff fa7c 	bl	b5594 <hal_i2c_request_ex>
}
   b609c:	b007      	add	sp, #28
   b609e:	f85d fb04 	ldr.w	pc, [sp], #4

000b60a2 <_ZN7TwoWire11requestFromEhjh>:
{
   b60a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b60a4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b60a6:	f88d 1000 	strb.w	r1, [sp]
   b60aa:	f04f 0164 	mov.w	r1, #100	; 0x64
   b60ae:	9103      	str	r1, [sp, #12]
   b60b0:	bf18      	it	ne
   b60b2:	2301      	movne	r3, #1
   b60b4:	4669      	mov	r1, sp
    size_ = size;
   b60b6:	9201      	str	r2, [sp, #4]
   b60b8:	f88d 3008 	strb.w	r3, [sp, #8]
   b60bc:	f7ff ffda 	bl	b6074 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b60c0:	b005      	add	sp, #20
   b60c2:	f85d fb04 	ldr.w	pc, [sp], #4

000b60c6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b60c6:	2301      	movs	r3, #1
   b60c8:	f7ff bfeb 	b.w	b60a2 <_ZN7TwoWire11requestFromEhjh>

000b60cc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b60cc:	7c00      	ldrb	r0, [r0, #16]
   b60ce:	2200      	movs	r2, #0
   b60d0:	f7ff ba18 	b.w	b5504 <hal_i2c_begin_transmission>

000b60d4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b60d4:	b2c9      	uxtb	r1, r1
   b60d6:	f7ff bff9 	b.w	b60cc <_ZN7TwoWire17beginTransmissionEh>

000b60da <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b60da:	7c00      	ldrb	r0, [r0, #16]
   b60dc:	2200      	movs	r2, #0
   b60de:	f7ff ba19 	b.w	b5514 <hal_i2c_end_transmission>

000b60e2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b60e2:	2101      	movs	r1, #1
   b60e4:	f7ff bff9 	b.w	b60da <_ZN7TwoWire15endTransmissionEh>

000b60e8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b60e8:	4770      	bx	lr

000b60ea <_ZN9IPAddressD0Ev>:
   b60ea:	b510      	push	{r4, lr}
   b60ec:	2118      	movs	r1, #24
   b60ee:	4604      	mov	r4, r0
   b60f0:	f7fd ffe5 	bl	b40be <_ZdlPvj>
   b60f4:	4620      	mov	r0, r4
   b60f6:	bd10      	pop	{r4, pc}

000b60f8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b60f8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b60fa:	7d03      	ldrb	r3, [r0, #20]
   b60fc:	2b06      	cmp	r3, #6
{
   b60fe:	b08d      	sub	sp, #52	; 0x34
   b6100:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6102:	f100 0704 	add.w	r7, r0, #4
   b6106:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b610a:	d012      	beq.n	b6132 <_ZNK9IPAddress7printToER5Print+0x3a>
   b610c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6110:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6114:	220a      	movs	r2, #10
   b6116:	4630      	mov	r0, r6
   b6118:	f000 f95d 	bl	b63d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b611c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b611e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6120:	d019      	beq.n	b6156 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6122:	2c00      	cmp	r4, #0
   b6124:	d0f4      	beq.n	b6110 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6126:	212e      	movs	r1, #46	; 0x2e
   b6128:	4630      	mov	r0, r6
   b612a:	f000 f93b 	bl	b63a4 <_ZN5Print5printEc>
   b612e:	4404      	add	r4, r0
   b6130:	e7ee      	b.n	b6110 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6132:	232f      	movs	r3, #47	; 0x2f
   b6134:	466a      	mov	r2, sp
   b6136:	4639      	mov	r1, r7
   b6138:	200a      	movs	r0, #10
		buf[0] = 0;
   b613a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b613e:	f7ff fa31 	bl	b55a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6142:	4668      	mov	r0, sp
   b6144:	f7fd ff74 	bl	b4030 <strlen>
   b6148:	6833      	ldr	r3, [r6, #0]
   b614a:	4602      	mov	r2, r0
   b614c:	68db      	ldr	r3, [r3, #12]
   b614e:	4669      	mov	r1, sp
   b6150:	4630      	mov	r0, r6
   b6152:	4798      	blx	r3
   b6154:	4604      	mov	r4, r0
    }
    return n;
}
   b6156:	4620      	mov	r0, r4
   b6158:	b00d      	add	sp, #52	; 0x34
   b615a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b615c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b615c:	b510      	push	{r4, lr}
   b615e:	4b05      	ldr	r3, [pc, #20]	; (b6174 <_ZN9IPAddressC1Ev+0x18>)
   b6160:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6162:	2211      	movs	r2, #17
   b6164:	f840 3b04 	str.w	r3, [r0], #4
   b6168:	2100      	movs	r1, #0
   b616a:	f000 fdfe 	bl	b6d6a <memset>
}
   b616e:	4620      	mov	r0, r4
   b6170:	bd10      	pop	{r4, pc}
   b6172:	bf00      	nop
   b6174:	000c018c 	.word	0x000c018c

000b6178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6178:	4603      	mov	r3, r0
   b617a:	4a07      	ldr	r2, [pc, #28]	; (b6198 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b617c:	b510      	push	{r4, lr}
   b617e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6182:	f101 0210 	add.w	r2, r1, #16
   b6186:	f851 4b04 	ldr.w	r4, [r1], #4
   b618a:	f843 4b04 	str.w	r4, [r3], #4
   b618e:	4291      	cmp	r1, r2
   b6190:	d1f9      	bne.n	b6186 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6192:	780a      	ldrb	r2, [r1, #0]
   b6194:	701a      	strb	r2, [r3, #0]
}
   b6196:	bd10      	pop	{r4, pc}
   b6198:	000c018c 	.word	0x000c018c

000b619c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b619c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b619e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b61a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b61a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b61aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b61ae:	2304      	movs	r3, #4
   b61b0:	6041      	str	r1, [r0, #4]
   b61b2:	7503      	strb	r3, [r0, #20]
}
   b61b4:	bd10      	pop	{r4, pc}
	...

000b61b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b61b8:	b507      	push	{r0, r1, r2, lr}
   b61ba:	4b06      	ldr	r3, [pc, #24]	; (b61d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b61bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b61be:	78cb      	ldrb	r3, [r1, #3]
   b61c0:	9300      	str	r3, [sp, #0]
   b61c2:	788b      	ldrb	r3, [r1, #2]
   b61c4:	784a      	ldrb	r2, [r1, #1]
   b61c6:	7809      	ldrb	r1, [r1, #0]
   b61c8:	f7ff ffe8 	bl	b619c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b61cc:	b003      	add	sp, #12
   b61ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b61d2:	bf00      	nop
   b61d4:	000c018c 	.word	0x000c018c

000b61d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b61d8:	4b01      	ldr	r3, [pc, #4]	; (b61e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b61da:	4a02      	ldr	r2, [pc, #8]	; (b61e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b61dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b61de:	4770      	bx	lr
   b61e0:	2003e6d8 	.word	0x2003e6d8
   b61e4:	000c0198 	.word	0x000c0198

000b61e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b61e8:	2300      	movs	r3, #0
   b61ea:	6840      	ldr	r0, [r0, #4]
   b61ec:	461a      	mov	r2, r3
   b61ee:	f7ff baf5 	b.w	b57dc <network_connect>

000b61f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b61f2:	6840      	ldr	r0, [r0, #4]
   b61f4:	2200      	movs	r2, #0
   b61f6:	2102      	movs	r1, #2
   b61f8:	f7ff bb00 	b.w	b57fc <network_disconnect>

000b61fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b61fc:	2200      	movs	r2, #0
   b61fe:	6840      	ldr	r0, [r0, #4]
   b6200:	4611      	mov	r1, r2
   b6202:	f7ff baf3 	b.w	b57ec <network_connecting>

000b6206 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6206:	2200      	movs	r2, #0
   b6208:	6840      	ldr	r0, [r0, #4]
   b620a:	4611      	mov	r1, r2
   b620c:	f7ff bafe 	b.w	b580c <network_ready>

000b6210 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6210:	2300      	movs	r3, #0
   b6212:	6840      	ldr	r0, [r0, #4]
   b6214:	461a      	mov	r2, r3
   b6216:	4619      	mov	r1, r3
   b6218:	f7ff bb00 	b.w	b581c <network_on>

000b621c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b621c:	2300      	movs	r3, #0
   b621e:	6840      	ldr	r0, [r0, #4]
   b6220:	461a      	mov	r2, r3
   b6222:	4619      	mov	r1, r3
   b6224:	f7ff bb02 	b.w	b582c <network_off>

000b6228 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6228:	6840      	ldr	r0, [r0, #4]
   b622a:	2100      	movs	r1, #0
   b622c:	f7ff bb26 	b.w	b587c <network_is_on>

000b6230 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6230:	6840      	ldr	r0, [r0, #4]
   b6232:	2100      	movs	r1, #0
   b6234:	f7ff bb2a 	b.w	b588c <network_is_off>

000b6238 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6238:	6840      	ldr	r0, [r0, #4]
   b623a:	2200      	movs	r2, #0
   b623c:	f081 0101 	eor.w	r1, r1, #1
   b6240:	f7ff bafc 	b.w	b583c <network_listen>

000b6244 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6244:	6840      	ldr	r0, [r0, #4]
   b6246:	2200      	movs	r2, #0
   b6248:	f7ff bb08 	b.w	b585c <network_set_listen_timeout>

000b624c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b624c:	2200      	movs	r2, #0
   b624e:	6840      	ldr	r0, [r0, #4]
   b6250:	4611      	mov	r1, r2
   b6252:	f7ff bb0b 	b.w	b586c <network_get_listen_timeout>

000b6256 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6256:	2200      	movs	r2, #0
   b6258:	6840      	ldr	r0, [r0, #4]
   b625a:	4611      	mov	r1, r2
   b625c:	f7ff baf6 	b.w	b584c <network_listening>

000b6260 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6264:	b095      	sub	sp, #84	; 0x54
   b6266:	4614      	mov	r4, r2
   b6268:	460d      	mov	r5, r1
   b626a:	4607      	mov	r7, r0
    IPAddress addr;
   b626c:	f7ff ff76 	bl	b615c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6270:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6272:	221c      	movs	r2, #28
   b6274:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6276:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6278:	f000 fd77 	bl	b6d6a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b627c:	2340      	movs	r3, #64	; 0x40
   b627e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6280:	4620      	mov	r0, r4
   b6282:	466b      	mov	r3, sp
   b6284:	aa0c      	add	r2, sp, #48	; 0x30
   b6286:	2100      	movs	r1, #0
   b6288:	f7ff f99c 	bl	b55c4 <netdb_getaddrinfo>
    if (!r) {
   b628c:	4604      	mov	r4, r0
   b628e:	2800      	cmp	r0, #0
   b6290:	d14b      	bne.n	b632a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6292:	4602      	mov	r2, r0
   b6294:	2101      	movs	r1, #1
   b6296:	6868      	ldr	r0, [r5, #4]
   b6298:	f7ff fab8 	bl	b580c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b629c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b629e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62a0:	4622      	mov	r2, r4
   b62a2:	6868      	ldr	r0, [r5, #4]
   b62a4:	f7ff fab2 	bl	b580c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b62aa:	4681      	mov	r9, r0
        bool ok = false;
   b62ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62ae:	2e00      	cmp	r6, #0
   b62b0:	d03b      	beq.n	b632a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b62b2:	2900      	cmp	r1, #0
   b62b4:	d139      	bne.n	b632a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b62b6:	6873      	ldr	r3, [r6, #4]
   b62b8:	2b02      	cmp	r3, #2
   b62ba:	d003      	beq.n	b62c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b62bc:	2b0a      	cmp	r3, #10
   b62be:	d011      	beq.n	b62e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b62c0:	69f6      	ldr	r6, [r6, #28]
   b62c2:	e7f4      	b.n	b62ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b62c4:	f1b8 0f00 	cmp.w	r8, #0
   b62c8:	d0fa      	beq.n	b62c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b62ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b62cc:	a806      	add	r0, sp, #24
   b62ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b62d0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b62d2:	f7ff ff71 	bl	b61b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b62d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b62d8:	1d3c      	adds	r4, r7, #4
   b62da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b62dc:	682b      	ldr	r3, [r5, #0]
   b62de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b62e0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b62e2:	e7ed      	b.n	b62c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b62e4:	f1b9 0f00 	cmp.w	r9, #0
   b62e8:	d0ea      	beq.n	b62c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b62ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b62ec:	2210      	movs	r2, #16
   b62ee:	a801      	add	r0, sp, #4
   b62f0:	f000 fd3b 	bl	b6d6a <memset>
                    a.v = 6;
   b62f4:	2306      	movs	r3, #6
   b62f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b62fa:	ad01      	add	r5, sp, #4
   b62fc:	f104 0308 	add.w	r3, r4, #8
   b6300:	3418      	adds	r4, #24
   b6302:	6818      	ldr	r0, [r3, #0]
   b6304:	6859      	ldr	r1, [r3, #4]
   b6306:	462a      	mov	r2, r5
   b6308:	c203      	stmia	r2!, {r0, r1}
   b630a:	3308      	adds	r3, #8
   b630c:	42a3      	cmp	r3, r4
   b630e:	4615      	mov	r5, r2
   b6310:	d1f7      	bne.n	b6302 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6312:	a901      	add	r1, sp, #4
   b6314:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6316:	ad07      	add	r5, sp, #28
   b6318:	f7ff ff2e 	bl	b6178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b631c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b631e:	1d3c      	adds	r4, r7, #4
   b6320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6322:	682b      	ldr	r3, [r5, #0]
   b6324:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6326:	4649      	mov	r1, r9
   b6328:	e7ca      	b.n	b62c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b632a:	9800      	ldr	r0, [sp, #0]
   b632c:	f7ff f942 	bl	b55b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6330:	4638      	mov	r0, r7
   b6332:	b015      	add	sp, #84	; 0x54
   b6334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6338 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6338:	4b02      	ldr	r3, [pc, #8]	; (b6344 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b633a:	4a03      	ldr	r2, [pc, #12]	; (b6348 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b633c:	601a      	str	r2, [r3, #0]
   b633e:	2200      	movs	r2, #0
   b6340:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b6342:	4770      	bx	lr
   b6344:	2003e6dc 	.word	0x2003e6dc
   b6348:	000c01a4 	.word	0x000c01a4

000b634c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b634c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b634e:	4606      	mov	r6, r0
   b6350:	460d      	mov	r5, r1
  size_t n = 0;
   b6352:	188f      	adds	r7, r1, r2
   b6354:	2400      	movs	r4, #0
  while (size--) {
   b6356:	42bd      	cmp	r5, r7
   b6358:	d00c      	beq.n	b6374 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b635a:	6833      	ldr	r3, [r6, #0]
   b635c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6360:	689b      	ldr	r3, [r3, #8]
   b6362:	4630      	mov	r0, r6
   b6364:	4798      	blx	r3
     if (chunk>=0)
   b6366:	1e03      	subs	r3, r0, #0
   b6368:	db01      	blt.n	b636e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b636a:	441c      	add	r4, r3
  while (size--) {
   b636c:	e7f3      	b.n	b6356 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b636e:	2c00      	cmp	r4, #0
   b6370:	bf08      	it	eq
   b6372:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6374:	4620      	mov	r0, r4
   b6376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6378 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6378:	b513      	push	{r0, r1, r4, lr}
   b637a:	4604      	mov	r4, r0
    }
   b637c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b637e:	b159      	cbz	r1, b6398 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6380:	9101      	str	r1, [sp, #4]
   b6382:	f7fd fe55 	bl	b4030 <strlen>
   b6386:	6823      	ldr	r3, [r4, #0]
   b6388:	9901      	ldr	r1, [sp, #4]
   b638a:	68db      	ldr	r3, [r3, #12]
   b638c:	4602      	mov	r2, r0
   b638e:	4620      	mov	r0, r4
    }
   b6390:	b002      	add	sp, #8
   b6392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6396:	4718      	bx	r3
    }
   b6398:	b002      	add	sp, #8
   b639a:	bd10      	pop	{r4, pc}

000b639c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b639c:	b508      	push	{r3, lr}
  return write(str);
   b639e:	f7ff ffeb 	bl	b6378 <_ZN5Print5writeEPKc>
}
   b63a2:	bd08      	pop	{r3, pc}

000b63a4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b63a4:	6803      	ldr	r3, [r0, #0]
   b63a6:	689b      	ldr	r3, [r3, #8]
   b63a8:	4718      	bx	r3

000b63aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b63aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b63ac:	210d      	movs	r1, #13
{
   b63ae:	4605      	mov	r5, r0
  size_t n = print('\r');
   b63b0:	f7ff fff8 	bl	b63a4 <_ZN5Print5printEc>
  n += print('\n');
   b63b4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b63b6:	4604      	mov	r4, r0
  n += print('\n');
   b63b8:	4628      	mov	r0, r5
   b63ba:	f7ff fff3 	bl	b63a4 <_ZN5Print5printEc>
  return n;
}
   b63be:	4420      	add	r0, r4
   b63c0:	bd38      	pop	{r3, r4, r5, pc}

000b63c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b63c2:	b538      	push	{r3, r4, r5, lr}
   b63c4:	4605      	mov	r5, r0
  return write(str);
   b63c6:	f7ff ffd7 	bl	b6378 <_ZN5Print5writeEPKc>
   b63ca:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b63cc:	4628      	mov	r0, r5
   b63ce:	f7ff ffec 	bl	b63aa <_ZN5Print7printlnEv>
  return n;
}
   b63d2:	4420      	add	r0, r4
   b63d4:	bd38      	pop	{r3, r4, r5, pc}

000b63d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b63d6:	b530      	push	{r4, r5, lr}
   b63d8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b63da:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b63dc:	2a01      	cmp	r2, #1
  *str = '\0';
   b63de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b63e2:	bf98      	it	ls
   b63e4:	220a      	movls	r2, #10
   b63e6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b63e8:	460d      	mov	r5, r1
   b63ea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b63ee:	fb01 5312 	mls	r3, r1, r2, r5
   b63f2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b63f6:	2b09      	cmp	r3, #9
   b63f8:	bf94      	ite	ls
   b63fa:	3330      	addls	r3, #48	; 0x30
   b63fc:	3337      	addhi	r3, #55	; 0x37
   b63fe:	b2db      	uxtb	r3, r3
  } while(n);
   b6400:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6402:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6406:	d9ef      	bls.n	b63e8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6408:	4621      	mov	r1, r4
   b640a:	f7ff ffb5 	bl	b6378 <_ZN5Print5writeEPKc>
}
   b640e:	b00b      	add	sp, #44	; 0x2c
   b6410:	bd30      	pop	{r4, r5, pc}

000b6412 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6416:	b086      	sub	sp, #24
   b6418:	af00      	add	r7, sp, #0
   b641a:	4605      	mov	r5, r0
   b641c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b641e:	1d38      	adds	r0, r7, #4
   b6420:	2114      	movs	r1, #20
{
   b6422:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6424:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6426:	f7ff fa51 	bl	b58cc <vsnprintf>

    if (n<bufsize)
   b642a:	2813      	cmp	r0, #19
   b642c:	d80e      	bhi.n	b644c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b642e:	1d39      	adds	r1, r7, #4
   b6430:	4628      	mov	r0, r5
   b6432:	f7ff ffa1 	bl	b6378 <_ZN5Print5writeEPKc>
   b6436:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6438:	b11e      	cbz	r6, b6442 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b643a:	4628      	mov	r0, r5
   b643c:	f7ff ffb5 	bl	b63aa <_ZN5Print7printlnEv>
   b6440:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6442:	4620      	mov	r0, r4
   b6444:	3718      	adds	r7, #24
   b6446:	46bd      	mov	sp, r7
   b6448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b644c:	f100 0308 	add.w	r3, r0, #8
   b6450:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6454:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6456:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b645a:	4622      	mov	r2, r4
   b645c:	1c41      	adds	r1, r0, #1
   b645e:	683b      	ldr	r3, [r7, #0]
   b6460:	4668      	mov	r0, sp
   b6462:	f7ff fa33 	bl	b58cc <vsnprintf>
  return write(str);
   b6466:	4669      	mov	r1, sp
   b6468:	4628      	mov	r0, r5
   b646a:	f7ff ff85 	bl	b6378 <_ZN5Print5writeEPKc>
   b646e:	4604      	mov	r4, r0
   b6470:	46c5      	mov	sp, r8
   b6472:	e7e1      	b.n	b6438 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6474 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b6474:	4b01      	ldr	r3, [pc, #4]	; (b647c <_GLOBAL__sub_I_RGB+0x8>)
   b6476:	2200      	movs	r2, #0
   b6478:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b647a:	4770      	bx	lr
   b647c:	2003e6e4 	.word	0x2003e6e4

000b6480 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6480:	2100      	movs	r1, #0
   b6482:	f7ff b8df 	b.w	b5644 <hal_spi_release>

000b6486 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6486:	2100      	movs	r1, #0
   b6488:	f7ff b8d4 	b.w	b5634 <hal_spi_acquire>

000b648c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b648c:	b510      	push	{r4, lr}
   b648e:	4604      	mov	r4, r0
   b6490:	4608      	mov	r0, r1
{
    _spi = spi;
   b6492:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6494:	f7ff f8ae 	bl	b55f4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6498:	2300      	movs	r3, #0
   b649a:	6063      	str	r3, [r4, #4]
}
   b649c:	4620      	mov	r0, r4
   b649e:	bd10      	pop	{r4, pc}

000b64a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b64a0:	b513      	push	{r0, r1, r4, lr}
   b64a2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b64a4:	7800      	ldrb	r0, [r0, #0]
   b64a6:	f7ff ffee 	bl	b6486 <_ZN8SPIClass4lockEv.isra.0>
   b64aa:	b958      	cbnz	r0, b64c4 <_ZN8SPIClass5beginEv+0x24>
   b64ac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b64ae:	9001      	str	r0, [sp, #4]
   b64b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b64b4:	f7ff f88e 	bl	b55d4 <hal_spi_begin>
        unlock();
   b64b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b64ba:	b002      	add	sp, #8
   b64bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b64c0:	f7ff bfde 	b.w	b6480 <_ZN8SPIClass6unlockEv.isra.0>
   b64c4:	b002      	add	sp, #8
   b64c6:	bd10      	pop	{r4, pc}

000b64c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b64c8:	0840      	lsrs	r0, r0, #1
{
   b64ca:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b64cc:	6018      	str	r0, [r3, #0]
   b64ce:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b64d0:	6818      	ldr	r0, [r3, #0]
   b64d2:	4288      	cmp	r0, r1
   b64d4:	b2e5      	uxtb	r5, r4
   b64d6:	d906      	bls.n	b64e6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b64d8:	3401      	adds	r4, #1
   b64da:	2c08      	cmp	r4, #8
   b64dc:	d002      	beq.n	b64e4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b64de:	0840      	lsrs	r0, r0, #1
   b64e0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b64e2:	e7f5      	b.n	b64d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b64e4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b64e8:	5d5b      	ldrb	r3, [r3, r5]
   b64ea:	7013      	strb	r3, [r2, #0]
}
   b64ec:	bd30      	pop	{r4, r5, pc}
   b64ee:	bf00      	nop
   b64f0:	000c01d8 	.word	0x000c01d8

000b64f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b64f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b64f8:	4606      	mov	r6, r0
   b64fa:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b64fc:	7800      	ldrb	r0, [r0, #0]
{
   b64fe:	460c      	mov	r4, r1
    CHECK(lock());
   b6500:	f7ff ffc1 	bl	b6486 <_ZN8SPIClass4lockEv.isra.0>
   b6504:	2800      	cmp	r0, #0
   b6506:	db1b      	blt.n	b6540 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6508:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b650a:	2214      	movs	r2, #20
   b650c:	2100      	movs	r1, #0
   b650e:	a809      	add	r0, sp, #36	; 0x24
   b6510:	f000 fc2b 	bl	b6d6a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6514:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6516:	2200      	movs	r2, #0
   b6518:	a909      	add	r1, sp, #36	; 0x24
   b651a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b651c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6520:	f7ff f878 	bl	b5614 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6524:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6528:	b113      	cbz	r3, b6530 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b652a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b652e:	b155      	cbz	r5, b6546 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6530:	2700      	movs	r7, #0
   b6532:	46b9      	mov	r9, r7
   b6534:	46b8      	mov	r8, r7
   b6536:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6538:	7923      	ldrb	r3, [r4, #4]
   b653a:	b15d      	cbz	r5, b6554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b653c:	b1c3      	cbz	r3, b6570 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b653e:	2000      	movs	r0, #0
}
   b6540:	b00f      	add	sp, #60	; 0x3c
   b6542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6546:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b654a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b654e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6552:	e7f1      	b.n	b6538 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6554:	2b00      	cmp	r3, #0
   b6556:	d135      	bne.n	b65c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6558:	68a3      	ldr	r3, [r4, #8]
   b655a:	4543      	cmp	r3, r8
   b655c:	d108      	bne.n	b6570 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b655e:	f88d 9020 	strb.w	r9, [sp, #32]
   b6562:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6566:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b656a:	89a3      	ldrh	r3, [r4, #12]
   b656c:	429a      	cmp	r2, r3
   b656e:	d0e6      	beq.n	b653e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6570:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6572:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6574:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6578:	980a      	ldr	r0, [sp, #40]	; 0x28
   b657a:	ab04      	add	r3, sp, #16
   b657c:	f10d 020f 	add.w	r2, sp, #15
   b6580:	f7ff ffa2 	bl	b64c8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6584:	7921      	ldrb	r1, [r4, #4]
   b6586:	b985      	cbnz	r5, b65aa <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6588:	b989      	cbnz	r1, b65ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b658a:	68a3      	ldr	r3, [r4, #8]
   b658c:	4543      	cmp	r3, r8
   b658e:	d30e      	bcc.n	b65ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6590:	f88d 9020 	strb.w	r9, [sp, #32]
   b6594:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6598:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b659c:	89a3      	ldrh	r3, [r4, #12]
   b659e:	429a      	cmp	r2, r3
   b65a0:	d105      	bne.n	b65ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b65a2:	9b04      	ldr	r3, [sp, #16]
   b65a4:	4543      	cmp	r3, r8
   b65a6:	d102      	bne.n	b65ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b65a8:	e7c9      	b.n	b653e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b65aa:	2900      	cmp	r1, #0
   b65ac:	d1f9      	bne.n	b65a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b65ae:	2300      	movs	r3, #0
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	7b63      	ldrb	r3, [r4, #13]
   b65b4:	9300      	str	r3, [sp, #0]
   b65b6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b65ba:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b65bc:	7830      	ldrb	r0, [r6, #0]
   b65be:	f7ff f831 	bl	b5624 <hal_spi_set_settings>
   b65c2:	e7bc      	b.n	b653e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b65c4:	e9cd 5500 	strd	r5, r5, [sp]
   b65c8:	462b      	mov	r3, r5
   b65ca:	462a      	mov	r2, r5
   b65cc:	2101      	movs	r1, #1
   b65ce:	e7f5      	b.n	b65bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b65d0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b65d0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b65d2:	7800      	ldrb	r0, [r0, #0]
   b65d4:	f7ff f806 	bl	b55e4 <hal_spi_transfer>
}
   b65d8:	b2c0      	uxtb	r0, r0
   b65da:	bd08      	pop	{r3, pc}

000b65dc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b65dc:	b510      	push	{r4, lr}
   b65de:	4604      	mov	r4, r0
{
	free(buffer);
   b65e0:	6800      	ldr	r0, [r0, #0]
   b65e2:	f7ff f963 	bl	b58ac <free>
}
   b65e6:	4620      	mov	r0, r4
   b65e8:	bd10      	pop	{r4, pc}

000b65ea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b65ea:	b510      	push	{r4, lr}
   b65ec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b65ee:	6800      	ldr	r0, [r0, #0]
   b65f0:	b108      	cbz	r0, b65f6 <_ZN6String10invalidateEv+0xc>
   b65f2:	f7ff f95b 	bl	b58ac <free>
	buffer = NULL;
   b65f6:	2300      	movs	r3, #0
	capacity = len = 0;
   b65f8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b65fc:	6023      	str	r3, [r4, #0]
}
   b65fe:	bd10      	pop	{r4, pc}

000b6600 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6600:	b538      	push	{r3, r4, r5, lr}
   b6602:	4604      	mov	r4, r0
   b6604:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6606:	6800      	ldr	r0, [r0, #0]
   b6608:	3101      	adds	r1, #1
   b660a:	f7ff f957 	bl	b58bc <realloc>
	if (newbuffer) {
   b660e:	b110      	cbz	r0, b6616 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6610:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6614:	2001      	movs	r0, #1
	}
	return 0;
}
   b6616:	bd38      	pop	{r3, r4, r5, pc}

000b6618 <_ZN6String7reserveEj>:
{
   b6618:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b661a:	6803      	ldr	r3, [r0, #0]
{
   b661c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b661e:	b123      	cbz	r3, b662a <_ZN6String7reserveEj+0x12>
   b6620:	6843      	ldr	r3, [r0, #4]
   b6622:	428b      	cmp	r3, r1
   b6624:	d301      	bcc.n	b662a <_ZN6String7reserveEj+0x12>
   b6626:	2001      	movs	r0, #1
}
   b6628:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b662a:	4620      	mov	r0, r4
   b662c:	f7ff ffe8 	bl	b6600 <_ZN6String12changeBufferEj>
   b6630:	2800      	cmp	r0, #0
   b6632:	d0f9      	beq.n	b6628 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6634:	68a3      	ldr	r3, [r4, #8]
   b6636:	2b00      	cmp	r3, #0
   b6638:	d1f5      	bne.n	b6626 <_ZN6String7reserveEj+0xe>
   b663a:	6822      	ldr	r2, [r4, #0]
   b663c:	7013      	strb	r3, [r2, #0]
   b663e:	e7f2      	b.n	b6626 <_ZN6String7reserveEj+0xe>

000b6640 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6642:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6644:	4611      	mov	r1, r2
   b6646:	9201      	str	r2, [sp, #4]
{
   b6648:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b664a:	f7ff ffe5 	bl	b6618 <_ZN6String7reserveEj>
   b664e:	9a01      	ldr	r2, [sp, #4]
   b6650:	b928      	cbnz	r0, b665e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6652:	4620      	mov	r0, r4
   b6654:	f7ff ffc9 	bl	b65ea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6658:	4620      	mov	r0, r4
   b665a:	b003      	add	sp, #12
   b665c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b665e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6660:	4629      	mov	r1, r5
   b6662:	6820      	ldr	r0, [r4, #0]
   b6664:	f000 fb73 	bl	b6d4e <memcpy>
	buffer[len] = 0;
   b6668:	6822      	ldr	r2, [r4, #0]
   b666a:	68a3      	ldr	r3, [r4, #8]
   b666c:	2100      	movs	r1, #0
   b666e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6670:	e7f2      	b.n	b6658 <_ZN6String4copyEPKcj+0x18>

000b6672 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6672:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6674:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6676:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b667a:	4604      	mov	r4, r0
	len = 0;
   b667c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b667e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6680:	b141      	cbz	r1, b6694 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6682:	4608      	mov	r0, r1
   b6684:	9101      	str	r1, [sp, #4]
   b6686:	f7fd fcd3 	bl	b4030 <strlen>
   b668a:	9901      	ldr	r1, [sp, #4]
   b668c:	4602      	mov	r2, r0
   b668e:	4620      	mov	r0, r4
   b6690:	f7ff ffd6 	bl	b6640 <_ZN6String4copyEPKcj>
}
   b6694:	4620      	mov	r0, r4
   b6696:	b002      	add	sp, #8
   b6698:	bd10      	pop	{r4, pc}

000b669a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b669a:	b538      	push	{r3, r4, r5, lr}
   b669c:	4605      	mov	r5, r0
	if (buffer) {
   b669e:	6800      	ldr	r0, [r0, #0]
{
   b66a0:	460c      	mov	r4, r1
	if (buffer) {
   b66a2:	b170      	cbz	r0, b66c2 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
   b66a4:	686a      	ldr	r2, [r5, #4]
   b66a6:	688b      	ldr	r3, [r1, #8]
   b66a8:	429a      	cmp	r2, r3
   b66aa:	d308      	bcc.n	b66be <_ZN6String4moveERS_+0x24>
   b66ac:	6809      	ldr	r1, [r1, #0]
   b66ae:	b131      	cbz	r1, b66be <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
   b66b0:	f000 fb92 	bl	b6dd8 <strcpy>
			len = rhs.len;
   b66b4:	68a3      	ldr	r3, [r4, #8]
   b66b6:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b66b8:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b66ba:	60a3      	str	r3, [r4, #8]
}
   b66bc:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b66be:	f7ff f8f5 	bl	b58ac <free>
	buffer = rhs.buffer;
   b66c2:	6823      	ldr	r3, [r4, #0]
   b66c4:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b66c6:	6863      	ldr	r3, [r4, #4]
   b66c8:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b66ca:	68a3      	ldr	r3, [r4, #8]
   b66cc:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b66ce:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b66d0:	e9c4 3300 	strd	r3, r3, [r4]
   b66d4:	e7f1      	b.n	b66ba <_ZN6String4moveERS_+0x20>

000b66d6 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b66d6:	b510      	push	{r4, lr}
	buffer = NULL;
   b66d8:	2300      	movs	r3, #0
	capacity = 0;
   b66da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b66de:	4604      	mov	r4, r0
	len = 0;
   b66e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b66e2:	7303      	strb	r3, [r0, #12]
	move(rval);
   b66e4:	f7ff ffd9 	bl	b669a <_ZN6String4moveERS_>
}
   b66e8:	4620      	mov	r0, r4
   b66ea:	bd10      	pop	{r4, pc}

000b66ec <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b66ec:	b513      	push	{r0, r1, r4, lr}
   b66ee:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b66f0:	b159      	cbz	r1, b670a <_ZN6StringaSEPKc+0x1e>
   b66f2:	4608      	mov	r0, r1
   b66f4:	9101      	str	r1, [sp, #4]
   b66f6:	f7fd fc9b 	bl	b4030 <strlen>
   b66fa:	9901      	ldr	r1, [sp, #4]
   b66fc:	4602      	mov	r2, r0
   b66fe:	4620      	mov	r0, r4
   b6700:	f7ff ff9e 	bl	b6640 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6704:	4620      	mov	r0, r4
   b6706:	b002      	add	sp, #8
   b6708:	bd10      	pop	{r4, pc}
	else invalidate();
   b670a:	f7ff ff6e 	bl	b65ea <_ZN6String10invalidateEv>
   b670e:	e7f9      	b.n	b6704 <_ZN6StringaSEPKc+0x18>

000b6710 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b6710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b6712:	4604      	mov	r4, r0
	buffer = NULL;
   b6714:	2300      	movs	r3, #0
	capacity = 0;
   b6716:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b671a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b671c:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b671e:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b6720:	a901      	add	r1, sp, #4
   b6722:	f000 f96d 	bl	b6a00 <utoa>
	*this = buf;
   b6726:	a901      	add	r1, sp, #4
   b6728:	4620      	mov	r0, r4
   b672a:	f7ff ffdf 	bl	b66ec <_ZN6StringaSEPKc>
}
   b672e:	4620      	mov	r0, r4
   b6730:	b004      	add	sp, #16
   b6732:	bd10      	pop	{r4, pc}

000b6734 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6734:	b570      	push	{r4, r5, r6, lr}
   b6736:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6738:	460e      	mov	r6, r1
   b673a:	b909      	cbnz	r1, b6740 <_ZN6String6concatEPKcj+0xc>
   b673c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b673e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6740:	b16a      	cbz	r2, b675e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6742:	6884      	ldr	r4, [r0, #8]
   b6744:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6746:	4621      	mov	r1, r4
   b6748:	f7ff ff66 	bl	b6618 <_ZN6String7reserveEj>
   b674c:	2800      	cmp	r0, #0
   b674e:	d0f5      	beq.n	b673c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6750:	6828      	ldr	r0, [r5, #0]
   b6752:	68ab      	ldr	r3, [r5, #8]
   b6754:	4631      	mov	r1, r6
   b6756:	4418      	add	r0, r3
   b6758:	f000 fb3e 	bl	b6dd8 <strcpy>
	len = newlen;
   b675c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b675e:	2001      	movs	r0, #1
   b6760:	e7ed      	b.n	b673e <_ZN6String6concatEPKcj+0xa>

000b6762 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6762:	688a      	ldr	r2, [r1, #8]
   b6764:	6809      	ldr	r1, [r1, #0]
   b6766:	f7ff bfe5 	b.w	b6734 <_ZN6String6concatEPKcj>

000b676a <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b676a:	b513      	push	{r0, r1, r4, lr}
   b676c:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b676e:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b6770:	b151      	cbz	r1, b6788 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b6772:	9101      	str	r1, [sp, #4]
   b6774:	f7fd fc5c 	bl	b4030 <strlen>
   b6778:	9901      	ldr	r1, [sp, #4]
   b677a:	4602      	mov	r2, r0
   b677c:	4620      	mov	r0, r4
}
   b677e:	b002      	add	sp, #8
   b6780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b6784:	f7ff bfd6 	b.w	b6734 <_ZN6String6concatEPKcj>
}
   b6788:	b002      	add	sp, #8
   b678a:	bd10      	pop	{r4, pc}

000b678c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b678c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b678e:	6882      	ldr	r2, [r0, #8]
   b6790:	b93a      	cbnz	r2, b67a2 <_ZNK6String6equalsEPKc+0x16>
   b6792:	b121      	cbz	r1, b679e <_ZNK6String6equalsEPKc+0x12>
   b6794:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b6796:	fab0 f080 	clz	r0, r0
   b679a:	0940      	lsrs	r0, r0, #5
   b679c:	e000      	b.n	b67a0 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b679e:	2001      	movs	r0, #1
}
   b67a0:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b67a2:	6800      	ldr	r0, [r0, #0]
   b67a4:	b909      	cbnz	r1, b67aa <_ZNK6String6equalsEPKc+0x1e>
   b67a6:	7800      	ldrb	r0, [r0, #0]
   b67a8:	e7f5      	b.n	b6796 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b67aa:	f7fd fc37 	bl	b401c <strcmp>
   b67ae:	e7f2      	b.n	b6796 <_ZNK6String6equalsEPKc+0xa>

000b67b0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b67b0:	4b05      	ldr	r3, [pc, #20]	; (b67c8 <_GLOBAL__sub_I_System+0x18>)
   b67b2:	2202      	movs	r2, #2
   b67b4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b67b6:	4b05      	ldr	r3, [pc, #20]	; (b67cc <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b67b8:	4a05      	ldr	r2, [pc, #20]	; (b67d0 <_GLOBAL__sub_I_System+0x20>)
   b67ba:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b67bc:	2000      	movs	r0, #0
   b67be:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b67c2:	f7fe bfbf 	b.w	b5744 <set_system_mode>
   b67c6:	bf00      	nop
   b67c8:	2003e700 	.word	0x2003e700
   b67cc:	2003e6f4 	.word	0x2003e6f4
   b67d0:	ffff0000 	.word	0xffff0000

000b67d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b67d4:	4b02      	ldr	r3, [pc, #8]	; (b67e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b67d6:	681a      	ldr	r2, [r3, #0]
   b67d8:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b67da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b67dc:	4770      	bx	lr
   b67de:	bf00      	nop
   b67e0:	2003e538 	.word	0x2003e538
   b67e4:	2003e704 	.word	0x2003e704

000b67e8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b67e8:	4770      	bx	lr

000b67ea <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b67ea:	7441      	strb	r1, [r0, #17]
}
   b67ec:	4770      	bx	lr

000b67ee <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b67ee:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b67f0:	7c00      	ldrb	r0, [r0, #16]
   b67f2:	f7fe ff5f 	bl	b56b4 <hal_usart_available_data_for_write>
}
   b67f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b67fa:	bd08      	pop	{r3, pc}

000b67fc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b67fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b67fe:	7c00      	ldrb	r0, [r0, #16]
   b6800:	f7fe ff30 	bl	b5664 <hal_usart_available>
}
   b6804:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6808:	bd08      	pop	{r3, pc}

000b680a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b680a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b680c:	7c00      	ldrb	r0, [r0, #16]
   b680e:	f7fe ff39 	bl	b5684 <hal_usart_peek>
}
   b6812:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6816:	bd08      	pop	{r3, pc}

000b6818 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6818:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b681a:	7c00      	ldrb	r0, [r0, #16]
   b681c:	f7fe ff2a 	bl	b5674 <hal_usart_read>
}
   b6820:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6824:	bd08      	pop	{r3, pc}

000b6826 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6826:	7c00      	ldrb	r0, [r0, #16]
   b6828:	f7fe bf34 	b.w	b5694 <hal_usart_flush>

000b682c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b682c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b682e:	7c45      	ldrb	r5, [r0, #17]
{
   b6830:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6832:	b12d      	cbz	r5, b6840 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6834:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6836:	b003      	add	sp, #12
   b6838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b683c:	f7fe bf0a 	b.w	b5654 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6840:	7c00      	ldrb	r0, [r0, #16]
   b6842:	9101      	str	r1, [sp, #4]
   b6844:	f7fe ff36 	bl	b56b4 <hal_usart_available_data_for_write>
   b6848:	2800      	cmp	r0, #0
   b684a:	9901      	ldr	r1, [sp, #4]
   b684c:	dcf2      	bgt.n	b6834 <_ZN11USARTSerial5writeEh+0x8>
}
   b684e:	4628      	mov	r0, r5
   b6850:	b003      	add	sp, #12
   b6852:	bd30      	pop	{r4, r5, pc}

000b6854 <_ZN11USARTSerialD0Ev>:
   b6854:	b510      	push	{r4, lr}
   b6856:	2114      	movs	r1, #20
   b6858:	4604      	mov	r4, r0
   b685a:	f7fd fc30 	bl	b40be <_ZdlPvj>
   b685e:	4620      	mov	r0, r4
   b6860:	bd10      	pop	{r4, pc}
	...

000b6864 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6864:	b510      	push	{r4, lr}
   b6866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b686a:	4604      	mov	r4, r0
   b686c:	4608      	mov	r0, r1
   b686e:	4611      	mov	r1, r2
   b6870:	2200      	movs	r2, #0
   b6872:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6876:	4b04      	ldr	r3, [pc, #16]	; (b6888 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6878:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b687a:	2301      	movs	r3, #1
  _serial = serial;
   b687c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b687e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6880:	f7fe ff20 	bl	b56c4 <hal_usart_init_ex>
}
   b6884:	4620      	mov	r0, r4
   b6886:	bd10      	pop	{r4, pc}
   b6888:	000c0204 	.word	0x000c0204

000b688c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b688c:	7441      	strb	r1, [r0, #17]
}
   b688e:	4770      	bx	lr

000b6890 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6890:	4770      	bx	lr

000b6892 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6892:	4770      	bx	lr

000b6894 <_ZN9USBSerial4readEv>:
{
   b6894:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6896:	2100      	movs	r1, #0
   b6898:	7c00      	ldrb	r0, [r0, #16]
   b689a:	f7fe ff3b 	bl	b5714 <HAL_USB_USART_Receive_Data>
}
   b689e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68a2:	bd08      	pop	{r3, pc}

000b68a4 <_ZN9USBSerial4peekEv>:
{
   b68a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b68a6:	2101      	movs	r1, #1
   b68a8:	7c00      	ldrb	r0, [r0, #16]
   b68aa:	f7fe ff33 	bl	b5714 <HAL_USB_USART_Receive_Data>
}
   b68ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b68b2:	bd08      	pop	{r3, pc}

000b68b4 <_ZN9USBSerial17availableForWriteEv>:
{
   b68b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b68b6:	7c00      	ldrb	r0, [r0, #16]
   b68b8:	f7fe ff24 	bl	b5704 <HAL_USB_USART_Available_Data_For_Write>
}
   b68bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68c0:	bd08      	pop	{r3, pc}

000b68c2 <_ZN9USBSerial9availableEv>:
{
   b68c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b68c4:	7c00      	ldrb	r0, [r0, #16]
   b68c6:	f7fe ff15 	bl	b56f4 <HAL_USB_USART_Available_Data>
}
   b68ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b68ce:	bd08      	pop	{r3, pc}

000b68d0 <_ZN9USBSerial5writeEh>:
{
   b68d0:	b513      	push	{r0, r1, r4, lr}
   b68d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68d4:	7c00      	ldrb	r0, [r0, #16]
{
   b68d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b68d8:	f7fe ff14 	bl	b5704 <HAL_USB_USART_Available_Data_For_Write>
   b68dc:	2800      	cmp	r0, #0
   b68de:	9901      	ldr	r1, [sp, #4]
   b68e0:	dc01      	bgt.n	b68e6 <_ZN9USBSerial5writeEh+0x16>
   b68e2:	7c60      	ldrb	r0, [r4, #17]
   b68e4:	b120      	cbz	r0, b68f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b68e6:	7c20      	ldrb	r0, [r4, #16]
   b68e8:	f7fe ff1c 	bl	b5724 <HAL_USB_USART_Send_Data>
   b68ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b68f0:	b002      	add	sp, #8
   b68f2:	bd10      	pop	{r4, pc}

000b68f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b68f4:	7c00      	ldrb	r0, [r0, #16]
   b68f6:	f7fe bf1d 	b.w	b5734 <HAL_USB_USART_Flush_Data>

000b68fa <_ZN9USBSerialD0Ev>:
   b68fa:	b510      	push	{r4, lr}
   b68fc:	2114      	movs	r1, #20
   b68fe:	4604      	mov	r4, r0
   b6900:	f7fd fbdd 	bl	b40be <_ZdlPvj>
   b6904:	4620      	mov	r0, r4
   b6906:	bd10      	pop	{r4, pc}

000b6908 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6908:	b510      	push	{r4, lr}
   b690a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b690e:	4604      	mov	r4, r0
   b6910:	4608      	mov	r0, r1
   b6912:	2100      	movs	r1, #0
   b6914:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6918:	4b04      	ldr	r3, [pc, #16]	; (b692c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b691a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b691c:	2301      	movs	r3, #1
  _serial = serial;
   b691e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6920:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6922:	4611      	mov	r1, r2
   b6924:	f7fe fed6 	bl	b56d4 <HAL_USB_USART_Init>
}
   b6928:	4620      	mov	r0, r4
   b692a:	bd10      	pop	{r4, pc}
   b692c:	000c0234 	.word	0x000c0234

000b6930 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6930:	7c00      	ldrb	r0, [r0, #16]
   b6932:	2200      	movs	r2, #0
   b6934:	f7fe bed6 	b.w	b56e4 <HAL_USB_USART_Begin>

000b6938 <_Z19acquireSerialBufferv>:
{
   b6938:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b693a:	2214      	movs	r2, #20
{
   b693c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b693e:	2100      	movs	r1, #0
   b6940:	f000 fa13 	bl	b6d6a <memset>
}
   b6944:	4620      	mov	r0, r4
   b6946:	bd10      	pop	{r4, pc}

000b6948 <_Z16_fetch_usbserialv>:
{
   b6948:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b694a:	4c0f      	ldr	r4, [pc, #60]	; (b6988 <_Z16_fetch_usbserialv+0x40>)
{
   b694c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b694e:	a803      	add	r0, sp, #12
   b6950:	f7ff fff2 	bl	b6938 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6954:	7821      	ldrb	r1, [r4, #0]
   b6956:	f3bf 8f5b 	dmb	ish
   b695a:	f011 0101 	ands.w	r1, r1, #1
   b695e:	d10f      	bne.n	b6980 <_Z16_fetch_usbserialv+0x38>
   b6960:	4620      	mov	r0, r4
   b6962:	9101      	str	r1, [sp, #4]
   b6964:	f7fd fbad 	bl	b40c2 <__cxa_guard_acquire>
   b6968:	9901      	ldr	r1, [sp, #4]
   b696a:	b148      	cbz	r0, b6980 <_Z16_fetch_usbserialv+0x38>
   b696c:	aa03      	add	r2, sp, #12
   b696e:	4807      	ldr	r0, [pc, #28]	; (b698c <_Z16_fetch_usbserialv+0x44>)
   b6970:	f7ff ffca 	bl	b6908 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6974:	4620      	mov	r0, r4
   b6976:	f7fd fba9 	bl	b40cc <__cxa_guard_release>
   b697a:	4805      	ldr	r0, [pc, #20]	; (b6990 <_Z16_fetch_usbserialv+0x48>)
   b697c:	f000 f9e1 	bl	b6d42 <atexit>
	return _usbserial;
}
   b6980:	4802      	ldr	r0, [pc, #8]	; (b698c <_Z16_fetch_usbserialv+0x44>)
   b6982:	b008      	add	sp, #32
   b6984:	bd10      	pop	{r4, pc}
   b6986:	bf00      	nop
   b6988:	2003e708 	.word	0x2003e708
   b698c:	2003e70c 	.word	0x2003e70c
   b6990:	000b6891 	.word	0x000b6891

000b6994 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6994:	b510      	push	{r4, lr}
   b6996:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6998:	f7fd fb4a 	bl	b4030 <strlen>
   b699c:	3801      	subs	r0, #1
   b699e:	1823      	adds	r3, r4, r0
   b69a0:	4620      	mov	r0, r4
	while(i<j){
   b69a2:	4283      	cmp	r3, r0
   b69a4:	d906      	bls.n	b69b4 <_Z11str_reversePc+0x20>
		c = *i;
   b69a6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b69a8:	7819      	ldrb	r1, [r3, #0]
   b69aa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b69ae:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b69b2:	e7f6      	b.n	b69a2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b69b4:	bd10      	pop	{r4, pc}

000b69b6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b69b6:	b570      	push	{r4, r5, r6, lr}
   b69b8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b69ba:	1e91      	subs	r1, r2, #2
   b69bc:	2922      	cmp	r1, #34	; 0x22
   b69be:	d81d      	bhi.n	b69fc <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b69c0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b69c2:	b930      	cbnz	r0, b69d2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b69c4:	4423      	add	r3, r4
            *ptr++ = '0';
   b69c6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b69c8:	429d      	cmp	r5, r3
   b69ca:	d210      	bcs.n	b69ee <ultoa+0x38>
            *ptr++ = '0';
   b69cc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b69d0:	e7fa      	b.n	b69c8 <ultoa+0x12>
            result.quot = a/radix;
   b69d2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b69d6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b69da:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b69dc:	2809      	cmp	r0, #9
                *ptr += '0';
   b69de:	bf94      	ite	ls
   b69e0:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b69e2:	3157      	addhi	r1, #87	; 0x57
   b69e4:	b2c9      	uxtb	r1, r1
   b69e6:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b69ea:	4630      	mov	r0, r6
	while(a){
   b69ec:	e7e9      	b.n	b69c2 <ultoa+0xc>

	*ptr = '\0';
   b69ee:	2300      	movs	r3, #0
	str_reverse(buffer);
   b69f0:	4620      	mov	r0, r4
	*ptr = '\0';
   b69f2:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b69f4:	f7ff ffce 	bl	b6994 <_Z11str_reversePc>
	return buffer;
   b69f8:	4620      	mov	r0, r4
}
   b69fa:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b69fc:	2000      	movs	r0, #0
   b69fe:	e7fc      	b.n	b69fa <ultoa+0x44>

000b6a00 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b6a00:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b6a02:	2301      	movs	r3, #1
   b6a04:	f7ff ffd7 	bl	b69b6 <ultoa>
}
   b6a08:	bd08      	pop	{r3, pc}
	...

000b6a0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6a0c:	4b01      	ldr	r3, [pc, #4]	; (b6a14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6a0e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6a10:	4770      	bx	lr
   b6a12:	bf00      	nop
   b6a14:	2003e53c 	.word	0x2003e53c

000b6a18 <serialEventRun>:
{
   b6a18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6a1a:	4b0b      	ldr	r3, [pc, #44]	; (b6a48 <serialEventRun+0x30>)
   b6a1c:	b143      	cbz	r3, b6a30 <serialEventRun+0x18>
   b6a1e:	f7ff ff93 	bl	b6948 <_Z16_fetch_usbserialv>
   b6a22:	6803      	ldr	r3, [r0, #0]
   b6a24:	691b      	ldr	r3, [r3, #16]
   b6a26:	4798      	blx	r3
   b6a28:	2800      	cmp	r0, #0
   b6a2a:	dd01      	ble.n	b6a30 <serialEventRun+0x18>
        serialEvent();
   b6a2c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6a30:	4b06      	ldr	r3, [pc, #24]	; (b6a4c <serialEventRun+0x34>)
   b6a32:	b143      	cbz	r3, b6a46 <serialEventRun+0x2e>
   b6a34:	f000 f95c 	bl	b6cf0 <_Z22__fetch_global_Serial1v>
   b6a38:	6803      	ldr	r3, [r0, #0]
   b6a3a:	691b      	ldr	r3, [r3, #16]
   b6a3c:	4798      	blx	r3
   b6a3e:	2800      	cmp	r0, #0
   b6a40:	dd01      	ble.n	b6a46 <serialEventRun+0x2e>
        serialEvent1();
   b6a42:	f3af 8000 	nop.w
}
   b6a46:	bd08      	pop	{r3, pc}
	...

000b6a50 <_post_loop>:
{
   b6a50:	b508      	push	{r3, lr}
	serialEventRun();
   b6a52:	f7ff ffe1 	bl	b6a18 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6a56:	f7fe fd25 	bl	b54a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6a5a:	4b01      	ldr	r3, [pc, #4]	; (b6a60 <_post_loop+0x10>)
   b6a5c:	6018      	str	r0, [r3, #0]
}
   b6a5e:	bd08      	pop	{r3, pc}
   b6a60:	2003e728 	.word	0x2003e728

000b6a64 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a64:	4805      	ldr	r0, [pc, #20]	; (b6a7c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6a66:	4a06      	ldr	r2, [pc, #24]	; (b6a80 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6a68:	4906      	ldr	r1, [pc, #24]	; (b6a84 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6a6a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6a6c:	1a12      	subs	r2, r2, r0
   b6a6e:	f000 f96e 	bl	b6d4e <memcpy>
    __backup_sram_signature = signature;
   b6a72:	4b05      	ldr	r3, [pc, #20]	; (b6a88 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6a74:	4a05      	ldr	r2, [pc, #20]	; (b6a8c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6a76:	601a      	str	r2, [r3, #0]
}
   b6a78:	bd08      	pop	{r3, pc}
   b6a7a:	bf00      	nop
   b6a7c:	2003f400 	.word	0x2003f400
   b6a80:	2003f404 	.word	0x2003f404
   b6a84:	000c038c 	.word	0x000c038c
   b6a88:	2003f400 	.word	0x2003f400
   b6a8c:	9a271c1e 	.word	0x9a271c1e

000b6a90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6a90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6a92:	2300      	movs	r3, #0
   b6a94:	9300      	str	r3, [sp, #0]
   b6a96:	461a      	mov	r2, r3
   b6a98:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6a9c:	f7fe fe7c 	bl	b5798 <system_ctrl_set_result>
}
   b6aa0:	b003      	add	sp, #12
   b6aa2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6aa8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6aa8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6aaa:	8843      	ldrh	r3, [r0, #2]
   b6aac:	2b0a      	cmp	r3, #10
   b6aae:	d008      	beq.n	b6ac2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6ab0:	2b50      	cmp	r3, #80	; 0x50
   b6ab2:	d10b      	bne.n	b6acc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6ab4:	4b09      	ldr	r3, [pc, #36]	; (b6adc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6ab6:	681b      	ldr	r3, [r3, #0]
   b6ab8:	b14b      	cbz	r3, b6ace <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6aba:	b003      	add	sp, #12
   b6abc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6ac0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6ac2:	f7ff ffe5 	bl	b6a90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6ac6:	b003      	add	sp, #12
   b6ac8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6acc:	2300      	movs	r3, #0
   b6ace:	9300      	str	r3, [sp, #0]
   b6ad0:	461a      	mov	r2, r3
   b6ad2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6ad6:	f7fe fe5f 	bl	b5798 <system_ctrl_set_result>
}
   b6ada:	e7f4      	b.n	b6ac6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6adc:	2003e724 	.word	0x2003e724

000b6ae0 <module_user_init_hook>:
{
   b6ae0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6ae2:	4812      	ldr	r0, [pc, #72]	; (b6b2c <module_user_init_hook+0x4c>)
   b6ae4:	2100      	movs	r1, #0
   b6ae6:	f7fe ff11 	bl	b590c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6aea:	4b11      	ldr	r3, [pc, #68]	; (b6b30 <module_user_init_hook+0x50>)
   b6aec:	681a      	ldr	r2, [r3, #0]
   b6aee:	4b11      	ldr	r3, [pc, #68]	; (b6b34 <module_user_init_hook+0x54>)
   b6af0:	429a      	cmp	r2, r3
   b6af2:	4b11      	ldr	r3, [pc, #68]	; (b6b38 <module_user_init_hook+0x58>)
   b6af4:	bf0c      	ite	eq
   b6af6:	2201      	moveq	r2, #1
   b6af8:	2200      	movne	r2, #0
   b6afa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6afc:	d001      	beq.n	b6b02 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6afe:	f7ff ffb1 	bl	b6a64 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6b02:	f7fe fcc7 	bl	b5494 <HAL_RNG_GetRandomNumber>
   b6b06:	4604      	mov	r4, r0
    srand(seed);
   b6b08:	f000 f938 	bl	b6d7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6b0c:	4b0b      	ldr	r3, [pc, #44]	; (b6b3c <module_user_init_hook+0x5c>)
   b6b0e:	b113      	cbz	r3, b6b16 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6b10:	4620      	mov	r0, r4
   b6b12:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6b16:	2100      	movs	r1, #0
   b6b18:	4808      	ldr	r0, [pc, #32]	; (b6b3c <module_user_init_hook+0x5c>)
   b6b1a:	f7fe fe57 	bl	b57cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6b22:	4807      	ldr	r0, [pc, #28]	; (b6b40 <module_user_init_hook+0x60>)
   b6b24:	2100      	movs	r1, #0
   b6b26:	f7fe be2d 	b.w	b5784 <system_ctrl_set_app_request_handler>
   b6b2a:	bf00      	nop
   b6b2c:	000b6a0d 	.word	0x000b6a0d
   b6b30:	2003f400 	.word	0x2003f400
   b6b34:	9a271c1e 	.word	0x9a271c1e
   b6b38:	2003e720 	.word	0x2003e720
   b6b3c:	00000000 	.word	0x00000000
   b6b40:	000b6aa9 	.word	0x000b6aa9

000b6b44 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6b44:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b6b46:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6b48:	d902      	bls.n	b6b50 <pinAvailable+0xc>
    return false;
   b6b4a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6b4c:	b002      	add	sp, #8
   b6b4e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6b50:	f1a0 030b 	sub.w	r3, r0, #11
   b6b54:	2b02      	cmp	r3, #2
   b6b56:	d81a      	bhi.n	b6b8e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6b58:	4c17      	ldr	r4, [pc, #92]	; (b6bb8 <pinAvailable+0x74>)
   b6b5a:	7821      	ldrb	r1, [r4, #0]
   b6b5c:	f3bf 8f5b 	dmb	ish
   b6b60:	f011 0101 	ands.w	r1, r1, #1
   b6b64:	d10b      	bne.n	b6b7e <pinAvailable+0x3a>
   b6b66:	4620      	mov	r0, r4
   b6b68:	9101      	str	r1, [sp, #4]
   b6b6a:	f7fd faaa 	bl	b40c2 <__cxa_guard_acquire>
   b6b6e:	9901      	ldr	r1, [sp, #4]
   b6b70:	b128      	cbz	r0, b6b7e <pinAvailable+0x3a>
   b6b72:	4812      	ldr	r0, [pc, #72]	; (b6bbc <pinAvailable+0x78>)
   b6b74:	f7ff fc8a 	bl	b648c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6b78:	4620      	mov	r0, r4
   b6b7a:	f7fd faa7 	bl	b40cc <__cxa_guard_release>
   b6b7e:	4b0f      	ldr	r3, [pc, #60]	; (b6bbc <pinAvailable+0x78>)
   b6b80:	7818      	ldrb	r0, [r3, #0]
   b6b82:	f7fe fd3f 	bl	b5604 <hal_spi_is_enabled>
   b6b86:	2800      	cmp	r0, #0
   b6b88:	d1df      	bne.n	b6b4a <pinAvailable+0x6>
  return true; // 'pin' is available
   b6b8a:	2001      	movs	r0, #1
   b6b8c:	e7de      	b.n	b6b4c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6b8e:	2801      	cmp	r0, #1
   b6b90:	d809      	bhi.n	b6ba6 <pinAvailable+0x62>
   b6b92:	f000 f86d 	bl	b6c70 <_Z19__fetch_global_Wirev>
   b6b96:	2100      	movs	r1, #0
   b6b98:	7c00      	ldrb	r0, [r0, #16]
   b6b9a:	f7fe fceb 	bl	b5574 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6b9e:	f080 0001 	eor.w	r0, r0, #1
   b6ba2:	b2c0      	uxtb	r0, r0
   b6ba4:	e7d2      	b.n	b6b4c <pinAvailable+0x8>
   b6ba6:	3809      	subs	r0, #9
   b6ba8:	2801      	cmp	r0, #1
   b6baa:	d8ee      	bhi.n	b6b8a <pinAvailable+0x46>
   b6bac:	f000 f8a0 	bl	b6cf0 <_Z22__fetch_global_Serial1v>
   b6bb0:	7c00      	ldrb	r0, [r0, #16]
   b6bb2:	f7fe fd77 	bl	b56a4 <hal_usart_is_enabled>
   b6bb6:	e7f2      	b.n	b6b9e <pinAvailable+0x5a>
   b6bb8:	2003e690 	.word	0x2003e690
   b6bbc:	2003e694 	.word	0x2003e694

000b6bc0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6bc0:	2825      	cmp	r0, #37	; 0x25
{
   b6bc2:	b538      	push	{r3, r4, r5, lr}
   b6bc4:	4604      	mov	r4, r0
   b6bc6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6bc8:	d80a      	bhi.n	b6be0 <pinMode+0x20>
   b6bca:	29ff      	cmp	r1, #255	; 0xff
   b6bcc:	d008      	beq.n	b6be0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6bce:	f7ff ffb9 	bl	b6b44 <pinAvailable>
   b6bd2:	b128      	cbz	r0, b6be0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b6bd4:	4629      	mov	r1, r5
   b6bd6:	4620      	mov	r0, r4
}
   b6bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b6bdc:	f7fe bc6a 	b.w	b54b4 <hal_gpio_mode>
}
   b6be0:	bd38      	pop	{r3, r4, r5, pc}

000b6be2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b6be2:	b538      	push	{r3, r4, r5, lr}
   b6be4:	4604      	mov	r4, r0
   b6be6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b6be8:	f7fe fc6c 	bl	b54c4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6bec:	28ff      	cmp	r0, #255	; 0xff
   b6bee:	d010      	beq.n	b6c12 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6bf0:	2806      	cmp	r0, #6
   b6bf2:	d804      	bhi.n	b6bfe <digitalWrite+0x1c>
   b6bf4:	234d      	movs	r3, #77	; 0x4d
   b6bf6:	fa23 f000 	lsr.w	r0, r3, r0
   b6bfa:	07c3      	lsls	r3, r0, #31
   b6bfc:	d409      	bmi.n	b6c12 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6bfe:	4620      	mov	r0, r4
   b6c00:	f7ff ffa0 	bl	b6b44 <pinAvailable>
   b6c04:	b128      	cbz	r0, b6c12 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b6c06:	4629      	mov	r1, r5
   b6c08:	4620      	mov	r0, r4
}
   b6c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b6c0e:	f7fe bc61 	b.w	b54d4 <hal_gpio_write>
}
   b6c12:	bd38      	pop	{r3, r4, r5, pc}

000b6c14 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b6c14:	b510      	push	{r4, lr}
   b6c16:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b6c18:	f7fe fc54 	bl	b54c4 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6c1c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6c1e:	b2db      	uxtb	r3, r3
   b6c20:	2b01      	cmp	r3, #1
   b6c22:	d908      	bls.n	b6c36 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6c24:	4620      	mov	r0, r4
   b6c26:	f7ff ff8d 	bl	b6b44 <pinAvailable>
   b6c2a:	b120      	cbz	r0, b6c36 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b6c2c:	4620      	mov	r0, r4
}
   b6c2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b6c32:	f7fe bc57 	b.w	b54e4 <hal_gpio_read>
}
   b6c36:	2000      	movs	r0, #0
   b6c38:	bd10      	pop	{r4, pc}

000b6c3a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6c3a:	4770      	bx	lr

000b6c3c <_Z17acquireWireBufferv>:
{
   b6c3c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6c3e:	4b0a      	ldr	r3, [pc, #40]	; (b6c68 <_Z17acquireWireBufferv+0x2c>)
   b6c40:	6003      	str	r3, [r0, #0]
   b6c42:	2301      	movs	r3, #1
{
   b6c44:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6c46:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6c48:	4908      	ldr	r1, [pc, #32]	; (b6c6c <_Z17acquireWireBufferv+0x30>)
   b6c4a:	2020      	movs	r0, #32
   b6c4c:	f000 f874 	bl	b6d38 <_ZnajRKSt9nothrow_t>
	};
   b6c50:	2520      	movs	r5, #32
   b6c52:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6c54:	4905      	ldr	r1, [pc, #20]	; (b6c6c <_Z17acquireWireBufferv+0x30>)
	};
   b6c56:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6c58:	4628      	mov	r0, r5
   b6c5a:	f000 f86d 	bl	b6d38 <_ZnajRKSt9nothrow_t>
	};
   b6c5e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6c62:	4620      	mov	r0, r4
   b6c64:	bd38      	pop	{r3, r4, r5, pc}
   b6c66:	bf00      	nop
   b6c68:	00010018 	.word	0x00010018
   b6c6c:	000c025c 	.word	0x000c025c

000b6c70 <_Z19__fetch_global_Wirev>:
{
   b6c70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6c72:	4d0e      	ldr	r5, [pc, #56]	; (b6cac <_Z19__fetch_global_Wirev+0x3c>)
   b6c74:	7829      	ldrb	r1, [r5, #0]
   b6c76:	f3bf 8f5b 	dmb	ish
   b6c7a:	f011 0401 	ands.w	r4, r1, #1
{
   b6c7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6c80:	d111      	bne.n	b6ca6 <_Z19__fetch_global_Wirev+0x36>
   b6c82:	4628      	mov	r0, r5
   b6c84:	f7fd fa1d 	bl	b40c2 <__cxa_guard_acquire>
   b6c88:	b168      	cbz	r0, b6ca6 <_Z19__fetch_global_Wirev+0x36>
   b6c8a:	4668      	mov	r0, sp
   b6c8c:	f7ff ffd6 	bl	b6c3c <_Z17acquireWireBufferv>
   b6c90:	466a      	mov	r2, sp
   b6c92:	4621      	mov	r1, r4
   b6c94:	4806      	ldr	r0, [pc, #24]	; (b6cb0 <_Z19__fetch_global_Wirev+0x40>)
   b6c96:	f7ff f9c9 	bl	b602c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6c9a:	4628      	mov	r0, r5
   b6c9c:	f7fd fa16 	bl	b40cc <__cxa_guard_release>
   b6ca0:	4804      	ldr	r0, [pc, #16]	; (b6cb4 <_Z19__fetch_global_Wirev+0x44>)
   b6ca2:	f000 f84e 	bl	b6d42 <atexit>
	return wire;
}
   b6ca6:	4802      	ldr	r0, [pc, #8]	; (b6cb0 <_Z19__fetch_global_Wirev+0x40>)
   b6ca8:	b007      	add	sp, #28
   b6caa:	bd30      	pop	{r4, r5, pc}
   b6cac:	2003e72c 	.word	0x2003e72c
   b6cb0:	2003e730 	.word	0x2003e730
   b6cb4:	000b6c3b 	.word	0x000b6c3b

000b6cb8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cb8:	4770      	bx	lr
	...

000b6cbc <_Z20acquireSerial1Bufferv>:
{
   b6cbc:	b538      	push	{r3, r4, r5, lr}
   b6cbe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6cc0:	2514      	movs	r5, #20
   b6cc2:	462a      	mov	r2, r5
   b6cc4:	2100      	movs	r1, #0
   b6cc6:	f000 f850 	bl	b6d6a <memset>
   b6cca:	8025      	strh	r5, [r4, #0]
   b6ccc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cce:	4907      	ldr	r1, [pc, #28]	; (b6cec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6cd0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cd2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6cd4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cd6:	f000 f82f 	bl	b6d38 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cda:	4904      	ldr	r1, [pc, #16]	; (b6cec <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6cdc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6cde:	4628      	mov	r0, r5
   b6ce0:	f000 f82a 	bl	b6d38 <_ZnajRKSt9nothrow_t>
    };
   b6ce4:	60e0      	str	r0, [r4, #12]
}
   b6ce6:	4620      	mov	r0, r4
   b6ce8:	bd38      	pop	{r3, r4, r5, pc}
   b6cea:	bf00      	nop
   b6cec:	000c025c 	.word	0x000c025c

000b6cf0 <_Z22__fetch_global_Serial1v>:
{
   b6cf0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6cf2:	4d0e      	ldr	r5, [pc, #56]	; (b6d2c <_Z22__fetch_global_Serial1v+0x3c>)
   b6cf4:	7829      	ldrb	r1, [r5, #0]
   b6cf6:	f3bf 8f5b 	dmb	ish
   b6cfa:	f011 0401 	ands.w	r4, r1, #1
{
   b6cfe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6d00:	d111      	bne.n	b6d26 <_Z22__fetch_global_Serial1v+0x36>
   b6d02:	4628      	mov	r0, r5
   b6d04:	f7fd f9dd 	bl	b40c2 <__cxa_guard_acquire>
   b6d08:	b168      	cbz	r0, b6d26 <_Z22__fetch_global_Serial1v+0x36>
   b6d0a:	a801      	add	r0, sp, #4
   b6d0c:	f7ff ffd6 	bl	b6cbc <_Z20acquireSerial1Bufferv>
   b6d10:	aa01      	add	r2, sp, #4
   b6d12:	4621      	mov	r1, r4
   b6d14:	4806      	ldr	r0, [pc, #24]	; (b6d30 <_Z22__fetch_global_Serial1v+0x40>)
   b6d16:	f7ff fda5 	bl	b6864 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6d1a:	4628      	mov	r0, r5
   b6d1c:	f7fd f9d6 	bl	b40cc <__cxa_guard_release>
   b6d20:	4804      	ldr	r0, [pc, #16]	; (b6d34 <_Z22__fetch_global_Serial1v+0x44>)
   b6d22:	f000 f80e 	bl	b6d42 <atexit>
    return serial1;
}
   b6d26:	4802      	ldr	r0, [pc, #8]	; (b6d30 <_Z22__fetch_global_Serial1v+0x40>)
   b6d28:	b007      	add	sp, #28
   b6d2a:	bd30      	pop	{r4, r5, pc}
   b6d2c:	2003e744 	.word	0x2003e744
   b6d30:	2003e748 	.word	0x2003e748
   b6d34:	000b6cb9 	.word	0x000b6cb9

000b6d38 <_ZnajRKSt9nothrow_t>:
   b6d38:	f7fd b9bf 	b.w	b40ba <_Znaj>

000b6d3c <_ZSt25__throw_bad_function_callv>:
   b6d3c:	b508      	push	{r3, lr}
   b6d3e:	f7fe fdcd 	bl	b58dc <abort>

000b6d42 <atexit>:
   b6d42:	2300      	movs	r3, #0
   b6d44:	4601      	mov	r1, r0
   b6d46:	461a      	mov	r2, r3
   b6d48:	4618      	mov	r0, r3
   b6d4a:	f000 b87f 	b.w	b6e4c <__register_exitproc>

000b6d4e <memcpy>:
   b6d4e:	440a      	add	r2, r1
   b6d50:	4291      	cmp	r1, r2
   b6d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6d56:	d100      	bne.n	b6d5a <memcpy+0xc>
   b6d58:	4770      	bx	lr
   b6d5a:	b510      	push	{r4, lr}
   b6d5c:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6d60:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6d64:	4291      	cmp	r1, r2
   b6d66:	d1f9      	bne.n	b6d5c <memcpy+0xe>
   b6d68:	bd10      	pop	{r4, pc}

000b6d6a <memset>:
   b6d6a:	4402      	add	r2, r0
   b6d6c:	4603      	mov	r3, r0
   b6d6e:	4293      	cmp	r3, r2
   b6d70:	d100      	bne.n	b6d74 <memset+0xa>
   b6d72:	4770      	bx	lr
   b6d74:	f803 1b01 	strb.w	r1, [r3], #1
   b6d78:	e7f9      	b.n	b6d6e <memset+0x4>
	...

000b6d7c <srand>:
   b6d7c:	b538      	push	{r3, r4, r5, lr}
   b6d7e:	4b10      	ldr	r3, [pc, #64]	; (b6dc0 <srand+0x44>)
   b6d80:	681d      	ldr	r5, [r3, #0]
   b6d82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d84:	4604      	mov	r4, r0
   b6d86:	b9b3      	cbnz	r3, b6db6 <srand+0x3a>
   b6d88:	2018      	movs	r0, #24
   b6d8a:	f7fe fd87 	bl	b589c <malloc>
   b6d8e:	4602      	mov	r2, r0
   b6d90:	63a8      	str	r0, [r5, #56]	; 0x38
   b6d92:	b920      	cbnz	r0, b6d9e <srand+0x22>
   b6d94:	4b0b      	ldr	r3, [pc, #44]	; (b6dc4 <srand+0x48>)
   b6d96:	480c      	ldr	r0, [pc, #48]	; (b6dc8 <srand+0x4c>)
   b6d98:	2142      	movs	r1, #66	; 0x42
   b6d9a:	f7fe fdaf 	bl	b58fc <__assert_func>
   b6d9e:	490b      	ldr	r1, [pc, #44]	; (b6dcc <srand+0x50>)
   b6da0:	4b0b      	ldr	r3, [pc, #44]	; (b6dd0 <srand+0x54>)
   b6da2:	e9c0 1300 	strd	r1, r3, [r0]
   b6da6:	4b0b      	ldr	r3, [pc, #44]	; (b6dd4 <srand+0x58>)
   b6da8:	6083      	str	r3, [r0, #8]
   b6daa:	230b      	movs	r3, #11
   b6dac:	8183      	strh	r3, [r0, #12]
   b6dae:	2100      	movs	r1, #0
   b6db0:	2001      	movs	r0, #1
   b6db2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6db6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6db8:	2200      	movs	r2, #0
   b6dba:	611c      	str	r4, [r3, #16]
   b6dbc:	615a      	str	r2, [r3, #20]
   b6dbe:	bd38      	pop	{r3, r4, r5, pc}
   b6dc0:	2003e53c 	.word	0x2003e53c
   b6dc4:	000c025d 	.word	0x000c025d
   b6dc8:	000c0274 	.word	0x000c0274
   b6dcc:	abcd330e 	.word	0xabcd330e
   b6dd0:	e66d1234 	.word	0xe66d1234
   b6dd4:	0005deec 	.word	0x0005deec

000b6dd8 <strcpy>:
   b6dd8:	4603      	mov	r3, r0
   b6dda:	f811 2b01 	ldrb.w	r2, [r1], #1
   b6dde:	f803 2b01 	strb.w	r2, [r3], #1
   b6de2:	2a00      	cmp	r2, #0
   b6de4:	d1f9      	bne.n	b6dda <strcpy+0x2>
   b6de6:	4770      	bx	lr

000b6de8 <strdup>:
   b6de8:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <strdup+0xc>)
   b6dea:	4601      	mov	r1, r0
   b6dec:	6818      	ldr	r0, [r3, #0]
   b6dee:	f000 b803 	b.w	b6df8 <_strdup_r>
   b6df2:	bf00      	nop
   b6df4:	2003e53c 	.word	0x2003e53c

000b6df8 <_strdup_r>:
   b6df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6dfa:	4604      	mov	r4, r0
   b6dfc:	4608      	mov	r0, r1
   b6dfe:	460d      	mov	r5, r1
   b6e00:	f7fd f916 	bl	b4030 <strlen>
   b6e04:	1c42      	adds	r2, r0, #1
   b6e06:	4611      	mov	r1, r2
   b6e08:	4620      	mov	r0, r4
   b6e0a:	9201      	str	r2, [sp, #4]
   b6e0c:	f7fe fd6e 	bl	b58ec <_malloc_r>
   b6e10:	4604      	mov	r4, r0
   b6e12:	b118      	cbz	r0, b6e1c <_strdup_r+0x24>
   b6e14:	9a01      	ldr	r2, [sp, #4]
   b6e16:	4629      	mov	r1, r5
   b6e18:	f7ff ff99 	bl	b6d4e <memcpy>
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	b003      	add	sp, #12
   b6e20:	bd30      	pop	{r4, r5, pc}

000b6e22 <strncmp>:
   b6e22:	b510      	push	{r4, lr}
   b6e24:	b17a      	cbz	r2, b6e46 <strncmp+0x24>
   b6e26:	4603      	mov	r3, r0
   b6e28:	3901      	subs	r1, #1
   b6e2a:	1884      	adds	r4, r0, r2
   b6e2c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6e30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6e34:	4290      	cmp	r0, r2
   b6e36:	d101      	bne.n	b6e3c <strncmp+0x1a>
   b6e38:	42a3      	cmp	r3, r4
   b6e3a:	d101      	bne.n	b6e40 <strncmp+0x1e>
   b6e3c:	1a80      	subs	r0, r0, r2
   b6e3e:	bd10      	pop	{r4, pc}
   b6e40:	2800      	cmp	r0, #0
   b6e42:	d1f3      	bne.n	b6e2c <strncmp+0xa>
   b6e44:	e7fa      	b.n	b6e3c <strncmp+0x1a>
   b6e46:	4610      	mov	r0, r2
   b6e48:	e7f9      	b.n	b6e3e <strncmp+0x1c>
	...

000b6e4c <__register_exitproc>:
   b6e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6e50:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6f0c <__register_exitproc+0xc0>
   b6e54:	4606      	mov	r6, r0
   b6e56:	f8d8 0000 	ldr.w	r0, [r8]
   b6e5a:	461f      	mov	r7, r3
   b6e5c:	460d      	mov	r5, r1
   b6e5e:	4691      	mov	r9, r2
   b6e60:	f000 f856 	bl	b6f10 <__retarget_lock_acquire_recursive>
   b6e64:	4b25      	ldr	r3, [pc, #148]	; (b6efc <__register_exitproc+0xb0>)
   b6e66:	681c      	ldr	r4, [r3, #0]
   b6e68:	b934      	cbnz	r4, b6e78 <__register_exitproc+0x2c>
   b6e6a:	4c25      	ldr	r4, [pc, #148]	; (b6f00 <__register_exitproc+0xb4>)
   b6e6c:	601c      	str	r4, [r3, #0]
   b6e6e:	4b25      	ldr	r3, [pc, #148]	; (b6f04 <__register_exitproc+0xb8>)
   b6e70:	b113      	cbz	r3, b6e78 <__register_exitproc+0x2c>
   b6e72:	681b      	ldr	r3, [r3, #0]
   b6e74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6e78:	6863      	ldr	r3, [r4, #4]
   b6e7a:	2b1f      	cmp	r3, #31
   b6e7c:	dd07      	ble.n	b6e8e <__register_exitproc+0x42>
   b6e7e:	f8d8 0000 	ldr.w	r0, [r8]
   b6e82:	f000 f847 	bl	b6f14 <__retarget_lock_release_recursive>
   b6e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6e8e:	b34e      	cbz	r6, b6ee4 <__register_exitproc+0x98>
   b6e90:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6e94:	b988      	cbnz	r0, b6eba <__register_exitproc+0x6e>
   b6e96:	4b1c      	ldr	r3, [pc, #112]	; (b6f08 <__register_exitproc+0xbc>)
   b6e98:	b923      	cbnz	r3, b6ea4 <__register_exitproc+0x58>
   b6e9a:	f8d8 0000 	ldr.w	r0, [r8]
   b6e9e:	f000 f838 	bl	b6f12 <__retarget_lock_release>
   b6ea2:	e7f0      	b.n	b6e86 <__register_exitproc+0x3a>
   b6ea4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6ea8:	f7fe fcf8 	bl	b589c <malloc>
   b6eac:	2800      	cmp	r0, #0
   b6eae:	d0f4      	beq.n	b6e9a <__register_exitproc+0x4e>
   b6eb0:	2300      	movs	r3, #0
   b6eb2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6eb6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6eba:	6863      	ldr	r3, [r4, #4]
   b6ebc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6ec0:	2201      	movs	r2, #1
   b6ec2:	409a      	lsls	r2, r3
   b6ec4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6ec8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6ecc:	4313      	orrs	r3, r2
   b6ece:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6ed2:	2e02      	cmp	r6, #2
   b6ed4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6ed8:	bf02      	ittt	eq
   b6eda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6ede:	4313      	orreq	r3, r2
   b6ee0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6ee4:	6863      	ldr	r3, [r4, #4]
   b6ee6:	f8d8 0000 	ldr.w	r0, [r8]
   b6eea:	1c5a      	adds	r2, r3, #1
   b6eec:	3302      	adds	r3, #2
   b6eee:	6062      	str	r2, [r4, #4]
   b6ef0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6ef4:	f000 f80e 	bl	b6f14 <__retarget_lock_release_recursive>
   b6ef8:	2000      	movs	r0, #0
   b6efa:	e7c6      	b.n	b6e8a <__register_exitproc+0x3e>
   b6efc:	2003e7e8 	.word	0x2003e7e8
   b6f00:	2003e75c 	.word	0x2003e75c
   b6f04:	00000000 	.word	0x00000000
   b6f08:	000b589d 	.word	0x000b589d
   b6f0c:	2003e5a0 	.word	0x2003e5a0

000b6f10 <__retarget_lock_acquire_recursive>:
   b6f10:	4770      	bx	lr

000b6f12 <__retarget_lock_release>:
   b6f12:	4770      	bx	lr

000b6f14 <__retarget_lock_release_recursive>:
   b6f14:	4770      	bx	lr

000b6f16 <link_code_end>:
	...

000b6f18 <dynalib_user>:
   b6f18:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b6f28:	0000 0000 4146 4c49 4445 2d20 5020 454c     ....FAILED - PLE
   b6f38:	5341 2045 4353 4e41 4120 4147 4e49 0021     ASE SCAN AGAIN!.
   b6f48:	4e45 4f4a 2059 4854 2045 5645 4e45 2154     ENJOY THE EVENT!
   b6f58:	5500 4449 203a 3400 322e 6e69 6863 6520     .UID: .4.2inch e
   b6f68:	702d 7061 7265 7420 7365 0d74 200a 6500     -paper test.. .e
   b6f78:	502d 7061 7265 4420 6d65 006f 6548 6c6c     -Paper Demo.Hell
   b6f88:	206f 6f77 6c72 0064 3249 2043 6564 6976     o world.I2C devi
   b6f98:	6563 6620 756f 646e 6120 2074 6461 7264     ce found at addr
   b6fa8:	7365 2073 7830 3000 4e00 206f 3249 2043     ess 0x.0.No I2C 
   b6fb8:	6f66 6e75 0064 6f64 656e 4400 6e6f 0065     found.done.Done.
   b6fc8:	6e49 7469 6169 696c 697a 676e 6520 502d     Initializing e-P
   b6fd8:	7061 7265 6420 7369 6c70 7961 4600 6961     aper display.Fai
   b6fe8:	656c 2064 6f74 6920 696e 6974 6c61 7a69     led to initializ
   b6ff8:	2065 6964 7073 616c 0079 6e49 7469 6169     e display.Initia
   b7008:	696c 697a 676e 5020 354e 3233 5700 6961     lizing PN532.Wai
   b7018:	6974 676e 6620 726f 6120 6320 7261 2e64     ting for a card.
   b7028:	2e2e 2e2e 002e 6564 6166 6c75 2074 4d00     ......default .M
   b7038:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
   b7048:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
   b7058:	5349 7465 6974 676e 2073 7325 7525 2520     ISettings %s%u %
   b7068:	2073 4f4d 4544 7525 003e 0000               s MODE%u>...

000b7074 <_ZTVN8particle11SPISettingsE>:
	...
   b707c:	498d 000b 495f 000b 4961 000b               .I.._I..aI..

000b7088 <_ZL12Font24_Table>:
	...
   b70d4:	0000 8003 0300 0080 8003 0300 0080 8003     ................
   b70e4:	0300 0080 8003 0300 0080 8003 0100 0000     ................
   b70f4:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
   b7120:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
   b7130:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
   b7164:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
   b7174:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
   b7184:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
   b7194:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
   b71a4:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
   b71b4:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
   b71c4:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
   b71d4:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
   b71f4:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
   b7204:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
   b7214:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
   b7244:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
   b7254:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
   b7264:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
   b7288:	0300 0080 8003 0300 0080 0001 0100 0000     ................
   b7298:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
   b72cc:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
   b72dc:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
   b72ec:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
   b72fc:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
   b7314:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
   b7324:	0700 0000 8003 0300 0080 8003 0300 0080     ................
   b7334:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
   b7344:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
   b735c:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
   b736c:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
   b73ac:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
   b73bc:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
   b73cc:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
   b7410:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
   b7420:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
   b7448:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
   b74a0:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b74c0:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
   b74d0:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
   b74e0:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
   b74f0:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
   b750c:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
   b751c:	1800 0018 1818 1800 0018 1818 1800 0018     ................
   b752c:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
   b7554:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
   b7564:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b7574:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
   b759c:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
   b75ac:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
   b75bc:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
   b75e4:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
   b75f4:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
   b7604:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
   b762c:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
   b763c:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
   b764c:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
   b7674:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
   b7684:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
   b7694:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
   b76bc:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
   b76cc:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
   b76dc:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
   b7704:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
   b7714:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
   b7724:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
   b774c:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
   b775c:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
   b776c:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
   b7794:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
   b77a4:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
   b77b4:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
   b77e8:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7800:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7830:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
   b7848:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
   b7874:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
   b7884:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
   b7894:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
   b78c4:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
   b78d4:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b7904:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
   b7914:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
   b7924:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
   b7948:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
   b7958:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
   b7968:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
   b798c:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
   b799c:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
   b79ac:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
   b79bc:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
   b79d8:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
   b79e8:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
   b79f8:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
   b7a20:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   b7a30:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
   b7a40:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
   b7a68:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   b7a78:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
   b7a88:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
   b7ab0:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
   b7ac0:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
   b7ad0:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
   b7af8:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
   b7b08:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
   b7b18:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
   b7b40:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
   b7b50:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
   b7b60:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   b7b88:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   b7b98:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
   b7ba8:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
   b7bd0:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   b7be0:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
   b7bf0:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   b7c18:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
   b7c28:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b7c38:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
   b7c60:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
   b7c70:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
   b7c80:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
   b7ca8:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
   b7cb8:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
   b7cc8:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
   b7cf0:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
   b7d00:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
   b7d10:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
   b7d38:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
   b7d48:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
   b7d58:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
   b7d80:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
   b7d90:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
   b7da0:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
   b7dc8:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   b7dd8:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   b7de8:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
   b7e10:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
   b7e20:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
   b7e30:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   b7e58:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   b7e68:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   b7e78:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
   b7e88:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
   b7ea0:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   b7eb0:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
   b7ec0:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
   b7ee8:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
   b7ef8:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
   b7f08:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
   b7f30:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
   b7f40:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
   b7f50:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   b7f78:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   b7f88:	1818 1800 0018 1818 1800 0018 1818 1800     ................
   b7f98:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
   b7fc0:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
   b7fd0:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
   b7fe0:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
   b8008:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
   b8018:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
   b8028:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
   b8050:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
   b8060:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
   b8070:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
   b8098:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
   b80a8:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
   b80b8:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   b80e0:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
   b80f0:	c018 0100 0080 0003 0600 0018 180c 1800     ................
   b8100:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
   b8124:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
   b8134:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8144:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8154:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
   b8164:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
   b8174:	000e 0600 0000 0006 0300 0000 0003 0100     ................
   b8184:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
   b8194:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
   b81b4:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
   b81c4:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b81d4:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b81e4:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
   b81fc:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
   b820c:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
   b8280:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
   b8290:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
   b82e0:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
   b82f0:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
   b8300:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b831c:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
   b832c:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
   b833c:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
   b8370:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
   b8380:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
   b8390:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b83ac:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
   b83bc:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
   b83cc:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
   b8400:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
   b8410:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
   b8420:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b843c:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
   b844c:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
   b845c:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
   b8490:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   b84a0:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   b84b0:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
   b84c0:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
   b84d0:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
   b84e0:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
   b84f0:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   b8514:	0000 8001 0100 0080 0000 0000 0000 801f     ................
   b8524:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
   b8534:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   b855c:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
   b856c:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
   b857c:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
   b858c:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
   b85a4:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
   b85b4:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
   b85c4:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
   b85ec:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
   b85fc:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b860c:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   b8640:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
   b8650:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
   b8660:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8688:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
   b8698:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
   b86a8:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
   b86d0:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
   b86e0:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
   b86f0:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8718:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
   b8728:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
   b8738:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
   b8760:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   b8770:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   b8780:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
   b8790:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b87a8:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
   b87b8:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
   b87c8:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   b87f0:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
   b8800:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
   b8810:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b882c:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
   b883c:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
   b884c:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
   b8880:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
   b8890:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
   b88a0:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b88c8:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
   b88d8:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
   b88e8:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8910:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
   b8920:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
   b8930:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
   b8958:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
   b8968:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
   b8978:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
   b89a0:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
   b89b0:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
   b89c0:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
   b89d0:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b89e8:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
   b89f8:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
   b8a08:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8a24:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
   b8a34:	0100 0080 8001 0100 0080 8003 0700 0000     ................
   b8a44:	8003 0100 0080 8001 0100 0080 8001 0100     ................
   b8a54:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
   b8a6c:	0000 8001 0100 0080 8001 0100 0080 8001     ................
   b8a7c:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8a8c:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8a9c:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
   b8ab4:	0000 0007 0700 0080 8001 0100 0080 8001     ................
   b8ac4:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
   b8ad4:	c001 0100 0080 8001 0100 0080 8001 0100     ................
   b8ae4:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
   b8b10:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...

000b8b40 <IMAGE_BLACK>:
   b8b40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8b50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8b60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8b70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8b80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8b90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ba0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8bb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8bc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8bd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8be0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8bf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8c90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ca0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8cb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8cc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8cd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ce0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8cf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d50:	ffff ffff ffff ffff ffff ffff fff7 ffff     ................
   b8d60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8d80:	ffff ffff ffff ffff ffff ffff ffff ffc3     ................
   b8d90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8da0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8db0:	ffff ffff ffff ffff ffff ffff ffff feff     ................
   b8dc0:	ff03 ffff ffff ffff ffff ffff ffff ffff     ................
   b8dd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8de0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8df0:	f0ff ff07 ffff ffff ffff ffff ffff ffff     ................
   b8e00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8e10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8e20:	ffff 80ff ff07 ffff ffff ffff ffff ffff     ................
   b8e30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8e40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8e50:	ffff ffff 00fe ff03 ffff ffff ffff ffff     ................
   b8e60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8e70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8e80:	ffff ffff ffff 00f8 ff03 ffff ffff ffff     ................
   b8e90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ea0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8eb0:	ffff ffff ffff ffff d0e3 ff03 ffff ffff     ................
   b8ec0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ed0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8ee0:	ffff ffff ffff ffff ffff ebcf ff03 ffff     ................
   b8ef0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f10:	ffff ffff ffff ffff ffff ffff e303 ff83     ................
   b8f20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f40:	ffff ffff ffff ffff ffff ffff feff f343     ..............C.
   b8f50:	ffc3 ffff ffff ffff ffff ffff ffff ffff     ................
   b8f60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8f70:	ffff ffff ffff ffff ffff ffff ffff f8ff     ................
   b8f80:	f3c3 fce3 ffff ffff ffff ffff ffff ffff     ................
   b8f90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fa0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fb0:	f3ff f9e3 f8e3 ffff ffff ffff ffff ffff     ................
   b8fc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b8fe0:	ffff e5ff f9ff e0f3 ffff ffff ffff ffff     ................
   b8ff0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9000:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9010:	ffff ffff c8ff f9ff 80f3 ff7f ffff ffff     ................
   b9020:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9030:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9040:	ffff ffff ffff 92ff fb7f 00f3 ff7f ffff     ................
   b9050:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9060:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9070:	ffff ffff ffff ffff 30ff f3ff 00f4 ff7f     .........0......
   b9080:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9090:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b90a0:	ffff ffff ffff ffff ffff 5bfe f3ff 70f0     ...........[...p
   b90b0:	ff7f ffff ffff ffff ffff ffff ffff ffff     ................
   b90c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b90d0:	ffff ffff ffff ffff ffff ffff 0bfe f3ff     ................
   b90e0:	f8e1 ff7f ffff ffff ffff ffff ffff ffff     ................
   b90f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9100:	ffff ffff ffff ffff ffff ffff ffff 09fc     ................
   b9110:	f3ff fc85 ff7f ffff ffff ffff ffff ffff     ................
   b9120:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9130:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9140:	4cf9 e7ff fe3d ff7f ffff ffff ffff ffff     .L..=...........
   b9150:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9160:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9170:	ffff 7ef2 e67f fefd ff3f ffff ffff ffff     ...~....?.......
   b9180:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9190:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b91a0:	ffff ffff 3ff0 e1bf fe99 ff3f ffff ffff     .....?....?.....
   b91b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b91c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b91d0:	ffff ffff ffff 3fe4 e3df ff9d ff3f ffff     .......?....?...
   b91e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b91f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9200:	ffff ffff ffff ffff 5fe4 c6ff ff7d ff3f     ........._..}.?.
   b9210:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9220:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9230:	ffff ffff ffff ffff ffff ffcf deff ffff     ................
   b9240:	ff1f ffff ffff ffff ffff ffff ffff ffff     ................
   b9250:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9260:	ffff ffff ffff ffff ffff ffff ffcf 93ff     ................
   b9270:	ffff ff9f ffff ffff ffff ffff ffff ffff     ................
   b9280:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9290:	ffff ffff ffff ffff ffff ffff ffff ffcc     ................
   b92a0:	33ff ffff ff9f ffff ffff ffff ffff ffff     .3..............
   b92b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b92c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b92d0:	ffc0 1ffe fffd ff9f ffff ffff ffff ffff     ................
   b92e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b92f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9300:	ffff ffc9 8ffc ffff ff8f ffff ffff ffff     ................
   b9310:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9320:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9330:	ffff ffff ffc9 dff9 fffd ff8f ffff ffff     ................
   b9340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9350:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9360:	ffff ffff ffff ffcf fff0 fff5 ff8f ffff     ................
   b9370:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9380:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9390:	ffff ffff ffff ffff ffe7 7ff6 fff5 ff8f     ................
   b93a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b93b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b93c0:	ffff ffff ffff ffff ffff ffe7 3fe3 ffb5     .............?..
   b93d0:	ff87 ffff ffff ffff ffff ffff ffff ffff     ................
   b93e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b93f0:	ffff ffff ffff ffff ffff ffff fff3 9fef     ................
   b9400:	ff0b ff87 ffff ffff ffff ffff ffff ffff     ................
   b9410:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9420:	ffff ffff ffff ffff ffff ffff ffff fff3     ................
   b9430:	4fce ffa1 ff87 ffff ffff ffff ffff ffff     .O..............
   b9440:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9450:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9460:	fff9 27d7 fff3 ff97 ffff ffff ffff ffff     ...'............
   b9470:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9480:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9490:	ffff fbfc c3d3 fffb ff97 ffff ffff ffff     ................
   b94a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94c0:	ffff ffff 7cfe e1d3 fffb ff97 ffff ffff     .....|..........
   b94d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b94f0:	ffff ffff f0ff 3e0f f11f ffff ffc7 ffff     .......>........
   b9500:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9510:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9520:	ffff ffff ffff c0ff 0f00 f893 ffdf ffc3     ................
   b9530:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9540:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9550:	ffff ffff ffff ffff cfff 03fc fe93 ff5f     .............._.
   b9560:	ffc7 ffff ffff ffff ffff ffff ffff ffff     ................
   b9570:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9580:	ffff ffff ffff ffff ffff a3ff e0ff ffcf     ................
   b9590:	ff3f ffc7 ffff ffff ffff ffff ffff ffff     ?...............
   b95a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b95b0:	ffff ffff ffff ffff ffff ffff 79ff fcff     .............y..
   b95c0:	ff07 7f3f ffe3 ffff ffff ffff ffff ffff     ..?.............
   b95d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b95e0:	ffff ffff ffff ffff ffff ffff ffff fefe     ................
   b95f0:	f87f fff7 3f9f ffe3 ffff ffff ffff ffff     .....?..........
   b9600:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9610:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9620:	fffe f3ff f7d3 bfdf ffe3 ffff ffff ffff     ................
   b9630:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9640:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9650:	ffff bffc c1ff fbeb 9fcf ffe3 ffff ffff     ................
   b9660:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9670:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9680:	ffff ffff 0ffc d8ff fb71 cfef ffe7 ffff     ........q.......
   b9690:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b96a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b96b0:	ffff ffff ffff bff9 afff f9f8 efe7 ffe7     ................
   b96c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b96d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b96e0:	ffff ffff ffff ffff fff9 47ff 79fe f7f7     ...........G.y..
   b96f0:	ffa7 ffff ffff ffff ffff ffff ffff ffff     ................
   b9700:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9710:	ffff ffff ffff ffff ffff fffb 47fe 39ff     .............G.9
   b9720:	fbf3 ffa7 ffff ffff ffff ffff ffff ffff     ................
   b9730:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9740:	ffff ffff ffff ffff ffff ffff 3ffa effc     .............?..
   b9750:	99ff f9fb ff87 ffff ffff ffff ffff ffff     ................
   b9760:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9770:	ffff ffff ffff ffff ffff ffff ffff 3ff2     ...............?
   b9780:	fffc c8ff fcfd f807 ff3f ffff ffff ffff     ........?.......
   b9790:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b97a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b97b0:	03f2 fffd e0ff fcfc c007 ff0f ffff ffff     ................
   b97c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b97d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b97e0:	ffff 7ff8 fff9 f8ff 7e7e 9f0f ffe3 ffff     ........~~......
   b97f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9800:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9810:	ffff ffff fff3 fffb fcff 393f 200f ff19     ..........?9. ..
   b9820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9830:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9840:	ffff ffff ffff 7ff3 fffb ffff 900f 0f0e     ................
   b9850:	ffc1 ffff ffff ffff ffff ffff ffff ffff     ................
   b9860:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9870:	ffff ffff ffff ffff 3ff2 fff3 ffff c0c7     .........?......
   b9880:	7f0c fff3 ffff ffff ffff ffff ffff ffff     ................
   b9890:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b98a0:	ffff ffff ffff ffff ffff 3ff2 fff3 ffff     ...........?....
   b98b0:	20f0 ff09 fff9 ffff ffff ffff ffff ffff     . ..............
   b98c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b98d0:	ffff ffff ffff ffff ffff ffff fffb fff3     ................
   b98e0:	fffe 00fc ff01 fff9 ffff ffff ffff ffff     ................
   b98f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9900:	ffff ffff ffff ffff ffff ffff ffff fffb     ................
   b9910:	ffeb 3f80 00fc ff07 fffc ffff ffff ffff     ...?............
   b9920:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9930:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9940:	1ff9 d8db c71f 00ff ff0f fffc ffff ffff     ................
   b9950:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9960:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9970:	ffff 1ef9 cc5b f83f 803f ff0f ffff ffff     ....[.?.?.......
   b9980:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9990:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b99a0:	ffff ffff bffc ff1b ff8f 0080 ff1f ffff     ................
   b99b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b99c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b99d0:	ffff ffff ffff fffc ff3b fff9 00ff ff1f     ........;.......
   b99e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b99f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9a00:	ffff ffff ffff ffff 7efe ffbb ffff 80ff     .........~......
   b9a10:	ff1f ffff ffff ffff ffff ffff ffff ffff     ................
   b9a20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9a30:	ffff ffff ffff ffff ffff 3eff ffb3 cfff     ...........>....
   b9a40:	00fe ff3f ffff ffff ffff ffff ffff ffff     ..?.............
   b9a50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9a60:	ffff ffff ffff ffff ffff ffff beff ff53     ..............S.
   b9a70:	f3ff 00fe ff3f ffff ffff ffff ffff ffff     ....?...........
   b9a80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9a90:	ffff ffff ffff ffff ffff ffff ffff 9fff     ................
   b9aa0:	ff13 f8ff 04f8 ff7f ffff ffff ffff ffff     ................
   b9ab0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ac0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ad0:	cfff ff83 feff 0c18 ff7f ffff ffff ffff     ................
   b9ae0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9af0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b00:	ffff e7ff ffc3 ffff 1cc0 ffff ffff ffff     ................
   b9b10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b30:	ffff ffff f3ff ffe7 ffff 7cfc ffff ffff     ...........|....
   b9b40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b60:	ffff ffff ffff f8ff ffe3 ffff fdf9 ffff     ................
   b9b70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9b90:	ffff ffff ffff ffff feff ff73 fffe fde3     ..........s.....
   b9ba0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9bb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9bc0:	ffff ffff ffff ffff ffff ffff fd33 f8fe     ............3...
   b9bd0:	ff8f ffff ffff ffff ffff ffff ffff ffff     ................
   b9be0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9bf0:	ffff ffff ffff ffff ffff ffff ffff eb93     ................
   b9c00:	f87e ff3f ffff ffff ffff ffff ffff ffff     ~.?.............
   b9c10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9c20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9c30:	e8c3 f8ff ffff ffff ffff ffff ffff ffff     ................
   b9c40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9c50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9c60:	ffff f1e1 c3ff ffff ffff ffff ffff ffff     ................
   b9c70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9c80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9c90:	ffff ffff f3f9 0fff ffff ffff ffff ffff     ................
   b9ca0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9cb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9cc0:	ffff ffff ffff f7fc 7ff8 ffff ffff ffff     ................
   b9cd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ce0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9cf0:	ffff ffff ffff ffff 77fe ffc1 ffff ffff     .........w......
   b9d00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d20:	ffff ffff ffff ffff ffff 20ff ff1f ffff     ........... ....
   b9d30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d50:	ffff ffff ffff ffff ffff ffff e0ff ffff     ................
   b9d60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9d90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9da0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9db0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9dc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9dd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9de0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9df0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9e90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ea0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9eb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ec0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ed0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ee0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ef0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9f90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9fa0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9fb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9fc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9fd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9fe0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b9ff0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba000:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba010:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba020:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba030:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba040:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba050:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba060:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba070:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba080:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba090:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba0a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba0b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba0c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba0d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba0e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba0f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba100:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba110:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba120:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba130:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba140:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba150:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba160:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba170:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba180:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba190:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba1a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba1b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba1c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba1d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba1e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba1f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba200:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba210:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba220:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba230:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba240:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba250:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba260:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba270:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba280:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba290:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba2a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba2b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba2c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba2d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba2e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba2f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba300:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba310:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba320:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba330:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba350:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba360:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba370:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba380:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba390:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba3a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba3b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba3c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba3d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba3e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba3f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba400:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba410:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba420:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba430:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba440:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba450:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba460:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba470:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba480:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba490:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba4a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba4b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba4c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba4d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba4e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba4f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba500:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba510:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba520:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba530:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba540:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba550:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba560:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba570:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba580:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba590:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba5a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba5b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba5c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba5d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba5e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba5f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba600:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba610:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba620:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba630:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba640:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba650:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba660:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba670:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba680:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba690:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba6f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba700:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba710:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba720:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba730:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba740:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba750:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba760:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba770:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba780:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba790:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba7f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba800:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba810:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba820:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba830:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba840:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba850:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba860:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba870:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba880:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba890:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba8a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba8b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba8c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba8d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba8e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba8f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba900:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba910:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba920:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba930:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba940:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba950:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba960:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba970:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba980:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba990:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   ba9f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baa90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baaa0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baab0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baac0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baad0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baae0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baaf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bab90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baba0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   babb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   babc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   babd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   babe0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   babf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bac90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baca0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bacb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bacc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bacd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bace0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bacf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bad90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bada0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   badb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   badc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   badd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bade0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   badf0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bae90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baea0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baeb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baec0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baed0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baee0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baef0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf00:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf10:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf20:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf30:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf40:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf50:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf60:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf70:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf80:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baf90:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bafa0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bafb0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bafc0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bafd0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bafe0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   baff0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb000:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb010:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb020:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb030:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb040:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb050:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb060:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb070:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb080:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb090:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb0a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb0b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb0c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb0d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb0e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb0f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb100:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb110:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb120:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb130:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb140:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb150:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb160:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb170:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb180:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb190:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb1f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb200:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb210:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb220:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb230:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb240:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb250:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb260:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb270:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb280:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb290:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb2f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb300:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb310:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb320:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb330:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb340:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb350:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb360:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb370:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb380:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb390:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3a0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3b0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3c0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3d0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3e0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb3f0:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb400:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb410:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb420:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb430:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bb440:	ffff ffff 0000 0000 0000 0000 0000 0000     ................
	...
   bb6cc:	0000 0300 ffff ffff 0000 0000 0000 0000     ................
	...
   bb700:	0700 ffff ffff 00f8 0000 0000 0000 0000     ................
	...
   bb730:	0000 0700 ffff ffff 00ff 0000 0000 0000     ................
	...
   bb764:	0700 ffff ffff e0ff 0000 0000 0000 0000     ................
	...
   bb794:	0000 0700 ffff ffff f0ff 0000 0000 0000     ................
	...
   bb7c8:	0700 ffff ffff fcff 0000 0000 0000 0000     ................
	...
   bb7f8:	0000 0700 ffff ffff feff 0000 000f e001     ................
   bb808:	7800 7f00 00fe 007c 0700 ffcf ffff 7f80     .x....|.........
   bb818:	feff 001e 1e00 3f00 00ff ff0f e0ff ff1f     .......?........
   bb828:	ffff 0000 0700 ffff ffff ffff 0080 000f     ................
   bb838:	e001 7800 ff01 80ff 003e 0f00 ff8f ffff     ...x....>.......
   bb848:	ff81 feff 001e 1e00 ff00 c0ff ff0f f8ff     ................
   bb858:	ff1f ffff 0000 0700 ffff ffff ffff 00c0     ................
   bb868:	000f e001 7800 ff07 e0ff 003e 0f00 ff8f     .....x....>.....
   bb878:	ffff ff83 feff 001e 1e00 ff03 f0ff ff0f     ................
   bb888:	fcff ff1f ffff 0000 0700 ffff ffff fff9     ................
   bb898:	00e0 000f e001 7800 ff0f f0ff 001f 1f00     .......x........
   bb8a8:	ff0f ffff ff87 feff 001e 1e00 ff07 f8ff     ................
   bb8b8:	ff0f feff ff1f ffff 0000 0700 ffff ffff     ................
   bb8c8:	fff1 00f0 000f e001 7800 ff1f f8ff 001f     .........x......
   bb8d8:	1f00 ff0f ffff ff87 feff 001e 1e00 ff0f     ................
   bb8e8:	fcff ff0f ffff ff1f ffff 0000 0700 ffff     ................
   bb8f8:	ffff ffe1 00f8 000f e001 7800 e01f f807     ...........x....
   bb908:	800f 3e00 800f 0000 f007 0000 001e 1e00     ...>............
   bb918:	f00f fc03 000f ff01 001f 0000 0000 0700     ................
   bb928:	ffff ffff ffc1 00fc 000f e001 7800 803f     .............x?.
   bb938:	fc01 8007 3e00 000f 0000 8007 0000 001e     .....>..........
   bb948:	1e00 c01f 7e00 000f 1f00 001e 0000 0000     .....~..........
   bb958:	0700 ffff ffff ff81 00fc 000f e001 7800     ...............x
   bb968:	003f 7c00 c007 7c00 000f 0000 8007 0000     ?..|...|........
   bb978:	001e 1e00 801f 3e00 000f 0f00 001e 0000     .......>........
   bb988:	0000 0700 ffff ffff ff01 00fe 000f e001     ................
   bb998:	7800 003e 7c00 c003 7c00 000f 0000 8007     .x>..|...|......
   bb9a8:	0000 001e 1e00 001f 1e00 000f 0f00 001e     ................
   bb9b8:	0000 0000 0700 ffff feff ff01 00ff 000f     ................
   bb9c8:	e001 7800 003c 3c00 e003 f800 800f 0000     ...x<..<........
   bb9d8:	c007 0000 001f 1e00 001e 1e00 000f 0f00     ................
   bb9e8:	001f 0000 0000 0700 ffff fcff ff01 00ff     ................
   bb9f8:	000f e001 7800 003c 3c00 e001 f800 ff0f     .....x<..<......
   bba08:	f0ff ff07 f0ff ff1f feff 001e 1e00 000f     ................
   bba18:	0f00 ff1f e0ff 0000 0700 ffff f8ff ff01     ................
   bba28:	80ff 000f e001 7800 003c 3c00 f001 f001     .......x<..<....
   bba38:	ff0f f0ff ff07 fcff ff1f feff 001e 1e00     ................
   bba48:	000f 0f00 ff1f e0ff 0000 0700 ffff f8ff     ................
   bba58:	ff01 80ff 000f e001 7800 003c 3c00 f800     .........x<..<..
   bba68:	e001 ff0f f0ff ff07 feff ff1f feff 001e     ................
   bba78:	1e00 000f 0f00 ff1f e0ff 0000 0700 ffff     ................
   bba88:	f8ff ff01 c0ff 000f e001 7800 003c 3c00     ...........x<..<
   bba98:	f800 e003 ff0f f0ff ff01 feff ff1f feff     ................
   bbaa8:	001e 1e00 000f 1f00 ff1f e0ff 0000 0700     ................
   bbab8:	1fc0 fc01 e001 c0ff 000f e001 7800 003c     .............x<.
   bbac8:	3c00 7c00 c003 ff0f f0ff 7f00 ffff ff1f     .<.|............
   bbad8:	feff 001e 1e00 ff0f ffff ff1f e0ff 0000     ................
   bbae8:	0700 1fc0 f801 c001 c07f 000f e001 7800     ...............x
   bbaf8:	ff3f fcff 7c00 c007 000f 0000 0000 3f00     ?....|.........?
   bbb08:	001e 1e00 ff1f feff ff0f ffff 001f 0000     ................
   bbb18:	0000 0700 1fc0 f801 c001 e07f 000f e001     ................
   bbb28:	7800 ff3f fcff 3e00 8007 000f 0000 0000     .x?....>........
   bbb38:	1f00 001e 1e00 ff1f feff ff0f feff 001e     ................
   bbb48:	0000 0000 0700 0ec0 f000 c007 e03f 000f     ............?...
   bbb58:	e001 7800 ff3f fcff 3e00 800f 000f 0000     ...x?....>......
   bbb68:	0000 0f00 001e 1e00 ff1f feff ff0f fcff     ................
   bbb78:	001e 0000 0000 0700 0ec0 f000 8007 e03f     ..............?.
   bbb88:	000f e001 7800 ff3f fcff 1f00 000f 000f     .....x?.........
   bbb98:	0000 0000 0f00 001e 1e00 ff1f feff ff0f     ................
   bbba8:	f8ff 001e 0000 0000 0700 0cc0 f000 800f     ................
   bbbb8:	f01f 000f e001 7800 ff3f fcff 1f00 001f     .......x?.......
   bbbc8:	000f 0000 0000 0f00 001e 1e00 ff1f feff     ................
   bbbd8:	ff0f 80f7 001e 0000 0000 0700 04e0 6000     ...............`
   bbbe8:	000f f01f 000f e001 7800 003c 3c00 0f00     .........x<..<..
   bbbf8:	009e 000f 0000 0000 0f00 001e 1e00 001e     ................
   bbc08:	1e00 0f0f 00f0 001e 0000 0000 0700 04e0     ................
   bbc18:	6000 001f f00f 000f e001 7800 003c 3c00     .`.........x<..<
   bbc28:	0f00 00be 000f 0000 0000 0f00 001e 1e00     ................
   bbc38:	001e 1e00 070f 00f8 001e 0000 0000 0700     ................
   bbc48:	04e0 4000 001e f00f 000f e001 7800 003c     ...@.........x<.
   bbc58:	3c00 0700 00fc 000f 0000 0000 0f00 001e     .<..............
   bbc68:	1e00 001e 1e00 010f 00fe 001e 0000 0000     ................
   bbc78:	0700 00f0 0000 000e f007 800f e001 f800     ................
   bbc88:	003c 3c00 0700 00fc 000f 0000 0000 1f00     <..<............
   bbc98:	001e 1e00 001e 1e00 000f 00ff 001e 0000     ................
   bbca8:	0000 0700 00f0 0000 000c f007 f00f e003     ................
   bbcb8:	f807 003c 3c00 0300 00f8 800f 0000 0000     ..<..<..........
   bbcc8:	ff00 001e 1e00 001e 1e00 000f 803f 001f     ............?...
   bbcd8:	0000 0000 0700 00f0 0000 0004 f003 ff0f     ................
   bbce8:	ffff f8ff 003c 3c00 0300 00f8 ff0f ffff     ....<..<........
   bbcf8:	ff87 feff 001e 1e00 001e 1e00 000f e01f     ................
   bbd08:	ff1f ffff 0000 0700 00f8 0000 0004 f003     ................
   bbd18:	ff0f ffff f8ff 003c 3c00 0100 00f0 ff0f     ......<..<......
   bbd28:	ffff ff87 feff 001e 1e00 001e 1e00 000f     ................
   bbd38:	f007 ff1f ffff 0000 0700 00f8 0000 0000     ................
   bbd48:	f001 ff07 ffff f0ff 003c 3c00 0100 00f0     ........<..<....
   bbd58:	ff0f ffff ff87 fcff 001e 1e00 001e 1e00     ................
   bbd68:	000f fc03 ff1f ffff 0000 0300 00f8 0000     ................
   bbd78:	0400 f001 ff01 ffff e0ff 003c 3c00 0000     ..........<..<..
   bbd88:	00e0 ff0f ffff ff87 f8ff 001e 1e00 001e     ................
   bbd98:	1e00 000f fe01 ff1f ffff 0000 0300 00fc     ................
   bbda8:	0020 0600 f000 3f00 ffff 00ff 003c 3c00      ......?....<..<
   bbdb8:	0000 00c0 ff0f ffff ff07 c0ff 001e 1e00     ................
   bbdc8:	001e 1e00 000f 7f00 ff9f ffff 0000 0300     ................
   bbdd8:	00fc 0020 0e00 f000 0000 0000 0000 0000     .. .............
	...
   bbe08:	0300 00fc 0030 0f00 f000 0000 0000 0000     ....0...........
	...
   bbe38:	0000 0300 00fe 0170 0f00 f000 0000 0000     ......p.........
	...
   bbe6c:	0300 00fe 0378 1e00 f000 0000 0000 0000     ....x...........
	...
   bbe9c:	0000 0100 00fe 0378 1e80 f001 0000 0000     ......x.........
	...
   bbed0:	0100 00ff 03f8 3e80 f001 0000 0000 0000     .......>........
	...
   bbf00:	0000 0100 00ff 07fc 3c80 f003 0000 0000     .........<......
	...
   bbf34:	0000 00ff 07fc 7cc0 f003 0400 0000 0000     .......|........
	...
   bbf54:	0000 0020 0000 0000 0010 0000 0000 0000     .. .............
   bbf64:	0000 0000 81ff 0ffc 78c0 f007 0400 0000     .........x......
	...
   bbf88:	0020 0000 0000 0010 0000 0000 0000 0000      ...............
   bbf98:	0000 817f 0ffe e0ff f007 0400 0000 0000     ................
	...
   bbfb8:	0000 0020 0000 0000 0010 0000 0000 0000     .. .............
   bbfc8:	0000 0000 ff7f ffff e0ff f00f 0400 0000     ................
	...
   bbfec:	0020 0000 0000 0010 0000 0000 0000 0000      ...............
   bbffc:	0000 ff3f ffff e0ff f00f 040f 0178 13e2     ..?.........x...
   bc00c:	e003 0f00 0088 4000 07f8 7c00 7804 0138     .......@...|.x8.
   bc01c:	00e0 c023 100f 1f98 0010 8100 01f1 e081     ..#.............
   bc02c:	0000 0000 ff3f ffff e0ff f00f 8519 068c     ....?...........
   bc03c:	141a 300c 1800 8048 4180 0c8c 86c1 8c04     ...0..H..A......
   bc04c:	06c6 0018 602c d030 71a0 0191 8300 1e19     ....,`0..q......
   bc05c:	1806 0000 0000 ff1f ffff e0ff f00f 0610     ................
   bc06c:	0c06 1806 0818 2000 8038 82c0 0802 0103     ....... 8.......
   bc07c:	0507 0c02 0004 3030 3060 c0c0 0171 0481     ......00`0..q...
   bc08c:	1c07 0c08 0000 0000 ff0f ffff e0ff f00f     ................
   bc09c:	0610 1802 1806 0410 4000 4118 84c0 0801     .........@.A....
   bc0ac:	0002 0386 0802 0002 1030 30c0 8080 8330     ........0..0..0.
   bc0bc:	0881 1803 0418 0000 0000 ff0f ffff e0ff     ................
   bc0cc:	f03f 0410 1002 1002 0430 c000 4118 8421     ?.......0....A!.
   bc0dc:	0801 0004 0286 1003 0002 1020 1080 8081     .......... .....
   bc0ec:	8230 18c2 1803 0210 0000 0000 ff07 ffff     0...............
   bc0fc:	e0ff f07f 040c 1002 1002 fe3f 8000 2108     ..........?....!
   bc10c:	0f21 86ff 0004 02c4 1f03 00fe 1020 1080     !........... ...
   bc11c:	0081 c610 1042 1801 fe1f 0000 0000 ff03     ....B...........
   bc12c:	ffff e0ff f0ff 0406 1002 1002 0030 8000     ............0...
   bc13c:	2208 0c31 0300 0004 0244 1003 0000 1020     ."1.....D..... .
   bc14c:	1080 0081 4410 1046 1801 0010 0000 0000     .....DF.........
   bc15c:	ff01 ffff e1ff f0ff 8401 1002 1002 0020     .............. .
   bc16c:	8000 3208 0812 0000 0084 02c4 1003 0000     ...2............
   bc17c:	1020 1080 0081 4410 1024 1801 0010 0000      ......D$.......
   bc18c:	0000 ff00 ffff e3ff f0ff 8400 1002 1002     ................
   bc19c:	0030 c000 1418 0412 0000 0044 0284 1003     0.........D.....
   bc1ac:	0000 1020 1080 8081 2830 1824 1803 0010     .. .....0($.....
   bc1bc:	0000 0000 7f00 ffff ffff f0ff 8400 1802     ................
   bc1cc:	1006 0410 4000 1c18 040c 0001 0042 0284     .....@......B...
   bc1dc:	0803 0002 1020 30c0 8080 3830 0818 1803     .... ..0..08....
   bc1ec:	0418 0000 0000 1f00 ffff ffff f0ff 8400     ................
   bc1fc:	0c02 1006 0818 2000 0c38 020c 0003 0143     ....... 8.....C.
   bc20c:	0204 0c03 0004 1020 3060 c080 1070 0418     ...... .`0..p...
   bc21c:	1807 0c08 0000 0000 0f00 ffff ffff f0ff     ................
   bc22c:	8411 0602 101a 300c 1800 08c8 0304 188e     .......0........
   bc23c:	8681 0204 0603 0018 1020 d030 7180 1090     ........ .0..q..
   bc24c:	0710 1819 1806 0000 0000 0300 ffff ffff     ................
   bc25c:	f0ff 040e 0102 10e2 e003 0f00 0088 0000     ................
   bc26c:	07f8 7c00 0204 0100 00f0 1020 100f 1f80     ...|...... .....
   bc27c:	0010 0100 00f1 e003 0000 0000 0000 ffff     ................
   bc28c:	ffff f0ff 0000 0000 0000 0000 0000 0000     ................
	...
   bc2bc:	ff1f ffff f0ff 0000 0000 0000 0000 0000     ................
	...
   bc2ec:	0000 ff03 ffff f0ff 0000 0000 0000 0000     ................
	...

000bc5d8 <IMAGE_RED>:
   bc5d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc5e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc5f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc608:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc618:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc628:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc638:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc648:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc658:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc668:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc678:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc688:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc698:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc6a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc6b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc6c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc6d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc6e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc6f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc708:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc718:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc728:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc738:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc748:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc758:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc768:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc778:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc788:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc798:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc7a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc7b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc7c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc7d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc7e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc7f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc808:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc818:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc828:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc838:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc848:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc858:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc868:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc878:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc888:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc898:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc8a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc8b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc8c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc8d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc8e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc8f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc908:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc918:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc928:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc938:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc948:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc958:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc968:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc978:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc988:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc998:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc9a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc9b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc9c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc9d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc9e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bc9f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bca98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcaa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcab8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcac8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcad8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcae8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcaf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcb98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcba8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcbb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcbc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcbd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcbe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcbf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcc98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcca8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bccb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bccc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bccd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcce8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bccf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcd98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcda8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcde8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcdf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bce98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcea8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bceb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcec8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bced8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcee8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcef8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcf98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcfe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bcff8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd008:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd018:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd028:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd038:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd048:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd058:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd068:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd078:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd088:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd098:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd0a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd0b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd0c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd0d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd0e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd0f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd108:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd118:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd128:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd138:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd148:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd158:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd168:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd178:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd188:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd198:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd1f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd208:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd218:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd228:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd238:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd248:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd258:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd268:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd278:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd288:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd298:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd2f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd308:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd318:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd328:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd338:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd348:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd358:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd368:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd378:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd388:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd398:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd3a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd3b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd3c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd3d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd3e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd3f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd408:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd418:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd428:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd438:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd448:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd458:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd468:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd478:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd488:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd498:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd4a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd4b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd4c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd4d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd4e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd4f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd508:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd518:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd528:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd538:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd548:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd558:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd568:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd578:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd588:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd598:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd5a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd5b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd5c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd5d8:	ffff ffff ffff ffff ffff ffff ffff ff00     ................
   bd5e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd5f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd608:	ffff ffff ffff ffff ffff ffff ffff f8ff     ................
   bd618:	0f00 ffff ffff ffff ffff ffff ffff ffff     ................
   bd628:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd638:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd648:	f1ff 83ff ffff ffff ffff ffff ffff ffff     ................
   bd658:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd668:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd678:	ffff e7ff f0ff ffff ffff ffff ffff ffff     ................
   bd688:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd698:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd6a8:	ffff ffff dfff d8ff ff7f ffff ffff ffff     ................
   bd6b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd6c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd6d8:	ffff ffff ffff 9fff 1bf8 ff1f ffff ffff     ................
   bd6e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd6f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd708:	ffff ffff ffff 7fff bff3 0bf8 ffcf ffff     ................
   bd718:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd728:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd738:	ffff ffff ffff ffff 1ffe 3f81 e3ff ffe7     ...........?....
   bd748:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd758:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd768:	ffff ffff ffff ffff ffff cffe 3f1c f3ff     .............?..
   bd778:	ffe3 ffff ffff ffff ffff ffff ffff ffff     ................
   bd788:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd798:	ffff ffff ffff ffff ffff ffff e0fe 3f9c     ...............?
   bd7a8:	fbff ffcb ffff ffff ffff ffff ffff ffff     ................
   bd7b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd7c8:	ffff ffff ffff ffff ffff ffff ffff f0fc     ................
   bd7d8:	1f9c f3ff ffd9 ffff ffff ffff ffff ffff     ................
   bd7e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd7f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd808:	fe7e 9fd9 f7ff ff9c ff87 ffff ffff ffff     ~...............
   bd818:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd828:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd838:	feff 3e3e cc59 e4ff ff1c ff23 ffff ffff     ..>>Y.....#.....
   bd848:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd858:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd868:	ffff ffff 1f7f cc19 e0ff fec6 fff9 ffff     ................
   bd878:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd888:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd898:	ffff ffff ffff 1fff e419 c7ff 7ee0 fff9     .............~..
   bd8a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd8b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd8c8:	ffff ffff ffff ffff 1fff e493 cfff 7fff     ................
   bd8d8:	fff9 ffff ffff ffff ffff ffff ffff ffff     ................
   bd8e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd8f8:	ffff ffff ffff ffff ffff 2fff f493 9fff     .........../....
   bd908:	7dff fff9 ffff ffff ffff ffff ffff ffff     .}..............
   bd918:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd928:	ffff ffff ffff ffff ffff ffff 6ffe f0c7     .............o..
   bd938:	3f3f 3dff fff9 ffff ffff ffff ffff ffff     ??.=............
   bd948:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd958:	ffff ffff ffff ffff ffff ffff ffff 7fe0     ................
   bd968:	f2c7 7f7e 3dff fdf9 ffff ffff ffff ffff     ..~..=..........
   bd978:	ffff ffff ffff ffff ffff ffff ffff efff     ................
   bd988:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd998:	1f80 f0cf fffc 39ff f8f8 ffff ffff ffff     .......9........
   bd9a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9c8:	feff 8f07 f1cf fff9 33ff 78fc ffff ffff     .........3.x....
   bd9d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bd9f8:	ffff f8ff e763 f1e7 fff3 27ff 1ffe ffff     ....c......'....
   bda08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bda18:	ffff ffff 7fff ffff ffff ffff ffff ffff     ................
   bda28:	ffff ffff f1ff f3f1 f3e7 fff7 0fff ffff     ................
   bda38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bda48:	ffff ffff ffff fffd ffff ffff ffff ffff     ................
   bda58:	ffff ffff ffff e7ff f9f9 e3e3 ffe7 3fff     ...............?
   bda68:	fff3 fffd ffff ffff ffff ffff ffff ffff     ................
   bda78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bda88:	ffff ffff ffff ffff cfff fcfc e7e1 ffc7     ................
   bda98:	7ffe fff3 fffd ffff ffff ffff ffff ffff     ................
   bdaa8:	ffff ffff ffff ffff ffff fff7 ffff ffff     ................
   bdab8:	ffff ffff ffff ffff ffff dfff fefc cf71     ..............q.
   bdac8:	ffcf 7ff8 f3f7 fffd ffff ffff ffff ffff     ................
   bdad8:	ffff ffff ffff ffff ffff ffff ffef ffff     ................
   bdae8:	ffff ffff ffff ffff ffff ffff 9fff fffe     ................
   bdaf8:	9f70 fccf ff00 f7ff ffff ffff ffff ff87     p...............
   bdb08:	ffff ffff ffff 07fc ffff ffff ffff ffff     ................
   bdb18:	ffff ffff ffff ffff ffff ffff ffff 9fff     ................
   bdb28:	7ffe 3f32 e08f ff05 ffff ffff ffff feff     ..2?............
   bdb38:	ff10 ffff ffff c0ff 0300 ffff ffff ffff     ................
   bdb48:	ffbf ffff ffff ffff ffff ffff ffff ffff     ................
   bdb58:	3fff 7ffe 7f38 808f ff19 ffff ffff ffff     .?..8...........
   bdb68:	f9ff 3ffe ffff ffff 00c0 1900 ffff ffff     ...?............
   bdb78:	ffff ff7f ffff ffff ffff ffff ffff ffff     ................
   bdb88:	ffff 3fff 3fff 7fbc 038f fff3 ffff fff3     ...?.?..........
   bdb98:	ffff e7ff 8fff ffff fcff e000 0c00 ff7f     ................
   bdba8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdbb8:	ffff ffff 3fff 3fff 7f9c 038e ffc7 ffff     .....?.?........
   bdbc8:	fff3 ffff 1fff e7ff ffff f1ff ff3f 04e0     ............?...
   bdbd8:	ff7f ffff ffff ffff ffff ffff ffff ffff     ................
   bdbe8:	ffff ffff ffff 3fff 9fff 3f8d 078c ff1f     .......?...?....
   bdbf8:	ffff fff7 ffff 7ffc f3ff ffff c6ff ff7f     ................
   bdc08:	42f8 ff7f ffff ffff ffff ffff ffff ffff     .B..............
   bdc18:	ffff ffff ffff ffff 7fff 8fff 9fc1 1c84     ................
   bdc28:	fe7f ff00 ffff ffff fff3 fd00 ffff 9dff     ................
   bdc38:	ffff 22fe ffff ffff ffff ffff ffff ffff     ..."............
   bdc48:	ffff ffff ffff ffff ffff 7fff cff7 9fc1     ................
   bdc58:	1884 fcff 0000 ff03 ffff f8cf 1c0c ffff     ................
   bdc68:	3bff ffff 10fe ffff ffff ffff ffff ffff     .;..............
   bdc78:	ffff ffff ffff ffff ffff ffff 7ffe e3e3     ................
   bdc88:	8fc0 1300 f0ff 00ff 4700 fcff e17f c6ff     .........G......
   bdc98:	ff7f 77fc ffff 18ff ffff ffff ffff ffff     ...w............
   bdca8:	ffff ffff ffff ffff ffff ffff ffff 3ffe     ...............?
   bdcb8:	f0e3 ce00 2700 e1ff e3ff 03f8 83ff c7ff     .....'..........
   bdcc8:	f1ff ff3f e7f9 ffff 88ff ffff ffff ffff     ..?.............
   bdcd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdce8:	3ffe fcff 4c00 2700 07ff f0ff 0000 1f00     .?...L.'........
   bdcf8:	9fff fcff ff1f 8fe3 ffff 88ff ffff ffff     ................
   bdd08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdd18:	ffff 1ffe ffff 0001 6700 0ffc f8ff fc07     .........g......
   bdd28:	f901 7ffe ffff ff0f 3f07 ffff 80f9 ffff     .........?......
   bdd38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdd48:	ffff ffff 4ffe ffff 80c1 0070 3f00 fcdf     .....O....p..?..
   bdd58:	ffff f8ff fffc ffff 40c0 7f3c ffff c0fd     .........@<.....
   bdd68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdd78:	ffff ffff ffff 27fe ffff c0c1 0008 ff00     .......'........
   bdd88:	fe9f ff7f fdff fff9 ffff 00f8 ff81 ffff     ................
   bdd98:	e0ff ffff ffff ffff ffff ffff ffff ffff     ................
   bdda8:	ffff ffff ffff ffff 33fe ffff e0c0 3800     .........3.....8
   bddb8:	ff00 febf ff7f ffff fff3 ffff c0ff ff3f     ..............?.
   bddc8:	ffff e0ff ffff ffff ffff ffff ffff ffff     ................
   bddd8:	ffff ffff ffff ffff ffff 1dfe ffff 70e0     ...............p
   bdde8:	1804 7f00 ffff ff7f ffff ffe7 ffff ffff     ................
   bddf8:	ffff ffff f0ff ffff ffff ffff ffff ffff     ................
   bde08:	ffff ffff ffff ffff ffff ffff 0efe ff7f     ................
   bde18:	00e0 0804 3f18 ffff ff7f ffff ffcf ffff     .....?..........
   bde28:	ffff ffff ffff fcff ff7f ffff ffff ffff     ................
   bde38:	ffff ffff ffff ffff ffff ffff ffff 47fe     ...............G
   bde48:	ff1f 00f0 0804 3f8e ffff ff3f ffff ff9f     .......?..?.....
   bde58:	ffff ffff ffff ffff feff 8f07 ffff ffff     ................
   bde68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bde78:	61ff ffc7 00fc 000c 3f86 ffff ff3f ffff     .a.......?..?...
   bde88:	ffbf ffff ffff ffff ffff ffff ff01 ffff     ................
   bde98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdea8:	ffff 30ff fff1 82ff 0018 3f87 ffff ffbf     ...0.......?....
   bdeb8:	ffff ff3f ffff ffff ffff ffff ffff ff8f     ..?.............
   bdec8:	fffd ffff ffff ffff ffff ffff ffff ffff     ................
   bded8:	ffff ffff 38ff c11c f1ff 01f0 3fc7 ffff     .....8.......?..
   bdee8:	ff9f feff ff7f ffff ffff ffff ffff ffff     ................
   bdef8:	ffe3 fff3 ffff ffff ffff ffff ffff ffff     ................
   bdf08:	ffff ffff ffff 3eff 0400 007f 0301 3fc3     .......>.......?
   bdf18:	ffff ff8f feff ffff ffff ffff ffff ffff     ................
   bdf28:	ffff 7ff8 ffdf ffff ffff ffff ffff ffff     ................
   bdf38:	ffff ffff ffff ffff bfff 8387 0000 2100     ...............!
   bdf48:	9fc3 ffff ff8f fdff ffff ffff ffff ffff     ................
   bdf58:	ffff ffff 03fe ffff ffff ffff ffff ffff     ................
   bdf68:	ffff ffff ffff ffff ffff 9fff f1ff 00e6     ................
   bdf78:	61c2 9fc3 ffff ff9f f9ff ffff ffff ffff     .a..............
   bdf88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdf98:	ffff ffff ffff ffff ffff ffff dfff f0ff     ................
   bdfa8:	0078 6182 9fe1 ffff ff9f f3ff ffff ffff     x..a............
   bdfb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdfc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdfd8:	e0cf 0100 6106 ffe1 ffff ff9f e7ff ffff     .....a..........
   bdfe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bdff8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be008:	3fff e4cf 0100 4000 fff0 ffff ff1f cfff     .?.....@........
   be018:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be028:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be038:	ffff 79ff feff 0104 4180 7fd0 ffff ff1f     ...y.....A......
   be048:	1fff ffff ffff ffff ffff ffff ffff ffff     ................
   be058:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be068:	ffff ffff fcff f87f 1300 4080 3f88 ffff     ...........@.?..
   be078:	ff4f 3ff8 ffff ffff ffff ffff ffff ffff     O..?............
   be088:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be098:	ffff ffff ffff ffff e00f e723 00c2 0f8c     ..........#.....
   be0a8:	ffff ff4f fff8 ffff ffff ffff ffff ffff     ..O.............
   be0b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be0c8:	ffff ffff ffff ffff ffff 0680 8f4f 00e3     ............O...
   be0d8:	03fe feff ff47 ffe1 ffff ffff ffff ffff     ....G...........
   be0e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be0f8:	ffff ffff ffff ffff ffff ffff 7cfc 3f9c     .............|.?
   be108:	00f3 80ff feff fc13 ff07 ffff ffff ffff     ................
   be118:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be128:	ffff ffff ffff ffff ffff ffff ffff f9ff     ................
   be138:	ffb1 80f1 c07f fc3f 0000 ff3f ffff ffff     ......?...?.....
   be148:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be158:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be168:	f1ff ff07 c0f9 f07f fc0f 0300 ffff ffff     ................
   be178:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be188:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be198:	ffff f3ff ff1f e0f9 fe3f f001 7f00 ffff     ........?.......
   be1a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be1b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be1c8:	ffff ffff e3ff ff3f f0fc ff3f 0000 ff3f     ......?...?...?.
   be1d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be1e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be1f8:	ffff ffff ffff e7ff ff3f 78fc ff1f 01c0     ........?..x....
   be208:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be218:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be228:	ffff ffff ffff ffff c6ff ff3f 7efc ff1f     ..........?..~..
   be238:	03f0 ffff ffff ffff ffff ffff ffff ffff     ................
   be248:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be258:	ffff ffff ffff ffff ffff c6ff ff3f 3ffc     ............?..?
   be268:	ff8f 07f8 ffff ffff ffff ffff ffff ffff     ................
   be278:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be288:	ffff ffff ffff ffff ffff ffff ceff ff3f     ..............?.
   be298:	9ffc ffc7 0ffc ffff ffff ffff ffff ffff     ................
   be2a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be2b8:	ffff ffff ffff ffff ffff ffff ffff ccff     ................
   be2c8:	ff9f 9ffc ffe7 1ffe ffff ffff ffff ffff     ................
   be2d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be2e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be2f8:	c8ff ffcf 9ffd ffe0 3ffe ffff ffff ffff     .........?......
   be308:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be318:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be328:	ffff c0ff fce7 df79 7ff0 3ffe ffff ffff     ......y....?....
   be338:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be348:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be358:	ffff ffff c1ff f0f0 df73 7ff0 7ffc ffff     ........s.......
   be368:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be378:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be388:	ffff ffff ffff c1ff 03fc df07 fff0 fff8     ................
   be398:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be3a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be3b8:	ffff ffff ffff ffff c1ff ffff dfdf 3ff2     ...............?
   be3c8:	ffe3 ffff ffff ffff ffff ffff ffff ffff     ................
   be3d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be3e8:	ffff ffff ffff ffff ffff c1ff ffff dfff     ................
   be3f8:	0ff3 ff07 ffff ffff ffff ffff ffff ffff     ................
   be408:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be418:	ffff ffff ffff ffff ffff ffff c1ff ffff     ................
   be428:	dfff 80f3 ff1f ffff ffff ffff ffff ffff     ................
   be438:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be448:	ffff ffff ffff ffff ffff ffff ffff c1ff     ................
   be458:	ffff 9fff e0f3 ffff ffff ffff ffff ffff     ................
   be468:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be478:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be488:	e1ff ffff 9fff fff3 ffff ffff ffff ffff     ................
   be498:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be4a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be4b8:	ffff e1ff ffff 9fff fff3 ffff ffff ffff     ................
   be4c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be4d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be4e8:	ffff ffff e1ff ffff 9fff fff3 ffff ffff     ................
   be4f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be508:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be518:	ffff ffff ffff f1ff 7ffe 9fff fff3 ffff     ................
   be528:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be538:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be548:	ffff ffff ffff ffff f0ff 7fff 8fff ffe7     ................
   be558:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be568:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be578:	ffff ffff ffff ffff ffff f0ff ff3f 8fff     ............?...
   be588:	ffe7 ffff ffff ffff ffff ffff ffff ffff     ................
   be598:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be5a8:	ffff ffff ffff ffff ffff ffff f9ff 800f     ................
   be5b8:	8f0f ffcf ffff ffff ffff ffff ffff ffff     ................
   be5c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be5d8:	ffff ffff ffff ffff ffff ffff ffff f8ff     ................
   be5e8:	00c0 8701 ffcf ffff ffff ffff ffff ffff     ................
   be5f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be608:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be618:	fcff 3ff8 17e0 ff9f ffff ffff ffff ffff     ...?............
   be628:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be638:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be648:	ffff fcff ffff 12fc ff3f ffff ffff ffff     ........?.......
   be658:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be668:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be678:	ffff ffff feff ff7f 00fe ff7f ffff ffff     ................
   be688:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be698:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be6a8:	ffff ffff ffff feff ff7f 81ff ffff ffff     ................
   be6b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be6c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be6d8:	ffff ffff ffff ffff ffff ff1f ffff ffff     ................
   be6e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be6f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be708:	ffff ffff ffff ffff ffff ffff ff87 ffff     ................
   be718:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be728:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be738:	ffff ffff ffff ffff ffff ffff ffff ffc1     ................
   be748:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be758:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be768:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be778:	fff0 ffff ffff ffff ffff ffff ffff ffff     ................
   be788:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be798:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be7a8:	ffff 7ffc ffff ffff ffff ffff ffff ffff     ................
   be7b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be7c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be7d8:	ffff ffff 7ffe ffff ffff ffff ffff ffff     ................
   be7e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be7f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be808:	ffff ffff ffff 3ffe ffff ffff ff1f ffff     .......?........
   be818:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be828:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be838:	ffff ffff ffff ffff 3fff ffff fcff ff0f     .........?......
   be848:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be858:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be868:	ffff ffff ffff ffff ffff bfff ffff f8ff     ................
   be878:	ff07 ffff ffff ffff ffff ffff ffff ffff     ................
   be888:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be898:	ffff ffff ffff ffff ffff ffff 9fff ffff     ................
   be8a8:	f1ff ffc3 ffff ffff ffff ffff ffff ffff     ................
   be8b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be8c8:	ffff ffff ffff ffff ffff ffff ffff 9fff     ................
   be8d8:	ffff f3ff ffe3 ffff ffff ffff ffff ffff     ................
   be8e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be8f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be908:	dfff ffff f3ff ffe3 ffff ffff ffff ffff     ................
   be918:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be928:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be938:	ffff dfff ffff e4ff ff73 ffff ffff ffff     ........s.......
   be948:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be958:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be968:	ffff ffff dfff ffff e0ff ff33 ffff ffff     ..........3.....
   be978:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be988:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be998:	ffff ffff ffff dfff ffff c0ff ff13 ffff     ................
   be9a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be9b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be9c8:	ffff ffff ffff ffff cfff ffff 87ff ff03     ................
   be9d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be9e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   be9f8:	ffff ffff ffff ffff ffff efff ffff 1fff     ................
   bea08:	ff83 ffff ffff ffff ffff ffff ffff ffff     ................
   bea18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bea28:	ffff ffff ffff ffff ffff ffff e7ff ffff     ................
   bea38:	3ffe ffc3 ffff ffff ffff ffff ffff ffff     .?..............
   bea48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bea58:	ffff ffff ffff ffff ffff ffff ffff f7ff     ................
   bea68:	ffff 7ffc ffc7 ffff ffff ffff ffff ffff     ................
   bea78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bea88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bea98:	fbff ffff fff9 ffe7 ffff ffff ffff ffff     ................
   beaa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beab8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beac8:	ffff f9ff ffff ffe3 ffe3 ffff ffff ffff     ................
   bead8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beae8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beaf8:	ffff ffff fcff ff7f ffcf ffe3 ffff ffff     ................
   beb08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beb18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beb28:	ffff ffff ffff ffff ff1f ff1f fff3 ffff     ................
   beb38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beb48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beb58:	ffff ffff ffff ffff ffff fcc7 ff7f fff3     ................
   beb68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beb78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beb88:	ffff ffff ffff ffff ffff ffff 01f0 ffff     ................
   beb98:	fff3 ffff ffff ffff ffff ffff ffff ffff     ................
   beba8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bebb8:	ffff ffff ffff ffff ffff ffff ffff efff     ................
   bebc8:	ffff fff9 ffff ffff ffff ffff ffff ffff     ................
   bebd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bebe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bebf8:	ffff ffff fffc ffff ffff ffff ffff ffff     ................
   bec08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bec18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bec28:	ffff ffff ffff fffe ffff ffff ffff ffff     ................
   bec38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bec48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bec58:	ffff ffff ffff ffff 3ffe ffff ffff ffff     .........?......
   bec68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bec78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bec88:	ffff ffff ffff ffff ffff 87ff ffff ffff     ................
   bec98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beca8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   becb8:	ffff ffff ffff ffff ffff ffff f0ff ffc1     ................
   becc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   becd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bece8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   becf8:	ffe1 ffff ffff ffff ffff ffff ffff ffff     ................
   bed08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bed98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beda8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bedb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bedc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bedd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bede8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bedf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bee98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beea8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beeb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beec8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beed8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beee8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beef8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bef98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   befa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   befb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   befc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   befd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   befe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   beff8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf008:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf018:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf028:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf038:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf048:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf058:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf068:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf078:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf088:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf098:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf0a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf0b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf0c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf0d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf0e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf0f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf108:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf118:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf128:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf138:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf148:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf158:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf168:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf178:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf188:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf198:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf1a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf1b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf1c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf1d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf1e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf1f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf208:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf218:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf228:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf238:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf248:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf258:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf268:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf278:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf288:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf298:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf2a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf2b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf2c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf2d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf2e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf2f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf308:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf318:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf328:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf338:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf348:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf358:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf368:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf378:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf388:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf398:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf3a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf3b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf3c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf3d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf3e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf3f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf408:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf418:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf428:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf438:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf448:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf458:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf468:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf478:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf488:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf498:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf4a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf4b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf4c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf4d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf4e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf4f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf508:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf518:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf528:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf538:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf548:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf558:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf568:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf578:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf588:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf598:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf5a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf5b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf5c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf5d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf5e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf5f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf608:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf618:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf628:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf638:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf648:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf658:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf668:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf678:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf688:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf698:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf6a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf6b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf6c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf6d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf6e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf6f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf708:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf718:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf728:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf738:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf748:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf758:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf768:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf778:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf788:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf798:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf7a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf7b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf7c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf7d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf7e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf7f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf808:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf818:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf828:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf838:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf848:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf858:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf868:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf878:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf888:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf898:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf8a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf8b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf8c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf8d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf8e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf8f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf908:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf918:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf928:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf938:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf948:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf958:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf968:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf978:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf988:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf998:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf9a8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf9b8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf9c8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf9d8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf9e8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bf9f8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfa98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfaa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfab8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfac8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfad8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfae8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfaf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfb98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfba8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfbb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfbc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfbd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfbe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfbf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfc98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfca8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfcb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfcc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfcd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfce8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfcf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfd98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfda8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfdb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfdc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfdd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfde8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfdf8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfe98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfea8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfeb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfec8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfed8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfee8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfef8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff08:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff18:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff28:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff38:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff48:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff58:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff68:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff78:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff88:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bff98:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bffa8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bffb8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bffc8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bffd8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bffe8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   bfff8:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0008:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0018:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0028:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0038:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0048:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0058:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   c0068:	ffff ffff ffff ffff 6177 656b 7520 2070     ........wake up 
   c0078:	7265 6f72 2172 6e00 206f 6163 6472 0021     error!.no card!.
   c0088:	6c66 7361 0065 6572 6461 6520 7272 726f     flase.read error
   c0098:	0021 6572 6461 7420 6d69 6f65 7475 0021     !.read timeout!.
   c00a8:	6e75 6e6b 776f 206e 7265 6f72 2172 0000     unknown error!..

000c00b8 <_ZTV17DFRobot_PN532_IIC>:
	...
   c00c0:	4f49 000b 52df 000b                         IO...R..

000c00c8 <_ZTVN5spark13CellularClassE>:
	...
   c00d0:	59ef 000b 59e5 000b 59db 000b 5991 000b     .Y...Y...Y...Y..
   c00e0:	59cf 000b 59c3 000b 6229 000b 6231 000b     .Y...Y..)b..1b..
   c00f0:	59b7 000b 59af 000b 59a5 000b 599b 000b     .Y...Y...Y...Y..
   c0100:	6261 000b                                   ab..

000c0104 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c010c:	5a29 000b 5a2f 000b 5a6d 000b 5a3d 000b     )Z../Z..mZ..=Z..
   c011c:	5a2b 000b                                   +Z..

000c0120 <_ZTVN5spark13EthernetClassE>:
	...
   c0128:	5fb7 000b 5fad 000b 5fa3 000b 5f99 000b     ._..._..._..._..
   c0138:	5f8d 000b 5f81 000b 6229 000b 6231 000b     ._..._..)b..1b..
   c0148:	5f75 000b 5f6d 000b 5f63 000b 5f59 000b     u_..m_..c_..Y_..
   c0158:	6261 000b                                   ab..

000c015c <_ZTV7TwoWire>:
	...
   c0164:	5fd5 000b 601f 000b 5ff7 000b 5fd7 000b     ._...`..._..._..
   c0174:	5fff 000b 6007 000b 600f 000b 6017 000b     ._...`...`...`..

000c0184 <_ZTV9IPAddress>:
	...
   c018c:	60f9 000b 60e9 000b 60eb 000b 7061 0070     .`...`...`..app.

000c019c <_ZTVN5spark12NetworkClassE>:
	...
   c01a4:	61e9 000b 61f3 000b 61fd 000b 6207 000b     .a...a...a...b..
   c01b4:	6211 000b 621d 000b 6229 000b 6231 000b     .b...b..)b..1b..
   c01c4:	6239 000b 6245 000b 624d 000b 6257 000b     9b..Eb..Mb..Wb..
   c01d4:	6261 000b                                   ab..

000c01d8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c01d8:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   c01e8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   c01f8:	6d69 0065                                   ime.

000c01fc <_ZTV11USARTSerial>:
	...
   c0204:	67e9 000b 6855 000b 682d 000b 634d 000b     .g..Uh..-h..Mc..
   c0214:	67fd 000b 6819 000b 680b 000b 6827 000b     .g...h...h..'h..
   c0224:	67eb 000b 67ef 000b                         .g...g..

000c022c <_ZTV9USBSerial>:
	...
   c0234:	6893 000b 68fb 000b 68d1 000b 634d 000b     .h...h...h..Mc..
   c0244:	68c3 000b 6895 000b 68a5 000b 68f5 000b     .h...h...h...h..
   c0254:	68b5 000b 688d 000b                         .h...h..

000c025c <_ZSt7nothrow>:
   c025c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   c026c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   c027c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c028c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c029c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   c02ac:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c02bc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000c02cd <link_const_data_end>:
   c02cd:	00          	.byte	0x00
	...

000c02d0 <link_constructors_location>:
   c02d0:	000b452d 	.word	0x000b452d
   c02d4:	000b5981 	.word	0x000b5981
   c02d8:	000b59f9 	.word	0x000b59f9
   c02dc:	000b5fc1 	.word	0x000b5fc1
   c02e0:	000b61d9 	.word	0x000b61d9
   c02e4:	000b6339 	.word	0x000b6339
   c02e8:	000b6475 	.word	0x000b6475
   c02ec:	000b67b1 	.word	0x000b67b1
   c02f0:	000b67d5 	.word	0x000b67d5
