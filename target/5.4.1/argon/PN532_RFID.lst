
/Users/friedl/Desktop/Projects/PN532_RFID/target/5.4.1/argon/PN532_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004f74  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8f90  000b8f90  00008f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000007c  2003ba58  000b8fb4  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00002d1c  2003bad4  2003bad4  0001bad4  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9030  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9034  000b9034  00019034  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b903a  000b903a  0001903a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b905e  000b905e  0001905e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00140c3d  00000000  00000000  00019062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001602c  00000000  00000000  00159c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003febc  00000000  00000000  0016fccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002f88  00000000  00000000  001afb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000aba8  00000000  00000000  001b2b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ff80  00000000  00000000  001bd6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004da05  00000000  00000000  001fd637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013ba6d  00000000  00000000  0024b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008870  00000000  00000000  00386aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f809 	bl	b6054 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f002 f811 	bl	b6070 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003ba58 	.word	0x2003ba58
   b4058:	000b8fb4 	.word	0x000b8fb4
   b405c:	2003bad4 	.word	0x2003bad4
   b4060:	2003bad4 	.word	0x2003bad4
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 febd 	bl	b5dec <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b8f6c 	.word	0x000b8f6c
   b408c:	000b8f90 	.word	0x000b8f90

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b813 	b.w	b40ba <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f96d 	bl	b4374 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 be5d 	b.w	b5d5c <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f001 b8d1 	b.w	b5248 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f001 b8d7 	b.w	b5258 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr

000b40ba <setup>:
/////--  MAX17201 Fuel Gauge declarations --/////
char msgFG[64];
max1720x gauge;


void setup() {
   b40ba:	b508      	push	{r3, lr}

Serial.begin(115200);
   b40bc:	f001 fdc8 	bl	b5c50 <_Z16_fetch_usbserialv>
   b40c0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40c4:	f001 fdb8 	bl	b5c38 <_ZN9USBSerial5beginEl>
// Serial.println();
// Serial.println("Waiting for a card......");  

//I2C_Scanner();

}
   b40c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
delay(2000);                                      // Waits for the initial measurements to be made
   b40cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b40d0:	f001 b8ea 	b.w	b52a8 <delay>

000b40d4 <_Z3EPDv>:


//////////////////// E-PAPER START //////////////////////


void EPD() {
   b40d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

if (epd.Init() != 0) { 
   b40d8:	488f      	ldr	r0, [pc, #572]	; (b4318 <_Z3EPDv+0x244>)
void EPD() {
   b40da:	b094      	sub	sp, #80	; 0x50
if (epd.Init() != 0) { 
   b40dc:	f000 fb5d 	bl	b479a <_ZN3Epd4InitEv>
   b40e0:	4604      	mov	r4, r0
   b40e2:	b138      	cbz	r0, b40f4 <_Z3EPDv+0x20>
  Serial.print("e-Paper init failed");
   b40e4:	f001 fdb4 	bl	b5c50 <_Z16_fetch_usbserialv>
   b40e8:	498c      	ldr	r1, [pc, #560]	; (b431c <_Z3EPDv+0x248>)
  epd.display_part(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());  // (Y, X)
  epd.refresh();
  delay(25);
  epd.sleep();

}
   b40ea:	b014      	add	sp, #80	; 0x50
   b40ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Serial.print("e-Paper init failed");
   b40f0:	f001 bb08 	b.w	b5704 <_ZN5Print5printEPKc>
  VAR1 = "Lunch Room";
   b40f4:	498a      	ldr	r1, [pc, #552]	; (b4320 <_Z3EPDv+0x24c>)
   b40f6:	488b      	ldr	r0, [pc, #556]	; (b4324 <_Z3EPDv+0x250>)
  VAR5 = "Elon";
   b40f8:	f8df 9270 	ldr.w	r9, [pc, #624]	; b436c <_Z3EPDv+0x298>
  VAR6 = "Musk";
   b40fc:	f8df 8270 	ldr.w	r8, [pc, #624]	; b4370 <_Z3EPDv+0x29c>
  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
   b4100:	4f89      	ldr	r7, [pc, #548]	; (b4328 <_Z3EPDv+0x254>)
  paint.DrawStringAt(100, 5, String(VAR1), &Font24, COLORED);
   b4102:	4d8a      	ldr	r5, [pc, #552]	; (b432c <_Z3EPDv+0x258>)
  VAR1 = "Lunch Room";
   b4104:	f001 fc8d 	bl	b5a22 <_ZN6StringaSEPKc>
  VAR2 = "What's for luch";
   b4108:	4989      	ldr	r1, [pc, #548]	; (b4330 <_Z3EPDv+0x25c>)
   b410a:	488a      	ldr	r0, [pc, #552]	; (b4334 <_Z3EPDv+0x260>)
   b410c:	f001 fc89 	bl	b5a22 <_ZN6StringaSEPKc>
  VAR3 = "10:00";
   b4110:	4989      	ldr	r1, [pc, #548]	; (b4338 <_Z3EPDv+0x264>)
   b4112:	488a      	ldr	r0, [pc, #552]	; (b433c <_Z3EPDv+0x268>)
   b4114:	f001 fc85 	bl	b5a22 <_ZN6StringaSEPKc>
  VAR4 = "12:00";
   b4118:	4989      	ldr	r1, [pc, #548]	; (b4340 <_Z3EPDv+0x26c>)
   b411a:	488a      	ldr	r0, [pc, #552]	; (b4344 <_Z3EPDv+0x270>)
   b411c:	f001 fc81 	bl	b5a22 <_ZN6StringaSEPKc>
  VAR5 = "Elon";
   b4120:	4989      	ldr	r1, [pc, #548]	; (b4348 <_Z3EPDv+0x274>)
   b4122:	4648      	mov	r0, r9
   b4124:	f001 fc7d 	bl	b5a22 <_ZN6StringaSEPKc>
  VAR6 = "Musk";
   b4128:	4988      	ldr	r1, [pc, #544]	; (b434c <_Z3EPDv+0x278>)
   b412a:	4640      	mov	r0, r8
   b412c:	f001 fc79 	bl	b5a22 <_ZN6StringaSEPKc>
  epd.display_NUM(EPD_3IN52_WHITE);
   b4130:	21ff      	movs	r1, #255	; 0xff
   b4132:	4879      	ldr	r0, [pc, #484]	; (b4318 <_Z3EPDv+0x244>)
   b4134:	f000 fc74 	bl	b4a20 <_ZN3Epd11display_NUMEh>
  epd.lut_GC();
   b4138:	4877      	ldr	r0, [pc, #476]	; (b4318 <_Z3EPDv+0x244>)
   b413a:	f000 fbbb 	bl	b48b4 <_ZN3Epd6lut_GCEv>
  epd.Clear();
   b413e:	4876      	ldr	r0, [pc, #472]	; (b4318 <_Z3EPDv+0x244>)
   b4140:	f000 fcdd 	bl	b4afe <_ZN3Epd5ClearEv>
  epd.refresh();
   b4144:	4874      	ldr	r0, [pc, #464]	; (b4318 <_Z3EPDv+0x244>)
   b4146:	f000 fba4 	bl	b4892 <_ZN3Epd7refreshEv>
  delay(500);
   b414a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b414e:	f001 f8ab 	bl	b52a8 <delay>
  epd.SendCommand(0x50);
   b4152:	4871      	ldr	r0, [pc, #452]	; (b4318 <_Z3EPDv+0x244>)
   b4154:	2150      	movs	r1, #80	; 0x50
   b4156:	f000 fad4 	bl	b4702 <_ZN3Epd11SendCommandEh>
  epd.SendData(0x17);
   b415a:	486f      	ldr	r0, [pc, #444]	; (b4318 <_Z3EPDv+0x244>)
   b415c:	2117      	movs	r1, #23
   b415e:	f000 fadb 	bl	b4718 <_ZN3Epd8SendDataEh>
  Paint paint(image, 240, 360);     // width should be the multiple of 8   
   b4162:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b4166:	22f0      	movs	r2, #240	; 0xf0
   b4168:	4979      	ldr	r1, [pc, #484]	; (b4350 <_Z3EPDv+0x27c>)
   b416a:	a804      	add	r0, sp, #16
   b416c:	f000 fd4f 	bl	b4c0e <_ZN5PaintC1EPhii>
  paint.SetRotate(3);               // Top right (0,0)
   b4170:	a804      	add	r0, sp, #16
   b4172:	2103      	movs	r1, #3
   b4174:	f000 fd97 	bl	b4ca6 <_ZN5Paint9SetRotateEi>
  paint.Clear(UNCOLORED);
   b4178:	a804      	add	r0, sp, #16
   b417a:	2101      	movs	r1, #1
   b417c:	f000 fd78 	bl	b4c70 <_ZN5Paint5ClearEi>
  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
   b4180:	2205      	movs	r2, #5
   b4182:	4611      	mov	r1, r2
   b4184:	4b73      	ldr	r3, [pc, #460]	; (b4354 <_Z3EPDv+0x280>)
   b4186:	9401      	str	r4, [sp, #4]
   b4188:	a804      	add	r0, sp, #16
   b418a:	9700      	str	r7, [sp, #0]
   b418c:	f000 fe0a 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 5, String(VAR1), &Font24, COLORED);
   b4190:	4964      	ldr	r1, [pc, #400]	; (b4324 <_Z3EPDv+0x250>)
   b4192:	a810      	add	r0, sp, #64	; 0x40
   b4194:	f001 fc3a 	bl	b5a0c <_ZN6StringC1ERKS_>
   b4198:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b419a:	9500      	str	r5, [sp, #0]
   b419c:	2205      	movs	r2, #5
   b419e:	2164      	movs	r1, #100	; 0x64
   b41a0:	a804      	add	r0, sp, #16
   b41a2:	9401      	str	r4, [sp, #4]
   b41a4:	f000 fdfe 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b41a8:	a810      	add	r0, sp, #64	; 0x40
   b41aa:	f001 fbc1 	bl	b5930 <_ZN6StringD1Ev>
  paint.DrawStringAt(5, 35, "TITLE: ", &Font20, COLORED);
   b41ae:	4b6a      	ldr	r3, [pc, #424]	; (b4358 <_Z3EPDv+0x284>)
   b41b0:	2223      	movs	r2, #35	; 0x23
   b41b2:	a804      	add	r0, sp, #16
   b41b4:	e9cd 7400 	strd	r7, r4, [sp]
   b41b8:	2105      	movs	r1, #5
   b41ba:	f000 fdf3 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 35, String(VAR2), &Font24, COLORED);
   b41be:	495d      	ldr	r1, [pc, #372]	; (b4334 <_Z3EPDv+0x260>)
   b41c0:	a810      	add	r0, sp, #64	; 0x40
   b41c2:	f001 fc23 	bl	b5a0c <_ZN6StringC1ERKS_>
   b41c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b41c8:	e9cd 5400 	strd	r5, r4, [sp]
   b41cc:	2223      	movs	r2, #35	; 0x23
   b41ce:	2164      	movs	r1, #100	; 0x64
   b41d0:	a804      	add	r0, sp, #16
   b41d2:	f000 fde7 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b41d6:	a810      	add	r0, sp, #64	; 0x40
   b41d8:	f001 fbaa 	bl	b5930 <_ZN6StringD1Ev>
  paint.DrawStringAt(5, 65, "TIME: ", &Font20, COLORED);
   b41dc:	4b5f      	ldr	r3, [pc, #380]	; (b435c <_Z3EPDv+0x288>)
   b41de:	2241      	movs	r2, #65	; 0x41
   b41e0:	a804      	add	r0, sp, #16
   b41e2:	e9cd 7400 	strd	r7, r4, [sp]
   b41e6:	2105      	movs	r1, #5
   b41e8:	f000 fddc 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 65, String(VAR3) + " - " + String(VAR4), &Font24, COLORED);
   b41ec:	4953      	ldr	r1, [pc, #332]	; (b433c <_Z3EPDv+0x268>)
   b41ee:	a80c      	add	r0, sp, #48	; 0x30
   b41f0:	f001 fc0c 	bl	b5a0c <_ZN6StringC1ERKS_>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b41f4:	a90c      	add	r1, sp, #48	; 0x30
   b41f6:	a808      	add	r0, sp, #32
   b41f8:	f001 fc08 	bl	b5a0c <_ZN6StringC1ERKS_>
   b41fc:	4958      	ldr	r1, [pc, #352]	; (b4360 <_Z3EPDv+0x28c>)
   b41fe:	a808      	add	r0, sp, #32
   b4200:	f001 fc44 	bl	b5a8c <_ZplRK15StringSumHelperPKc>
   b4204:	494f      	ldr	r1, [pc, #316]	; (b4344 <_Z3EPDv+0x270>)
   b4206:	4606      	mov	r6, r0
   b4208:	a810      	add	r0, sp, #64	; 0x40
   b420a:	f001 fbff 	bl	b5a0c <_ZN6StringC1ERKS_>
   b420e:	a910      	add	r1, sp, #64	; 0x40
   b4210:	4630      	mov	r0, r6
   b4212:	f001 fc2f 	bl	b5a74 <_ZplRK15StringSumHelperRK6String>
   b4216:	e9cd 5400 	strd	r5, r4, [sp]
   b421a:	2241      	movs	r2, #65	; 0x41
   b421c:	6803      	ldr	r3, [r0, #0]
   b421e:	2164      	movs	r1, #100	; 0x64
   b4220:	a804      	add	r0, sp, #16
   b4222:	f000 fdbf 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4226:	a810      	add	r0, sp, #64	; 0x40
   b4228:	f001 fb82 	bl	b5930 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b422c:	a808      	add	r0, sp, #32
   b422e:	f001 fb7f 	bl	b5930 <_ZN6StringD1Ev>
   b4232:	a80c      	add	r0, sp, #48	; 0x30
   b4234:	f001 fb7c 	bl	b5930 <_ZN6StringD1Ev>
  paint.DrawHorizontalLine(0,136,360,COLORED);
   b4238:	4621      	mov	r1, r4
   b423a:	a804      	add	r0, sp, #16
   b423c:	9400      	str	r4, [sp, #0]
   b423e:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b4242:	2288      	movs	r2, #136	; 0x88
   b4244:	f000 fdc6 	bl	b4dd4 <_ZN5Paint18DrawHorizontalLineEiiii>
  paint.DrawFilledRectangle(0,145,170,240, COLORED);
   b4248:	f04f 0af0 	mov.w	sl, #240	; 0xf0
  paint.DrawVerticalLine(180,136,104,COLORED);
   b424c:	a804      	add	r0, sp, #16
   b424e:	9400      	str	r4, [sp, #0]
   b4250:	2368      	movs	r3, #104	; 0x68
   b4252:	2288      	movs	r2, #136	; 0x88
   b4254:	21b4      	movs	r1, #180	; 0xb4
   b4256:	f000 fdcd 	bl	b4df4 <_ZN5Paint16DrawVerticalLineEiiii>
  paint.DrawStringAt(5, 155, "SPEAKER: ", &Font20, UNCOLORED);
   b425a:	2601      	movs	r6, #1
  paint.DrawFilledRectangle(0,145,170,240, COLORED);
   b425c:	4621      	mov	r1, r4
   b425e:	a804      	add	r0, sp, #16
   b4260:	9401      	str	r4, [sp, #4]
   b4262:	f8cd a000 	str.w	sl, [sp]
   b4266:	23aa      	movs	r3, #170	; 0xaa
   b4268:	2291      	movs	r2, #145	; 0x91
   b426a:	f000 fdd3 	bl	b4e14 <_ZN5Paint19DrawFilledRectangleEiiiii>
  paint.DrawStringAt(5, 155, "SPEAKER: ", &Font20, UNCOLORED);
   b426e:	a804      	add	r0, sp, #16
   b4270:	e9cd 7600 	strd	r7, r6, [sp]
   b4274:	4b3b      	ldr	r3, [pc, #236]	; (b4364 <_Z3EPDv+0x290>)
   b4276:	229b      	movs	r2, #155	; 0x9b
   b4278:	2105      	movs	r1, #5
   b427a:	f000 fd93 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(5, 185, (VAR5), &Font24, UNCOLORED);
   b427e:	e9cd 5600 	strd	r5, r6, [sp]
   b4282:	f8d9 3000 	ldr.w	r3, [r9]
   b4286:	a804      	add	r0, sp, #16
   b4288:	22b9      	movs	r2, #185	; 0xb9
   b428a:	2105      	movs	r1, #5
   b428c:	f000 fd8a 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(5, 215, (VAR6), &Font24, UNCOLORED);
   b4290:	e9cd 5600 	strd	r5, r6, [sp]
   b4294:	f8d8 3000 	ldr.w	r3, [r8]
   b4298:	a804      	add	r0, sp, #16
   b429a:	22d7      	movs	r2, #215	; 0xd7
   b429c:	2105      	movs	r1, #5
   b429e:	f000 fd81 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawFilledRectangle(190,145,360,240, COLORED);   
   b42a2:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b42a6:	2291      	movs	r2, #145	; 0x91
   b42a8:	a804      	add	r0, sp, #16
   b42aa:	e9cd a400 	strd	sl, r4, [sp]
   b42ae:	21be      	movs	r1, #190	; 0xbe
   b42b0:	f000 fdb0 	bl	b4e14 <_ZN5Paint19DrawFilledRectangleEiiiii>
  paint.DrawStringAt(200, 180, String(SCAN), &Font24, UNCOLORED);      //This should be printed from the scan function 
   b42b4:	492c      	ldr	r1, [pc, #176]	; (b4368 <_Z3EPDv+0x294>)
   b42b6:	a810      	add	r0, sp, #64	; 0x40
   b42b8:	f001 fba8 	bl	b5a0c <_ZN6StringC1ERKS_>
   b42bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b42be:	22b4      	movs	r2, #180	; 0xb4
   b42c0:	21c8      	movs	r1, #200	; 0xc8
   b42c2:	e9cd 5600 	strd	r5, r6, [sp]
   b42c6:	a804      	add	r0, sp, #16
   b42c8:	f000 fd6c 	bl	b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b42cc:	a810      	add	r0, sp, #64	; 0x40
   b42ce:	f001 fb2f 	bl	b5930 <_ZN6StringD1Ev>
  epd.display_part(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());  // (Y, X)
   b42d2:	a804      	add	r0, sp, #16
   b42d4:	f000 fce1 	bl	b4c9a <_ZN5Paint8GetImageEv>
   b42d8:	9003      	str	r0, [sp, #12]
   b42da:	a804      	add	r0, sp, #16
   b42dc:	f000 fcdf 	bl	b4c9e <_ZN5Paint8GetWidthEv>
   b42e0:	4605      	mov	r5, r0
   b42e2:	a804      	add	r0, sp, #16
   b42e4:	f000 fcdd 	bl	b4ca2 <_ZN5Paint9GetHeightEv>
   b42e8:	9903      	ldr	r1, [sp, #12]
   b42ea:	4623      	mov	r3, r4
   b42ec:	4622      	mov	r2, r4
   b42ee:	e9cd 5000 	strd	r5, r0, [sp]
   b42f2:	4809      	ldr	r0, [pc, #36]	; (b4318 <_Z3EPDv+0x244>)
   b42f4:	f000 fb58 	bl	b49a8 <_ZN3Epd12display_partEPhjjjj>
  epd.refresh();
   b42f8:	4807      	ldr	r0, [pc, #28]	; (b4318 <_Z3EPDv+0x244>)
   b42fa:	f000 faca 	bl	b4892 <_ZN3Epd7refreshEv>
  delay(25);
   b42fe:	2019      	movs	r0, #25
   b4300:	f000 ffd2 	bl	b52a8 <delay>
  epd.sleep();
   b4304:	4804      	ldr	r0, [pc, #16]	; (b4318 <_Z3EPDv+0x244>)
   b4306:	f000 fc14 	bl	b4b32 <_ZN3Epd5sleepEv>
  Paint paint(image, 240, 360);     // width should be the multiple of 8   
   b430a:	a804      	add	r0, sp, #16
   b430c:	f000 fc92 	bl	b4c34 <_ZN5PaintD1Ev>
}
   b4310:	b014      	add	sp, #80	; 0x50
   b4312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4316:	bf00      	nop
   b4318:	2003bb54 	.word	0x2003bb54
   b431c:	000b61f4 	.word	0x000b61f4
   b4320:	000b6208 	.word	0x000b6208
   b4324:	2003baf0 	.word	0x2003baf0
   b4328:	2003ba58 	.word	0x2003ba58
   b432c:	2003ba60 	.word	0x2003ba60
   b4330:	000b6213 	.word	0x000b6213
   b4334:	2003bb00 	.word	0x2003bb00
   b4338:	000b6223 	.word	0x000b6223
   b433c:	2003bb10 	.word	0x2003bb10
   b4340:	000b6229 	.word	0x000b6229
   b4344:	2003bb20 	.word	0x2003bb20
   b4348:	000b622f 	.word	0x000b622f
   b434c:	000b6234 	.word	0x000b6234
   b4350:	2003bb71 	.word	0x2003bb71
   b4354:	000b6239 	.word	0x000b6239
   b4358:	000b6240 	.word	0x000b6240
   b435c:	000b6248 	.word	0x000b6248
   b4360:	000b624f 	.word	0x000b624f
   b4364:	000b6253 	.word	0x000b6253
   b4368:	2003bad4 	.word	0x2003bad4
   b436c:	2003bb30 	.word	0x2003bb30
   b4370:	2003bb40 	.word	0x2003bb40

000b4374 <loop>:
void loop() {

  //I2C_Scanner();
  //Fuel_Gauge();
  //RFID();
  EPD();
   b4374:	f7ff beae 	b.w	b40d4 <_Z3EPDv>

000b4378 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4378:	4b1c      	ldr	r3, [pc, #112]	; (b43ec <_GLOBAL__sub_I_SystemMode+0x74>)

  //delay(5000);
  
}
   b437a:	b510      	push	{r4, lr}
   b437c:	2400      	movs	r4, #0
   b437e:	701c      	strb	r4, [r3, #0]
   b4380:	4b1b      	ldr	r3, [pc, #108]	; (b43f0 <_GLOBAL__sub_I_SystemMode+0x78>)
   b4382:	2201      	movs	r2, #1
   b4384:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4386:	4b1b      	ldr	r3, [pc, #108]	; (b43f4 <_GLOBAL__sub_I_SystemMode+0x7c>)
    SleepResult() {}
   b4388:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
              error_(SYSTEM_ERROR_NONE) {
   b438c:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4390:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4392:	2002      	movs	r0, #2
   b4394:	f000 fecc 	bl	b5130 <set_system_mode>
Epd epd;
   b4398:	4817      	ldr	r0, [pc, #92]	; (b43f8 <_GLOBAL__sub_I_SystemMode+0x80>)
   b439a:	f000 f99d 	bl	b46d8 <_ZN3EpdC1Ev>
String VAR1;
   b439e:	4917      	ldr	r1, [pc, #92]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43a0:	4817      	ldr	r0, [pc, #92]	; (b4400 <_GLOBAL__sub_I_SystemMode+0x88>)
   b43a2:	f001 fb10 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR2;
   b43a6:	4915      	ldr	r1, [pc, #84]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43a8:	4816      	ldr	r0, [pc, #88]	; (b4404 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b43aa:	f001 fb0c 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR3;
   b43ae:	4913      	ldr	r1, [pc, #76]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43b0:	4815      	ldr	r0, [pc, #84]	; (b4408 <_GLOBAL__sub_I_SystemMode+0x90>)
   b43b2:	f001 fb08 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR4;
   b43b6:	4911      	ldr	r1, [pc, #68]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43b8:	4814      	ldr	r0, [pc, #80]	; (b440c <_GLOBAL__sub_I_SystemMode+0x94>)
   b43ba:	f001 fb04 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR5;
   b43be:	490f      	ldr	r1, [pc, #60]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43c0:	4813      	ldr	r0, [pc, #76]	; (b4410 <_GLOBAL__sub_I_SystemMode+0x98>)
   b43c2:	f001 fb00 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
String VAR6;
   b43c6:	490d      	ldr	r1, [pc, #52]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43c8:	4812      	ldr	r0, [pc, #72]	; (b4414 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b43ca:	f001 fafc 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
String SCAN;
   b43ce:	490b      	ldr	r1, [pc, #44]	; (b43fc <_GLOBAL__sub_I_SystemMode+0x84>)
   b43d0:	4811      	ldr	r0, [pc, #68]	; (b4418 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b43d2:	f001 faf8 	bl	b59c6 <_ZN6StringC1EPK19__FlashStringHelper>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b43d6:	4622      	mov	r2, r4
   b43d8:	4810      	ldr	r0, [pc, #64]	; (b441c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b43da:	2102      	movs	r1, #2
   b43dc:	f000 f8b8 	bl	b4550 <_ZN17DFRobot_PN532_IICC1Ehh>
}
   b43e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
max1720x gauge;
   b43e4:	480e      	ldr	r0, [pc, #56]	; (b4420 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b43e6:	f000 bd3b 	b.w	b4e60 <_ZN8max1720xC1Ev>
   b43ea:	bf00      	nop
   b43ec:	2003bb50 	.word	0x2003bb50
   b43f0:	2003bb51 	.word	0x2003bb51
   b43f4:	2003bae4 	.word	0x2003bae4
   b43f8:	2003bb54 	.word	0x2003bb54
   b43fc:	000b62f1 	.word	0x000b62f1
   b4400:	2003baf0 	.word	0x2003baf0
   b4404:	2003bb00 	.word	0x2003bb00
   b4408:	2003bb10 	.word	0x2003bb10
   b440c:	2003bb20 	.word	0x2003bb20
   b4410:	2003bb30 	.word	0x2003bb30
   b4414:	2003bb40 	.word	0x2003bb40
   b4418:	2003bad4 	.word	0x2003bad4
   b441c:	2003e66c 	.word	0x2003e66c
   b4420:	2003bb70 	.word	0x2003bb70

000b4424 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4424:	4770      	bx	lr

000b4426 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4426:	b510      	push	{r4, lr}
  }
   b4428:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b442a:	4604      	mov	r4, r0
  }
   b442c:	f7ff fe3b 	bl	b40a6 <_ZdlPvj>
   b4430:	4620      	mov	r0, r4
   b4432:	bd10      	pop	{r4, pc}

000b4434 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4434:	b40e      	push	{r1, r2, r3}
   b4436:	b503      	push	{r0, r1, lr}
   b4438:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b443a:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b443c:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4440:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4442:	f001 f990 	bl	b5766 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4446:	b002      	add	sp, #8
   b4448:	f85d eb04 	ldr.w	lr, [sp], #4
   b444c:	b003      	add	sp, #12
   b444e:	4770      	bx	lr

000b4450 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4450:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4452:	4604      	mov	r4, r0
   b4454:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4456:	7922      	ldrb	r2, [r4, #4]
   b4458:	68a3      	ldr	r3, [r4, #8]
   b445a:	b132      	cbz	r2, b446a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b445c:	b9a3      	cbnz	r3, b4488 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b445e:	490b      	ldr	r1, [pc, #44]	; (b448c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4460:	b002      	add	sp, #8
   b4462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4466:	f001 b94d 	b.w	b5704 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b446a:	4a09      	ldr	r2, [pc, #36]	; (b4490 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b446c:	7b26      	ldrb	r6, [r4, #12]
   b446e:	4d09      	ldr	r5, [pc, #36]	; (b4494 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4470:	4909      	ldr	r1, [pc, #36]	; (b4498 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4472:	7b64      	ldrb	r4, [r4, #13]
   b4474:	2e01      	cmp	r6, #1
   b4476:	bf18      	it	ne
   b4478:	4629      	movne	r1, r5
   b447a:	e9cd 1400 	strd	r1, r4, [sp]
   b447e:	4907      	ldr	r1, [pc, #28]	; (b449c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4480:	f7ff ffd8 	bl	b4434 <_ZN5Print6printfEPKcz>
  }
   b4484:	b002      	add	sp, #8
   b4486:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4488:	4a05      	ldr	r2, [pc, #20]	; (b44a0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b448a:	e7ef      	b.n	b446c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b448c:	000b626e 	.word	0x000b626e
   b4490:	000b62f1 	.word	0x000b62f1
   b4494:	000b626a 	.word	0x000b626a
   b4498:	000b6266 	.word	0x000b6266
   b449c:	000b6284 	.word	0x000b6284
   b44a0:	000b625d 	.word	0x000b625d

000b44a4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b44a4:	6803      	ldr	r3, [r0, #0]
   b44a6:	b2c9      	uxtb	r1, r1
   b44a8:	689b      	ldr	r3, [r3, #8]
   b44aa:	4718      	bx	r3

000b44ac <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b44ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b44b0:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b44b2:	2002      	movs	r0, #2
    cmdlen++;
   b44b4:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b44b6:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b44b8:	f000 fef6 	bl	b52a8 <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b44bc:	f001 fd5e 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44c0:	2124      	movs	r1, #36	; 0x24
   b44c2:	f000 ffbb 	bl	b543c <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b44c6:	f001 fd59 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44ca:	2100      	movs	r1, #0
   b44cc:	f7ff ffea 	bl	b44a4 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b44d0:	f001 fd54 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44d4:	2100      	movs	r1, #0
   b44d6:	f7ff ffe5 	bl	b44a4 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b44da:	f001 fd4f 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44de:	21ff      	movs	r1, #255	; 0xff
   b44e0:	f7ff ffe0 	bl	b44a4 <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b44e4:	f001 fd4a 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44e8:	6803      	ldr	r3, [r0, #0]
   b44ea:	4629      	mov	r1, r5
   b44ec:	689b      	ldr	r3, [r3, #8]
   b44ee:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b44f0:	f001 fd44 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44f4:	4269      	negs	r1, r5
   b44f6:	f7ff ffd5 	bl	b44a4 <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b44fa:	f001 fd3f 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b44fe:	21d4      	movs	r1, #212	; 0xd4
   b4500:	f7ff ffd0 	bl	b44a4 <_ZN7TwoWire5writeEi>
   b4504:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b4506:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b4508:	3d01      	subs	r5, #1
   b450a:	f104 0801 	add.w	r8, r4, #1
   b450e:	b2e4      	uxtb	r4, r4
   b4510:	42ac      	cmp	r4, r5
   b4512:	da0a      	bge.n	b452a <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b4514:	f001 fd32 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4518:	6803      	ldr	r3, [r0, #0]
   b451a:	5d39      	ldrb	r1, [r7, r4]
   b451c:	689b      	ldr	r3, [r3, #8]
   b451e:	4798      	blx	r3
      checksum += cmd[i];
   b4520:	5d39      	ldrb	r1, [r7, r4]
   b4522:	440e      	add	r6, r1
   b4524:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b4526:	4644      	mov	r4, r8
   b4528:	e7ef      	b.n	b450a <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b452a:	f001 fd27 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b452e:	6803      	ldr	r3, [r0, #0]
   b4530:	43f1      	mvns	r1, r6
   b4532:	689b      	ldr	r3, [r3, #8]
   b4534:	b2c9      	uxtb	r1, r1
   b4536:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b4538:	f001 fd20 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b453c:	6803      	ldr	r3, [r0, #0]
   b453e:	2100      	movs	r1, #0
   b4540:	689b      	ldr	r3, [r3, #8]
   b4542:	4798      	blx	r3
    Wire.endTransmission();
   b4544:	f001 fd1a 	bl	b5f7c <_Z19__fetch_global_Wirev>
}
   b4548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b454c:	f000 bf7d 	b.w	b544a <_ZN7TwoWire15endTransmissionEv>

000b4550 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b4550:	b538      	push	{r3, r4, r5, lr}
   b4552:	4604      	mov	r4, r0
   b4554:	4b06      	ldr	r3, [pc, #24]	; (b4570 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b4556:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b455a:	4608      	mov	r0, r1
   b455c:	4615      	mov	r5, r2
   b455e:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b4560:	2100      	movs	r1, #0
   b4562:	f001 fcb3 	bl	b5ecc <pinMode>
    _mode = mode;
   b4566:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b456a:	4620      	mov	r0, r4
   b456c:	bd38      	pop	{r3, r4, r5, pc}
   b456e:	bf00      	nop
   b4570:	000b62c0 	.word	0x000b62c0

000b4574 <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b4574:	b538      	push	{r3, r4, r5, lr}
   b4576:	4605      	mov	r5, r0
   b4578:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b457a:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b457e:	f001 fccf 	bl	b5f20 <digitalRead>
   b4582:	b130      	cbz	r0, b4592 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b4584:	3c01      	subs	r4, #1
   b4586:	b2a4      	uxth	r4, r4
   b4588:	b12c      	cbz	r4, b4596 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b458a:	200a      	movs	r0, #10
   b458c:	f000 fe8c 	bl	b52a8 <delay>
    while(digitalRead(_irq)!=0){
   b4590:	e7f3      	b.n	b457a <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b4592:	2001      	movs	r0, #1
}
   b4594:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b4596:	4620      	mov	r0, r4
   b4598:	e7fc      	b.n	b4594 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b459a <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b459a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b459c:	2300      	movs	r3, #0
   b459e:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b45a2:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b45a6:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b45aa:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b45ae:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b45b2:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b45b4:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b45b6:	4604      	mov	r4, r0
   b45b8:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b45ba:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b45be:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b45c2:	d141      	bne.n	b4648 <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b45c4:	f7ff ffd6 	bl	b4574 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b45c8:	b910      	cbnz	r0, b45d0 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b45ca:	2000      	movs	r0, #0
}
   b45cc:	b003      	add	sp, #12
   b45ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b45d0:	f001 fcd4 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b45d4:	2208      	movs	r2, #8
   b45d6:	2124      	movs	r1, #36	; 0x24
   b45d8:	f000 ff29 	bl	b542e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b45dc:	f001 fcce 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b45e0:	6803      	ldr	r3, [r0, #0]
   b45e2:	695b      	ldr	r3, [r3, #20]
   b45e4:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b45e6:	1d26      	adds	r6, r4, #4
   b45e8:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b45ec:	2001      	movs	r0, #1
   b45ee:	f000 fe5b 	bl	b52a8 <delay>
        receiveACK[i]= Wire.read();
   b45f2:	f001 fcc3 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b45f6:	6803      	ldr	r3, [r0, #0]
   b45f8:	695b      	ldr	r3, [r3, #20]
   b45fa:	4798      	blx	r3
   b45fc:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b4600:	42be      	cmp	r6, r7
   b4602:	d1f3      	bne.n	b45ec <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b4604:	4620      	mov	r0, r4
   b4606:	f7ff ffb5 	bl	b4574 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b460a:	2800      	cmp	r0, #0
   b460c:	d0dd      	beq.n	b45ca <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b460e:	f001 fcb5 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4612:	1f2a      	subs	r2, r5, #4
   b4614:	2124      	movs	r1, #36	; 0x24
   b4616:	f000 ff0a 	bl	b542e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b461a:	f001 fcaf 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b461e:	6803      	ldr	r3, [r0, #0]
   b4620:	695b      	ldr	r3, [r3, #20]
   b4622:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b4624:	f06f 0709 	mvn.w	r7, #9
   b4628:	3d06      	subs	r5, #6
   b462a:	1b3f      	subs	r7, r7, r4
   b462c:	19bb      	adds	r3, r7, r6
   b462e:	429d      	cmp	r5, r3
   b4630:	dd49      	ble.n	b46c6 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b4632:	2001      	movs	r0, #1
   b4634:	f000 fe38 	bl	b52a8 <delay>
        receiveACK[6 + i] = Wire.read();
   b4638:	f001 fca0 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b463c:	6803      	ldr	r3, [r0, #0]
   b463e:	695b      	ldr	r3, [r3, #20]
   b4640:	4798      	blx	r3
   b4642:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b4646:	e7f1      	b.n	b462c <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b4648:	2b00      	cmp	r3, #0
   b464a:	d13c      	bne.n	b46c6 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b464c:	201e      	movs	r0, #30
   b464e:	f000 fe2b 	bl	b52a8 <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b4652:	f001 fc93 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4656:	2208      	movs	r2, #8
   b4658:	2124      	movs	r1, #36	; 0x24
   b465a:	f000 fee8 	bl	b542e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b465e:	f001 fc8d 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4662:	6803      	ldr	r3, [r0, #0]
   b4664:	695b      	ldr	r3, [r3, #20]
   b4666:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b4668:	1d26      	adds	r6, r4, #4
   b466a:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b466e:	2001      	movs	r0, #1
   b4670:	f000 fe1a 	bl	b52a8 <delay>
        receiveACK[i]= Wire.read();
   b4674:	f001 fc82 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4678:	6803      	ldr	r3, [r0, #0]
   b467a:	695b      	ldr	r3, [r3, #20]
   b467c:	4798      	blx	r3
   b467e:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b4682:	42be      	cmp	r6, r7
   b4684:	d1f3      	bne.n	b466e <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b4686:	201e      	movs	r0, #30
   b4688:	f000 fe0e 	bl	b52a8 <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b468c:	f001 fc76 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4690:	1f2a      	subs	r2, r5, #4
   b4692:	2124      	movs	r1, #36	; 0x24
   b4694:	f000 fecb 	bl	b542e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4698:	f001 fc70 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b469c:	6803      	ldr	r3, [r0, #0]
   b469e:	695b      	ldr	r3, [r3, #20]
   b46a0:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b46a2:	f06f 0709 	mvn.w	r7, #9
   b46a6:	3d06      	subs	r5, #6
   b46a8:	1b3f      	subs	r7, r7, r4
   b46aa:	19bb      	adds	r3, r7, r6
   b46ac:	429d      	cmp	r5, r3
   b46ae:	dd0a      	ble.n	b46c6 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b46b0:	2001      	movs	r0, #1
   b46b2:	f000 fdf9 	bl	b52a8 <delay>
        receiveACK[6 + i] = Wire.read();
   b46b6:	f001 fc61 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b46ba:	6803      	ldr	r3, [r0, #0]
   b46bc:	695b      	ldr	r3, [r3, #20]
   b46be:	4798      	blx	r3
   b46c0:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b46c4:	e7f1      	b.n	b46aa <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b46c6:	2206      	movs	r2, #6
   b46c8:	1d21      	adds	r1, r4, #4
   b46ca:	4668      	mov	r0, sp
   b46cc:	f001 fd0e 	bl	b60ec <strncmp>
   b46d0:	fab0 f080 	clz	r0, r0
   b46d4:	0940      	lsrs	r0, r0, #5
   b46d6:	e779      	b.n	b45cc <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b46d8 <_ZN3EpdC1Ev>:
};

Epd::~Epd() {
};

Epd::Epd() {
   b46d8:	b510      	push	{r4, lr}
   b46da:	4604      	mov	r4, r0
   b46dc:	f000 fa34 	bl	b4b48 <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b46e0:	2208      	movs	r2, #8
   b46e2:	2306      	movs	r3, #6
   b46e4:	e9c4 2300 	strd	r2, r3, [r4]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b46e8:	210b      	movs	r1, #11
   b46ea:	2307      	movs	r3, #7
   b46ec:	e9c4 1302 	strd	r1, r3, [r4, #8]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b46f0:	20f0      	movs	r0, #240	; 0xf0
   b46f2:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b46f6:	e9c4 0304 	strd	r0, r3, [r4, #16]
    EPD_3IN52_Flag = 0;
   b46fa:	2300      	movs	r3, #0
   b46fc:	7623      	strb	r3, [r4, #24]
};
   b46fe:	4620      	mov	r0, r4
   b4700:	bd10      	pop	{r4, pc}

000b4702 <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
   b4702:	b510      	push	{r4, lr}
   b4704:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
   b4706:	6840      	ldr	r0, [r0, #4]
   b4708:	2100      	movs	r1, #0
   b470a:	f000 fa1e 	bl	b4b4a <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
   b470e:	4620      	mov	r0, r4
}
   b4710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
   b4714:	f000 ba6a 	b.w	b4bec <_ZN5EpdIf11SpiTransferEh>

000b4718 <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
   b4718:	b510      	push	{r4, lr}
   b471a:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
   b471c:	6840      	ldr	r0, [r0, #4]
   b471e:	2101      	movs	r1, #1
   b4720:	f000 fa13 	bl	b4b4a <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
   b4724:	4620      	mov	r0, r4
}
   b4726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
   b472a:	f000 ba5f 	b.w	b4bec <_ZN5EpdIf11SpiTransferEh>
	...

000b4730 <_ZN3Epd8ReadBusyEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::ReadBusy(void) {
   b4730:	b510      	push	{r4, lr}
   b4732:	4604      	mov	r4, r0
    Serial.print("e-Paper busy \r\n ");
   b4734:	f001 fa8c 	bl	b5c50 <_Z16_fetch_usbserialv>
   b4738:	4909      	ldr	r1, [pc, #36]	; (b4760 <_ZN3Epd8ReadBusyEv+0x30>)
   b473a:	f000 ffe3 	bl	b5704 <_ZN5Print5printEPKc>
    UBYTE busy;
    do {
        busy = DigitalRead(busy_pin);
   b473e:	68e0      	ldr	r0, [r4, #12]
   b4740:	f000 fa07 	bl	b4b52 <_ZN5EpdIf11DigitalReadEi>
    } while(busy);    
   b4744:	b2c0      	uxtb	r0, r0
   b4746:	2800      	cmp	r0, #0
   b4748:	d1f9      	bne.n	b473e <_ZN3Epd8ReadBusyEv+0xe>
    DelayMs(200);
   b474a:	20c8      	movs	r0, #200	; 0xc8
   b474c:	f000 fa04 	bl	b4b58 <_ZN5EpdIf7DelayMsEj>
    Serial.print("e-Paper busy release \r\n ");
   b4750:	f001 fa7e 	bl	b5c50 <_Z16_fetch_usbserialv>
}
   b4754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("e-Paper busy release \r\n ");
   b4758:	4902      	ldr	r1, [pc, #8]	; (b4764 <_ZN3Epd8ReadBusyEv+0x34>)
   b475a:	f000 bfd3 	b.w	b5704 <_ZN5Print5printEPKc>
   b475e:	bf00      	nop
   b4760:	000b62c8 	.word	0x000b62c8
   b4764:	000b62d9 	.word	0x000b62d9

000b4768 <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
   b4768:	b510      	push	{r4, lr}
    DigitalWrite(reset_pin, HIGH);
   b476a:	2101      	movs	r1, #1
void Epd::Reset(void) {
   b476c:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
   b476e:	6800      	ldr	r0, [r0, #0]
   b4770:	f000 f9eb 	bl	b4b4a <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(20);    
   b4774:	2014      	movs	r0, #20
   b4776:	f000 f9ef 	bl	b4b58 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);                //module reset    
   b477a:	6820      	ldr	r0, [r4, #0]
   b477c:	2100      	movs	r1, #0
   b477e:	f000 f9e4 	bl	b4b4a <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
   b4782:	2002      	movs	r0, #2
   b4784:	f000 f9e8 	bl	b4b58 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
   b4788:	6820      	ldr	r0, [r4, #0]
   b478a:	2101      	movs	r1, #1
   b478c:	f000 f9dd 	bl	b4b4a <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(20);    
}
   b4790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(20);    
   b4794:	2014      	movs	r0, #20
   b4796:	f000 b9df 	b.w	b4b58 <_ZN5EpdIf7DelayMsEj>

000b479a <_ZN3Epd4InitEv>:
int Epd::Init(void) {
   b479a:	b538      	push	{r3, r4, r5, lr}
   b479c:	4604      	mov	r4, r0
    if (IfInit() != 0) {
   b479e:	f000 f9f9 	bl	b4b94 <_ZN5EpdIf6IfInitEv>
   b47a2:	4605      	mov	r5, r0
   b47a4:	2800      	cmp	r0, #0
   b47a6:	d171      	bne.n	b488c <_ZN3Epd4InitEv+0xf2>
    Reset();
   b47a8:	4620      	mov	r0, r4
   b47aa:	f7ff ffdd 	bl	b4768 <_ZN3Epd5ResetEv>
    SendCommand(0x00);		// panel setting   PSR
   b47ae:	4629      	mov	r1, r5
   b47b0:	4620      	mov	r0, r4
    EPD_3IN52_Flag = 0;
   b47b2:	7625      	strb	r5, [r4, #24]
    SendCommand(0x00);		// panel setting   PSR
   b47b4:	f7ff ffa5 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0xFF);			// RES1 RES0 REG KW/R     UD    SHL   SHD_N  RST_N	
   b47b8:	21ff      	movs	r1, #255	; 0xff
   b47ba:	4620      	mov	r0, r4
   b47bc:	f7ff ffac 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x01);			// x x x VCMZ TS_AUTO TIGE NORG VC_LUTZ
   b47c0:	2101      	movs	r1, #1
   b47c2:	4620      	mov	r0, r4
   b47c4:	f7ff ffa8 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x01);		// POWER SETTING   PWR
   b47c8:	2101      	movs	r1, #1
   b47ca:	4620      	mov	r0, r4
   b47cc:	f7ff ff99 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0x03);			//  x x x x x x VDS_EN VDG_EN	
   b47d0:	2103      	movs	r1, #3
   b47d2:	4620      	mov	r0, r4
   b47d4:	f7ff ffa0 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x10);			//  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V	
   b47d8:	2110      	movs	r1, #16
   b47da:	4620      	mov	r0, r4
   b47dc:	f7ff ff9c 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x3F);			//  x x VSH[5:0]	VSH = 15V
   b47e0:	213f      	movs	r1, #63	; 0x3f
   b47e2:	4620      	mov	r0, r4
   b47e4:	f7ff ff98 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x3F);			//  x x VSL[5:0]	VSL=-15V
   b47e8:	213f      	movs	r1, #63	; 0x3f
   b47ea:	4620      	mov	r0, r4
   b47ec:	f7ff ff94 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x03);			//  OPTEN VDHR[6:0]  VHDR=6.4V
   b47f0:	2103      	movs	r1, #3
   b47f2:	4620      	mov	r0, r4
   b47f4:	f7ff ff90 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x06);		// booster soft start   BTST 
   b47f8:	2106      	movs	r1, #6
   b47fa:	4620      	mov	r0, r4
   b47fc:	f7ff ff81 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0x37);			//  BT_PHA[7:0]  	
   b4800:	2137      	movs	r1, #55	; 0x37
   b4802:	4620      	mov	r0, r4
   b4804:	f7ff ff88 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x3D);			//  BT_PHB[7:0]	
   b4808:	213d      	movs	r1, #61	; 0x3d
   b480a:	4620      	mov	r0, r4
   b480c:	f7ff ff84 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x3D);			//  x x BT_PHC[5:0]	
   b4810:	213d      	movs	r1, #61	; 0x3d
   b4812:	4620      	mov	r0, r4
   b4814:	f7ff ff80 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x60);		// TCON setting			TCON 
   b4818:	2160      	movs	r1, #96	; 0x60
   b481a:	4620      	mov	r0, r4
   b481c:	f7ff ff71 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0x22);			// S2G[3:0] G2S[3:0]   non-overlap = 12		
   b4820:	2122      	movs	r1, #34	; 0x22
   b4822:	4620      	mov	r0, r4
   b4824:	f7ff ff78 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x82);		// VCOM_DC setting		VDCS 
   b4828:	2182      	movs	r1, #130	; 0x82
   b482a:	4620      	mov	r0, r4
   b482c:	f7ff ff69 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0x07);			// x  VDCS[6:0]	VCOM_DC value= -1.9v    00~3f,0x12=-1.9v
   b4830:	2107      	movs	r1, #7
   b4832:	4620      	mov	r0, r4
   b4834:	f7ff ff70 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x30);			 
   b4838:	2130      	movs	r1, #48	; 0x30
   b483a:	4620      	mov	r0, r4
   b483c:	f7ff ff61 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0x09);		
   b4840:	2109      	movs	r1, #9
   b4842:	4620      	mov	r0, r4
   b4844:	f7ff ff68 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0xe3);		// power saving			PWS 
   b4848:	21e3      	movs	r1, #227	; 0xe3
   b484a:	4620      	mov	r0, r4
   b484c:	f7ff ff59 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0x88);			// VCOM_W[3:0] SD_W[3:0]
   b4850:	2188      	movs	r1, #136	; 0x88
   b4852:	4620      	mov	r0, r4
   b4854:	f7ff ff60 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x61);		// resoultion setting 
   b4858:	2161      	movs	r1, #97	; 0x61
   b485a:	4620      	mov	r0, r4
   b485c:	f7ff ff51 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0xf0);			//  HRES[7:3] 0 0 0	
   b4860:	21f0      	movs	r1, #240	; 0xf0
   b4862:	4620      	mov	r0, r4
   b4864:	f7ff ff58 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x01);			//  x x x x x x x VRES[8]	
   b4868:	2101      	movs	r1, #1
   b486a:	4620      	mov	r0, r4
   b486c:	f7ff ff54 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendData(0x68);			//  VRES[7:0]
   b4870:	2168      	movs	r1, #104	; 0x68
   b4872:	4620      	mov	r0, r4
   b4874:	f7ff ff50 	bl	b4718 <_ZN3Epd8SendDataEh>
    SendCommand(0x50);			
   b4878:	2150      	movs	r1, #80	; 0x50
   b487a:	4620      	mov	r0, r4
   b487c:	f7ff ff41 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0xB7);		
   b4880:	21b7      	movs	r1, #183	; 0xb7
   b4882:	4620      	mov	r0, r4
   b4884:	f7ff ff48 	bl	b4718 <_ZN3Epd8SendDataEh>
}
   b4888:	4628      	mov	r0, r5
   b488a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   b488c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4890:	e7fa      	b.n	b4888 <_ZN3Epd4InitEv+0xee>

000b4892 <_ZN3Epd7refreshEv>:
        SendData(EPD_3IN52_lut_wb[count]);
    }
}

void Epd::refresh(void)
{
   b4892:	b510      	push	{r4, lr}
    SendCommand(0x17);
   b4894:	2117      	movs	r1, #23
{
   b4896:	4604      	mov	r4, r0
    SendCommand(0x17);
   b4898:	f7ff ff33 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0xA5);
   b489c:	4620      	mov	r0, r4
   b489e:	21a5      	movs	r1, #165	; 0xa5
   b48a0:	f7ff ff3a 	bl	b4718 <_ZN3Epd8SendDataEh>
    ReadBusy();
   b48a4:	4620      	mov	r0, r4
   b48a6:	f7ff ff43 	bl	b4730 <_ZN3Epd8ReadBusyEv>
    DelayMs(200);
}
   b48aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);
   b48ae:	20c8      	movs	r0, #200	; 0xc8
   b48b0:	f000 b952 	b.w	b4b58 <_ZN5EpdIf7DelayMsEj>

000b48b4 <_ZN3Epd6lut_GCEv>:

// LUT download
void Epd::lut_GC(void)
{
   b48b4:	b570      	push	{r4, r5, r6, lr}
    UBYTE count;
    SendCommand(0x20);        // vcom
   b48b6:	2120      	movs	r1, #32
{
   b48b8:	4604      	mov	r4, r0
    SendCommand(0x20);        // vcom
   b48ba:	f7ff ff22 	bl	b4702 <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 56 ; count++)
   b48be:	4e35      	ldr	r6, [pc, #212]	; (b4994 <_ZN3Epd6lut_GCEv+0xe0>)
    SendCommand(0x20);        // vcom
   b48c0:	2538      	movs	r5, #56	; 0x38
    {
        SendData(EPD_3IN52_lut_R20_GC[count]);
   b48c2:	f816 1b01 	ldrb.w	r1, [r6], #1
   b48c6:	4620      	mov	r0, r4
    for(count = 0; count < 56 ; count++)
   b48c8:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R20_GC[count]);
   b48ca:	f7ff ff25 	bl	b4718 <_ZN3Epd8SendDataEh>
    for(count = 0; count < 56 ; count++)
   b48ce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b48d2:	d1f6      	bne.n	b48c2 <_ZN3Epd6lut_GCEv+0xe>
    }
        
    SendCommand(0x21);        // red not use
   b48d4:	2121      	movs	r1, #33	; 0x21
   b48d6:	4620      	mov	r0, r4
   b48d8:	f7ff ff13 	bl	b4702 <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 42 ; count++)
   b48dc:	4e2e      	ldr	r6, [pc, #184]	; (b4998 <_ZN3Epd6lut_GCEv+0xe4>)
    SendCommand(0x21);        // red not use
   b48de:	252a      	movs	r5, #42	; 0x2a
    {
        SendData(EPD_3IN52_lut_R21_GC[count]);
   b48e0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b48e4:	4620      	mov	r0, r4
    for(count = 0; count < 42 ; count++)
   b48e6:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R21_GC[count]);
   b48e8:	f7ff ff16 	bl	b4718 <_ZN3Epd8SendDataEh>
    for(count = 0; count < 42 ; count++)
   b48ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b48f0:	d1f6      	bne.n	b48e0 <_ZN3Epd6lut_GCEv+0x2c>
    }
        
    SendCommand(0x24);        // bb b
   b48f2:	2124      	movs	r1, #36	; 0x24
   b48f4:	4620      	mov	r0, r4
   b48f6:	f7ff ff04 	bl	b4702 <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 42 ; count++)
   b48fa:	4e28      	ldr	r6, [pc, #160]	; (b499c <_ZN3Epd6lut_GCEv+0xe8>)
    SendCommand(0x24);        // bb b
   b48fc:	252a      	movs	r5, #42	; 0x2a
    {
        SendData(EPD_3IN52_lut_R24_GC[count]);
   b48fe:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4902:	4620      	mov	r0, r4
    for(count = 0; count < 42 ; count++)
   b4904:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R24_GC[count]);
   b4906:	f7ff ff07 	bl	b4718 <_ZN3Epd8SendDataEh>
    for(count = 0; count < 42 ; count++)
   b490a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b490e:	d1f6      	bne.n	b48fe <_ZN3Epd6lut_GCEv+0x4a>
    }
    
    if(EPD_3IN52_Flag == 0)
   b4910:	7e23      	ldrb	r3, [r4, #24]
    {
        SendCommand(0x22);    // bw r
   b4912:	2122      	movs	r1, #34	; 0x22
   b4914:	4620      	mov	r0, r4
    if(EPD_3IN52_Flag == 0)
   b4916:	b9f3      	cbnz	r3, b4956 <_ZN3Epd6lut_GCEv+0xa2>
        SendCommand(0x22);    // bw r
   b4918:	f7ff fef3 	bl	b4702 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 56 ; count++)
   b491c:	4e20      	ldr	r6, [pc, #128]	; (b49a0 <_ZN3Epd6lut_GCEv+0xec>)
        SendCommand(0x22);    // bw r
   b491e:	2538      	movs	r5, #56	; 0x38
        {
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b4920:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4924:	4620      	mov	r0, r4
        for(count = 0; count < 56 ; count++)
   b4926:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b4928:	f7ff fef6 	bl	b4718 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 56 ; count++)
   b492c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4930:	d1f6      	bne.n	b4920 <_ZN3Epd6lut_GCEv+0x6c>
        }
            
        SendCommand(0x23);    // wb w
   b4932:	2123      	movs	r1, #35	; 0x23
   b4934:	4620      	mov	r0, r4
   b4936:	f7ff fee4 	bl	b4702 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 42 ; count++)
   b493a:	4e1a      	ldr	r6, [pc, #104]	; (b49a4 <_ZN3Epd6lut_GCEv+0xf0>)
        SendCommand(0x23);    // wb w
   b493c:	252a      	movs	r5, #42	; 0x2a
        {
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b493e:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4942:	4620      	mov	r0, r4
        for(count = 0; count < 42 ; count++)
   b4944:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b4946:	f7ff fee7 	bl	b4718 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 42 ; count++)
   b494a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b494e:	d1f6      	bne.n	b493e <_ZN3Epd6lut_GCEv+0x8a>
        }
            
        EPD_3IN52_Flag = 1;
   b4950:	2301      	movs	r3, #1
   b4952:	7623      	strb	r3, [r4, #24]
            SendData(EPD_3IN52_lut_R22_GC[count]);
        }
            
       EPD_3IN52_Flag = 0;
    }
}
   b4954:	bd70      	pop	{r4, r5, r6, pc}
        SendCommand(0x22);    // bw r
   b4956:	f7ff fed4 	bl	b4702 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 56 ; count++)
   b495a:	4e12      	ldr	r6, [pc, #72]	; (b49a4 <_ZN3Epd6lut_GCEv+0xf0>)
        SendCommand(0x22);    // bw r
   b495c:	2538      	movs	r5, #56	; 0x38
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b495e:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4962:	4620      	mov	r0, r4
        for(count = 0; count < 56 ; count++)
   b4964:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b4966:	f7ff fed7 	bl	b4718 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 56 ; count++)
   b496a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b496e:	d1f6      	bne.n	b495e <_ZN3Epd6lut_GCEv+0xaa>
        SendCommand(0x23);    // wb w
   b4970:	2123      	movs	r1, #35	; 0x23
   b4972:	4620      	mov	r0, r4
   b4974:	f7ff fec5 	bl	b4702 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 42 ; count++)
   b4978:	4e09      	ldr	r6, [pc, #36]	; (b49a0 <_ZN3Epd6lut_GCEv+0xec>)
        SendCommand(0x23);    // wb w
   b497a:	252a      	movs	r5, #42	; 0x2a
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b497c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4980:	4620      	mov	r0, r4
        for(count = 0; count < 42 ; count++)
   b4982:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b4984:	f7ff fec8 	bl	b4718 <_ZN3Epd8SendDataEh>
        for(count = 0; count < 42 ; count++)
   b4988:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b498c:	d1f6      	bne.n	b497c <_ZN3Epd6lut_GCEv+0xc8>
       EPD_3IN52_Flag = 0;
   b498e:	7625      	strb	r5, [r4, #24]
}
   b4990:	e7e0      	b.n	b4954 <_ZN3Epd6lut_GCEv+0xa0>
   b4992:	bf00      	nop
   b4994:	000b62f2 	.word	0x000b62f2
   b4998:	000b632a 	.word	0x000b632a
   b499c:	000b63c4 	.word	0x000b63c4
   b49a0:	000b6354 	.word	0x000b6354
   b49a4:	000b638c 	.word	0x000b638c

000b49a8 <_ZN3Epd12display_partEPhjjjj>:
        SendData(pgm_read_byte(&picData[i]));
    }
}

void Epd::display_part(UBYTE *Image, UWORD xstart, UWORD ystart, UWORD image_width, UWORD image_heigh)
{
   b49a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49ac:	9100      	str	r1, [sp, #0]
    UWORD i,j;
    SendCommand(0x13);		     //Transfer new data
   b49ae:	2113      	movs	r1, #19
{
   b49b0:	461f      	mov	r7, r3
   b49b2:	4614      	mov	r4, r2
   b49b4:	4605      	mov	r5, r0
    SendCommand(0x13);		     //Transfer new data
   b49b6:	f7ff fea4 	bl	b4702 <_ZN3Epd11SendCommandEh>
    for(i=0; i<height; i++)
        for(j=0; j<(width/8); j++)
        {
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
   b49ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b49bc:	990d      	ldr	r1, [sp, #52]	; 0x34
   b49be:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
   b49c2:	441c      	add	r4, r3
   b49c4:	437b      	muls	r3, r7
   b49c6:	f1c3 0900 	rsb	r9, r3, #0
   b49ca:	187b      	adds	r3, r7, r1
   b49cc:	08e4      	lsrs	r4, r4, #3
    for(i=0; i<height; i++)
   b49ce:	f04f 0a00 	mov.w	sl, #0
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
   b49d2:	9301      	str	r3, [sp, #4]
    for(i=0; i<height; i++)
   b49d4:	6969      	ldr	r1, [r5, #20]
   b49d6:	4551      	cmp	r1, sl
   b49d8:	d91f      	bls.n	b4a1a <_ZN3Epd12display_partEPhjjjj+0x72>
            {
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
   b49da:	9b00      	ldr	r3, [sp, #0]
   b49dc:	ebcb 08d9 	rsb	r8, fp, r9, lsr #3
        for(j=0; j<(width/8); j++)
   b49e0:	2600      	movs	r6, #0
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
   b49e2:	4498      	add	r8, r3
        for(j=0; j<(width/8); j++)
   b49e4:	6929      	ldr	r1, [r5, #16]
   b49e6:	ebb6 0fd1 	cmp.w	r6, r1, lsr #3
   b49ea:	d211      	bcs.n	b4a10 <_ZN3Epd12display_partEPhjjjj+0x68>
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
   b49ec:	45b3      	cmp	fp, r6
   b49ee:	d80d      	bhi.n	b4a0c <_ZN3Epd12display_partEPhjjjj+0x64>
   b49f0:	42b4      	cmp	r4, r6
   b49f2:	d90b      	bls.n	b4a0c <_ZN3Epd12display_partEPhjjjj+0x64>
   b49f4:	45ba      	cmp	sl, r7
   b49f6:	d309      	bcc.n	b4a0c <_ZN3Epd12display_partEPhjjjj+0x64>
   b49f8:	9b01      	ldr	r3, [sp, #4]
   b49fa:	4553      	cmp	r3, sl
   b49fc:	d306      	bcc.n	b4a0c <_ZN3Epd12display_partEPhjjjj+0x64>
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
   b49fe:	f818 1006 	ldrb.w	r1, [r8, r6]
                // Serial.print(Image[(i-ystart) * image_width/8 + j - xstart], HEX);
                // Serial.print(" ");
            }
            else
            {
                SendData(0x00);
   b4a02:	4628      	mov	r0, r5
   b4a04:	f7ff fe88 	bl	b4718 <_ZN3Epd8SendDataEh>
        for(j=0; j<(width/8); j++)
   b4a08:	3601      	adds	r6, #1
   b4a0a:	e7eb      	b.n	b49e4 <_ZN3Epd12display_partEPhjjjj+0x3c>
                SendData(0x00);
   b4a0c:	2100      	movs	r1, #0
   b4a0e:	e7f8      	b.n	b4a02 <_ZN3Epd12display_partEPhjjjj+0x5a>
    for(i=0; i<height; i++)
   b4a10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4a12:	f10a 0a01 	add.w	sl, sl, #1
   b4a16:	4499      	add	r9, r3
   b4a18:	e7dc      	b.n	b49d4 <_ZN3Epd12display_partEPhjjjj+0x2c>
            }
        }
}
   b4a1a:	b003      	add	sp, #12
   b4a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4a20 <_ZN3Epd11display_NUMEh>:


void Epd::display_NUM(UBYTE NUM)
{
   b4a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a24:	460e      	mov	r6, r1
    UWORD row, column;
    // UWORD pcnt = 0;

    SendCommand(0x13);		     //Transfer new data
   b4a26:	2113      	movs	r1, #19
{
   b4a28:	4604      	mov	r4, r0
    SendCommand(0x13);		     //Transfer new data
   b4a2a:	f7ff fe6a 	bl	b4702 <_ZN3Epd11SendCommandEh>

    for(column=0; column<height; column++)   
   b4a2e:	2500      	movs	r5, #0
   b4a30:	6963      	ldr	r3, [r4, #20]
   b4a32:	42ab      	cmp	r3, r5
   b4a34:	d961      	bls.n	b4afa <_ZN3Epd11display_NUMEh+0xda>
    {
        for(row=0; row<width/8; row++)  
   b4a36:	2700      	movs	r7, #0
                case EPD_3IN52_Source_Line:
                    SendData(0xAA);  
                    break;
                        
                case EPD_3IN52_Gate_Line:
                    if(column%2)
   b4a38:	f005 0801 	and.w	r8, r5, #1
        for(row=0; row<width/8; row++)  
   b4a3c:	6923      	ldr	r3, [r4, #16]
   b4a3e:	ebb7 0fd3 	cmp.w	r7, r3, lsr #3
   b4a42:	ea4f 02d3 	mov.w	r2, r3, lsr #3
   b4a46:	d256      	bcs.n	b4af6 <_ZN3Epd11display_NUMEh+0xd6>
            switch (NUM)
   b4a48:	2e0f      	cmp	r6, #15
   b4a4a:	d02c      	beq.n	b4aa6 <_ZN3Epd11display_NUMEh+0x86>
   b4a4c:	d808      	bhi.n	b4a60 <_ZN3Epd11display_NUMEh+0x40>
   b4a4e:	2e03      	cmp	r6, #3
   b4a50:	d80d      	bhi.n	b4a6e <_ZN3Epd11display_NUMEh+0x4e>
   b4a52:	1e71      	subs	r1, r6, #1
   b4a54:	2902      	cmp	r1, #2
   b4a56:	d815      	bhi.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4a58:	e8df f001 	tbb	[pc, r1]
   b4a5c:	3b2d      	.short	0x3b2d
   b4a5e:	19          	.byte	0x19
   b4a5f:	00          	.byte	0x00
   b4a60:	2ef0      	cmp	r6, #240	; 0xf0
   b4a62:	d024      	beq.n	b4aae <_ZN3Epd11display_NUMEh+0x8e>
   b4a64:	d805      	bhi.n	b4a72 <_ZN3Epd11display_NUMEh+0x52>
   b4a66:	2e55      	cmp	r6, #85	; 0x55
   b4a68:	d009      	beq.n	b4a7e <_ZN3Epd11display_NUMEh+0x5e>
   b4a6a:	2eaa      	cmp	r6, #170	; 0xaa
   b4a6c:	d005      	beq.n	b4a7a <_ZN3Epd11display_NUMEh+0x5a>
        for(row=0; row<width/8; row++)  
   b4a6e:	3701      	adds	r7, #1
   b4a70:	e7e4      	b.n	b4a3c <_ZN3Epd11display_NUMEh+0x1c>
            switch (NUM)
   b4a72:	2eff      	cmp	r6, #255	; 0xff
   b4a74:	d1fb      	bne.n	b4a6e <_ZN3Epd11display_NUMEh+0x4e>
                        SendData(0xff); //An odd number of Gate line  
   b4a76:	21ff      	movs	r1, #255	; 0xff
   b4a78:	e005      	b.n	b4a86 <_ZN3Epd11display_NUMEh+0x66>
                    SendData(0xAA);  
   b4a7a:	4631      	mov	r1, r6
   b4a7c:	e003      	b.n	b4a86 <_ZN3Epd11display_NUMEh+0x66>
                    if(column%2)
   b4a7e:	f1b8 0f00 	cmp.w	r8, #0
   b4a82:	d1f8      	bne.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
                    SendData(0x00);
   b4a84:	2100      	movs	r1, #0
   b4a86:	4620      	mov	r0, r4
   b4a88:	f7ff fe46 	bl	b4718 <_ZN3Epd8SendDataEh>
                    break;  
   b4a8c:	e7ef      	b.n	b4a6e <_ZN3Epd11display_NUMEh+0x4e>
                    else
                        SendData(0x00); //The even line Gate  
                    break;			
                        
                case EPD_3IN52_Chessboard:
                    if(row>=(width/8/2)&&column>=(height/2))
   b4a8e:	6962      	ldr	r2, [r4, #20]
   b4a90:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
   b4a94:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b4a98:	d302      	bcc.n	b4aa0 <_ZN3Epd11display_NUMEh+0x80>
   b4a9a:	4295      	cmp	r5, r2
   b4a9c:	d3f2      	bcc.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4a9e:	e7ea      	b.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
                        SendData(0xff);
                    else if(row<(width/8/2)&&column<(height/2))
   b4aa0:	4295      	cmp	r5, r2
   b4aa2:	d2ef      	bcs.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4aa4:	e7e7      	b.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
                    else
                        SendData(0x00);
                    break; 			
                        
                case EPD_3IN52_LEFT_BLACK_RIGHT_WHITE:
                    if(row>=(width/8/2))
   b4aa6:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
                    else
                        SendData(0x00);
                    break;
                            
                case EPD_3IN52_UP_BLACK_DOWN_WHITE:
                    if(column>=(height/2))
   b4aaa:	d2e4      	bcs.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
   b4aac:	e7ea      	b.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4aae:	6963      	ldr	r3, [r4, #20]
   b4ab0:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
   b4ab4:	e7f9      	b.n	b4aaa <_ZN3Epd11display_NUMEh+0x8a>
                    else
                        SendData(0x00);
                    break;
                            
                case EPD_3IN52_Frame:
                    if(column==0||column==(height-1))
   b4ab6:	2d00      	cmp	r5, #0
   b4ab8:	d0e4      	beq.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4aba:	6963      	ldr	r3, [r4, #20]
   b4abc:	3b01      	subs	r3, #1
   b4abe:	42ab      	cmp	r3, r5
   b4ac0:	d0e0      	beq.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
                        SendData(0x00);						
                    else if(row==0)
   b4ac2:	b90f      	cbnz	r7, b4ac8 <_ZN3Epd11display_NUMEh+0xa8>
                        SendData(0x7F);
   b4ac4:	217f      	movs	r1, #127	; 0x7f
   b4ac6:	e7de      	b.n	b4a86 <_ZN3Epd11display_NUMEh+0x66>
                    else if(row==(width/8-1))
   b4ac8:	1e53      	subs	r3, r2, #1
   b4aca:	42bb      	cmp	r3, r7
   b4acc:	d1d3      	bne.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
                        SendData(0xFE);					
   b4ace:	21fe      	movs	r1, #254	; 0xfe
   b4ad0:	e7d9      	b.n	b4a86 <_ZN3Epd11display_NUMEh+0x66>
                    else
                        SendData(0xFF);
                    break; 					
                            
                case EPD_3IN52_Crosstalk:
                    if((row>=(width/8/3)&&row<=(width/8/3*2)&&column<=(height/3))||(row>=(width/8/3)&&row<=(width/8/3*2)&&column>=(height/3*2)))
   b4ad2:	2218      	movs	r2, #24
   b4ad4:	fbb3 f3f2 	udiv	r3, r3, r2
   b4ad8:	42bb      	cmp	r3, r7
   b4ada:	d8cc      	bhi.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
   b4adc:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
   b4ae0:	d8c9      	bhi.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
   b4ae2:	6963      	ldr	r3, [r4, #20]
   b4ae4:	2203      	movs	r2, #3
   b4ae6:	fbb3 f3f2 	udiv	r3, r3, r2
   b4aea:	42ab      	cmp	r3, r5
   b4aec:	d2ca      	bcs.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4aee:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
   b4af2:	d2c7      	bcs.n	b4a84 <_ZN3Epd11display_NUMEh+0x64>
   b4af4:	e7bf      	b.n	b4a76 <_ZN3Epd11display_NUMEh+0x56>
    for(column=0; column<height; column++)   
   b4af6:	3501      	adds	r5, #1
   b4af8:	e79a      	b.n	b4a30 <_ZN3Epd11display_NUMEh+0x10>
                default:
                    break;
            }
        }
    }	
}
   b4afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4afe <_ZN3Epd5ClearEv>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void Epd::Clear(void)
{
   b4afe:	b538      	push	{r3, r4, r5, lr}
    UWORD i;
    SendCommand(0x13);		     //Transfer new data
   b4b00:	2113      	movs	r1, #19
{
   b4b02:	4604      	mov	r4, r0
    SendCommand(0x13);		     //Transfer new data
   b4b04:	f7ff fdfd 	bl	b4702 <_ZN3Epd11SendCommandEh>
    for(i=0;i<(width*height/8);i++)	     
   b4b08:	2500      	movs	r5, #0
   b4b0a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b4b0e:	4353      	muls	r3, r2
   b4b10:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   b4b14:	d205      	bcs.n	b4b22 <_ZN3Epd5ClearEv+0x24>
    {
        SendData(0xFF);
   b4b16:	21ff      	movs	r1, #255	; 0xff
   b4b18:	4620      	mov	r0, r4
   b4b1a:	f7ff fdfd 	bl	b4718 <_ZN3Epd8SendDataEh>
    for(i=0;i<(width*height/8);i++)	     
   b4b1e:	3501      	adds	r5, #1
   b4b20:	e7f3      	b.n	b4b0a <_ZN3Epd5ClearEv+0xc>
    }
    lut_GC();
   b4b22:	4620      	mov	r0, r4
   b4b24:	f7ff fec6 	bl	b48b4 <_ZN3Epd6lut_GCEv>
	refresh();
   b4b28:	4620      	mov	r0, r4
}
   b4b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	refresh();
   b4b2e:	f7ff beb0 	b.w	b4892 <_ZN3Epd7refreshEv>

000b4b32 <_ZN3Epd5sleepEv>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void Epd::sleep(void)
{
   b4b32:	b510      	push	{r4, lr}
    SendCommand(0X07);  	//deep sleep
   b4b34:	2107      	movs	r1, #7
{
   b4b36:	4604      	mov	r4, r0
    SendCommand(0X07);  	//deep sleep
   b4b38:	f7ff fde3 	bl	b4702 <_ZN3Epd11SendCommandEh>
    SendData(0xA5);
   b4b3c:	4620      	mov	r0, r4
   b4b3e:	21a5      	movs	r1, #165	; 0xa5
   b4b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SendData(0xA5);
   b4b44:	f7ff bde8 	b.w	b4718 <_ZN3Epd8SendDataEh>

000b4b48 <_ZN5EpdIfC1Ev>:

#include "epdif.h"
#include <spi.h>

EpdIf::EpdIf() {
};
   b4b48:	4770      	bx	lr

000b4b4a <_ZN5EpdIf12DigitalWriteEii>:

EpdIf::~EpdIf() {
};

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
   b4b4a:	b2c9      	uxtb	r1, r1
   b4b4c:	b280      	uxth	r0, r0
   b4b4e:	f001 b9ce 	b.w	b5eee <digitalWrite>

000b4b52 <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
   b4b52:	b280      	uxth	r0, r0
   b4b54:	f001 b9e4 	b.w	b5f20 <digitalRead>

000b4b58 <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
   b4b58:	f000 bba6 	b.w	b52a8 <delay>

000b4b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4b5c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4b5e:	4c0b      	ldr	r4, [pc, #44]	; (b4b8c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4b60:	7821      	ldrb	r1, [r4, #0]
   b4b62:	f3bf 8f5b 	dmb	ish
   b4b66:	f011 0101 	ands.w	r1, r1, #1
   b4b6a:	d10b      	bne.n	b4b84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	9101      	str	r1, [sp, #4]
   b4b70:	f7ff fa9b 	bl	b40aa <__cxa_guard_acquire>
   b4b74:	9901      	ldr	r1, [sp, #4]
   b4b76:	b128      	cbz	r0, b4b84 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4b78:	4805      	ldr	r0, [pc, #20]	; (b4b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4b7a:	f000 fe31 	bl	b57e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4b7e:	4620      	mov	r0, r4
   b4b80:	f7ff fa98 	bl	b40b4 <__cxa_guard_release>
        return instance;
    }
   b4b84:	4802      	ldr	r0, [pc, #8]	; (b4b90 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4b86:	b002      	add	sp, #8
   b4b88:	bd10      	pop	{r4, pc}
   b4b8a:	bf00      	nop
   b4b8c:	2003e6b8 	.word	0x2003e6b8
   b4b90:	2003e6bc 	.word	0x2003e6bc

000b4b94 <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
   b4b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
   b4b96:	2101      	movs	r1, #1
   b4b98:	200b      	movs	r0, #11
   b4b9a:	f001 f997 	bl	b5ecc <pinMode>
    pinMode(RST_PIN, OUTPUT);
   b4b9e:	2101      	movs	r1, #1
   b4ba0:	2008      	movs	r0, #8
   b4ba2:	f001 f993 	bl	b5ecc <pinMode>
    pinMode(DC_PIN, OUTPUT);
   b4ba6:	2101      	movs	r1, #1
   b4ba8:	2006      	movs	r0, #6
   b4baa:	f001 f98f 	bl	b5ecc <pinMode>
    pinMode(BUSY_PIN, INPUT); 
   b4bae:	2100      	movs	r1, #0
   b4bb0:	2007      	movs	r0, #7
   b4bb2:	f001 f98b 	bl	b5ecc <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b4bb6:	f7ff ffd1 	bl	b4b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bba:	f000 fe1b 	bl	b57f4 <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
   b4bbe:	4b09      	ldr	r3, [pc, #36]	; (b4be4 <_ZN5EpdIf6IfInitEv+0x50>)
   b4bc0:	9300      	str	r3, [sp, #0]
   b4bc2:	4b09      	ldr	r3, [pc, #36]	; (b4be8 <_ZN5EpdIf6IfInitEv+0x54>)
   b4bc4:	9302      	str	r3, [sp, #8]
   b4bc6:	2400      	movs	r4, #0
   b4bc8:	2301      	movs	r3, #1
   b4bca:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4bce:	f88d 4004 	strb.w	r4, [sp, #4]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b4bd2:	f7ff ffc3 	bl	b4b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bd6:	4669      	mov	r1, sp
   b4bd8:	f000 fe36 	bl	b5848 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    
    return 0;
}
   b4bdc:	4620      	mov	r0, r4
   b4bde:	b004      	add	sp, #16
   b4be0:	bd10      	pop	{r4, pc}
   b4be2:	bf00      	nop
   b4be4:	000b62ac 	.word	0x000b62ac
   b4be8:	001e8480 	.word	0x001e8480

000b4bec <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
   b4bec:	b510      	push	{r4, lr}
    digitalWrite(CS_PIN, LOW);
   b4bee:	2100      	movs	r1, #0
void EpdIf::SpiTransfer(unsigned char data) {
   b4bf0:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
   b4bf2:	200b      	movs	r0, #11
   b4bf4:	f001 f97b 	bl	b5eee <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4bf8:	f7ff ffb0 	bl	b4b5c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4bfc:	4621      	mov	r1, r4
   b4bfe:	f000 fe91 	bl	b5924 <_ZN8SPIClass8transferEh>
}
   b4c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
   b4c06:	2101      	movs	r1, #1
   b4c08:	200b      	movs	r0, #11
   b4c0a:	f001 b970 	b.w	b5eee <digitalWrite>

000b4c0e <_ZN5PaintC1EPhii>:
 */

#include <avr/pgmspace.h>
#include "epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
   b4c0e:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
   b4c10:	2400      	movs	r4, #0
   b4c12:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4c14:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
   b4c18:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4c1a:	d008      	beq.n	b4c2e <_ZN5PaintC1EPhii+0x20>
   b4c1c:	f102 0508 	add.w	r5, r2, #8
   b4c20:	4252      	negs	r2, r2
   b4c22:	f002 0107 	and.w	r1, r2, #7
   b4c26:	4622      	mov	r2, r4
   b4c28:	bf58      	it	pl
   b4c2a:	424a      	negpl	r2, r1
   b4c2c:	1aaa      	subs	r2, r5, r2
    this->height = height;
   b4c2e:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
   b4c32:	bd30      	pop	{r4, r5, pc}

000b4c34 <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
   b4c34:	4770      	bx	lr

000b4c36 <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4c36:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
   b4c38:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4c3a:	db15      	blt.n	b4c68 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4c3c:	6844      	ldr	r4, [r0, #4]
   b4c3e:	428c      	cmp	r4, r1
   b4c40:	dd12      	ble.n	b4c68 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4c42:	2a00      	cmp	r2, #0
   b4c44:	db10      	blt.n	b4c68 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4c46:	6885      	ldr	r5, [r0, #8]
   b4c48:	4295      	cmp	r5, r2
   b4c4a:	dd0d      	ble.n	b4c68 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b4c4c:	fb02 1204 	mla	r2, r2, r4, r1
   b4c50:	6805      	ldr	r5, [r0, #0]
   b4c52:	10d2      	asrs	r2, r2, #3
   b4c54:	f001 0107 	and.w	r1, r1, #7
   b4c58:	2480      	movs	r4, #128	; 0x80
   b4c5a:	fa44 f101 	asr.w	r1, r4, r1
   b4c5e:	56a8      	ldrsb	r0, [r5, r2]
   b4c60:	b249      	sxtb	r1, r1
        if (colored) {
   b4c62:	b113      	cbz	r3, b4c6a <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b4c64:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b4c66:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
   b4c68:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b4c6a:	ea20 0001 	bic.w	r0, r0, r1
   b4c6e:	e7fa      	b.n	b4c66 <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

000b4c70 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
   b4c70:	b570      	push	{r4, r5, r6, lr}
   b4c72:	460b      	mov	r3, r1
   b4c74:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
   b4c76:	2500      	movs	r5, #0
   b4c78:	6862      	ldr	r2, [r4, #4]
   b4c7a:	42aa      	cmp	r2, r5
   b4c7c:	dd0c      	ble.n	b4c98 <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
   b4c7e:	2600      	movs	r6, #0
   b4c80:	68a2      	ldr	r2, [r4, #8]
   b4c82:	42b2      	cmp	r2, r6
   b4c84:	dd06      	ble.n	b4c94 <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
   b4c86:	4632      	mov	r2, r6
   b4c88:	4629      	mov	r1, r5
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	f7ff ffd3 	bl	b4c36 <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
   b4c90:	3601      	adds	r6, #1
   b4c92:	e7f5      	b.n	b4c80 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
   b4c94:	3501      	adds	r5, #1
   b4c96:	e7ef      	b.n	b4c78 <_ZN5Paint5ClearEi+0x8>
}
   b4c98:	bd70      	pop	{r4, r5, r6, pc}

000b4c9a <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
   b4c9a:	6800      	ldr	r0, [r0, #0]
   b4c9c:	4770      	bx	lr

000b4c9e <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
   b4c9e:	6840      	ldr	r0, [r0, #4]
   b4ca0:	4770      	bx	lr

000b4ca2 <_ZN5Paint9GetHeightEv>:
    this->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint::GetHeight(void) {
    return this->height;
}
   b4ca2:	6880      	ldr	r0, [r0, #8]
   b4ca4:	4770      	bx	lr

000b4ca6 <_ZN5Paint9SetRotateEi>:
int Paint::GetRotate(void) {
    return this->rotate;
}

void Paint::SetRotate(int rotate){
    this->rotate = rotate;
   b4ca6:	60c1      	str	r1, [r0, #12]
}
   b4ca8:	4770      	bx	lr

000b4caa <_ZN5Paint9DrawPixelEiii>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
   b4caa:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
   b4cac:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
   b4cae:	460d      	mov	r5, r1
   b4cb0:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
   b4cb2:	b967      	cbnz	r7, b4cce <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4cb4:	2900      	cmp	r1, #0
   b4cb6:	db37      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cb8:	6847      	ldr	r7, [r0, #4]
   b4cba:	428f      	cmp	r7, r1
   b4cbc:	dd34      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cbe:	2a00      	cmp	r2, #0
   b4cc0:	db32      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cc2:	6885      	ldr	r5, [r0, #8]
   b4cc4:	4295      	cmp	r5, r2
   b4cc6:	dd2f      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
   b4cc8:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
   b4cca:	f7ff bfb4 	b.w	b4c36 <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
   b4cce:	2f01      	cmp	r7, #1
   b4cd0:	d10c      	bne.n	b4cec <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b4cd2:	2900      	cmp	r1, #0
   b4cd4:	db28      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cd6:	6882      	ldr	r2, [r0, #8]
   b4cd8:	428a      	cmp	r2, r1
   b4cda:	dd25      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cdc:	2c00      	cmp	r4, #0
   b4cde:	db23      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4ce0:	6841      	ldr	r1, [r0, #4]
   b4ce2:	42a1      	cmp	r1, r4
   b4ce4:	dd20      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4ce6:	462a      	mov	r2, r5
   b4ce8:	1b09      	subs	r1, r1, r4
   b4cea:	e7ed      	b.n	b4cc8 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
   b4cec:	2f02      	cmp	r7, #2
   b4cee:	d10c      	bne.n	b4d0a <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4cf0:	2900      	cmp	r1, #0
   b4cf2:	db19      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cf4:	6841      	ldr	r1, [r0, #4]
   b4cf6:	42a9      	cmp	r1, r5
   b4cf8:	dd16      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cfa:	2a00      	cmp	r2, #0
   b4cfc:	db14      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4cfe:	6882      	ldr	r2, [r0, #8]
   b4d00:	42a2      	cmp	r2, r4
   b4d02:	dd11      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4d04:	1b12      	subs	r2, r2, r4
   b4d06:	1b49      	subs	r1, r1, r5
   b4d08:	e7de      	b.n	b4cc8 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
   b4d0a:	2f03      	cmp	r7, #3
   b4d0c:	d10c      	bne.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b4d0e:	2900      	cmp	r1, #0
   b4d10:	db0a      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4d12:	6882      	ldr	r2, [r0, #8]
   b4d14:	428a      	cmp	r2, r1
   b4d16:	dd07      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4d18:	2c00      	cmp	r4, #0
   b4d1a:	db05      	blt.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
   b4d1c:	6841      	ldr	r1, [r0, #4]
   b4d1e:	42a1      	cmp	r1, r4
   b4d20:	dd02      	ble.n	b4d28 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4d22:	1b52      	subs	r2, r2, r5
   b4d24:	4621      	mov	r1, r4
   b4d26:	e7cf      	b.n	b4cc8 <_ZN5Paint9DrawPixelEiii+0x1e>
}
   b4d28:	bcf0      	pop	{r4, r5, r6, r7}
   b4d2a:	4770      	bx	lr

000b4d2c <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b4d32:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4d34:	4691      	mov	r9, r2
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b4d36:	f014 0207 	ands.w	r2, r4, #7
   b4d3a:	bf18      	it	ne
   b4d3c:	2201      	movne	r2, #1
   b4d3e:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
   b4d42:	88ec      	ldrh	r4, [r5, #6]
   b4d44:	3b20      	subs	r3, #32
   b4d46:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
   b4d48:	682c      	ldr	r4, [r5, #0]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4d4a:	4688      	mov	r8, r1
    const unsigned char* ptr = &font->table[char_offset];
   b4d4c:	fb03 4402 	mla	r4, r3, r2, r4

    for (j = 0; j < font->Height; j++) {
   b4d50:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b4d52:	f04f 0b80 	mov.w	fp, #128	; 0x80
    for (j = 0; j < font->Height; j++) {
   b4d56:	88eb      	ldrh	r3, [r5, #6]
   b4d58:	42bb      	cmp	r3, r7
   b4d5a:	dd20      	ble.n	b4d9e <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
   b4d5c:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
   b4d5e:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
   b4d62:	88ab      	ldrh	r3, [r5, #4]
   b4d64:	42b3      	cmp	r3, r6
   b4d66:	dd15      	ble.n	b4d94 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b4d68:	7821      	ldrb	r1, [r4, #0]
   b4d6a:	f006 0a07 	and.w	sl, r6, #7
   b4d6e:	fa4b f30a 	asr.w	r3, fp, sl
   b4d72:	4219      	tst	r1, r3
   b4d74:	d008      	beq.n	b4d88 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
   b4d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4d78:	9201      	str	r2, [sp, #4]
   b4d7a:	eb06 0108 	add.w	r1, r6, r8
   b4d7e:	9000      	str	r0, [sp, #0]
   b4d80:	f7ff ff93 	bl	b4caa <_ZN5Paint9DrawPixelEiii>
   b4d84:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
   b4d88:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
   b4d8c:	bf08      	it	eq
   b4d8e:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
   b4d90:	3601      	adds	r6, #1
   b4d92:	e7e6      	b.n	b4d62 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
   b4d94:	075b      	lsls	r3, r3, #29
            ptr++;
   b4d96:	bf18      	it	ne
   b4d98:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
   b4d9a:	3701      	adds	r7, #1
   b4d9c:	e7db      	b.n	b4d56 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
   b4d9e:	b003      	add	sp, #12
   b4da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4da4 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
   b4da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4da8:	9f08      	ldr	r7, [sp, #32]
   b4daa:	4606      	mov	r6, r0
   b4dac:	460c      	mov	r4, r1
   b4dae:	4690      	mov	r8, r2
   b4db0:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
   b4db2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4db6:	b153      	cbz	r3, b4dce <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
   b4db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4dba:	4621      	mov	r1, r4
   b4dbc:	e9cd 7200 	strd	r7, r2, [sp]
   b4dc0:	4630      	mov	r0, r6
   b4dc2:	4642      	mov	r2, r8
   b4dc4:	f7ff ffb2 	bl	b4d2c <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
   b4dc8:	88bb      	ldrh	r3, [r7, #4]
   b4dca:	441c      	add	r4, r3
    while (*p_text != 0) {
   b4dcc:	e7f1      	b.n	b4db2 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
   b4dce:	b002      	add	sp, #8
   b4dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4dd4 <_ZN5Paint18DrawHorizontalLineEiiii>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
   b4dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4dd6:	4606      	mov	r6, r0
   b4dd8:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
   b4dda:	460c      	mov	r4, r1
   b4ddc:	18cd      	adds	r5, r1, r3
   b4dde:	42a5      	cmp	r5, r4
   b4de0:	dd07      	ble.n	b4df2 <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
   b4de2:	4621      	mov	r1, r4
   b4de4:	9b06      	ldr	r3, [sp, #24]
   b4de6:	463a      	mov	r2, r7
   b4de8:	4630      	mov	r0, r6
   b4dea:	f7ff ff5e 	bl	b4caa <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
   b4dee:	3401      	adds	r4, #1
   b4df0:	e7f5      	b.n	b4dde <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
   b4df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4df4 <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
   b4df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4df6:	4606      	mov	r6, r0
   b4df8:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
   b4dfa:	4614      	mov	r4, r2
   b4dfc:	18d5      	adds	r5, r2, r3
   b4dfe:	42a5      	cmp	r5, r4
   b4e00:	dd07      	ble.n	b4e12 <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
   b4e02:	4622      	mov	r2, r4
   b4e04:	9b06      	ldr	r3, [sp, #24]
   b4e06:	4639      	mov	r1, r7
   b4e08:	4630      	mov	r0, r6
   b4e0a:	f7ff ff4e 	bl	b4caa <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
   b4e0e:	3401      	adds	r4, #1
   b4e10:	e7f5      	b.n	b4dfe <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
   b4e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4e14 <_ZN5Paint19DrawFilledRectangleEiiiii>:
}

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
   b4e14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e18:	428b      	cmp	r3, r1
   b4e1a:	4604      	mov	r4, r0
   b4e1c:	9808      	ldr	r0, [sp, #32]
   b4e1e:	461e      	mov	r6, r3
   b4e20:	bfa8      	it	ge
   b4e22:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b4e24:	428b      	cmp	r3, r1
   b4e26:	bfb8      	it	lt
   b4e28:	460b      	movlt	r3, r1
   b4e2a:	4290      	cmp	r0, r2
   b4e2c:	4680      	mov	r8, r0
   b4e2e:	bfa8      	it	ge
   b4e30:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b4e32:	4290      	cmp	r0, r2
   b4e34:	bfac      	ite	ge
   b4e36:	ebc8 0700 	rsbge	r7, r8, r0
   b4e3a:	ebc8 0702 	rsblt	r7, r8, r2
   b4e3e:	461d      	mov	r5, r3
   b4e40:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
   b4e42:	42ae      	cmp	r6, r5
   b4e44:	dc09      	bgt.n	b4e5a <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b4e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4e48:	9300      	str	r3, [sp, #0]
   b4e4a:	4631      	mov	r1, r6
   b4e4c:	463b      	mov	r3, r7
   b4e4e:	4642      	mov	r2, r8
   b4e50:	4620      	mov	r0, r4
   b4e52:	f7ff ffcf 	bl	b4df4 <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
   b4e56:	3601      	adds	r6, #1
   b4e58:	e7f3      	b.n	b4e42 <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
   b4e5a:	b002      	add	sp, #8
   b4e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4e60 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b4e60:	b510      	push	{r4, lr}
   b4e62:	4604      	mov	r4, r0
    Wire.begin(); 
   b4e64:	f001 f88a 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b4e68:	f000 fab2 	bl	b53d0 <_ZN7TwoWire5beginEv>
}
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	bd10      	pop	{r4, pc}

000b4e70 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4e70:	b508      	push	{r3, lr}
   b4e72:	4b02      	ldr	r3, [pc, #8]	; (b4e7c <os_mutex_recursive_create+0xc>)
   b4e74:	681b      	ldr	r3, [r3, #0]
   b4e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4e78:	9301      	str	r3, [sp, #4]
   b4e7a:	bd08      	pop	{r3, pc}
   b4e7c:	00030248 	.word	0x00030248

000b4e80 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4e80:	b508      	push	{r3, lr}
   b4e82:	4b02      	ldr	r3, [pc, #8]	; (b4e8c <HAL_RNG_GetRandomNumber+0xc>)
   b4e84:	681b      	ldr	r3, [r3, #0]
   b4e86:	685b      	ldr	r3, [r3, #4]
   b4e88:	9301      	str	r3, [sp, #4]
   b4e8a:	bd08      	pop	{r3, pc}
   b4e8c:	00030218 	.word	0x00030218

000b4e90 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4e90:	b508      	push	{r3, lr}
   b4e92:	4b02      	ldr	r3, [pc, #8]	; (b4e9c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4e94:	681b      	ldr	r3, [r3, #0]
   b4e96:	695b      	ldr	r3, [r3, #20]
   b4e98:	9301      	str	r3, [sp, #4]
   b4e9a:	bd08      	pop	{r3, pc}
   b4e9c:	00030218 	.word	0x00030218

000b4ea0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4ea0:	b508      	push	{r3, lr}
   b4ea2:	4b02      	ldr	r3, [pc, #8]	; (b4eac <hal_gpio_mode+0xc>)
   b4ea4:	681b      	ldr	r3, [r3, #0]
   b4ea6:	689b      	ldr	r3, [r3, #8]
   b4ea8:	9301      	str	r3, [sp, #4]
   b4eaa:	bd08      	pop	{r3, pc}
   b4eac:	0003022c 	.word	0x0003022c

000b4eb0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4eb0:	b508      	push	{r3, lr}
   b4eb2:	4b02      	ldr	r3, [pc, #8]	; (b4ebc <hal_gpio_get_mode+0xc>)
   b4eb4:	681b      	ldr	r3, [r3, #0]
   b4eb6:	68db      	ldr	r3, [r3, #12]
   b4eb8:	9301      	str	r3, [sp, #4]
   b4eba:	bd08      	pop	{r3, pc}
   b4ebc:	0003022c 	.word	0x0003022c

000b4ec0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4ec0:	b508      	push	{r3, lr}
   b4ec2:	4b02      	ldr	r3, [pc, #8]	; (b4ecc <hal_gpio_write+0xc>)
   b4ec4:	681b      	ldr	r3, [r3, #0]
   b4ec6:	691b      	ldr	r3, [r3, #16]
   b4ec8:	9301      	str	r3, [sp, #4]
   b4eca:	bd08      	pop	{r3, pc}
   b4ecc:	0003022c 	.word	0x0003022c

000b4ed0 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4ed0:	b508      	push	{r3, lr}
   b4ed2:	4b02      	ldr	r3, [pc, #8]	; (b4edc <hal_gpio_read+0xc>)
   b4ed4:	681b      	ldr	r3, [r3, #0]
   b4ed6:	695b      	ldr	r3, [r3, #20]
   b4ed8:	9301      	str	r3, [sp, #4]
   b4eda:	bd08      	pop	{r3, pc}
   b4edc:	0003022c 	.word	0x0003022c

000b4ee0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4ee0:	b508      	push	{r3, lr}
   b4ee2:	4b02      	ldr	r3, [pc, #8]	; (b4eec <hal_i2c_begin+0xc>)
   b4ee4:	681b      	ldr	r3, [r3, #0]
   b4ee6:	68db      	ldr	r3, [r3, #12]
   b4ee8:	9301      	str	r3, [sp, #4]
   b4eea:	bd08      	pop	{r3, pc}
   b4eec:	00030228 	.word	0x00030228

000b4ef0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4ef0:	b508      	push	{r3, lr}
   b4ef2:	4b02      	ldr	r3, [pc, #8]	; (b4efc <hal_i2c_begin_transmission+0xc>)
   b4ef4:	681b      	ldr	r3, [r3, #0]
   b4ef6:	699b      	ldr	r3, [r3, #24]
   b4ef8:	9301      	str	r3, [sp, #4]
   b4efa:	bd08      	pop	{r3, pc}
   b4efc:	00030228 	.word	0x00030228

000b4f00 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4f00:	b508      	push	{r3, lr}
   b4f02:	4b02      	ldr	r3, [pc, #8]	; (b4f0c <hal_i2c_end_transmission+0xc>)
   b4f04:	681b      	ldr	r3, [r3, #0]
   b4f06:	69db      	ldr	r3, [r3, #28]
   b4f08:	9301      	str	r3, [sp, #4]
   b4f0a:	bd08      	pop	{r3, pc}
   b4f0c:	00030228 	.word	0x00030228

000b4f10 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4f10:	b508      	push	{r3, lr}
   b4f12:	4b02      	ldr	r3, [pc, #8]	; (b4f1c <hal_i2c_write+0xc>)
   b4f14:	681b      	ldr	r3, [r3, #0]
   b4f16:	6a1b      	ldr	r3, [r3, #32]
   b4f18:	9301      	str	r3, [sp, #4]
   b4f1a:	bd08      	pop	{r3, pc}
   b4f1c:	00030228 	.word	0x00030228

000b4f20 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4f20:	b508      	push	{r3, lr}
   b4f22:	4b02      	ldr	r3, [pc, #8]	; (b4f2c <hal_i2c_available+0xc>)
   b4f24:	681b      	ldr	r3, [r3, #0]
   b4f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f28:	9301      	str	r3, [sp, #4]
   b4f2a:	bd08      	pop	{r3, pc}
   b4f2c:	00030228 	.word	0x00030228

000b4f30 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4f30:	b508      	push	{r3, lr}
   b4f32:	4b02      	ldr	r3, [pc, #8]	; (b4f3c <hal_i2c_read+0xc>)
   b4f34:	681b      	ldr	r3, [r3, #0]
   b4f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f38:	9301      	str	r3, [sp, #4]
   b4f3a:	bd08      	pop	{r3, pc}
   b4f3c:	00030228 	.word	0x00030228

000b4f40 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b02      	ldr	r3, [pc, #8]	; (b4f4c <hal_i2c_peek+0xc>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f48:	9301      	str	r3, [sp, #4]
   b4f4a:	bd08      	pop	{r3, pc}
   b4f4c:	00030228 	.word	0x00030228

000b4f50 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4f50:	b508      	push	{r3, lr}
   b4f52:	4b02      	ldr	r3, [pc, #8]	; (b4f5c <hal_i2c_flush+0xc>)
   b4f54:	681b      	ldr	r3, [r3, #0]
   b4f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4f58:	9301      	str	r3, [sp, #4]
   b4f5a:	bd08      	pop	{r3, pc}
   b4f5c:	00030228 	.word	0x00030228

000b4f60 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4f60:	b508      	push	{r3, lr}
   b4f62:	4b02      	ldr	r3, [pc, #8]	; (b4f6c <hal_i2c_is_enabled+0xc>)
   b4f64:	681b      	ldr	r3, [r3, #0]
   b4f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4f68:	9301      	str	r3, [sp, #4]
   b4f6a:	bd08      	pop	{r3, pc}
   b4f6c:	00030228 	.word	0x00030228

000b4f70 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4f70:	b508      	push	{r3, lr}
   b4f72:	4b02      	ldr	r3, [pc, #8]	; (b4f7c <hal_i2c_init+0xc>)
   b4f74:	681b      	ldr	r3, [r3, #0]
   b4f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f78:	9301      	str	r3, [sp, #4]
   b4f7a:	bd08      	pop	{r3, pc}
   b4f7c:	00030228 	.word	0x00030228

000b4f80 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4f80:	b508      	push	{r3, lr}
   b4f82:	4b02      	ldr	r3, [pc, #8]	; (b4f8c <hal_i2c_request_ex+0xc>)
   b4f84:	681b      	ldr	r3, [r3, #0]
   b4f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4f88:	9301      	str	r3, [sp, #4]
   b4f8a:	bd08      	pop	{r3, pc}
   b4f8c:	00030228 	.word	0x00030228

000b4f90 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4f90:	b508      	push	{r3, lr}
   b4f92:	4b02      	ldr	r3, [pc, #8]	; (b4f9c <inet_inet_ntop+0xc>)
   b4f94:	681b      	ldr	r3, [r3, #0]
   b4f96:	695b      	ldr	r3, [r3, #20]
   b4f98:	9301      	str	r3, [sp, #4]
   b4f9a:	bd08      	pop	{r3, pc}
   b4f9c:	00030264 	.word	0x00030264

000b4fa0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4fa0:	b508      	push	{r3, lr}
   b4fa2:	4b02      	ldr	r3, [pc, #8]	; (b4fac <netdb_freeaddrinfo+0xc>)
   b4fa4:	681b      	ldr	r3, [r3, #0]
   b4fa6:	689b      	ldr	r3, [r3, #8]
   b4fa8:	9301      	str	r3, [sp, #4]
   b4faa:	bd08      	pop	{r3, pc}
   b4fac:	00030268 	.word	0x00030268

000b4fb0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4fb0:	b508      	push	{r3, lr}
   b4fb2:	4b02      	ldr	r3, [pc, #8]	; (b4fbc <netdb_getaddrinfo+0xc>)
   b4fb4:	681b      	ldr	r3, [r3, #0]
   b4fb6:	68db      	ldr	r3, [r3, #12]
   b4fb8:	9301      	str	r3, [sp, #4]
   b4fba:	bd08      	pop	{r3, pc}
   b4fbc:	00030268 	.word	0x00030268

000b4fc0 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4fc0:	b508      	push	{r3, lr}
   b4fc2:	4b02      	ldr	r3, [pc, #8]	; (b4fcc <hal_spi_begin+0xc>)
   b4fc4:	681b      	ldr	r3, [r3, #0]
   b4fc6:	681b      	ldr	r3, [r3, #0]
   b4fc8:	9301      	str	r3, [sp, #4]
   b4fca:	bd08      	pop	{r3, pc}
   b4fcc:	00030230 	.word	0x00030230

000b4fd0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4fd0:	b508      	push	{r3, lr}
   b4fd2:	4b02      	ldr	r3, [pc, #8]	; (b4fdc <hal_spi_transfer+0xc>)
   b4fd4:	681b      	ldr	r3, [r3, #0]
   b4fd6:	695b      	ldr	r3, [r3, #20]
   b4fd8:	9301      	str	r3, [sp, #4]
   b4fda:	bd08      	pop	{r3, pc}
   b4fdc:	00030230 	.word	0x00030230

000b4fe0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4fe0:	b508      	push	{r3, lr}
   b4fe2:	4b02      	ldr	r3, [pc, #8]	; (b4fec <hal_spi_init+0xc>)
   b4fe4:	681b      	ldr	r3, [r3, #0]
   b4fe6:	69db      	ldr	r3, [r3, #28]
   b4fe8:	9301      	str	r3, [sp, #4]
   b4fea:	bd08      	pop	{r3, pc}
   b4fec:	00030230 	.word	0x00030230

000b4ff0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ff0:	b508      	push	{r3, lr}
   b4ff2:	4b02      	ldr	r3, [pc, #8]	; (b4ffc <hal_spi_is_enabled+0xc>)
   b4ff4:	681b      	ldr	r3, [r3, #0]
   b4ff6:	6a1b      	ldr	r3, [r3, #32]
   b4ff8:	9301      	str	r3, [sp, #4]
   b4ffa:	bd08      	pop	{r3, pc}
   b4ffc:	00030230 	.word	0x00030230

000b5000 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5000:	b508      	push	{r3, lr}
   b5002:	4b02      	ldr	r3, [pc, #8]	; (b500c <hal_spi_info+0xc>)
   b5004:	681b      	ldr	r3, [r3, #0]
   b5006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5008:	9301      	str	r3, [sp, #4]
   b500a:	bd08      	pop	{r3, pc}
   b500c:	00030230 	.word	0x00030230

000b5010 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5010:	b508      	push	{r3, lr}
   b5012:	4b02      	ldr	r3, [pc, #8]	; (b501c <hal_spi_set_settings+0xc>)
   b5014:	681b      	ldr	r3, [r3, #0]
   b5016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5018:	9301      	str	r3, [sp, #4]
   b501a:	bd08      	pop	{r3, pc}
   b501c:	00030230 	.word	0x00030230

000b5020 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5020:	b508      	push	{r3, lr}
   b5022:	4b02      	ldr	r3, [pc, #8]	; (b502c <hal_spi_acquire+0xc>)
   b5024:	681b      	ldr	r3, [r3, #0]
   b5026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5028:	9301      	str	r3, [sp, #4]
   b502a:	bd08      	pop	{r3, pc}
   b502c:	00030230 	.word	0x00030230

000b5030 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5030:	b508      	push	{r3, lr}
   b5032:	4b02      	ldr	r3, [pc, #8]	; (b503c <hal_spi_release+0xc>)
   b5034:	681b      	ldr	r3, [r3, #0]
   b5036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5038:	9301      	str	r3, [sp, #4]
   b503a:	bd08      	pop	{r3, pc}
   b503c:	00030230 	.word	0x00030230

000b5040 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5040:	b508      	push	{r3, lr}
   b5042:	4b02      	ldr	r3, [pc, #8]	; (b504c <hal_usart_write+0xc>)
   b5044:	681b      	ldr	r3, [r3, #0]
   b5046:	68db      	ldr	r3, [r3, #12]
   b5048:	9301      	str	r3, [sp, #4]
   b504a:	bd08      	pop	{r3, pc}
   b504c:	0003023c 	.word	0x0003023c

000b5050 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5050:	b508      	push	{r3, lr}
   b5052:	4b02      	ldr	r3, [pc, #8]	; (b505c <hal_usart_available+0xc>)
   b5054:	681b      	ldr	r3, [r3, #0]
   b5056:	691b      	ldr	r3, [r3, #16]
   b5058:	9301      	str	r3, [sp, #4]
   b505a:	bd08      	pop	{r3, pc}
   b505c:	0003023c 	.word	0x0003023c

000b5060 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5060:	b508      	push	{r3, lr}
   b5062:	4b02      	ldr	r3, [pc, #8]	; (b506c <hal_usart_read+0xc>)
   b5064:	681b      	ldr	r3, [r3, #0]
   b5066:	695b      	ldr	r3, [r3, #20]
   b5068:	9301      	str	r3, [sp, #4]
   b506a:	bd08      	pop	{r3, pc}
   b506c:	0003023c 	.word	0x0003023c

000b5070 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5070:	b508      	push	{r3, lr}
   b5072:	4b02      	ldr	r3, [pc, #8]	; (b507c <hal_usart_peek+0xc>)
   b5074:	681b      	ldr	r3, [r3, #0]
   b5076:	699b      	ldr	r3, [r3, #24]
   b5078:	9301      	str	r3, [sp, #4]
   b507a:	bd08      	pop	{r3, pc}
   b507c:	0003023c 	.word	0x0003023c

000b5080 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5080:	b508      	push	{r3, lr}
   b5082:	4b02      	ldr	r3, [pc, #8]	; (b508c <hal_usart_flush+0xc>)
   b5084:	681b      	ldr	r3, [r3, #0]
   b5086:	69db      	ldr	r3, [r3, #28]
   b5088:	9301      	str	r3, [sp, #4]
   b508a:	bd08      	pop	{r3, pc}
   b508c:	0003023c 	.word	0x0003023c

000b5090 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5090:	b508      	push	{r3, lr}
   b5092:	4b02      	ldr	r3, [pc, #8]	; (b509c <hal_usart_is_enabled+0xc>)
   b5094:	681b      	ldr	r3, [r3, #0]
   b5096:	6a1b      	ldr	r3, [r3, #32]
   b5098:	9301      	str	r3, [sp, #4]
   b509a:	bd08      	pop	{r3, pc}
   b509c:	0003023c 	.word	0x0003023c

000b50a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b50a0:	b508      	push	{r3, lr}
   b50a2:	4b02      	ldr	r3, [pc, #8]	; (b50ac <hal_usart_available_data_for_write+0xc>)
   b50a4:	681b      	ldr	r3, [r3, #0]
   b50a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b50a8:	9301      	str	r3, [sp, #4]
   b50aa:	bd08      	pop	{r3, pc}
   b50ac:	0003023c 	.word	0x0003023c

000b50b0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b50b0:	b508      	push	{r3, lr}
   b50b2:	4b02      	ldr	r3, [pc, #8]	; (b50bc <hal_usart_init_ex+0xc>)
   b50b4:	681b      	ldr	r3, [r3, #0]
   b50b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50b8:	9301      	str	r3, [sp, #4]
   b50ba:	bd08      	pop	{r3, pc}
   b50bc:	0003023c 	.word	0x0003023c

000b50c0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50c0:	b508      	push	{r3, lr}
   b50c2:	4b02      	ldr	r3, [pc, #8]	; (b50cc <HAL_USB_USART_Init+0xc>)
   b50c4:	681b      	ldr	r3, [r3, #0]
   b50c6:	681b      	ldr	r3, [r3, #0]
   b50c8:	9301      	str	r3, [sp, #4]
   b50ca:	bd08      	pop	{r3, pc}
   b50cc:	0003024c 	.word	0x0003024c

000b50d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b50d0:	b508      	push	{r3, lr}
   b50d2:	4b02      	ldr	r3, [pc, #8]	; (b50dc <HAL_USB_USART_Begin+0xc>)
   b50d4:	681b      	ldr	r3, [r3, #0]
   b50d6:	685b      	ldr	r3, [r3, #4]
   b50d8:	9301      	str	r3, [sp, #4]
   b50da:	bd08      	pop	{r3, pc}
   b50dc:	0003024c 	.word	0x0003024c

000b50e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b50e0:	b508      	push	{r3, lr}
   b50e2:	4b02      	ldr	r3, [pc, #8]	; (b50ec <HAL_USB_USART_Available_Data+0xc>)
   b50e4:	681b      	ldr	r3, [r3, #0]
   b50e6:	691b      	ldr	r3, [r3, #16]
   b50e8:	9301      	str	r3, [sp, #4]
   b50ea:	bd08      	pop	{r3, pc}
   b50ec:	0003024c 	.word	0x0003024c

000b50f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b50f0:	b508      	push	{r3, lr}
   b50f2:	4b02      	ldr	r3, [pc, #8]	; (b50fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b50f4:	681b      	ldr	r3, [r3, #0]
   b50f6:	695b      	ldr	r3, [r3, #20]
   b50f8:	9301      	str	r3, [sp, #4]
   b50fa:	bd08      	pop	{r3, pc}
   b50fc:	0003024c 	.word	0x0003024c

000b5100 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5100:	b508      	push	{r3, lr}
   b5102:	4b02      	ldr	r3, [pc, #8]	; (b510c <HAL_USB_USART_Receive_Data+0xc>)
   b5104:	681b      	ldr	r3, [r3, #0]
   b5106:	699b      	ldr	r3, [r3, #24]
   b5108:	9301      	str	r3, [sp, #4]
   b510a:	bd08      	pop	{r3, pc}
   b510c:	0003024c 	.word	0x0003024c

000b5110 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5110:	b508      	push	{r3, lr}
   b5112:	4b02      	ldr	r3, [pc, #8]	; (b511c <HAL_USB_USART_Send_Data+0xc>)
   b5114:	681b      	ldr	r3, [r3, #0]
   b5116:	69db      	ldr	r3, [r3, #28]
   b5118:	9301      	str	r3, [sp, #4]
   b511a:	bd08      	pop	{r3, pc}
   b511c:	0003024c 	.word	0x0003024c

000b5120 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5120:	b508      	push	{r3, lr}
   b5122:	4b02      	ldr	r3, [pc, #8]	; (b512c <HAL_USB_USART_Flush_Data+0xc>)
   b5124:	681b      	ldr	r3, [r3, #0]
   b5126:	6a1b      	ldr	r3, [r3, #32]
   b5128:	9301      	str	r3, [sp, #4]
   b512a:	bd08      	pop	{r3, pc}
   b512c:	0003024c 	.word	0x0003024c

000b5130 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5130:	b508      	push	{r3, lr}
   b5132:	4b02      	ldr	r3, [pc, #8]	; (b513c <set_system_mode+0xc>)
   b5134:	681b      	ldr	r3, [r3, #0]
   b5136:	685b      	ldr	r3, [r3, #4]
   b5138:	9301      	str	r3, [sp, #4]
   b513a:	bd08      	pop	{r3, pc}
   b513c:	00030220 	.word	0x00030220

000b5140 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5140:	b508      	push	{r3, lr}
   b5142:	4b02      	ldr	r3, [pc, #8]	; (b514c <system_delay_ms+0xc>)
   b5144:	681b      	ldr	r3, [r3, #0]
   b5146:	695b      	ldr	r3, [r3, #20]
   b5148:	9301      	str	r3, [sp, #4]
   b514a:	bd08      	pop	{r3, pc}
   b514c:	00030220 	.word	0x00030220

000b5150 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5150:	b508      	push	{r3, lr}
   b5152:	4b03      	ldr	r3, [pc, #12]	; (b5160 <system_ctrl_set_app_request_handler+0x10>)
   b5154:	681b      	ldr	r3, [r3, #0]
   b5156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b515a:	9301      	str	r3, [sp, #4]
   b515c:	bd08      	pop	{r3, pc}
   b515e:	0000      	.short	0x0000
   b5160:	00030220 	.word	0x00030220

000b5164 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b03      	ldr	r3, [pc, #12]	; (b5174 <system_ctrl_set_result+0x10>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b516e:	9301      	str	r3, [sp, #4]
   b5170:	bd08      	pop	{r3, pc}
   b5172:	0000      	.short	0x0000
   b5174:	00030220 	.word	0x00030220

000b5178 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <spark_set_random_seed_from_cloud_handler+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	00030244 	.word	0x00030244

000b5188 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <network_connect+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	685b      	ldr	r3, [r3, #4]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	00030240 	.word	0x00030240

000b5198 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <network_connecting+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	689b      	ldr	r3, [r3, #8]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030240 	.word	0x00030240

000b51a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <network_disconnect+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	68db      	ldr	r3, [r3, #12]
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030240 	.word	0x00030240

000b51b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <network_ready+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	691b      	ldr	r3, [r3, #16]
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030240 	.word	0x00030240

000b51c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b02      	ldr	r3, [pc, #8]	; (b51d4 <network_on+0xc>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	695b      	ldr	r3, [r3, #20]
   b51d0:	9301      	str	r3, [sp, #4]
   b51d2:	bd08      	pop	{r3, pc}
   b51d4:	00030240 	.word	0x00030240

000b51d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b51d8:	b508      	push	{r3, lr}
   b51da:	4b02      	ldr	r3, [pc, #8]	; (b51e4 <network_off+0xc>)
   b51dc:	681b      	ldr	r3, [r3, #0]
   b51de:	699b      	ldr	r3, [r3, #24]
   b51e0:	9301      	str	r3, [sp, #4]
   b51e2:	bd08      	pop	{r3, pc}
   b51e4:	00030240 	.word	0x00030240

000b51e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b51e8:	b508      	push	{r3, lr}
   b51ea:	4b02      	ldr	r3, [pc, #8]	; (b51f4 <network_listen+0xc>)
   b51ec:	681b      	ldr	r3, [r3, #0]
   b51ee:	69db      	ldr	r3, [r3, #28]
   b51f0:	9301      	str	r3, [sp, #4]
   b51f2:	bd08      	pop	{r3, pc}
   b51f4:	00030240 	.word	0x00030240

000b51f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b51f8:	b508      	push	{r3, lr}
   b51fa:	4b02      	ldr	r3, [pc, #8]	; (b5204 <network_listening+0xc>)
   b51fc:	681b      	ldr	r3, [r3, #0]
   b51fe:	6a1b      	ldr	r3, [r3, #32]
   b5200:	9301      	str	r3, [sp, #4]
   b5202:	bd08      	pop	{r3, pc}
   b5204:	00030240 	.word	0x00030240

000b5208 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5208:	b508      	push	{r3, lr}
   b520a:	4b02      	ldr	r3, [pc, #8]	; (b5214 <network_set_listen_timeout+0xc>)
   b520c:	681b      	ldr	r3, [r3, #0]
   b520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5210:	9301      	str	r3, [sp, #4]
   b5212:	bd08      	pop	{r3, pc}
   b5214:	00030240 	.word	0x00030240

000b5218 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5218:	b508      	push	{r3, lr}
   b521a:	4b02      	ldr	r3, [pc, #8]	; (b5224 <network_get_listen_timeout+0xc>)
   b521c:	681b      	ldr	r3, [r3, #0]
   b521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5220:	9301      	str	r3, [sp, #4]
   b5222:	bd08      	pop	{r3, pc}
   b5224:	00030240 	.word	0x00030240

000b5228 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5228:	b508      	push	{r3, lr}
   b522a:	4b02      	ldr	r3, [pc, #8]	; (b5234 <network_is_on+0xc>)
   b522c:	681b      	ldr	r3, [r3, #0]
   b522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5230:	9301      	str	r3, [sp, #4]
   b5232:	bd08      	pop	{r3, pc}
   b5234:	00030240 	.word	0x00030240

000b5238 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5238:	b508      	push	{r3, lr}
   b523a:	4b02      	ldr	r3, [pc, #8]	; (b5244 <network_is_off+0xc>)
   b523c:	681b      	ldr	r3, [r3, #0]
   b523e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5240:	9301      	str	r3, [sp, #4]
   b5242:	bd08      	pop	{r3, pc}
   b5244:	00030240 	.word	0x00030240

000b5248 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5248:	b508      	push	{r3, lr}
   b524a:	4b02      	ldr	r3, [pc, #8]	; (b5254 <malloc+0xc>)
   b524c:	681b      	ldr	r3, [r3, #0]
   b524e:	681b      	ldr	r3, [r3, #0]
   b5250:	9301      	str	r3, [sp, #4]
   b5252:	bd08      	pop	{r3, pc}
   b5254:	0003021c 	.word	0x0003021c

000b5258 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5258:	b508      	push	{r3, lr}
   b525a:	4b02      	ldr	r3, [pc, #8]	; (b5264 <free+0xc>)
   b525c:	681b      	ldr	r3, [r3, #0]
   b525e:	685b      	ldr	r3, [r3, #4]
   b5260:	9301      	str	r3, [sp, #4]
   b5262:	bd08      	pop	{r3, pc}
   b5264:	0003021c 	.word	0x0003021c

000b5268 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5268:	b508      	push	{r3, lr}
   b526a:	4b02      	ldr	r3, [pc, #8]	; (b5274 <realloc+0xc>)
   b526c:	681b      	ldr	r3, [r3, #0]
   b526e:	689b      	ldr	r3, [r3, #8]
   b5270:	9301      	str	r3, [sp, #4]
   b5272:	bd08      	pop	{r3, pc}
   b5274:	0003021c 	.word	0x0003021c

000b5278 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5278:	b508      	push	{r3, lr}
   b527a:	4b02      	ldr	r3, [pc, #8]	; (b5284 <vsnprintf+0xc>)
   b527c:	681b      	ldr	r3, [r3, #0]
   b527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5280:	9301      	str	r3, [sp, #4]
   b5282:	bd08      	pop	{r3, pc}
   b5284:	0003021c 	.word	0x0003021c

000b5288 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5288:	b508      	push	{r3, lr}
   b528a:	4b02      	ldr	r3, [pc, #8]	; (b5294 <__assert_func+0xc>)
   b528c:	681b      	ldr	r3, [r3, #0]
   b528e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	bd08      	pop	{r3, pc}
   b5294:	0003021c 	.word	0x0003021c

000b5298 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5298:	b508      	push	{r3, lr}
   b529a:	4b02      	ldr	r3, [pc, #8]	; (b52a4 <newlib_impure_ptr_callback+0xc>)
   b529c:	681b      	ldr	r3, [r3, #0]
   b529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52a0:	9301      	str	r3, [sp, #4]
   b52a2:	bd08      	pop	{r3, pc}
   b52a4:	0003021c 	.word	0x0003021c

000b52a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b52a8:	2100      	movs	r1, #0
   b52aa:	f7ff bf49 	b.w	b5140 <system_delay_ms>
	...

000b52b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b52b0:	4802      	ldr	r0, [pc, #8]	; (b52bc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b52b2:	2300      	movs	r3, #0
   b52b4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b52b6:	f7ff bddb 	b.w	b4e70 <os_mutex_recursive_create>
   b52ba:	bf00      	nop
   b52bc:	2003e6c4 	.word	0x2003e6c4

000b52c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b52c0:	2200      	movs	r2, #0
   b52c2:	6840      	ldr	r0, [r0, #4]
   b52c4:	4611      	mov	r1, r2
   b52c6:	f7ff bf97 	b.w	b51f8 <network_listening>

000b52ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b52ca:	2200      	movs	r2, #0
   b52cc:	6840      	ldr	r0, [r0, #4]
   b52ce:	4611      	mov	r1, r2
   b52d0:	f7ff bfa2 	b.w	b5218 <network_get_listen_timeout>

000b52d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b52d4:	6840      	ldr	r0, [r0, #4]
   b52d6:	2200      	movs	r2, #0
   b52d8:	f7ff bf96 	b.w	b5208 <network_set_listen_timeout>

000b52dc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b52dc:	6840      	ldr	r0, [r0, #4]
   b52de:	2200      	movs	r2, #0
   b52e0:	f081 0101 	eor.w	r1, r1, #1
   b52e4:	f7ff bf80 	b.w	b51e8 <network_listen>

000b52e8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b52e8:	2300      	movs	r3, #0
   b52ea:	6840      	ldr	r0, [r0, #4]
   b52ec:	461a      	mov	r2, r3
   b52ee:	4619      	mov	r1, r3
   b52f0:	f7ff bf72 	b.w	b51d8 <network_off>

000b52f4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b52f4:	2300      	movs	r3, #0
   b52f6:	6840      	ldr	r0, [r0, #4]
   b52f8:	461a      	mov	r2, r3
   b52fa:	4619      	mov	r1, r3
   b52fc:	f7ff bf64 	b.w	b51c8 <network_on>

000b5300 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5300:	2200      	movs	r2, #0
   b5302:	6840      	ldr	r0, [r0, #4]
   b5304:	4611      	mov	r1, r2
   b5306:	f7ff bf57 	b.w	b51b8 <network_ready>

000b530a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b530a:	2200      	movs	r2, #0
   b530c:	6840      	ldr	r0, [r0, #4]
   b530e:	4611      	mov	r1, r2
   b5310:	f7ff bf42 	b.w	b5198 <network_connecting>

000b5314 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5314:	6840      	ldr	r0, [r0, #4]
   b5316:	2200      	movs	r2, #0
   b5318:	2102      	movs	r1, #2
   b531a:	f7ff bf45 	b.w	b51a8 <network_disconnect>

000b531e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b531e:	2300      	movs	r3, #0
   b5320:	6840      	ldr	r0, [r0, #4]
   b5322:	461a      	mov	r2, r3
   b5324:	f7ff bf30 	b.w	b5188 <network_connect>

000b5328 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5328:	4b02      	ldr	r3, [pc, #8]	; (b5334 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b532a:	2203      	movs	r2, #3
   b532c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b532e:	4a02      	ldr	r2, [pc, #8]	; (b5338 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5330:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5332:	4770      	bx	lr
   b5334:	2003e6c8 	.word	0x2003e6c8
   b5338:	000b8d88 	.word	0x000b8d88

000b533c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b533c:	4770      	bx	lr

000b533e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b533e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5340:	4606      	mov	r6, r0
   b5342:	4615      	mov	r5, r2
   b5344:	460c      	mov	r4, r1
   b5346:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5348:	42bc      	cmp	r4, r7
   b534a:	d006      	beq.n	b535a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b534c:	6833      	ldr	r3, [r6, #0]
   b534e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5352:	689b      	ldr	r3, [r3, #8]
   b5354:	4630      	mov	r0, r6
   b5356:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5358:	e7f6      	b.n	b5348 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b535a:	4628      	mov	r0, r5
   b535c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b535e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b535e:	7c00      	ldrb	r0, [r0, #16]
   b5360:	2200      	movs	r2, #0
   b5362:	f7ff bdd5 	b.w	b4f10 <hal_i2c_write>

000b5366 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5366:	7c00      	ldrb	r0, [r0, #16]
   b5368:	2100      	movs	r1, #0
   b536a:	f7ff bdd9 	b.w	b4f20 <hal_i2c_available>

000b536e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b536e:	7c00      	ldrb	r0, [r0, #16]
   b5370:	2100      	movs	r1, #0
   b5372:	f7ff bddd 	b.w	b4f30 <hal_i2c_read>

000b5376 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5376:	7c00      	ldrb	r0, [r0, #16]
   b5378:	2100      	movs	r1, #0
   b537a:	f7ff bde1 	b.w	b4f40 <hal_i2c_peek>

000b537e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b537e:	7c00      	ldrb	r0, [r0, #16]
   b5380:	2100      	movs	r1, #0
   b5382:	f7ff bde5 	b.w	b4f50 <hal_i2c_flush>

000b5386 <_ZN7TwoWireD0Ev>:
   b5386:	b510      	push	{r4, lr}
   b5388:	2114      	movs	r1, #20
   b538a:	4604      	mov	r4, r0
   b538c:	f7fe fe8b 	bl	b40a6 <_ZdlPvj>
   b5390:	4620      	mov	r0, r4
   b5392:	bd10      	pop	{r4, pc}

000b5394 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5394:	b538      	push	{r3, r4, r5, lr}
   b5396:	4604      	mov	r4, r0
   b5398:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b539a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b539e:	2200      	movs	r2, #0
   b53a0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b53a4:	4b09      	ldr	r3, [pc, #36]	; (b53cc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b53a6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53a8:	4608      	mov	r0, r1
   b53aa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b53ac:	4629      	mov	r1, r5
   b53ae:	f7ff fddf 	bl	b4f70 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53b2:	30bf      	adds	r0, #191	; 0xbf
   b53b4:	d108      	bne.n	b53c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b53b6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b53b8:	07db      	lsls	r3, r3, #31
   b53ba:	d505      	bpl.n	b53c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b53bc:	6868      	ldr	r0, [r5, #4]
   b53be:	f7ff ff4b 	bl	b5258 <free>
    free(conf.tx_buffer);
   b53c2:	68e8      	ldr	r0, [r5, #12]
   b53c4:	f7ff ff48 	bl	b5258 <free>
}
   b53c8:	4620      	mov	r0, r4
   b53ca:	bd38      	pop	{r3, r4, r5, pc}
   b53cc:	000b8dc4 	.word	0x000b8dc4

000b53d0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b53d0:	2300      	movs	r3, #0
   b53d2:	7c00      	ldrb	r0, [r0, #16]
   b53d4:	461a      	mov	r2, r3
   b53d6:	4619      	mov	r1, r3
   b53d8:	f7ff bd82 	b.w	b4ee0 <hal_i2c_begin>

000b53dc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b53dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b53de:	2200      	movs	r2, #0
   b53e0:	2314      	movs	r3, #20
   b53e2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b53e6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b53ea:	780b      	ldrb	r3, [r1, #0]
   b53ec:	f88d 3008 	strb.w	r3, [sp, #8]
   b53f0:	684b      	ldr	r3, [r1, #4]
   b53f2:	9303      	str	r3, [sp, #12]
   b53f4:	68cb      	ldr	r3, [r1, #12]
   b53f6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b53f8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b53fa:	7a0b      	ldrb	r3, [r1, #8]
   b53fc:	9305      	str	r3, [sp, #20]
   b53fe:	a901      	add	r1, sp, #4
   b5400:	f7ff fdbe 	bl	b4f80 <hal_i2c_request_ex>
}
   b5404:	b007      	add	sp, #28
   b5406:	f85d fb04 	ldr.w	pc, [sp], #4

000b540a <_ZN7TwoWire11requestFromEhjh>:
{
   b540a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b540c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b540e:	f88d 1000 	strb.w	r1, [sp]
   b5412:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5416:	9103      	str	r1, [sp, #12]
   b5418:	bf18      	it	ne
   b541a:	2301      	movne	r3, #1
   b541c:	4669      	mov	r1, sp
    size_ = size;
   b541e:	9201      	str	r2, [sp, #4]
   b5420:	f88d 3008 	strb.w	r3, [sp, #8]
   b5424:	f7ff ffda 	bl	b53dc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5428:	b005      	add	sp, #20
   b542a:	f85d fb04 	ldr.w	pc, [sp], #4

000b542e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b542e:	2301      	movs	r3, #1
   b5430:	f7ff bfeb 	b.w	b540a <_ZN7TwoWire11requestFromEhjh>

000b5434 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5434:	7c00      	ldrb	r0, [r0, #16]
   b5436:	2200      	movs	r2, #0
   b5438:	f7ff bd5a 	b.w	b4ef0 <hal_i2c_begin_transmission>

000b543c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b543c:	b2c9      	uxtb	r1, r1
   b543e:	f7ff bff9 	b.w	b5434 <_ZN7TwoWire17beginTransmissionEh>

000b5442 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5442:	7c00      	ldrb	r0, [r0, #16]
   b5444:	2200      	movs	r2, #0
   b5446:	f7ff bd5b 	b.w	b4f00 <hal_i2c_end_transmission>

000b544a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b544a:	2101      	movs	r1, #1
   b544c:	f7ff bff9 	b.w	b5442 <_ZN7TwoWire15endTransmissionEh>

000b5450 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5450:	4770      	bx	lr

000b5452 <_ZN9IPAddressD0Ev>:
   b5452:	b510      	push	{r4, lr}
   b5454:	2118      	movs	r1, #24
   b5456:	4604      	mov	r4, r0
   b5458:	f7fe fe25 	bl	b40a6 <_ZdlPvj>
   b545c:	4620      	mov	r0, r4
   b545e:	bd10      	pop	{r4, pc}

000b5460 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5460:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5462:	7d03      	ldrb	r3, [r0, #20]
   b5464:	2b06      	cmp	r3, #6
{
   b5466:	b08d      	sub	sp, #52	; 0x34
   b5468:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b546a:	f100 0704 	add.w	r7, r0, #4
   b546e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5472:	d012      	beq.n	b549a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5474:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5478:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b547c:	220a      	movs	r2, #10
   b547e:	4630      	mov	r0, r6
   b5480:	f000 f953 	bl	b572a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5484:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5486:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5488:	d019      	beq.n	b54be <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b548a:	2c00      	cmp	r4, #0
   b548c:	d0f4      	beq.n	b5478 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b548e:	212e      	movs	r1, #46	; 0x2e
   b5490:	4630      	mov	r0, r6
   b5492:	f000 f93b 	bl	b570c <_ZN5Print5printEc>
   b5496:	4404      	add	r4, r0
   b5498:	e7ee      	b.n	b5478 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b549a:	232f      	movs	r3, #47	; 0x2f
   b549c:	466a      	mov	r2, sp
   b549e:	4639      	mov	r1, r7
   b54a0:	200a      	movs	r0, #10
		buf[0] = 0;
   b54a2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54a6:	f7ff fd73 	bl	b4f90 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b54aa:	4668      	mov	r0, sp
   b54ac:	f7fe fdb6 	bl	b401c <strlen>
   b54b0:	6833      	ldr	r3, [r6, #0]
   b54b2:	4602      	mov	r2, r0
   b54b4:	68db      	ldr	r3, [r3, #12]
   b54b6:	4669      	mov	r1, sp
   b54b8:	4630      	mov	r0, r6
   b54ba:	4798      	blx	r3
   b54bc:	4604      	mov	r4, r0
    }
    return n;
}
   b54be:	4620      	mov	r0, r4
   b54c0:	b00d      	add	sp, #52	; 0x34
   b54c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b54c4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b54c4:	b510      	push	{r4, lr}
   b54c6:	4b05      	ldr	r3, [pc, #20]	; (b54dc <_ZN9IPAddressC1Ev+0x18>)
   b54c8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b54ca:	2211      	movs	r2, #17
   b54cc:	f840 3b04 	str.w	r3, [r0], #4
   b54d0:	2100      	movs	r1, #0
   b54d2:	f000 fdcd 	bl	b6070 <memset>
}
   b54d6:	4620      	mov	r0, r4
   b54d8:	bd10      	pop	{r4, pc}
   b54da:	bf00      	nop
   b54dc:	000b8dec 	.word	0x000b8dec

000b54e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b54e0:	4603      	mov	r3, r0
   b54e2:	4a07      	ldr	r2, [pc, #28]	; (b5500 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b54e4:	b510      	push	{r4, lr}
   b54e6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b54ea:	f101 0210 	add.w	r2, r1, #16
   b54ee:	f851 4b04 	ldr.w	r4, [r1], #4
   b54f2:	f843 4b04 	str.w	r4, [r3], #4
   b54f6:	4291      	cmp	r1, r2
   b54f8:	d1f9      	bne.n	b54ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b54fa:	780a      	ldrb	r2, [r1, #0]
   b54fc:	701a      	strb	r2, [r3, #0]
}
   b54fe:	bd10      	pop	{r4, pc}
   b5500:	000b8dec 	.word	0x000b8dec

000b5504 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5504:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5506:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b550a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b550e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5512:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5516:	2304      	movs	r3, #4
   b5518:	6041      	str	r1, [r0, #4]
   b551a:	7503      	strb	r3, [r0, #20]
}
   b551c:	bd10      	pop	{r4, pc}
	...

000b5520 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5520:	b507      	push	{r0, r1, r2, lr}
   b5522:	4b06      	ldr	r3, [pc, #24]	; (b553c <_ZN9IPAddressC1EPKh+0x1c>)
   b5524:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5526:	78cb      	ldrb	r3, [r1, #3]
   b5528:	9300      	str	r3, [sp, #0]
   b552a:	788b      	ldrb	r3, [r1, #2]
   b552c:	784a      	ldrb	r2, [r1, #1]
   b552e:	7809      	ldrb	r1, [r1, #0]
   b5530:	f7ff ffe8 	bl	b5504 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5534:	b003      	add	sp, #12
   b5536:	f85d fb04 	ldr.w	pc, [sp], #4
   b553a:	bf00      	nop
   b553c:	000b8dec 	.word	0x000b8dec

000b5540 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5540:	4b01      	ldr	r3, [pc, #4]	; (b5548 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5542:	4a02      	ldr	r2, [pc, #8]	; (b554c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5544:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5546:	4770      	bx	lr
   b5548:	2003e6d0 	.word	0x2003e6d0
   b554c:	000b8df8 	.word	0x000b8df8

000b5550 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5550:	2300      	movs	r3, #0
   b5552:	6840      	ldr	r0, [r0, #4]
   b5554:	461a      	mov	r2, r3
   b5556:	f7ff be17 	b.w	b5188 <network_connect>

000b555a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b555a:	6840      	ldr	r0, [r0, #4]
   b555c:	2200      	movs	r2, #0
   b555e:	2102      	movs	r1, #2
   b5560:	f7ff be22 	b.w	b51a8 <network_disconnect>

000b5564 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5564:	2200      	movs	r2, #0
   b5566:	6840      	ldr	r0, [r0, #4]
   b5568:	4611      	mov	r1, r2
   b556a:	f7ff be15 	b.w	b5198 <network_connecting>

000b556e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b556e:	2200      	movs	r2, #0
   b5570:	6840      	ldr	r0, [r0, #4]
   b5572:	4611      	mov	r1, r2
   b5574:	f7ff be20 	b.w	b51b8 <network_ready>

000b5578 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5578:	2300      	movs	r3, #0
   b557a:	6840      	ldr	r0, [r0, #4]
   b557c:	461a      	mov	r2, r3
   b557e:	4619      	mov	r1, r3
   b5580:	f7ff be22 	b.w	b51c8 <network_on>

000b5584 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5584:	2300      	movs	r3, #0
   b5586:	6840      	ldr	r0, [r0, #4]
   b5588:	461a      	mov	r2, r3
   b558a:	4619      	mov	r1, r3
   b558c:	f7ff be24 	b.w	b51d8 <network_off>

000b5590 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5590:	6840      	ldr	r0, [r0, #4]
   b5592:	2100      	movs	r1, #0
   b5594:	f7ff be48 	b.w	b5228 <network_is_on>

000b5598 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5598:	6840      	ldr	r0, [r0, #4]
   b559a:	2100      	movs	r1, #0
   b559c:	f7ff be4c 	b.w	b5238 <network_is_off>

000b55a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b55a0:	6840      	ldr	r0, [r0, #4]
   b55a2:	2200      	movs	r2, #0
   b55a4:	f081 0101 	eor.w	r1, r1, #1
   b55a8:	f7ff be1e 	b.w	b51e8 <network_listen>

000b55ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b55ac:	6840      	ldr	r0, [r0, #4]
   b55ae:	2200      	movs	r2, #0
   b55b0:	f7ff be2a 	b.w	b5208 <network_set_listen_timeout>

000b55b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b55b4:	2200      	movs	r2, #0
   b55b6:	6840      	ldr	r0, [r0, #4]
   b55b8:	4611      	mov	r1, r2
   b55ba:	f7ff be2d 	b.w	b5218 <network_get_listen_timeout>

000b55be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b55be:	2200      	movs	r2, #0
   b55c0:	6840      	ldr	r0, [r0, #4]
   b55c2:	4611      	mov	r1, r2
   b55c4:	f7ff be18 	b.w	b51f8 <network_listening>

000b55c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b55c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b55cc:	b095      	sub	sp, #84	; 0x54
   b55ce:	4614      	mov	r4, r2
   b55d0:	460d      	mov	r5, r1
   b55d2:	4607      	mov	r7, r0
    IPAddress addr;
   b55d4:	f7ff ff76 	bl	b54c4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b55d8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b55da:	221c      	movs	r2, #28
   b55dc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b55de:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b55e0:	f000 fd46 	bl	b6070 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b55e4:	2340      	movs	r3, #64	; 0x40
   b55e6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b55e8:	4620      	mov	r0, r4
   b55ea:	466b      	mov	r3, sp
   b55ec:	aa0c      	add	r2, sp, #48	; 0x30
   b55ee:	2100      	movs	r1, #0
   b55f0:	f7ff fcde 	bl	b4fb0 <netdb_getaddrinfo>
    if (!r) {
   b55f4:	4604      	mov	r4, r0
   b55f6:	2800      	cmp	r0, #0
   b55f8:	d14b      	bne.n	b5692 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b55fa:	4602      	mov	r2, r0
   b55fc:	2101      	movs	r1, #1
   b55fe:	6868      	ldr	r0, [r5, #4]
   b5600:	f7ff fdda 	bl	b51b8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5604:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5606:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5608:	4622      	mov	r2, r4
   b560a:	6868      	ldr	r0, [r5, #4]
   b560c:	f7ff fdd4 	bl	b51b8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5610:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5612:	4681      	mov	r9, r0
        bool ok = false;
   b5614:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5616:	2e00      	cmp	r6, #0
   b5618:	d03b      	beq.n	b5692 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b561a:	2900      	cmp	r1, #0
   b561c:	d139      	bne.n	b5692 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b561e:	6873      	ldr	r3, [r6, #4]
   b5620:	2b02      	cmp	r3, #2
   b5622:	d003      	beq.n	b562c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5624:	2b0a      	cmp	r3, #10
   b5626:	d011      	beq.n	b564c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5628:	69f6      	ldr	r6, [r6, #28]
   b562a:	e7f4      	b.n	b5616 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b562c:	f1b8 0f00 	cmp.w	r8, #0
   b5630:	d0fa      	beq.n	b5628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5632:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5634:	a806      	add	r0, sp, #24
   b5636:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5638:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b563a:	f7ff ff71 	bl	b5520 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b563e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5640:	1d3c      	adds	r4, r7, #4
   b5642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5644:	682b      	ldr	r3, [r5, #0]
   b5646:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5648:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b564a:	e7ed      	b.n	b5628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b564c:	f1b9 0f00 	cmp.w	r9, #0
   b5650:	d0ea      	beq.n	b5628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5652:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5654:	2210      	movs	r2, #16
   b5656:	a801      	add	r0, sp, #4
   b5658:	f000 fd0a 	bl	b6070 <memset>
                    a.v = 6;
   b565c:	2306      	movs	r3, #6
   b565e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5662:	ad01      	add	r5, sp, #4
   b5664:	f104 0308 	add.w	r3, r4, #8
   b5668:	3418      	adds	r4, #24
   b566a:	6818      	ldr	r0, [r3, #0]
   b566c:	6859      	ldr	r1, [r3, #4]
   b566e:	462a      	mov	r2, r5
   b5670:	c203      	stmia	r2!, {r0, r1}
   b5672:	3308      	adds	r3, #8
   b5674:	42a3      	cmp	r3, r4
   b5676:	4615      	mov	r5, r2
   b5678:	d1f7      	bne.n	b566a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b567a:	a901      	add	r1, sp, #4
   b567c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b567e:	ad07      	add	r5, sp, #28
   b5680:	f7ff ff2e 	bl	b54e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5686:	1d3c      	adds	r4, r7, #4
   b5688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b568a:	682b      	ldr	r3, [r5, #0]
   b568c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b568e:	4649      	mov	r1, r9
   b5690:	e7ca      	b.n	b5628 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5692:	9800      	ldr	r0, [sp, #0]
   b5694:	f7ff fc84 	bl	b4fa0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5698:	4638      	mov	r0, r7
   b569a:	b015      	add	sp, #84	; 0x54
   b569c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b56a0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b56a0:	4b02      	ldr	r3, [pc, #8]	; (b56ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b56a2:	4a03      	ldr	r2, [pc, #12]	; (b56b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b56a4:	601a      	str	r2, [r3, #0]
   b56a6:	2200      	movs	r2, #0
   b56a8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b56aa:	4770      	bx	lr
   b56ac:	2003e6d4 	.word	0x2003e6d4
   b56b0:	000b8e04 	.word	0x000b8e04

000b56b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b56b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b56b6:	4606      	mov	r6, r0
   b56b8:	460d      	mov	r5, r1
  size_t n = 0;
   b56ba:	188f      	adds	r7, r1, r2
   b56bc:	2400      	movs	r4, #0
  while (size--) {
   b56be:	42bd      	cmp	r5, r7
   b56c0:	d00c      	beq.n	b56dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b56c2:	6833      	ldr	r3, [r6, #0]
   b56c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b56c8:	689b      	ldr	r3, [r3, #8]
   b56ca:	4630      	mov	r0, r6
   b56cc:	4798      	blx	r3
     if (chunk>=0)
   b56ce:	1e03      	subs	r3, r0, #0
   b56d0:	db01      	blt.n	b56d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b56d2:	441c      	add	r4, r3
  while (size--) {
   b56d4:	e7f3      	b.n	b56be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b56d6:	2c00      	cmp	r4, #0
   b56d8:	bf08      	it	eq
   b56da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b56dc:	4620      	mov	r0, r4
   b56de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b56e0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b56e0:	b513      	push	{r0, r1, r4, lr}
   b56e2:	4604      	mov	r4, r0
    }
   b56e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b56e6:	b159      	cbz	r1, b5700 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b56e8:	9101      	str	r1, [sp, #4]
   b56ea:	f7fe fc97 	bl	b401c <strlen>
   b56ee:	6823      	ldr	r3, [r4, #0]
   b56f0:	9901      	ldr	r1, [sp, #4]
   b56f2:	68db      	ldr	r3, [r3, #12]
   b56f4:	4602      	mov	r2, r0
   b56f6:	4620      	mov	r0, r4
    }
   b56f8:	b002      	add	sp, #8
   b56fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b56fe:	4718      	bx	r3
    }
   b5700:	b002      	add	sp, #8
   b5702:	bd10      	pop	{r4, pc}

000b5704 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5704:	b508      	push	{r3, lr}
  return write(str);
   b5706:	f7ff ffeb 	bl	b56e0 <_ZN5Print5writeEPKc>
}
   b570a:	bd08      	pop	{r3, pc}

000b570c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b570c:	6803      	ldr	r3, [r0, #0]
   b570e:	689b      	ldr	r3, [r3, #8]
   b5710:	4718      	bx	r3

000b5712 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5712:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5714:	210d      	movs	r1, #13
{
   b5716:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5718:	f7ff fff8 	bl	b570c <_ZN5Print5printEc>
  n += print('\n');
   b571c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b571e:	4604      	mov	r4, r0
  n += print('\n');
   b5720:	4628      	mov	r0, r5
   b5722:	f7ff fff3 	bl	b570c <_ZN5Print5printEc>
  return n;
}
   b5726:	4420      	add	r0, r4
   b5728:	bd38      	pop	{r3, r4, r5, pc}

000b572a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b572a:	b530      	push	{r4, r5, lr}
   b572c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b572e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5730:	2a01      	cmp	r2, #1
  *str = '\0';
   b5732:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5736:	bf98      	it	ls
   b5738:	220a      	movls	r2, #10
   b573a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b573c:	460d      	mov	r5, r1
   b573e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5742:	fb01 5312 	mls	r3, r1, r2, r5
   b5746:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b574a:	2b09      	cmp	r3, #9
   b574c:	bf94      	ite	ls
   b574e:	3330      	addls	r3, #48	; 0x30
   b5750:	3337      	addhi	r3, #55	; 0x37
   b5752:	b2db      	uxtb	r3, r3
  } while(n);
   b5754:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5756:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b575a:	d9ef      	bls.n	b573c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b575c:	4621      	mov	r1, r4
   b575e:	f7ff ffbf 	bl	b56e0 <_ZN5Print5writeEPKc>
}
   b5762:	b00b      	add	sp, #44	; 0x2c
   b5764:	bd30      	pop	{r4, r5, pc}

000b5766 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b576a:	b086      	sub	sp, #24
   b576c:	af00      	add	r7, sp, #0
   b576e:	4605      	mov	r5, r0
   b5770:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5772:	1d38      	adds	r0, r7, #4
   b5774:	2114      	movs	r1, #20
{
   b5776:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5778:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b577a:	f7ff fd7d 	bl	b5278 <vsnprintf>

    if (n<bufsize)
   b577e:	2813      	cmp	r0, #19
   b5780:	d80e      	bhi.n	b57a0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5782:	1d39      	adds	r1, r7, #4
   b5784:	4628      	mov	r0, r5
   b5786:	f7ff ffab 	bl	b56e0 <_ZN5Print5writeEPKc>
   b578a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b578c:	b11e      	cbz	r6, b5796 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b578e:	4628      	mov	r0, r5
   b5790:	f7ff ffbf 	bl	b5712 <_ZN5Print7printlnEv>
   b5794:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5796:	4620      	mov	r0, r4
   b5798:	3718      	adds	r7, #24
   b579a:	46bd      	mov	sp, r7
   b579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b57a0:	f100 0308 	add.w	r3, r0, #8
   b57a4:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b57a8:	46e8      	mov	r8, sp
        char bigger[n+1];
   b57aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b57ae:	4622      	mov	r2, r4
   b57b0:	1c41      	adds	r1, r0, #1
   b57b2:	683b      	ldr	r3, [r7, #0]
   b57b4:	4668      	mov	r0, sp
   b57b6:	f7ff fd5f 	bl	b5278 <vsnprintf>
  return write(str);
   b57ba:	4669      	mov	r1, sp
   b57bc:	4628      	mov	r0, r5
   b57be:	f7ff ff8f 	bl	b56e0 <_ZN5Print5writeEPKc>
   b57c2:	4604      	mov	r4, r0
   b57c4:	46c5      	mov	sp, r8
   b57c6:	e7e1      	b.n	b578c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b57c8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b57c8:	4b01      	ldr	r3, [pc, #4]	; (b57d0 <_GLOBAL__sub_I_RGB+0x8>)
   b57ca:	2200      	movs	r2, #0
   b57cc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b57ce:	4770      	bx	lr
   b57d0:	2003e6dc 	.word	0x2003e6dc

000b57d4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b57d4:	2100      	movs	r1, #0
   b57d6:	f7ff bc2b 	b.w	b5030 <hal_spi_release>

000b57da <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b57da:	2100      	movs	r1, #0
   b57dc:	f7ff bc20 	b.w	b5020 <hal_spi_acquire>

000b57e0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b57e0:	b510      	push	{r4, lr}
   b57e2:	4604      	mov	r4, r0
   b57e4:	4608      	mov	r0, r1
{
    _spi = spi;
   b57e6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b57e8:	f7ff fbfa 	bl	b4fe0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b57ec:	2300      	movs	r3, #0
   b57ee:	6063      	str	r3, [r4, #4]
}
   b57f0:	4620      	mov	r0, r4
   b57f2:	bd10      	pop	{r4, pc}

000b57f4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b57f4:	b513      	push	{r0, r1, r4, lr}
   b57f6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b57f8:	7800      	ldrb	r0, [r0, #0]
   b57fa:	f7ff ffee 	bl	b57da <_ZN8SPIClass4lockEv.isra.0>
   b57fe:	b958      	cbnz	r0, b5818 <_ZN8SPIClass5beginEv+0x24>
   b5800:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5802:	9001      	str	r0, [sp, #4]
   b5804:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5808:	f7ff fbda 	bl	b4fc0 <hal_spi_begin>
        unlock();
   b580c:	9801      	ldr	r0, [sp, #4]
    }
}
   b580e:	b002      	add	sp, #8
   b5810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5814:	f7ff bfde 	b.w	b57d4 <_ZN8SPIClass6unlockEv.isra.0>
   b5818:	b002      	add	sp, #8
   b581a:	bd10      	pop	{r4, pc}

000b581c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b581c:	0840      	lsrs	r0, r0, #1
{
   b581e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5820:	6018      	str	r0, [r3, #0]
   b5822:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5824:	6818      	ldr	r0, [r3, #0]
   b5826:	4288      	cmp	r0, r1
   b5828:	b2e5      	uxtb	r5, r4
   b582a:	d906      	bls.n	b583a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b582c:	3401      	adds	r4, #1
   b582e:	2c08      	cmp	r4, #8
   b5830:	d002      	beq.n	b5838 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5832:	0840      	lsrs	r0, r0, #1
   b5834:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5836:	e7f5      	b.n	b5824 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5838:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b583a:	4b02      	ldr	r3, [pc, #8]	; (b5844 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b583c:	5d5b      	ldrb	r3, [r3, r5]
   b583e:	7013      	strb	r3, [r2, #0]
}
   b5840:	bd30      	pop	{r4, r5, pc}
   b5842:	bf00      	nop
   b5844:	000b8e38 	.word	0x000b8e38

000b5848 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b584c:	4606      	mov	r6, r0
   b584e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5850:	7800      	ldrb	r0, [r0, #0]
{
   b5852:	460c      	mov	r4, r1
    CHECK(lock());
   b5854:	f7ff ffc1 	bl	b57da <_ZN8SPIClass4lockEv.isra.0>
   b5858:	2800      	cmp	r0, #0
   b585a:	db1b      	blt.n	b5894 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b585c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b585e:	2214      	movs	r2, #20
   b5860:	2100      	movs	r1, #0
   b5862:	a809      	add	r0, sp, #36	; 0x24
   b5864:	f000 fc04 	bl	b6070 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5868:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b586a:	2200      	movs	r2, #0
   b586c:	a909      	add	r1, sp, #36	; 0x24
   b586e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5870:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5874:	f7ff fbc4 	bl	b5000 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5878:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b587c:	b113      	cbz	r3, b5884 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b587e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5882:	b155      	cbz	r5, b589a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5884:	2700      	movs	r7, #0
   b5886:	46b9      	mov	r9, r7
   b5888:	46b8      	mov	r8, r7
   b588a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b588c:	7923      	ldrb	r3, [r4, #4]
   b588e:	b15d      	cbz	r5, b58a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5890:	b1c3      	cbz	r3, b58c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5892:	2000      	movs	r0, #0
}
   b5894:	b00f      	add	sp, #60	; 0x3c
   b5896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b589a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b589e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b58a2:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b58a6:	e7f1      	b.n	b588c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b58a8:	2b00      	cmp	r3, #0
   b58aa:	d135      	bne.n	b5918 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b58ac:	68a3      	ldr	r3, [r4, #8]
   b58ae:	4543      	cmp	r3, r8
   b58b0:	d108      	bne.n	b58c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b58b2:	f88d 9020 	strb.w	r9, [sp, #32]
   b58b6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b58ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b58be:	89a3      	ldrh	r3, [r4, #12]
   b58c0:	429a      	cmp	r2, r3
   b58c2:	d0e6      	beq.n	b5892 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b58c4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b58c6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b58c8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b58cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b58ce:	ab04      	add	r3, sp, #16
   b58d0:	f10d 020f 	add.w	r2, sp, #15
   b58d4:	f7ff ffa2 	bl	b581c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b58d8:	7921      	ldrb	r1, [r4, #4]
   b58da:	b985      	cbnz	r5, b58fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b58dc:	b989      	cbnz	r1, b5902 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b58de:	68a3      	ldr	r3, [r4, #8]
   b58e0:	4543      	cmp	r3, r8
   b58e2:	d30e      	bcc.n	b5902 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b58e4:	f88d 9020 	strb.w	r9, [sp, #32]
   b58e8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b58ec:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b58f0:	89a3      	ldrh	r3, [r4, #12]
   b58f2:	429a      	cmp	r2, r3
   b58f4:	d105      	bne.n	b5902 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b58f6:	9b04      	ldr	r3, [sp, #16]
   b58f8:	4543      	cmp	r3, r8
   b58fa:	d102      	bne.n	b5902 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b58fc:	e7c9      	b.n	b5892 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b58fe:	2900      	cmp	r1, #0
   b5900:	d1f9      	bne.n	b58f6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5902:	2300      	movs	r3, #0
   b5904:	9301      	str	r3, [sp, #4]
   b5906:	7b63      	ldrb	r3, [r4, #13]
   b5908:	9300      	str	r3, [sp, #0]
   b590a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b590e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5910:	7830      	ldrb	r0, [r6, #0]
   b5912:	f7ff fb7d 	bl	b5010 <hal_spi_set_settings>
   b5916:	e7bc      	b.n	b5892 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5918:	e9cd 5500 	strd	r5, r5, [sp]
   b591c:	462b      	mov	r3, r5
   b591e:	462a      	mov	r2, r5
   b5920:	2101      	movs	r1, #1
   b5922:	e7f5      	b.n	b5910 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5924 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5924:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5926:	7800      	ldrb	r0, [r0, #0]
   b5928:	f7ff fb52 	bl	b4fd0 <hal_spi_transfer>
}
   b592c:	b2c0      	uxtb	r0, r0
   b592e:	bd08      	pop	{r3, pc}

000b5930 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5930:	b510      	push	{r4, lr}
   b5932:	4604      	mov	r4, r0
{
	free(buffer);
   b5934:	6800      	ldr	r0, [r0, #0]
   b5936:	f7ff fc8f 	bl	b5258 <free>
}
   b593a:	4620      	mov	r0, r4
   b593c:	bd10      	pop	{r4, pc}

000b593e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b593e:	b510      	push	{r4, lr}
   b5940:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5942:	6800      	ldr	r0, [r0, #0]
   b5944:	b108      	cbz	r0, b594a <_ZN6String10invalidateEv+0xc>
   b5946:	f7ff fc87 	bl	b5258 <free>
	buffer = NULL;
   b594a:	2300      	movs	r3, #0
	capacity = len = 0;
   b594c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5950:	6023      	str	r3, [r4, #0]
}
   b5952:	bd10      	pop	{r4, pc}

000b5954 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5954:	b538      	push	{r3, r4, r5, lr}
   b5956:	4604      	mov	r4, r0
   b5958:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b595a:	6800      	ldr	r0, [r0, #0]
   b595c:	3101      	adds	r1, #1
   b595e:	f7ff fc83 	bl	b5268 <realloc>
	if (newbuffer) {
   b5962:	b110      	cbz	r0, b596a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5964:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5968:	2001      	movs	r0, #1
	}
	return 0;
}
   b596a:	bd38      	pop	{r3, r4, r5, pc}

000b596c <_ZN6String7reserveEj>:
{
   b596c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b596e:	6803      	ldr	r3, [r0, #0]
{
   b5970:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5972:	b123      	cbz	r3, b597e <_ZN6String7reserveEj+0x12>
   b5974:	6843      	ldr	r3, [r0, #4]
   b5976:	428b      	cmp	r3, r1
   b5978:	d301      	bcc.n	b597e <_ZN6String7reserveEj+0x12>
   b597a:	2001      	movs	r0, #1
}
   b597c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b597e:	4620      	mov	r0, r4
   b5980:	f7ff ffe8 	bl	b5954 <_ZN6String12changeBufferEj>
   b5984:	2800      	cmp	r0, #0
   b5986:	d0f9      	beq.n	b597c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5988:	68a3      	ldr	r3, [r4, #8]
   b598a:	2b00      	cmp	r3, #0
   b598c:	d1f5      	bne.n	b597a <_ZN6String7reserveEj+0xe>
   b598e:	6822      	ldr	r2, [r4, #0]
   b5990:	7013      	strb	r3, [r2, #0]
   b5992:	e7f2      	b.n	b597a <_ZN6String7reserveEj+0xe>

000b5994 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5994:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5996:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5998:	4611      	mov	r1, r2
   b599a:	9201      	str	r2, [sp, #4]
{
   b599c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b599e:	f7ff ffe5 	bl	b596c <_ZN6String7reserveEj>
   b59a2:	9a01      	ldr	r2, [sp, #4]
   b59a4:	b928      	cbnz	r0, b59b2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b59a6:	4620      	mov	r0, r4
   b59a8:	f7ff ffc9 	bl	b593e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b59ac:	4620      	mov	r0, r4
   b59ae:	b003      	add	sp, #12
   b59b0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b59b2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b59b4:	4629      	mov	r1, r5
   b59b6:	6820      	ldr	r0, [r4, #0]
   b59b8:	f000 fb4c 	bl	b6054 <memcpy>
	buffer[len] = 0;
   b59bc:	6822      	ldr	r2, [r4, #0]
   b59be:	68a3      	ldr	r3, [r4, #8]
   b59c0:	2100      	movs	r1, #0
   b59c2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b59c4:	e7f2      	b.n	b59ac <_ZN6String4copyEPKcj+0x18>

000b59c6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b59c6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b59c8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b59ca:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b59ce:	4604      	mov	r4, r0
	len = 0;
   b59d0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b59d2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b59d4:	b141      	cbz	r1, b59e8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b59d6:	4608      	mov	r0, r1
   b59d8:	9101      	str	r1, [sp, #4]
   b59da:	f7fe fb1f 	bl	b401c <strlen>
   b59de:	9901      	ldr	r1, [sp, #4]
   b59e0:	4602      	mov	r2, r0
   b59e2:	4620      	mov	r0, r4
   b59e4:	f7ff ffd6 	bl	b5994 <_ZN6String4copyEPKcj>
}
   b59e8:	4620      	mov	r0, r4
   b59ea:	b002      	add	sp, #8
   b59ec:	bd10      	pop	{r4, pc}

000b59ee <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b59ee:	4288      	cmp	r0, r1
{
   b59f0:	b510      	push	{r4, lr}
   b59f2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b59f4:	d005      	beq.n	b5a02 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b59f6:	680b      	ldr	r3, [r1, #0]
   b59f8:	b12b      	cbz	r3, b5a06 <_ZN6StringaSERKS_+0x18>
   b59fa:	688a      	ldr	r2, [r1, #8]
   b59fc:	4619      	mov	r1, r3
   b59fe:	f7ff ffc9 	bl	b5994 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a02:	4620      	mov	r0, r4
   b5a04:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a06:	f7ff ff9a 	bl	b593e <_ZN6String10invalidateEv>
   b5a0a:	e7fa      	b.n	b5a02 <_ZN6StringaSERKS_+0x14>

000b5a0c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5a0c:	b510      	push	{r4, lr}
	buffer = NULL;
   b5a0e:	2300      	movs	r3, #0
String::String(const String &value)
   b5a10:	4604      	mov	r4, r0
	capacity = 0;
   b5a12:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5a16:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5a18:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5a1a:	f7ff ffe8 	bl	b59ee <_ZN6StringaSERKS_>
}
   b5a1e:	4620      	mov	r0, r4
   b5a20:	bd10      	pop	{r4, pc}

000b5a22 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5a22:	b513      	push	{r0, r1, r4, lr}
   b5a24:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5a26:	b159      	cbz	r1, b5a40 <_ZN6StringaSEPKc+0x1e>
   b5a28:	4608      	mov	r0, r1
   b5a2a:	9101      	str	r1, [sp, #4]
   b5a2c:	f7fe faf6 	bl	b401c <strlen>
   b5a30:	9901      	ldr	r1, [sp, #4]
   b5a32:	4602      	mov	r2, r0
   b5a34:	4620      	mov	r0, r4
   b5a36:	f7ff ffad 	bl	b5994 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5a3a:	4620      	mov	r0, r4
   b5a3c:	b002      	add	sp, #8
   b5a3e:	bd10      	pop	{r4, pc}
	else invalidate();
   b5a40:	f7ff ff7d 	bl	b593e <_ZN6String10invalidateEv>
   b5a44:	e7f9      	b.n	b5a3a <_ZN6StringaSEPKc+0x18>

000b5a46 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5a46:	b570      	push	{r4, r5, r6, lr}
   b5a48:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5a4a:	460e      	mov	r6, r1
   b5a4c:	b909      	cbnz	r1, b5a52 <_ZN6String6concatEPKcj+0xc>
   b5a4e:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5a50:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5a52:	b16a      	cbz	r2, b5a70 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5a54:	6884      	ldr	r4, [r0, #8]
   b5a56:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5a58:	4621      	mov	r1, r4
   b5a5a:	f7ff ff87 	bl	b596c <_ZN6String7reserveEj>
   b5a5e:	2800      	cmp	r0, #0
   b5a60:	d0f5      	beq.n	b5a4e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5a62:	6828      	ldr	r0, [r5, #0]
   b5a64:	68ab      	ldr	r3, [r5, #8]
   b5a66:	4631      	mov	r1, r6
   b5a68:	4418      	add	r0, r3
   b5a6a:	f000 fb37 	bl	b60dc <strcpy>
	len = newlen;
   b5a6e:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5a70:	2001      	movs	r0, #1
   b5a72:	e7ed      	b.n	b5a50 <_ZN6String6concatEPKcj+0xa>

000b5a74 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5a74:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5a76:	688a      	ldr	r2, [r1, #8]
   b5a78:	6809      	ldr	r1, [r1, #0]
{
   b5a7a:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5a7c:	f7ff ffe3 	bl	b5a46 <_ZN6String6concatEPKcj>
   b5a80:	b910      	cbnz	r0, b5a88 <_ZplRK15StringSumHelperRK6String+0x14>
   b5a82:	4620      	mov	r0, r4
   b5a84:	f7ff ff5b 	bl	b593e <_ZN6String10invalidateEv>
	return a;
}
   b5a88:	4620      	mov	r0, r4
   b5a8a:	bd10      	pop	{r4, pc}

000b5a8c <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5a8c:	b513      	push	{r0, r1, r4, lr}
   b5a8e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5a90:	b929      	cbnz	r1, b5a9e <_ZplRK15StringSumHelperPKc+0x12>
   b5a92:	4620      	mov	r0, r4
   b5a94:	f7ff ff53 	bl	b593e <_ZN6String10invalidateEv>
	return a;
}
   b5a98:	4620      	mov	r0, r4
   b5a9a:	b002      	add	sp, #8
   b5a9c:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5a9e:	4608      	mov	r0, r1
   b5aa0:	9101      	str	r1, [sp, #4]
   b5aa2:	f7fe fabb 	bl	b401c <strlen>
   b5aa6:	9901      	ldr	r1, [sp, #4]
   b5aa8:	4602      	mov	r2, r0
   b5aaa:	4620      	mov	r0, r4
   b5aac:	f7ff ffcb 	bl	b5a46 <_ZN6String6concatEPKcj>
   b5ab0:	2800      	cmp	r0, #0
   b5ab2:	d0ee      	beq.n	b5a92 <_ZplRK15StringSumHelperPKc+0x6>
   b5ab4:	e7f0      	b.n	b5a98 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b5ab8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5ab8:	4b05      	ldr	r3, [pc, #20]	; (b5ad0 <_GLOBAL__sub_I_System+0x18>)
   b5aba:	2202      	movs	r2, #2
   b5abc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5abe:	4b05      	ldr	r3, [pc, #20]	; (b5ad4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5ac0:	4a05      	ldr	r2, [pc, #20]	; (b5ad8 <_GLOBAL__sub_I_System+0x20>)
   b5ac2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ac4:	2000      	movs	r0, #0
   b5ac6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5aca:	f7ff bb31 	b.w	b5130 <set_system_mode>
   b5ace:	bf00      	nop
   b5ad0:	2003e6f8 	.word	0x2003e6f8
   b5ad4:	2003e6ec 	.word	0x2003e6ec
   b5ad8:	ffff0000 	.word	0xffff0000

000b5adc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5adc:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5ade:	681a      	ldr	r2, [r3, #0]
   b5ae0:	4b02      	ldr	r3, [pc, #8]	; (b5aec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5ae2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5ae4:	4770      	bx	lr
   b5ae6:	bf00      	nop
   b5ae8:	2003ba68 	.word	0x2003ba68
   b5aec:	2003e6fc 	.word	0x2003e6fc

000b5af0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5af0:	4770      	bx	lr

000b5af2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5af2:	7441      	strb	r1, [r0, #17]
}
   b5af4:	4770      	bx	lr

000b5af6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5af6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5af8:	7c00      	ldrb	r0, [r0, #16]
   b5afa:	f7ff fad1 	bl	b50a0 <hal_usart_available_data_for_write>
}
   b5afe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b02:	bd08      	pop	{r3, pc}

000b5b04 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5b04:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5b06:	7c00      	ldrb	r0, [r0, #16]
   b5b08:	f7ff faa2 	bl	b5050 <hal_usart_available>
}
   b5b0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5b10:	bd08      	pop	{r3, pc}

000b5b12 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5b12:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5b14:	7c00      	ldrb	r0, [r0, #16]
   b5b16:	f7ff faab 	bl	b5070 <hal_usart_peek>
}
   b5b1a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b1e:	bd08      	pop	{r3, pc}

000b5b20 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5b20:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5b22:	7c00      	ldrb	r0, [r0, #16]
   b5b24:	f7ff fa9c 	bl	b5060 <hal_usart_read>
}
   b5b28:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5b2c:	bd08      	pop	{r3, pc}

000b5b2e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5b2e:	7c00      	ldrb	r0, [r0, #16]
   b5b30:	f7ff baa6 	b.w	b5080 <hal_usart_flush>

000b5b34 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b36:	7c45      	ldrb	r5, [r0, #17]
{
   b5b38:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b3a:	b12d      	cbz	r5, b5b48 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5b3c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5b3e:	b003      	add	sp, #12
   b5b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5b44:	f7ff ba7c 	b.w	b5040 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5b48:	7c00      	ldrb	r0, [r0, #16]
   b5b4a:	9101      	str	r1, [sp, #4]
   b5b4c:	f7ff faa8 	bl	b50a0 <hal_usart_available_data_for_write>
   b5b50:	2800      	cmp	r0, #0
   b5b52:	9901      	ldr	r1, [sp, #4]
   b5b54:	dcf2      	bgt.n	b5b3c <_ZN11USARTSerial5writeEh+0x8>
}
   b5b56:	4628      	mov	r0, r5
   b5b58:	b003      	add	sp, #12
   b5b5a:	bd30      	pop	{r4, r5, pc}

000b5b5c <_ZN11USARTSerialD0Ev>:
   b5b5c:	b510      	push	{r4, lr}
   b5b5e:	2114      	movs	r1, #20
   b5b60:	4604      	mov	r4, r0
   b5b62:	f7fe faa0 	bl	b40a6 <_ZdlPvj>
   b5b66:	4620      	mov	r0, r4
   b5b68:	bd10      	pop	{r4, pc}
	...

000b5b6c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5b6c:	b510      	push	{r4, lr}
   b5b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b72:	4604      	mov	r4, r0
   b5b74:	4608      	mov	r0, r1
   b5b76:	4611      	mov	r1, r2
   b5b78:	2200      	movs	r2, #0
   b5b7a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5b7e:	4b04      	ldr	r3, [pc, #16]	; (b5b90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5b80:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b82:	2301      	movs	r3, #1
  _serial = serial;
   b5b84:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b86:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5b88:	f7ff fa92 	bl	b50b0 <hal_usart_init_ex>
}
   b5b8c:	4620      	mov	r0, r4
   b5b8e:	bd10      	pop	{r4, pc}
   b5b90:	000b8e64 	.word	0x000b8e64

000b5b94 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5b94:	7441      	strb	r1, [r0, #17]
}
   b5b96:	4770      	bx	lr

000b5b98 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b98:	4770      	bx	lr

000b5b9a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5b9a:	4770      	bx	lr

000b5b9c <_ZN9USBSerial4readEv>:
{
   b5b9c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5b9e:	2100      	movs	r1, #0
   b5ba0:	7c00      	ldrb	r0, [r0, #16]
   b5ba2:	f7ff faad 	bl	b5100 <HAL_USB_USART_Receive_Data>
}
   b5ba6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5baa:	bd08      	pop	{r3, pc}

000b5bac <_ZN9USBSerial4peekEv>:
{
   b5bac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5bae:	2101      	movs	r1, #1
   b5bb0:	7c00      	ldrb	r0, [r0, #16]
   b5bb2:	f7ff faa5 	bl	b5100 <HAL_USB_USART_Receive_Data>
}
   b5bb6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5bba:	bd08      	pop	{r3, pc}

000b5bbc <_ZN9USBSerial17availableForWriteEv>:
{
   b5bbc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5bbe:	7c00      	ldrb	r0, [r0, #16]
   b5bc0:	f7ff fa96 	bl	b50f0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5bc4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bc8:	bd08      	pop	{r3, pc}

000b5bca <_ZN9USBSerial9availableEv>:
{
   b5bca:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5bcc:	7c00      	ldrb	r0, [r0, #16]
   b5bce:	f7ff fa87 	bl	b50e0 <HAL_USB_USART_Available_Data>
}
   b5bd2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5bd6:	bd08      	pop	{r3, pc}

000b5bd8 <_ZN9USBSerial5writeEh>:
{
   b5bd8:	b513      	push	{r0, r1, r4, lr}
   b5bda:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5bdc:	7c00      	ldrb	r0, [r0, #16]
{
   b5bde:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5be0:	f7ff fa86 	bl	b50f0 <HAL_USB_USART_Available_Data_For_Write>
   b5be4:	2800      	cmp	r0, #0
   b5be6:	9901      	ldr	r1, [sp, #4]
   b5be8:	dc01      	bgt.n	b5bee <_ZN9USBSerial5writeEh+0x16>
   b5bea:	7c60      	ldrb	r0, [r4, #17]
   b5bec:	b120      	cbz	r0, b5bf8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5bee:	7c20      	ldrb	r0, [r4, #16]
   b5bf0:	f7ff fa8e 	bl	b5110 <HAL_USB_USART_Send_Data>
   b5bf4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5bf8:	b002      	add	sp, #8
   b5bfa:	bd10      	pop	{r4, pc}

000b5bfc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5bfc:	7c00      	ldrb	r0, [r0, #16]
   b5bfe:	f7ff ba8f 	b.w	b5120 <HAL_USB_USART_Flush_Data>

000b5c02 <_ZN9USBSerialD0Ev>:
   b5c02:	b510      	push	{r4, lr}
   b5c04:	2114      	movs	r1, #20
   b5c06:	4604      	mov	r4, r0
   b5c08:	f7fe fa4d 	bl	b40a6 <_ZdlPvj>
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	bd10      	pop	{r4, pc}

000b5c10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5c10:	b510      	push	{r4, lr}
   b5c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c16:	4604      	mov	r4, r0
   b5c18:	4608      	mov	r0, r1
   b5c1a:	2100      	movs	r1, #0
   b5c1c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5c20:	4b04      	ldr	r3, [pc, #16]	; (b5c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5c22:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5c24:	2301      	movs	r3, #1
  _serial = serial;
   b5c26:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5c28:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5c2a:	4611      	mov	r1, r2
   b5c2c:	f7ff fa48 	bl	b50c0 <HAL_USB_USART_Init>
}
   b5c30:	4620      	mov	r0, r4
   b5c32:	bd10      	pop	{r4, pc}
   b5c34:	000b8e94 	.word	0x000b8e94

000b5c38 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5c38:	7c00      	ldrb	r0, [r0, #16]
   b5c3a:	2200      	movs	r2, #0
   b5c3c:	f7ff ba48 	b.w	b50d0 <HAL_USB_USART_Begin>

000b5c40 <_Z19acquireSerialBufferv>:
{
   b5c40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5c42:	2214      	movs	r2, #20
{
   b5c44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5c46:	2100      	movs	r1, #0
   b5c48:	f000 fa12 	bl	b6070 <memset>
}
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	bd10      	pop	{r4, pc}

000b5c50 <_Z16_fetch_usbserialv>:
{
   b5c50:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c52:	4c0f      	ldr	r4, [pc, #60]	; (b5c90 <_Z16_fetch_usbserialv+0x40>)
{
   b5c54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5c56:	a803      	add	r0, sp, #12
   b5c58:	f7ff fff2 	bl	b5c40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5c5c:	7821      	ldrb	r1, [r4, #0]
   b5c5e:	f3bf 8f5b 	dmb	ish
   b5c62:	f011 0101 	ands.w	r1, r1, #1
   b5c66:	d10f      	bne.n	b5c88 <_Z16_fetch_usbserialv+0x38>
   b5c68:	4620      	mov	r0, r4
   b5c6a:	9101      	str	r1, [sp, #4]
   b5c6c:	f7fe fa1d 	bl	b40aa <__cxa_guard_acquire>
   b5c70:	9901      	ldr	r1, [sp, #4]
   b5c72:	b148      	cbz	r0, b5c88 <_Z16_fetch_usbserialv+0x38>
   b5c74:	aa03      	add	r2, sp, #12
   b5c76:	4807      	ldr	r0, [pc, #28]	; (b5c94 <_Z16_fetch_usbserialv+0x44>)
   b5c78:	f7ff ffca 	bl	b5c10 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5c7c:	4620      	mov	r0, r4
   b5c7e:	f7fe fa19 	bl	b40b4 <__cxa_guard_release>
   b5c82:	4805      	ldr	r0, [pc, #20]	; (b5c98 <_Z16_fetch_usbserialv+0x48>)
   b5c84:	f000 f9e0 	bl	b6048 <atexit>
	return _usbserial;
}
   b5c88:	4802      	ldr	r0, [pc, #8]	; (b5c94 <_Z16_fetch_usbserialv+0x44>)
   b5c8a:	b008      	add	sp, #32
   b5c8c:	bd10      	pop	{r4, pc}
   b5c8e:	bf00      	nop
   b5c90:	2003e700 	.word	0x2003e700
   b5c94:	2003e704 	.word	0x2003e704
   b5c98:	000b5b99 	.word	0x000b5b99

000b5c9c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5c9c:	2200      	movs	r2, #0
   b5c9e:	6840      	ldr	r0, [r0, #4]
   b5ca0:	4611      	mov	r1, r2
   b5ca2:	f7ff ba89 	b.w	b51b8 <network_ready>

000b5ca6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5ca6:	2200      	movs	r2, #0
   b5ca8:	6840      	ldr	r0, [r0, #4]
   b5caa:	4611      	mov	r1, r2
   b5cac:	f7ff baa4 	b.w	b51f8 <network_listening>

000b5cb0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5cb0:	2200      	movs	r2, #0
   b5cb2:	6840      	ldr	r0, [r0, #4]
   b5cb4:	4611      	mov	r1, r2
   b5cb6:	f7ff baaf 	b.w	b5218 <network_get_listen_timeout>

000b5cba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5cba:	6840      	ldr	r0, [r0, #4]
   b5cbc:	2200      	movs	r2, #0
   b5cbe:	f7ff baa3 	b.w	b5208 <network_set_listen_timeout>

000b5cc2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5cc2:	6840      	ldr	r0, [r0, #4]
   b5cc4:	2200      	movs	r2, #0
   b5cc6:	f081 0101 	eor.w	r1, r1, #1
   b5cca:	f7ff ba8d 	b.w	b51e8 <network_listen>

000b5cce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5cce:	2300      	movs	r3, #0
   b5cd0:	6840      	ldr	r0, [r0, #4]
   b5cd2:	461a      	mov	r2, r3
   b5cd4:	4619      	mov	r1, r3
   b5cd6:	f7ff ba7f 	b.w	b51d8 <network_off>

000b5cda <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5cda:	2300      	movs	r3, #0
   b5cdc:	6840      	ldr	r0, [r0, #4]
   b5cde:	461a      	mov	r2, r3
   b5ce0:	4619      	mov	r1, r3
   b5ce2:	f7ff ba71 	b.w	b51c8 <network_on>

000b5ce6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5ce6:	2200      	movs	r2, #0
   b5ce8:	6840      	ldr	r0, [r0, #4]
   b5cea:	4611      	mov	r1, r2
   b5cec:	f7ff ba54 	b.w	b5198 <network_connecting>

000b5cf0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5cf0:	6840      	ldr	r0, [r0, #4]
   b5cf2:	2200      	movs	r2, #0
   b5cf4:	2102      	movs	r1, #2
   b5cf6:	f7ff ba57 	b.w	b51a8 <network_disconnect>

000b5cfa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5cfa:	2300      	movs	r3, #0
   b5cfc:	6840      	ldr	r0, [r0, #4]
   b5cfe:	461a      	mov	r2, r3
   b5d00:	f7ff ba42 	b.w	b5188 <network_connect>

000b5d04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5d04:	4b02      	ldr	r3, [pc, #8]	; (b5d10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5d06:	2204      	movs	r2, #4
   b5d08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5d0a:	4a02      	ldr	r2, [pc, #8]	; (b5d14 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5d0c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5d0e:	4770      	bx	lr
   b5d10:	2003e718 	.word	0x2003e718
   b5d14:	000b8ec4 	.word	0x000b8ec4

000b5d18 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5d18:	4b01      	ldr	r3, [pc, #4]	; (b5d20 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5d1a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5d1c:	4770      	bx	lr
   b5d1e:	bf00      	nop
   b5d20:	2003ba6c 	.word	0x2003ba6c

000b5d24 <serialEventRun>:
{
   b5d24:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5d26:	4b0b      	ldr	r3, [pc, #44]	; (b5d54 <serialEventRun+0x30>)
   b5d28:	b143      	cbz	r3, b5d3c <serialEventRun+0x18>
   b5d2a:	f7ff ff91 	bl	b5c50 <_Z16_fetch_usbserialv>
   b5d2e:	6803      	ldr	r3, [r0, #0]
   b5d30:	691b      	ldr	r3, [r3, #16]
   b5d32:	4798      	blx	r3
   b5d34:	2800      	cmp	r0, #0
   b5d36:	dd01      	ble.n	b5d3c <serialEventRun+0x18>
        serialEvent();
   b5d38:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5d3c:	4b06      	ldr	r3, [pc, #24]	; (b5d58 <serialEventRun+0x34>)
   b5d3e:	b143      	cbz	r3, b5d52 <serialEventRun+0x2e>
   b5d40:	f000 f95c 	bl	b5ffc <_Z22__fetch_global_Serial1v>
   b5d44:	6803      	ldr	r3, [r0, #0]
   b5d46:	691b      	ldr	r3, [r3, #16]
   b5d48:	4798      	blx	r3
   b5d4a:	2800      	cmp	r0, #0
   b5d4c:	dd01      	ble.n	b5d52 <serialEventRun+0x2e>
        serialEvent1();
   b5d4e:	f3af 8000 	nop.w
}
   b5d52:	bd08      	pop	{r3, pc}
	...

000b5d5c <_post_loop>:
{
   b5d5c:	b508      	push	{r3, lr}
	serialEventRun();
   b5d5e:	f7ff ffe1 	bl	b5d24 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5d62:	f7ff f895 	bl	b4e90 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5d66:	4b01      	ldr	r3, [pc, #4]	; (b5d6c <_post_loop+0x10>)
   b5d68:	6018      	str	r0, [r3, #0]
}
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	2003e728 	.word	0x2003e728

000b5d70 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d70:	4805      	ldr	r0, [pc, #20]	; (b5d88 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5d72:	4a06      	ldr	r2, [pc, #24]	; (b5d8c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5d74:	4906      	ldr	r1, [pc, #24]	; (b5d90 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5d76:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5d78:	1a12      	subs	r2, r2, r0
   b5d7a:	f000 f96b 	bl	b6054 <memcpy>
    __backup_sram_signature = signature;
   b5d7e:	4b05      	ldr	r3, [pc, #20]	; (b5d94 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5d80:	4a05      	ldr	r2, [pc, #20]	; (b5d98 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5d82:	601a      	str	r2, [r3, #0]
}
   b5d84:	bd08      	pop	{r3, pc}
   b5d86:	bf00      	nop
   b5d88:	2003f400 	.word	0x2003f400
   b5d8c:	2003f404 	.word	0x2003f404
   b5d90:	000b9030 	.word	0x000b9030
   b5d94:	2003f400 	.word	0x2003f400
   b5d98:	9a271c1e 	.word	0x9a271c1e

000b5d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5d9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5d9e:	2300      	movs	r3, #0
   b5da0:	9300      	str	r3, [sp, #0]
   b5da2:	461a      	mov	r2, r3
   b5da4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5da8:	f7ff f9dc 	bl	b5164 <system_ctrl_set_result>
}
   b5dac:	b003      	add	sp, #12
   b5dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5db4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5db4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5db6:	8843      	ldrh	r3, [r0, #2]
   b5db8:	2b0a      	cmp	r3, #10
   b5dba:	d008      	beq.n	b5dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5dbc:	2b50      	cmp	r3, #80	; 0x50
   b5dbe:	d10b      	bne.n	b5dd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5dc0:	4b09      	ldr	r3, [pc, #36]	; (b5de8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5dc2:	681b      	ldr	r3, [r3, #0]
   b5dc4:	b14b      	cbz	r3, b5dda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5dc6:	b003      	add	sp, #12
   b5dc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5dcc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5dce:	f7ff ffe5 	bl	b5d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5dd2:	b003      	add	sp, #12
   b5dd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5dd8:	2300      	movs	r3, #0
   b5dda:	9300      	str	r3, [sp, #0]
   b5ddc:	461a      	mov	r2, r3
   b5dde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5de2:	f7ff f9bf 	bl	b5164 <system_ctrl_set_result>
}
   b5de6:	e7f4      	b.n	b5dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5de8:	2003e724 	.word	0x2003e724

000b5dec <module_user_init_hook>:
{
   b5dec:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5dee:	4812      	ldr	r0, [pc, #72]	; (b5e38 <module_user_init_hook+0x4c>)
   b5df0:	2100      	movs	r1, #0
   b5df2:	f7ff fa51 	bl	b5298 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5df6:	4b11      	ldr	r3, [pc, #68]	; (b5e3c <module_user_init_hook+0x50>)
   b5df8:	681a      	ldr	r2, [r3, #0]
   b5dfa:	4b11      	ldr	r3, [pc, #68]	; (b5e40 <module_user_init_hook+0x54>)
   b5dfc:	429a      	cmp	r2, r3
   b5dfe:	4b11      	ldr	r3, [pc, #68]	; (b5e44 <module_user_init_hook+0x58>)
   b5e00:	bf0c      	ite	eq
   b5e02:	2201      	moveq	r2, #1
   b5e04:	2200      	movne	r2, #0
   b5e06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5e08:	d001      	beq.n	b5e0e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5e0a:	f7ff ffb1 	bl	b5d70 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5e0e:	f7ff f837 	bl	b4e80 <HAL_RNG_GetRandomNumber>
   b5e12:	4604      	mov	r4, r0
    srand(seed);
   b5e14:	f000 f934 	bl	b6080 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5e18:	4b0b      	ldr	r3, [pc, #44]	; (b5e48 <module_user_init_hook+0x5c>)
   b5e1a:	b113      	cbz	r3, b5e22 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5e1c:	4620      	mov	r0, r4
   b5e1e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5e22:	2100      	movs	r1, #0
   b5e24:	4808      	ldr	r0, [pc, #32]	; (b5e48 <module_user_init_hook+0x5c>)
   b5e26:	f7ff f9a7 	bl	b5178 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5e2e:	4807      	ldr	r0, [pc, #28]	; (b5e4c <module_user_init_hook+0x60>)
   b5e30:	2100      	movs	r1, #0
   b5e32:	f7ff b98d 	b.w	b5150 <system_ctrl_set_app_request_handler>
   b5e36:	bf00      	nop
   b5e38:	000b5d19 	.word	0x000b5d19
   b5e3c:	2003f400 	.word	0x2003f400
   b5e40:	9a271c1e 	.word	0x9a271c1e
   b5e44:	2003e720 	.word	0x2003e720
   b5e48:	00000000 	.word	0x00000000
   b5e4c:	000b5db5 	.word	0x000b5db5

000b5e50 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5e50:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5e52:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5e54:	d902      	bls.n	b5e5c <pinAvailable+0xc>
    return false;
   b5e56:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5e58:	b002      	add	sp, #8
   b5e5a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5e5c:	f1a0 030b 	sub.w	r3, r0, #11
   b5e60:	2b02      	cmp	r3, #2
   b5e62:	d81a      	bhi.n	b5e9a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5e64:	4c17      	ldr	r4, [pc, #92]	; (b5ec4 <pinAvailable+0x74>)
   b5e66:	7821      	ldrb	r1, [r4, #0]
   b5e68:	f3bf 8f5b 	dmb	ish
   b5e6c:	f011 0101 	ands.w	r1, r1, #1
   b5e70:	d10b      	bne.n	b5e8a <pinAvailable+0x3a>
   b5e72:	4620      	mov	r0, r4
   b5e74:	9101      	str	r1, [sp, #4]
   b5e76:	f7fe f918 	bl	b40aa <__cxa_guard_acquire>
   b5e7a:	9901      	ldr	r1, [sp, #4]
   b5e7c:	b128      	cbz	r0, b5e8a <pinAvailable+0x3a>
   b5e7e:	4812      	ldr	r0, [pc, #72]	; (b5ec8 <pinAvailable+0x78>)
   b5e80:	f7ff fcae 	bl	b57e0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5e84:	4620      	mov	r0, r4
   b5e86:	f7fe f915 	bl	b40b4 <__cxa_guard_release>
   b5e8a:	4b0f      	ldr	r3, [pc, #60]	; (b5ec8 <pinAvailable+0x78>)
   b5e8c:	7818      	ldrb	r0, [r3, #0]
   b5e8e:	f7ff f8af 	bl	b4ff0 <hal_spi_is_enabled>
   b5e92:	2800      	cmp	r0, #0
   b5e94:	d1df      	bne.n	b5e56 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5e96:	2001      	movs	r0, #1
   b5e98:	e7de      	b.n	b5e58 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5e9a:	2801      	cmp	r0, #1
   b5e9c:	d809      	bhi.n	b5eb2 <pinAvailable+0x62>
   b5e9e:	f000 f86d 	bl	b5f7c <_Z19__fetch_global_Wirev>
   b5ea2:	2100      	movs	r1, #0
   b5ea4:	7c00      	ldrb	r0, [r0, #16]
   b5ea6:	f7ff f85b 	bl	b4f60 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5eaa:	f080 0001 	eor.w	r0, r0, #1
   b5eae:	b2c0      	uxtb	r0, r0
   b5eb0:	e7d2      	b.n	b5e58 <pinAvailable+0x8>
   b5eb2:	3809      	subs	r0, #9
   b5eb4:	2801      	cmp	r0, #1
   b5eb6:	d8ee      	bhi.n	b5e96 <pinAvailable+0x46>
   b5eb8:	f000 f8a0 	bl	b5ffc <_Z22__fetch_global_Serial1v>
   b5ebc:	7c00      	ldrb	r0, [r0, #16]
   b5ebe:	f7ff f8e7 	bl	b5090 <hal_usart_is_enabled>
   b5ec2:	e7f2      	b.n	b5eaa <pinAvailable+0x5a>
   b5ec4:	2003e6b8 	.word	0x2003e6b8
   b5ec8:	2003e6bc 	.word	0x2003e6bc

000b5ecc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ecc:	2823      	cmp	r0, #35	; 0x23
{
   b5ece:	b538      	push	{r3, r4, r5, lr}
   b5ed0:	4604      	mov	r4, r0
   b5ed2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ed4:	d80a      	bhi.n	b5eec <pinMode+0x20>
   b5ed6:	29ff      	cmp	r1, #255	; 0xff
   b5ed8:	d008      	beq.n	b5eec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5eda:	f7ff ffb9 	bl	b5e50 <pinAvailable>
   b5ede:	b128      	cbz	r0, b5eec <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5ee0:	4629      	mov	r1, r5
   b5ee2:	4620      	mov	r0, r4
}
   b5ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5ee8:	f7fe bfda 	b.w	b4ea0 <hal_gpio_mode>
}
   b5eec:	bd38      	pop	{r3, r4, r5, pc}

000b5eee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5eee:	b538      	push	{r3, r4, r5, lr}
   b5ef0:	4604      	mov	r4, r0
   b5ef2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5ef4:	f7fe ffdc 	bl	b4eb0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5ef8:	28ff      	cmp	r0, #255	; 0xff
   b5efa:	d010      	beq.n	b5f1e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5efc:	2806      	cmp	r0, #6
   b5efe:	d804      	bhi.n	b5f0a <digitalWrite+0x1c>
   b5f00:	234d      	movs	r3, #77	; 0x4d
   b5f02:	fa23 f000 	lsr.w	r0, r3, r0
   b5f06:	07c3      	lsls	r3, r0, #31
   b5f08:	d409      	bmi.n	b5f1e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5f0a:	4620      	mov	r0, r4
   b5f0c:	f7ff ffa0 	bl	b5e50 <pinAvailable>
   b5f10:	b128      	cbz	r0, b5f1e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5f12:	4629      	mov	r1, r5
   b5f14:	4620      	mov	r0, r4
}
   b5f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b5f1a:	f7fe bfd1 	b.w	b4ec0 <hal_gpio_write>
}
   b5f1e:	bd38      	pop	{r3, r4, r5, pc}

000b5f20 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b5f20:	b510      	push	{r4, lr}
   b5f22:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5f24:	f7fe ffc4 	bl	b4eb0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5f28:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5f2a:	b2db      	uxtb	r3, r3
   b5f2c:	2b01      	cmp	r3, #1
   b5f2e:	d908      	bls.n	b5f42 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5f30:	4620      	mov	r0, r4
   b5f32:	f7ff ff8d 	bl	b5e50 <pinAvailable>
   b5f36:	b120      	cbz	r0, b5f42 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b5f38:	4620      	mov	r0, r4
}
   b5f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b5f3e:	f7fe bfc7 	b.w	b4ed0 <hal_gpio_read>
}
   b5f42:	2000      	movs	r0, #0
   b5f44:	bd10      	pop	{r4, pc}

000b5f46 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f46:	4770      	bx	lr

000b5f48 <_Z17acquireWireBufferv>:
{
   b5f48:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5f4a:	4b0a      	ldr	r3, [pc, #40]	; (b5f74 <_Z17acquireWireBufferv+0x2c>)
   b5f4c:	6003      	str	r3, [r0, #0]
   b5f4e:	2301      	movs	r3, #1
{
   b5f50:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5f52:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f54:	4908      	ldr	r1, [pc, #32]	; (b5f78 <_Z17acquireWireBufferv+0x30>)
   b5f56:	2020      	movs	r0, #32
   b5f58:	f000 f874 	bl	b6044 <_ZnajRKSt9nothrow_t>
	};
   b5f5c:	2520      	movs	r5, #32
   b5f5e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f60:	4905      	ldr	r1, [pc, #20]	; (b5f78 <_Z17acquireWireBufferv+0x30>)
	};
   b5f62:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5f64:	4628      	mov	r0, r5
   b5f66:	f000 f86d 	bl	b6044 <_ZnajRKSt9nothrow_t>
	};
   b5f6a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5f6e:	4620      	mov	r0, r4
   b5f70:	bd38      	pop	{r3, r4, r5, pc}
   b5f72:	bf00      	nop
   b5f74:	00010018 	.word	0x00010018
   b5f78:	000b8ef8 	.word	0x000b8ef8

000b5f7c <_Z19__fetch_global_Wirev>:
{
   b5f7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f7e:	4d0e      	ldr	r5, [pc, #56]	; (b5fb8 <_Z19__fetch_global_Wirev+0x3c>)
   b5f80:	7829      	ldrb	r1, [r5, #0]
   b5f82:	f3bf 8f5b 	dmb	ish
   b5f86:	f011 0401 	ands.w	r4, r1, #1
{
   b5f8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5f8c:	d111      	bne.n	b5fb2 <_Z19__fetch_global_Wirev+0x36>
   b5f8e:	4628      	mov	r0, r5
   b5f90:	f7fe f88b 	bl	b40aa <__cxa_guard_acquire>
   b5f94:	b168      	cbz	r0, b5fb2 <_Z19__fetch_global_Wirev+0x36>
   b5f96:	4668      	mov	r0, sp
   b5f98:	f7ff ffd6 	bl	b5f48 <_Z17acquireWireBufferv>
   b5f9c:	466a      	mov	r2, sp
   b5f9e:	4621      	mov	r1, r4
   b5fa0:	4806      	ldr	r0, [pc, #24]	; (b5fbc <_Z19__fetch_global_Wirev+0x40>)
   b5fa2:	f7ff f9f7 	bl	b5394 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5fa6:	4628      	mov	r0, r5
   b5fa8:	f7fe f884 	bl	b40b4 <__cxa_guard_release>
   b5fac:	4804      	ldr	r0, [pc, #16]	; (b5fc0 <_Z19__fetch_global_Wirev+0x44>)
   b5fae:	f000 f84b 	bl	b6048 <atexit>
	return wire;
}
   b5fb2:	4802      	ldr	r0, [pc, #8]	; (b5fbc <_Z19__fetch_global_Wirev+0x40>)
   b5fb4:	b007      	add	sp, #28
   b5fb6:	bd30      	pop	{r4, r5, pc}
   b5fb8:	2003e72c 	.word	0x2003e72c
   b5fbc:	2003e730 	.word	0x2003e730
   b5fc0:	000b5f47 	.word	0x000b5f47

000b5fc4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5fc4:	4770      	bx	lr
	...

000b5fc8 <_Z20acquireSerial1Bufferv>:
{
   b5fc8:	b538      	push	{r3, r4, r5, lr}
   b5fca:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5fcc:	2514      	movs	r5, #20
   b5fce:	462a      	mov	r2, r5
   b5fd0:	2100      	movs	r1, #0
   b5fd2:	f000 f84d 	bl	b6070 <memset>
   b5fd6:	8025      	strh	r5, [r4, #0]
   b5fd8:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fda:	4907      	ldr	r1, [pc, #28]	; (b5ff8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5fdc:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fde:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5fe0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fe2:	f000 f82f 	bl	b6044 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fe6:	4904      	ldr	r1, [pc, #16]	; (b5ff8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5fe8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5fea:	4628      	mov	r0, r5
   b5fec:	f000 f82a 	bl	b6044 <_ZnajRKSt9nothrow_t>
    };
   b5ff0:	60e0      	str	r0, [r4, #12]
}
   b5ff2:	4620      	mov	r0, r4
   b5ff4:	bd38      	pop	{r3, r4, r5, pc}
   b5ff6:	bf00      	nop
   b5ff8:	000b8ef8 	.word	0x000b8ef8

000b5ffc <_Z22__fetch_global_Serial1v>:
{
   b5ffc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ffe:	4d0e      	ldr	r5, [pc, #56]	; (b6038 <_Z22__fetch_global_Serial1v+0x3c>)
   b6000:	7829      	ldrb	r1, [r5, #0]
   b6002:	f3bf 8f5b 	dmb	ish
   b6006:	f011 0401 	ands.w	r4, r1, #1
{
   b600a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b600c:	d111      	bne.n	b6032 <_Z22__fetch_global_Serial1v+0x36>
   b600e:	4628      	mov	r0, r5
   b6010:	f7fe f84b 	bl	b40aa <__cxa_guard_acquire>
   b6014:	b168      	cbz	r0, b6032 <_Z22__fetch_global_Serial1v+0x36>
   b6016:	a801      	add	r0, sp, #4
   b6018:	f7ff ffd6 	bl	b5fc8 <_Z20acquireSerial1Bufferv>
   b601c:	aa01      	add	r2, sp, #4
   b601e:	4621      	mov	r1, r4
   b6020:	4806      	ldr	r0, [pc, #24]	; (b603c <_Z22__fetch_global_Serial1v+0x40>)
   b6022:	f7ff fda3 	bl	b5b6c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6026:	4628      	mov	r0, r5
   b6028:	f7fe f844 	bl	b40b4 <__cxa_guard_release>
   b602c:	4804      	ldr	r0, [pc, #16]	; (b6040 <_Z22__fetch_global_Serial1v+0x44>)
   b602e:	f000 f80b 	bl	b6048 <atexit>
    return serial1;
}
   b6032:	4802      	ldr	r0, [pc, #8]	; (b603c <_Z22__fetch_global_Serial1v+0x40>)
   b6034:	b007      	add	sp, #28
   b6036:	bd30      	pop	{r4, r5, pc}
   b6038:	2003e744 	.word	0x2003e744
   b603c:	2003e748 	.word	0x2003e748
   b6040:	000b5fc5 	.word	0x000b5fc5

000b6044 <_ZnajRKSt9nothrow_t>:
   b6044:	f7fe b82d 	b.w	b40a2 <_Znaj>

000b6048 <atexit>:
   b6048:	2300      	movs	r3, #0
   b604a:	4601      	mov	r1, r0
   b604c:	461a      	mov	r2, r3
   b604e:	4618      	mov	r0, r3
   b6050:	f000 b860 	b.w	b6114 <__register_exitproc>

000b6054 <memcpy>:
   b6054:	440a      	add	r2, r1
   b6056:	4291      	cmp	r1, r2
   b6058:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b605c:	d100      	bne.n	b6060 <memcpy+0xc>
   b605e:	4770      	bx	lr
   b6060:	b510      	push	{r4, lr}
   b6062:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6066:	f803 4f01 	strb.w	r4, [r3, #1]!
   b606a:	4291      	cmp	r1, r2
   b606c:	d1f9      	bne.n	b6062 <memcpy+0xe>
   b606e:	bd10      	pop	{r4, pc}

000b6070 <memset>:
   b6070:	4402      	add	r2, r0
   b6072:	4603      	mov	r3, r0
   b6074:	4293      	cmp	r3, r2
   b6076:	d100      	bne.n	b607a <memset+0xa>
   b6078:	4770      	bx	lr
   b607a:	f803 1b01 	strb.w	r1, [r3], #1
   b607e:	e7f9      	b.n	b6074 <memset+0x4>

000b6080 <srand>:
   b6080:	b538      	push	{r3, r4, r5, lr}
   b6082:	4b10      	ldr	r3, [pc, #64]	; (b60c4 <srand+0x44>)
   b6084:	681d      	ldr	r5, [r3, #0]
   b6086:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6088:	4604      	mov	r4, r0
   b608a:	b9b3      	cbnz	r3, b60ba <srand+0x3a>
   b608c:	2018      	movs	r0, #24
   b608e:	f7ff f8db 	bl	b5248 <malloc>
   b6092:	4602      	mov	r2, r0
   b6094:	63a8      	str	r0, [r5, #56]	; 0x38
   b6096:	b920      	cbnz	r0, b60a2 <srand+0x22>
   b6098:	4b0b      	ldr	r3, [pc, #44]	; (b60c8 <srand+0x48>)
   b609a:	480c      	ldr	r0, [pc, #48]	; (b60cc <srand+0x4c>)
   b609c:	2142      	movs	r1, #66	; 0x42
   b609e:	f7ff f8f3 	bl	b5288 <__assert_func>
   b60a2:	490b      	ldr	r1, [pc, #44]	; (b60d0 <srand+0x50>)
   b60a4:	4b0b      	ldr	r3, [pc, #44]	; (b60d4 <srand+0x54>)
   b60a6:	e9c0 1300 	strd	r1, r3, [r0]
   b60aa:	4b0b      	ldr	r3, [pc, #44]	; (b60d8 <srand+0x58>)
   b60ac:	6083      	str	r3, [r0, #8]
   b60ae:	230b      	movs	r3, #11
   b60b0:	8183      	strh	r3, [r0, #12]
   b60b2:	2100      	movs	r1, #0
   b60b4:	2001      	movs	r0, #1
   b60b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b60ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b60bc:	2200      	movs	r2, #0
   b60be:	611c      	str	r4, [r3, #16]
   b60c0:	615a      	str	r2, [r3, #20]
   b60c2:	bd38      	pop	{r3, r4, r5, pc}
   b60c4:	2003ba6c 	.word	0x2003ba6c
   b60c8:	000b8ef9 	.word	0x000b8ef9
   b60cc:	000b8f10 	.word	0x000b8f10
   b60d0:	abcd330e 	.word	0xabcd330e
   b60d4:	e66d1234 	.word	0xe66d1234
   b60d8:	0005deec 	.word	0x0005deec

000b60dc <strcpy>:
   b60dc:	4603      	mov	r3, r0
   b60de:	f811 2b01 	ldrb.w	r2, [r1], #1
   b60e2:	f803 2b01 	strb.w	r2, [r3], #1
   b60e6:	2a00      	cmp	r2, #0
   b60e8:	d1f9      	bne.n	b60de <strcpy+0x2>
   b60ea:	4770      	bx	lr

000b60ec <strncmp>:
   b60ec:	b510      	push	{r4, lr}
   b60ee:	b17a      	cbz	r2, b6110 <strncmp+0x24>
   b60f0:	4603      	mov	r3, r0
   b60f2:	3901      	subs	r1, #1
   b60f4:	1884      	adds	r4, r0, r2
   b60f6:	f813 0b01 	ldrb.w	r0, [r3], #1
   b60fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b60fe:	4290      	cmp	r0, r2
   b6100:	d101      	bne.n	b6106 <strncmp+0x1a>
   b6102:	42a3      	cmp	r3, r4
   b6104:	d101      	bne.n	b610a <strncmp+0x1e>
   b6106:	1a80      	subs	r0, r0, r2
   b6108:	bd10      	pop	{r4, pc}
   b610a:	2800      	cmp	r0, #0
   b610c:	d1f3      	bne.n	b60f6 <strncmp+0xa>
   b610e:	e7fa      	b.n	b6106 <strncmp+0x1a>
   b6110:	4610      	mov	r0, r2
   b6112:	e7f9      	b.n	b6108 <strncmp+0x1c>

000b6114 <__register_exitproc>:
   b6114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6118:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b61d4 <__register_exitproc+0xc0>
   b611c:	4606      	mov	r6, r0
   b611e:	f8d8 0000 	ldr.w	r0, [r8]
   b6122:	461f      	mov	r7, r3
   b6124:	460d      	mov	r5, r1
   b6126:	4691      	mov	r9, r2
   b6128:	f000 f856 	bl	b61d8 <__retarget_lock_acquire_recursive>
   b612c:	4b25      	ldr	r3, [pc, #148]	; (b61c4 <__register_exitproc+0xb0>)
   b612e:	681c      	ldr	r4, [r3, #0]
   b6130:	b934      	cbnz	r4, b6140 <__register_exitproc+0x2c>
   b6132:	4c25      	ldr	r4, [pc, #148]	; (b61c8 <__register_exitproc+0xb4>)
   b6134:	601c      	str	r4, [r3, #0]
   b6136:	4b25      	ldr	r3, [pc, #148]	; (b61cc <__register_exitproc+0xb8>)
   b6138:	b113      	cbz	r3, b6140 <__register_exitproc+0x2c>
   b613a:	681b      	ldr	r3, [r3, #0]
   b613c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6140:	6863      	ldr	r3, [r4, #4]
   b6142:	2b1f      	cmp	r3, #31
   b6144:	dd07      	ble.n	b6156 <__register_exitproc+0x42>
   b6146:	f8d8 0000 	ldr.w	r0, [r8]
   b614a:	f000 f847 	bl	b61dc <__retarget_lock_release_recursive>
   b614e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6156:	b34e      	cbz	r6, b61ac <__register_exitproc+0x98>
   b6158:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b615c:	b988      	cbnz	r0, b6182 <__register_exitproc+0x6e>
   b615e:	4b1c      	ldr	r3, [pc, #112]	; (b61d0 <__register_exitproc+0xbc>)
   b6160:	b923      	cbnz	r3, b616c <__register_exitproc+0x58>
   b6162:	f8d8 0000 	ldr.w	r0, [r8]
   b6166:	f000 f838 	bl	b61da <__retarget_lock_release>
   b616a:	e7f0      	b.n	b614e <__register_exitproc+0x3a>
   b616c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6170:	f7ff f86a 	bl	b5248 <malloc>
   b6174:	2800      	cmp	r0, #0
   b6176:	d0f4      	beq.n	b6162 <__register_exitproc+0x4e>
   b6178:	2300      	movs	r3, #0
   b617a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b617e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6182:	6863      	ldr	r3, [r4, #4]
   b6184:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6188:	2201      	movs	r2, #1
   b618a:	409a      	lsls	r2, r3
   b618c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6190:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6194:	4313      	orrs	r3, r2
   b6196:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b619a:	2e02      	cmp	r6, #2
   b619c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b61a0:	bf02      	ittt	eq
   b61a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b61a6:	4313      	orreq	r3, r2
   b61a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b61ac:	6863      	ldr	r3, [r4, #4]
   b61ae:	f8d8 0000 	ldr.w	r0, [r8]
   b61b2:	1c5a      	adds	r2, r3, #1
   b61b4:	3302      	adds	r3, #2
   b61b6:	6062      	str	r2, [r4, #4]
   b61b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b61bc:	f000 f80e 	bl	b61dc <__retarget_lock_release_recursive>
   b61c0:	2000      	movs	r0, #0
   b61c2:	e7c6      	b.n	b6152 <__register_exitproc+0x3e>
   b61c4:	2003e7e8 	.word	0x2003e7e8
   b61c8:	2003e75c 	.word	0x2003e75c
   b61cc:	00000000 	.word	0x00000000
   b61d0:	000b5249 	.word	0x000b5249
   b61d4:	2003bad0 	.word	0x2003bad0

000b61d8 <__retarget_lock_acquire_recursive>:
   b61d8:	4770      	bx	lr

000b61da <__retarget_lock_release>:
   b61da:	4770      	bx	lr

000b61dc <__retarget_lock_release_recursive>:
   b61dc:	4770      	bx	lr

000b61de <link_code_end>:
	...

000b61e0 <dynalib_user>:
   b61e0:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b61f0:	0000 0000 2d65 6150 6570 2072 6e69 7469     ....e-Paper init
   b6200:	6620 6961 656c 0064 754c 636e 2068 6f52      failed.Lunch Ro
   b6210:	6d6f 5700 6168 2774 2073 6f66 2072 756c     om.What's for lu
   b6220:	6863 3100 3a30 3030 3100 3a32 3030 4500     ch.10:00.12:00.E
   b6230:	6f6c 006e 754d 6b73 5200 4f4f 3a4d 0020     lon.Musk.ROOM: .
   b6240:	4954 4c54 3a45 0020 4954 454d 203a 2000     TITLE: .TIME: . 
   b6250:	202d 5300 4550 4b41 5245 203a 6400 6665     - .SPEAKER: .def
   b6260:	7561 746c 0020 534d 0042 534c 0042 533c     ault .MSB.LSB.<S
   b6270:	4950 6553 7474 6e69 7367 6420 6665 7561     PISettings defau
   b6280:	746c 003e 533c 4950 6553 7474 6e69 7367     lt>.<SPISettings
   b6290:	2520 2573 2075 7325 4d20 444f 2545 3e75      %s%u %s MODE%u>
   b62a0:	0000 0000                                   ....

000b62a4 <_ZTVN8particle11SPISettingsE>:
	...
   b62ac:	4451 000b 4425 000b 4427 000b               QD..%D..'D..

000b62b8 <_ZTV17DFRobot_PN532_IIC>:
	...
   b62c0:	44ad 000b 459b 000b 2d65 6150 6570 2072     .D...E..e-Paper 
   b62d0:	7562 7973 0d20 200a 6500 502d 7061 7265     busy .. .e-Paper
   b62e0:	6220 7375 2079 6572 656c 7361 2065 0a0d      busy release ..
   b62f0:	0020                                         .

000b62f2 <_ZL20EPD_3IN52_lut_R20_GC>:
   b62f2:	0f01 0f0f 0101 0001 0000 0000 0000 0000     ................
	...

000b632a <_ZL20EPD_3IN52_lut_R21_GC>:
   b632a:	4f01 0f8f 0101 0001 0000 0000 0000 0000     .O..............
	...

000b6354 <_ZL20EPD_3IN52_lut_R22_GC>:
   b6354:	0f01 0f8f 0101 0001 0000 0000 0000 0000     ................
	...

000b638c <_ZL20EPD_3IN52_lut_R23_GC>:
   b638c:	4f01 4f8f 0101 0001 0000 0000 0000 0000     .O.O............
	...

000b63c4 <_ZL20EPD_3IN52_lut_R24_GC>:
   b63c4:	0f01 4f8f 0101 0001 0000 0000 0000 0000     ...O............
	...

000b63ee <_ZL12Font20_Table>:
	...
   b6416:	0000 0007 0007 0007 0007 0007 0007 0007     ................
   b6426:	0002 0002 0000 0000 0007 0007 0000 0000     ................
	...
   b6442:	e01c e01c e01c 4008 4008 4008 0000 0000     .......@.@.@....
	...
   b6466:	c00c c00c c00c c00c c00c f03f f03f c00c     ..........?.?...
   b6476:	c00c f03f f03f c00c c00c c00c c00c c00c     ..?.?...........
	...
   b648e:	0003 0003 e007 e00f 6018 0018 001f c00f     .........`......
   b649e:	e000 6018 6018 c01f 801f 0003 0003 0003     ...`.`..........
	...
   b64b6:	0000 001c 0022 0022 0022 601c e001 800f     ...."."."..`....
   b64c6:	003c c031 2002 2002 2002 c001 0000 0000     <.1.. . . ......
	...
   b64e2:	0000 e003 e00f 000c 000c 0006 300f f01f     .............0..
   b64f2:	e019 c018 f01f b007 0000 0000 0000 0000     ................
	...
   b650a:	8003 8003 8003 0001 0001 0001 0000 0000     ................
	...
   b652e:	0000 c000 c000 8001 8001 8001 0003 0003     ................
   b653e:	0003 0003 0003 0003 8001 8001 8001 c000     ................
   b654e:	c000 0000 0000 0000 0000 000c 000c 0006     ................
   b655e:	0006 0006 0003 0003 0003 0003 0003 0003     ................
   b656e:	0006 0006 0006 000c 000c 0000 0000 0000     ................
   b657e:	0000 0003 0003 0003 601b e01f 8007 8007     .........`......
   b658e:	c00f c00c 0000 0000 0000 0000 0000 0000     ................
	...
   b65aa:	0000 0003 0003 0003 0003 f03f f03f 0003     ..........?.?...
   b65ba:	0003 0003 0003 0000 0000 0000 0000 0000     ................
	...
   b65e2:	0000 8003 0003 0003 0006 0006 0004 0000     ................
	...
   b6602:	0000 e03f e03f 0000 0000 0000 0000 0000     ..?.?...........
	...
   b6632:	0000 8003 8003 8003 0000 0000 0000 0000     ................
   b6642:	0000 0000 6000 6000 c000 c000 c000 8001     .....`.`........
   b6652:	8001 0003 0003 0006 0006 000c 000c 000c     ................
   b6662:	0018 0018 0000 0000 0000 0000 0000 800f     ................
   b6672:	c01f c018 6030 6030 6030 6030 6030 6030     ....0`0`0`0`0`0`
   b6682:	6030 c018 c01f 800f 0000 0000 0000 0000     0`..............
   b6692:	0000 0000 0000 0003 001f 001f 0003 0003     ................
   b66a2:	0003 0003 0003 0003 0003 0003 e01f e01f     ................
	...
   b66be:	0000 800f c01f e038 6030 6000 c000 8001     ......8.0`.`....
   b66ce:	0003 0006 000c 0018 e03f e03f 0000 0000     ........?.?.....
	...
   b66e6:	0000 800f c03f e030 6000 e000 c007 c007     ....?.0..`......
   b66f6:	e000 6000 6000 e060 c07f 803f 0000 0000     ...`.``...?.....
	...
   b670e:	0000 c001 c003 c003 c006 c00c c00c c018     ................
   b671e:	c030 e03f e03f c000 e003 e003 0000 0000     0.?.?...........
	...
   b6736:	0000 c01f c01f 0018 0018 801f c01f e018     ................
   b6746:	6000 6000 6000 e030 c03f 801f 0000 0000     .`.`.`0.?.......
	...
   b675e:	0000 e003 e00f 001e 0018 0038 8037 c03f     ..........8.7.?.
   b676e:	e038 6030 6030 e018 c01f 8007 0000 0000     8.0`0`..........
	...
   b6786:	0000 e03f e03f 6030 6000 c000 c000 c000     ..?.?.0`.`......
   b6796:	8001 8001 8001 0003 0003 0003 0000 0000     ................
	...
   b67ae:	0000 800f c01f e038 6030 e038 c01f c01f     ......8.0`8.....
   b67be:	e038 6030 6030 e038 c01f 800f 0000 0000     8.0`0`8.........
	...
   b67d6:	0000 000f c01f c038 6030 6030 e038 e01f     ......8.0`0`8...
   b67e6:	600f e000 c000 c003 803f 003e 0000 0000     .`......?.>.....
	...
   b6806:	0000 8003 8003 8003 0000 0000 0000 8003     ................
   b6816:	8003 8003 0000 0000 0000 0000 0000 0000     ................
	...
   b682e:	0000 c001 c001 c001 0000 0000 0000 8003     ................
   b683e:	0003 0006 0006 0004 0000 0000 0000 0000     ................
   b684e:	0000 0000 0000 3000 f000 c003 0007 001c     .......0........
   b685e:	0078 001c 0007 c003 f000 3000 0000 0000     x..........0....
	...
   b687e:	0000 f07f f07f 0000 0000 f07f f07f 0000     ................
	...
   b68a2:	0000 0030 003c 000f 8003 e000 7800 e000     ..0.<........x..
   b68b2:	8003 000f 003c 0030 0000 0000 0000 0000     ....<.0.........
	...
   b68ca:	800f c01f 6018 6018 6000 c001 8003 0003     .....`.`.`......
   b68da:	0000 0000 0007 0007 0000 0000 0000 0000     ................
   b68ea:	0000 0000 0000 8003 800c 4008 4010 4010     ...........@.@.@
   b68fa:	c011 4012 4012 4012 c011 0010 0008 4008     ...@.@.@.......@
   b690a:	8007 0000 0000 0000 0000 0000 0000 0000     ................
   b691a:	801f 801f 8003 c006 c006 c00c 600c e01f     .............`..
   b692a:	e01f 3030 7878 7878 0000 0000 0000 0000     ..00xxxx........
	...
   b6942:	803f c03f 6018 6018 e018 c01f e01f 7018     ?.?..`.`.......p
   b6952:	3018 3018 f03f e03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b696a:	b007 f00f 701c 3038 0030 0030 0030 0030     .....p800.0.0.0.
   b697a:	3038 701c e00f c007 0000 0000 0000 0000     80.p............
	...
   b6992:	807f c07f e030 7030 3030 3030 3030 3030     ....0.0p00000000
   b69a2:	7030 e030 c07f 807f 0000 0000 0000 0000     0p0.............
	...
   b69ba:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b69ca:	3018 3018 f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b69e2:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b69f2:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b6a0a:	b007 f01f 7018 3030 0030 0030 f831 f831     .....p000.0.1.1.
   b6a1a:	3030 3018 f01f c007 0000 0000 0000 0000     00.0............
	...
   b6a32:	f03c f03c 6018 6018 6018 e01f e01f 6018     <.<..`.`.`.....`
   b6a42:	6018 6018 f03c f03c 0000 0000 0000 0000     .`.`<.<.........
	...
   b6a5a:	e01f e01f 0003 0003 0003 0003 0003 0003     ................
   b6a6a:	0003 0003 e01f e01f 0000 0000 0000 0000     ................
	...
   b6a82:	f803 f803 6000 6000 6000 6000 6030 6030     .....`.`.`.`0`0`
   b6a92:	6030 e030 c03f 800f 0000 0000 0000 0000     0`0.?...........
	...
   b6aaa:	f83e f83e e018 8019 001b 001f 801d c018     >.>.............
   b6aba:	c018 6018 783e 383e 0000 0000 0000 0000     ...`>x>8........
	...
   b6ad2:	003f 003f 000c 000c 000c 000c 000c 300c     ?.?............0
   b6ae2:	300c 300c f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b6afa:	7878 7878 7038 f03c b034 b037 b037 3033     xxxx8p<.4.7.7.30
   b6b0a:	3033 3030 f87c f87c 0000 0000 0000 0000     3000|.|.........
	...
   b6b22:	f039 f03d 601c 601e 601e 601b 601b e019     9.=..`.`.`.`.`..
   b6b32:	e019 e018 e03e 603e 0000 0000 0000 0000     ....>.>`........
	...
   b6b4a:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b6b5a:	7038 e01c c00f 8007 0000 0000 0000 0000     8p..............
	...
   b6b72:	c03f e03f 7018 3018 3018 7018 e01f c01f     ?.?..p.0.0.p....
   b6b82:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b6b9a:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b6baa:	7038 e01c c00f 8007 b007 f00f e00c 0000     8p..............
	...
   b6bc2:	c03f e03f 7018 3018 7018 e01f c01f e018     ?.?..p.0.p......
   b6bd2:	6018 7018 383e 183e 0000 0000 0000 0000     .`.p>8>.........
	...
   b6bea:	b00f f01f 7038 3030 0038 801f e007 7000     ....8p008......p
   b6bfa:	3030 7038 e03f c037 0000 0000 0000 0000     008p?.7.........
	...
   b6c12:	f03f f03f 3033 3033 3033 0003 0003 0003     ?.?.303030......
   b6c22:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b6c3a:	f03c f03c 6018 6018 6018 6018 6018 6018     <.<..`.`.`.`.`.`
   b6c4a:	6018 e01c c00f 8007 0000 0000 0000 0000     .`..............
	...
   b6c62:	f078 f078 6030 6030 c018 c018 800d 800d     x.x.0`0`........
   b6c72:	800d 0007 0007 0007 0000 0000 0000 0000     ................
	...
   b6c8a:	7c7c 7c7c 1830 9833 9833 9833 d836 d016     ||||0.3.3.3.6...
   b6c9a:	701c 701c 701c 3018 0000 0000 0000 0000     .p.p.p.0........
	...
   b6cb2:	f078 f078 6030 c018 800d 0007 0007 800d     x.x.0`..........
   b6cc2:	c018 6030 f078 f078 0000 0000 0000 0000     ..0`x.x.........
	...
   b6cda:	f03c f03c 6018 c00c 8007 8007 0003 0003     <.<..`..........
   b6cea:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b6d02:	e01f e01f 6018 c018 8001 0003 0003 0006     .....`..........
   b6d12:	600c 6018 e01f e01f 0000 0000 0000 0000     .`.`............
   b6d22:	0000 0000 0000 c003 c003 0003 0003 0003     ................
   b6d32:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b6d42:	0003 c003 c003 0000 0000 0000 0018 0018     ................
   b6d52:	000c 000c 000c 0006 0006 0003 0003 8001     ................
   b6d62:	8001 c000 c000 c000 6000 6000 0000 0000     .........`.`....
   b6d72:	0000 0000 0000 000f 000f 0003 0003 0003     ................
   b6d82:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b6d92:	0003 000f 000f 0000 0000 0000 0000 0002     ................
   b6da2:	0007 800d c018 6030 2020 0000 0000 0000     ......0`  ......
	...
   b6dea:	fcff fcff 0000 0004 0003 8000 0000 0000     ................
	...
   b6e1e:	0000 c00f e01f 6000 e00f e01f 6038 e030     .......`....8`0.
   b6e2e:	f03f 701f 0000 0000 0000 0000 0000 0000     ?..p............
   b6e3e:	0000 0070 0070 0030 0030 8037 e03f 6038     ..p.p.0.0.7.?.8`
   b6e4e:	3030 3030 3030 6038 e07f 8077 0000 0000     0000008`..w.....
	...
   b6e6e:	0000 b007 f01f 3018 3030 0030 0030 3038     .......0000.0.80
   b6e7e:	f01f c00f 0000 0000 0000 0000 0000 0000     ................
   b6e8e:	0000 7000 7000 3000 3000 b007 f01f 7018     ...p.p.0.0.....p
   b6e9e:	3030 3030 3030 7038 f81f b807 0000 0000     0000008p........
	...
   b6ebe:	0000 8007 e01f 6018 f03f f03f 0030 3018     .......`?.?.0..0
   b6ece:	f01f c007 0000 0000 0000 0000 0000 0000     ................
   b6ede:	0000 f003 f007 0006 0006 e01f e01f 0006     ................
   b6eee:	0006 0006 0006 0006 e01f e01f 0000 0000     ................
	...
   b6f0e:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b6f1e:	f01f b007 3000 7000 e00f c00f 0000 0000     .....0.p........
   b6f2e:	0000 0038 0038 0018 0018 c01b e01f 601c     ..8.8..........`
   b6f3e:	6018 6018 6018 6018 f03c f03c 0000 0000     .`.`.`.`<.<.....
	...
   b6f56:	0000 0003 0003 0000 0000 001f 001f 0003     ................
   b6f66:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b6f7e:	0000 0003 0003 0000 0000 c01f c01f c000     ................
   b6f8e:	c000 c000 c000 c000 c000 c000 c000 c001     ................
   b6f9e:	803f 003f 0000 0000 0000 0038 0038 0018     ?.?.......8.8...
   b6fae:	0018 e01b e01b 001b 001e 001e 001b 8019     ................
   b6fbe:	f039 f039 0000 0000 0000 0000 0000 0000     9.9.............
   b6fce:	0000 001f 001f 0003 0003 0003 0003 0003     ................
   b6fde:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b6ffe:	0000 e07e f07f 3033 3033 3033 3033 3033     ..~...3030303030
   b700e:	b87b b87b 0000 0000 0000 0000 0000 0000     {.{.............
	...
   b7026:	0000 c03b e03f 601c 6018 6018 6018 6018     ..;.?..`.`.`.`.`
   b7036:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b704e:	0000 8007 e01f 6018 3030 3030 3030 6018     .......`000000.`
   b705e:	e01f 8007 0000 0000 0000 0000 0000 0000     ................
	...
   b7076:	0000 8077 e07f 6038 3030 3030 3030 6038     ..w...8`0000008`
   b7086:	e03f 8037 0030 0030 007c 007c 0000 0000     ?.7.0.0.|.|.....
	...
   b709e:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b70ae:	f01f b007 3000 3000 f800 f800 0000 0000     .....0.0........
	...
   b70c6:	0000 e03c f03d 300f 000e 000c 000c 000c     ..<.=..0........
   b70d6:	c03f c03f 0000 0000 0000 0000 0000 0000     ?.?.............
	...
   b70ee:	0000 e007 e01f 6018 001e c00f e001 6018     .......`.......`
   b70fe:	e01f 801f 0000 0000 0000 0000 0000 0000     ................
   b710e:	0000 0000 000c 000c 000c e03f e03f 000c     ..........?.?...
   b711e:	000c 000c 000c 300c f00f c007 0000 0000     .......0........
	...
   b713e:	0000 e038 e038 6018 6018 6018 6018 e018     ..8.8..`.`.`.`..
   b714e:	f01f 700f 0000 0000 0000 0000 0000 0000     ...p............
	...
   b7166:	0000 f078 f078 6030 c018 c018 800d 800d     ..x.x.0`........
   b7176:	0007 0007 0000 0000 0000 0000 0000 0000     ................
	...
   b718e:	0000 f078 f078 6032 6032 e037 c01d c01d     ..x.x.2`2`7.....
   b719e:	c018 c018 0000 0000 0000 0000 0000 0000     ................
	...
   b71b6:	0000 f03c f03c c00c 8007 0003 8007 c00c     ..<.<...........
   b71c6:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b71de:	0000 f078 f078 6030 c018 c018 800d 800f     ..x.x.0`........
   b71ee:	0007 0006 0006 000c 007f 007f 0000 0000     ................
	...
   b7206:	0000 e01f e01f c018 8001 0003 0006 600c     ...............`
   b7216:	e01f e01f 0000 0000 0000 0000 0000 0000     ................
   b7226:	0000 c001 c003 0003 0003 0003 0003 0003     ................
   b7236:	0007 000e 0007 0003 0003 0003 0003 c003     ................
   b7246:	c001 0000 0000 0000 0000 0003 0003 0003     ................
   b7256:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b7266:	0003 0003 0003 0003 0003 0000 0000 0000     ................
   b7276:	0000 001c 001e 0006 0006 0006 0006 0006     ................
   b7286:	0007 8003 0007 0006 0006 0006 0006 001e     ................
   b7296:	001c 0000 0000 0000 0000 0000 0000 0000     ................
   b72a6:	0000 0000 000e 303f f033 e001 0000 0000     ......?03.......
	...

000b72c6 <_ZL12Font24_Table>:
	...
   b7312:	0000 8003 0300 0080 8003 0300 0080 8003     ................
   b7322:	0300 0080 8003 0300 0080 8003 0100 0000     ................
   b7332:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
   b735e:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
   b736e:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
   b73a2:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
   b73b2:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
   b73c2:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
   b73d2:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
   b73e2:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
   b73f2:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
   b7402:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
   b7412:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
   b7432:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
   b7442:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
   b7452:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
   b7482:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
   b7492:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
   b74a2:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
   b74c6:	0300 0080 8003 0300 0080 0001 0100 0000     ................
   b74d6:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
   b750a:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
   b751a:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
   b752a:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
   b753a:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
   b7552:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
   b7562:	0700 0000 8003 0300 0080 8003 0300 0080     ................
   b7572:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
   b7582:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
   b759a:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
   b75aa:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
   b75ea:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
   b75fa:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
   b760a:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
   b764e:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
   b765e:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
   b7686:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
   b76de:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b76fe:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
   b770e:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
   b771e:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
   b772e:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
   b774a:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
   b775a:	1800 0018 1818 1800 0018 1818 1800 0018     ................
   b776a:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
   b7792:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
   b77a2:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b77b2:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
   b77da:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
   b77ea:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
   b77fa:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
   b7822:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
   b7832:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
   b7842:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
   b786a:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
   b787a:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
   b788a:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
   b78b2:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
   b78c2:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
   b78d2:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
   b78fa:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
   b790a:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
   b791a:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
   b7942:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
   b7952:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
   b7962:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
   b798a:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
   b799a:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
   b79aa:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
   b79d2:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
   b79e2:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
   b79f2:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
   b7a26:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7a3e:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7a6e:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
   b7a86:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
   b7ab2:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
   b7ac2:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
   b7ad2:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
   b7b02:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
   b7b12:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b7b42:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
   b7b52:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
   b7b62:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
   b7b86:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
   b7b96:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
   b7ba6:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
   b7bca:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
   b7bda:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
   b7bea:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
   b7bfa:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
   b7c16:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
   b7c26:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
   b7c36:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
   b7c5e:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   b7c6e:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
   b7c7e:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
   b7ca6:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   b7cb6:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
   b7cc6:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
   b7cee:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
   b7cfe:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
   b7d0e:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
   b7d36:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
   b7d46:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
   b7d56:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
   b7d7e:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
   b7d8e:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
   b7d9e:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   b7dc6:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   b7dd6:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
   b7de6:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
   b7e0e:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   b7e1e:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
   b7e2e:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   b7e56:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
   b7e66:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b7e76:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
   b7e9e:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
   b7eae:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
   b7ebe:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
   b7ee6:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
   b7ef6:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
   b7f06:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
   b7f2e:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
   b7f3e:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
   b7f4e:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
   b7f76:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
   b7f86:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
   b7f96:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
   b7fbe:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
   b7fce:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
   b7fde:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
   b8006:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   b8016:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   b8026:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
   b804e:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
   b805e:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
   b806e:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   b8096:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   b80a6:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   b80b6:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
   b80c6:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
   b80de:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   b80ee:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
   b80fe:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
   b8126:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
   b8136:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
   b8146:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
   b816e:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
   b817e:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
   b818e:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   b81b6:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   b81c6:	1818 1800 0018 1818 1800 0018 1818 1800     ................
   b81d6:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
   b81fe:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
   b820e:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
   b821e:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
   b8246:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
   b8256:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
   b8266:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
   b828e:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
   b829e:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
   b82ae:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
   b82d6:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
   b82e6:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
   b82f6:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   b831e:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
   b832e:	c018 0100 0080 0003 0600 0018 180c 1800     ................
   b833e:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
   b8362:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
   b8372:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8382:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8392:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
   b83a2:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
   b83b2:	000e 0600 0000 0006 0300 0000 0003 0100     ................
   b83c2:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
   b83d2:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
   b83f2:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
   b8402:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8412:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8422:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
   b843a:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
   b844a:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
   b84be:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
   b84ce:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
   b851e:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
   b852e:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
   b853e:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b855a:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
   b856a:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
   b857a:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
   b85ae:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
   b85be:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
   b85ce:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b85ea:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
   b85fa:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
   b860a:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
   b863e:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
   b864e:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
   b865e:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b867a:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
   b868a:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
   b869a:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
   b86ce:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   b86de:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   b86ee:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
   b86fe:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
   b870e:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
   b871e:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
   b872e:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   b8752:	0000 8001 0100 0080 0000 0000 0000 801f     ................
   b8762:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
   b8772:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   b879a:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
   b87aa:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
   b87ba:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
   b87ca:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
   b87e2:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
   b87f2:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
   b8802:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
   b882a:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
   b883a:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b884a:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   b887e:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
   b888e:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
   b889e:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b88c6:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
   b88d6:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
   b88e6:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
   b890e:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
   b891e:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
   b892e:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8956:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
   b8966:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
   b8976:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
   b899e:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   b89ae:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   b89be:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
   b89ce:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b89e6:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
   b89f6:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
   b8a06:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   b8a2e:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
   b8a3e:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
   b8a4e:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8a6a:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
   b8a7a:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
   b8a8a:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
   b8abe:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
   b8ace:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
   b8ade:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8b06:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
   b8b16:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
   b8b26:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8b4e:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
   b8b5e:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
   b8b6e:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
   b8b96:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
   b8ba6:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
   b8bb6:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
   b8bde:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
   b8bee:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
   b8bfe:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
   b8c0e:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8c26:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
   b8c36:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
   b8c46:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8c62:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
   b8c72:	0100 0080 8001 0100 0080 8003 0700 0000     ................
   b8c82:	8003 0100 0080 8001 0100 0080 8001 0100     ................
   b8c92:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
   b8caa:	0000 8001 0100 0080 8001 0100 0080 8001     ................
   b8cba:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8cca:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8cda:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
   b8cf2:	0000 0007 0700 0080 8001 0100 0080 8001     ................
   b8d02:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
   b8d12:	c001 0100 0080 8001 0100 0080 8001 0100     ................
   b8d22:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
   b8d4e:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...

000b8d80 <_ZTVN5spark13EthernetClassE>:
	...
   b8d88:	531f 000b 5315 000b 530b 000b 5301 000b     .S...S...S...S..
   b8d98:	52f5 000b 52e9 000b 5591 000b 5599 000b     .R...R...U...U..
   b8da8:	52dd 000b 52d5 000b 52cb 000b 52c1 000b     .R...R...R...R..
   b8db8:	55c9 000b                                   .U..

000b8dbc <_ZTV7TwoWire>:
	...
   b8dc4:	533d 000b 5387 000b 535f 000b 533f 000b     =S...S.._S..?S..
   b8dd4:	5367 000b 536f 000b 5377 000b 537f 000b     gS..oS..wS...S..

000b8de4 <_ZTV9IPAddress>:
	...
   b8dec:	5461 000b 5451 000b 5453 000b 7061 0070     aT..QT..ST..app.

000b8dfc <_ZTVN5spark12NetworkClassE>:
	...
   b8e04:	5551 000b 555b 000b 5565 000b 556f 000b     QU..[U..eU..oU..
   b8e14:	5579 000b 5585 000b 5591 000b 5599 000b     yU...U...U...U..
   b8e24:	55a1 000b 55ad 000b 55b5 000b 55bf 000b     .U...U...U...U..
   b8e34:	55c9 000b                                   .U..

000b8e38 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8e38:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8e48:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8e58:	6d69 0065                                   ime.

000b8e5c <_ZTV11USARTSerial>:
	...
   b8e64:	5af1 000b 5b5d 000b 5b35 000b 56b5 000b     .Z..][..5[...V..
   b8e74:	5b05 000b 5b21 000b 5b13 000b 5b2f 000b     .[..![...[../[..
   b8e84:	5af3 000b 5af7 000b                         .Z...Z..

000b8e8c <_ZTV9USBSerial>:
	...
   b8e94:	5b9b 000b 5c03 000b 5bd9 000b 56b5 000b     .[...\...[...V..
   b8ea4:	5bcb 000b 5b9d 000b 5bad 000b 5bfd 000b     .[...[...[...[..
   b8eb4:	5bbd 000b 5b95 000b                         .[...[..

000b8ebc <_ZTVN5spark9WiFiClassE>:
	...
   b8ec4:	5cfb 000b 5cf1 000b 5ce7 000b 5c9d 000b     .\...\...\...\..
   b8ed4:	5cdb 000b 5ccf 000b 5591 000b 5599 000b     .\...\...U...U..
   b8ee4:	5cc3 000b 5cbb 000b 5cb1 000b 5ca7 000b     .\...\...\...\..
   b8ef4:	55c9 000b                                   .U..

000b8ef8 <_ZSt7nothrow>:
   b8ef8:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8f08:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8f18:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8f28:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8f38:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8f48:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8f58:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b8f69 <link_const_data_end>:
   b8f69:	00          	.byte	0x00
	...

000b8f6c <link_constructors_location>:
   b8f6c:	000b4379 	.word	0x000b4379
   b8f70:	000b52b1 	.word	0x000b52b1
   b8f74:	000b5329 	.word	0x000b5329
   b8f78:	000b5541 	.word	0x000b5541
   b8f7c:	000b56a1 	.word	0x000b56a1
   b8f80:	000b57c9 	.word	0x000b57c9
   b8f84:	000b5ab9 	.word	0x000b5ab9
   b8f88:	000b5add 	.word	0x000b5add
   b8f8c:	000b5d05 	.word	0x000b5d05
