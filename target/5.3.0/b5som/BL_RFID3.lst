
/Users/friedlbasson/Desktop/VSC/BL_RFID3/target/5.3.0/b5som/BL_RFID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002418  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6434  000b6434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e424  000b6458  0000e424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000360  2003e490  2003e490  0001e490  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b64c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b64c8  000b64c8  000164c8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b64ce  000b64ce  000164ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b64f2  000b64f2  000164f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001483f9  00000000  00000000  000164f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015e06  00000000  00000000  0015e8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003ee7c  00000000  00000000  001746f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002dc8  00000000  00000000  001b3571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000b120  00000000  00000000  001b6339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f135  00000000  00000000  001c1459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004b344  00000000  00000000  0020058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00141c10  00000000  00000000  0024b8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000083cc  00000000  00000000  0038d4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strcmp>:
   b401c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4020:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4024:	2a01      	cmp	r2, #1
   b4026:	bf28      	it	cs
   b4028:	429a      	cmpcs	r2, r3
   b402a:	d0f7      	beq.n	b401c <strcmp>
   b402c:	1ad0      	subs	r0, r2, r3
   b402e:	4770      	bx	lr

000b4030 <strlen>:
   b4030:	4603      	mov	r3, r0
   b4032:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4036:	2a00      	cmp	r2, #0
   b4038:	d1fb      	bne.n	b4032 <strlen+0x2>
   b403a:	1a18      	subs	r0, r3, r0
   b403c:	3801      	subs	r0, #1
   b403e:	4770      	bx	lr

000b4040 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4040:	4809      	ldr	r0, [pc, #36]	; (b4068 <module_user_pre_init+0x28>)
   b4042:	490a      	ldr	r1, [pc, #40]	; (b406c <module_user_pre_init+0x2c>)
   b4044:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4046:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4048:	d005      	beq.n	b4056 <module_user_pre_init+0x16>
   b404a:	4a09      	ldr	r2, [pc, #36]	; (b4070 <module_user_pre_init+0x30>)
   b404c:	4282      	cmp	r2, r0
   b404e:	d002      	beq.n	b4056 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4050:	1a12      	subs	r2, r2, r0
   b4052:	f001 ff8c 	bl	b5f6e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4056:	4807      	ldr	r0, [pc, #28]	; (b4074 <module_user_pre_init+0x34>)
   b4058:	4a07      	ldr	r2, [pc, #28]	; (b4078 <module_user_pre_init+0x38>)
   b405a:	2100      	movs	r1, #0
   b405c:	1a12      	subs	r2, r2, r0
   b405e:	f001 ff94 	bl	b5f8a <memset>
    return &link_global_data_start;
}
   b4062:	4801      	ldr	r0, [pc, #4]	; (b4068 <module_user_pre_init+0x28>)
   b4064:	bd08      	pop	{r3, pc}
   b4066:	bf00      	nop
   b4068:	2003e424 	.word	0x2003e424
   b406c:	000b6458 	.word	0x000b6458
   b4070:	2003e490 	.word	0x2003e490
   b4074:	2003e490 	.word	0x2003e490
   b4078:	2003e7f0 	.word	0x2003e7f0

000b407c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b407c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b407e:	4e07      	ldr	r6, [pc, #28]	; (b409c <module_user_init+0x20>)
   b4080:	4c07      	ldr	r4, [pc, #28]	; (b40a0 <module_user_init+0x24>)
    module_user_init_hook();
   b4082:	f001 fe3d 	bl	b5d00 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4086:	1ba4      	subs	r4, r4, r6
   b4088:	08a4      	lsrs	r4, r4, #2
   b408a:	2500      	movs	r5, #0
   b408c:	42ac      	cmp	r4, r5
   b408e:	d100      	bne.n	b4092 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4090:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4092:	f856 3b04 	ldr.w	r3, [r6], #4
   b4096:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4098:	3501      	adds	r5, #1
   b409a:	e7f7      	b.n	b408c <module_user_init+0x10>
   b409c:	000b6410 	.word	0x000b6410
   b40a0:	000b6434 	.word	0x000b6434

000b40a4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b40a4:	f000 b8c2 	b.w	b422c <setup>

000b40a8 <module_user_loop>:
}

void module_user_loop() {
   b40a8:	b508      	push	{r3, lr}
    loop();
   b40aa:	f000 f89d 	bl	b41e8 <loop>
    _post_loop();
}
   b40ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b40b2:	f001 bddd 	b.w	b5c70 <_post_loop>

000b40b6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40b6:	f000 bddd 	b.w	b4c74 <malloc>

000b40ba <_Znaj>:
   b40ba:	f000 bddb 	b.w	b4c74 <malloc>

000b40be <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40be:	f000 bde1 	b.w	b4c84 <free>

000b40c2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40c2:	7800      	ldrb	r0, [r0, #0]
   b40c4:	fab0 f080 	clz	r0, r0
   b40c8:	0940      	lsrs	r0, r0, #5
   b40ca:	4770      	bx	lr

000b40cc <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40cc:	2301      	movs	r3, #1
   b40ce:	7003      	strb	r3, [r0, #0]
   b40d0:	4770      	bx	lr
	...

000b40d4 <_ZN11myStructureC1Ev>:
////--  RFID Declarations --/////

char testval[1200];
char *array[25];

struct myStructure{
   b40d4:	b538      	push	{r3, r4, r5, lr}
   b40d6:	4d1f      	ldr	r5, [pc, #124]	; (b4154 <_ZN11myStructureC1Ev+0x80>)
   b40d8:	4604      	mov	r4, r0
   b40da:	4629      	mov	r1, r5
   b40dc:	f001 fbd9 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b40e0:	4629      	mov	r1, r5
   b40e2:	f104 0010 	add.w	r0, r4, #16
   b40e6:	f001 fbd4 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b40ea:	4629      	mov	r1, r5
   b40ec:	f104 0020 	add.w	r0, r4, #32
   b40f0:	f001 fbcf 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b40f4:	4629      	mov	r1, r5
   b40f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b40fa:	f001 fbca 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b40fe:	4629      	mov	r1, r5
   b4100:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4104:	f001 fbc5 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b4108:	4629      	mov	r1, r5
   b410a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b410e:	f001 fbc0 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b4112:	4629      	mov	r1, r5
   b4114:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4118:	f001 fbbb 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b411c:	4629      	mov	r1, r5
   b411e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4122:	f001 fbb6 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b4126:	4629      	mov	r1, r5
   b4128:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b412c:	f001 fbb1 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b4130:	4629      	mov	r1, r5
   b4132:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b4136:	f001 fbac 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b413a:	4629      	mov	r1, r5
   b413c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b4140:	f001 fba7 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b4144:	4629      	mov	r1, r5
   b4146:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b414a:	f001 fba2 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
   b414e:	4620      	mov	r0, r4
   b4150:	bd38      	pop	{r3, r4, r5, pc}
   b4152:	bf00      	nop
   b4154:	000b617e 	.word	0x000b617e

000b4158 <_Z4RFIDv>:
//     Serial.println("No I2C devices found");
//       else
//         Serial.println("Done");
// }

void RFID () {
   b4158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

if (nfc.scan()) {
   b415a:	481d      	ldr	r0, [pc, #116]	; (b41d0 <_Z4RFIDv+0x78>)
   b415c:	f000 f9ae 	bl	b44bc <_ZN13DFRobot_PN5324scanEv>
   b4160:	b3a0      	cbz	r0, b41cc <_Z4RFIDv+0x74>
    if (nfc.readData(dataRead, READ_BLOCK_NO) != 1) {
   b4162:	491c      	ldr	r1, [pc, #112]	; (b41d4 <_Z4RFIDv+0x7c>)
   b4164:	481a      	ldr	r0, [pc, #104]	; (b41d0 <_Z4RFIDv+0x78>)
   b4166:	2202      	movs	r2, #2
   b4168:	f000 fa60 	bl	b462c <_ZN13DFRobot_PN5328readDataEPhh>
   b416c:	2801      	cmp	r0, #1
   b416e:	d00a      	beq.n	b4186 <_Z4RFIDv+0x2e>
      // Serial.print("Block ");                            // DIAGNOSTICS
      // Serial.print(READ_BLOCK_NO);                       // DIAGNOSTICS
      Serial.println("FAILED - PLEASE SCAN AGAIN!");
   b4170:	f001 fcfa 	bl	b5b68 <_Z16_fetch_usbserialv>
   b4174:	4918      	ldr	r1, [pc, #96]	; (b41d8 <_Z4RFIDv+0x80>)
   b4176:	f001 fb08 	bl	b578a <_ZN5Print7printlnEPKc>
      }
      Serial.println();
    }
    delay(500);
  }
}
   b417a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    delay(500);
   b417e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4182:	f000 bdaf 	b.w	b4ce4 <delay>
      Serial.println("ENJOY THE EVENT!");
   b4186:	f001 fcef 	bl	b5b68 <_Z16_fetch_usbserialv>
   b418a:	4914      	ldr	r1, [pc, #80]	; (b41dc <_Z4RFIDv+0x84>)
   b418c:	4d11      	ldr	r5, [pc, #68]	; (b41d4 <_Z4RFIDv+0x7c>)
        Serial.print(" ");
   b418e:	4f14      	ldr	r7, [pc, #80]	; (b41e0 <_Z4RFIDv+0x88>)
      Serial.println("ENJOY THE EVENT!");
   b4190:	f001 fafb 	bl	b578a <_ZN5Print7printlnEPKc>
      Serial.print("UID: ");
   b4194:	f001 fce8 	bl	b5b68 <_Z16_fetch_usbserialv>
   b4198:	4912      	ldr	r1, [pc, #72]	; (b41e4 <_Z4RFIDv+0x8c>)
   b419a:	f001 fae3 	bl	b5764 <_ZN5Print5printEPKc>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b419e:	2400      	movs	r4, #0
        dataRead[i] = 0;
   b41a0:	4626      	mov	r6, r4
        Serial.print(dataRead[i], HEX);
   b41a2:	f001 fce1 	bl	b5b68 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41a6:	7829      	ldrb	r1, [r5, #0]
   b41a8:	2210      	movs	r2, #16
   b41aa:	f001 faf8 	bl	b579e <_ZN5Print11printNumberEmh>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b41ae:	3401      	adds	r4, #1
        Serial.print(" ");
   b41b0:	f001 fcda 	bl	b5b68 <_Z16_fetch_usbserialv>
   b41b4:	4639      	mov	r1, r7
   b41b6:	f001 fad5 	bl	b5764 <_ZN5Print5printEPKc>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b41ba:	2c0a      	cmp	r4, #10
        dataRead[i] = 0;
   b41bc:	f805 6b01 	strb.w	r6, [r5], #1
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b41c0:	d1ef      	bne.n	b41a2 <_Z4RFIDv+0x4a>
      Serial.println();
   b41c2:	f001 fcd1 	bl	b5b68 <_Z16_fetch_usbserialv>
   b41c6:	f001 fad4 	bl	b5772 <_ZN5Print7printlnEv>
   b41ca:	e7d6      	b.n	b417a <_Z4RFIDv+0x22>
}
   b41cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b41ce:	bf00      	nop
   b41d0:	2003e644 	.word	0x2003e644
   b41d4:	2003e618 	.word	0x2003e618
   b41d8:	000b614c 	.word	0x000b614c
   b41dc:	000b6168 	.word	0x000b6168
   b41e0:	000b617d 	.word	0x000b617d
   b41e4:	000b6179 	.word	0x000b6179

000b41e8 <loop>:
    
//     Serial.print("sHybrid2: "); 
//     Serial.println(ApiData2.isHybrid);
}

void loop() {
   b41e8:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b41ea:	f000 fb77 	bl	b48dc <HAL_Timer_Get_Milli_Seconds>

currentMillis1 = millis();
   b41ee:	4b03      	ldr	r3, [pc, #12]	; (b41fc <loop+0x14>)
   b41f0:	6018      	str	r0, [r3, #0]
  // }
  
  //I2C_Scanner();
  //Fuel_Gauge();
  RFID();
   b41f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  RFID();
   b41f6:	f7ff bfaf 	b.w	b4158 <_Z4RFIDv>
   b41fa:	bf00      	nop
   b41fc:	2003e614 	.word	0x2003e614

000b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b4200:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b4202:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b4204:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b4206:	b17c      	cbz	r4, b4228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4208:	6863      	ldr	r3, [r4, #4]
   b420a:	3b01      	subs	r3, #1
   b420c:	6063      	str	r3, [r4, #4]
   b420e:	b95b      	cbnz	r3, b4228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4210:	6823      	ldr	r3, [r4, #0]
   b4212:	4620      	mov	r0, r4
   b4214:	689b      	ldr	r3, [r3, #8]
   b4216:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4218:	68a3      	ldr	r3, [r4, #8]
   b421a:	3b01      	subs	r3, #1
   b421c:	60a3      	str	r3, [r4, #8]
   b421e:	b91b      	cbnz	r3, b4228 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4220:	6823      	ldr	r3, [r4, #0]
   b4222:	4620      	mov	r0, r4
   b4224:	68db      	ldr	r3, [r3, #12]
   b4226:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4228:	4628      	mov	r0, r5
   b422a:	bd38      	pop	{r3, r4, r5, pc}

000b422c <setup>:
void setup() {
   b422c:	b530      	push	{r4, r5, lr}
   b422e:	b085      	sub	sp, #20
Serial.begin(115200);
   b4230:	f001 fc9a 	bl	b5b68 <_Z16_fetch_usbserialv>
   b4234:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4238:	f001 fc8a 	bl	b5b50 <_ZN9USBSerial5beginEl>
 pinMode(BATON, OUTPUT);
   b423c:	2101      	movs	r1, #1
   b423e:	2016      	movs	r0, #22
   b4240:	f001 fdce 	bl	b5de0 <pinMode>
 digitalWrite(BATON,HIGH);
   b4244:	2101      	movs	r1, #1
   b4246:	2016      	movs	r0, #22
   b4248:	f001 fddb 	bl	b5e02 <digitalWrite>
 pinMode (BUZZER, OUTPUT);
   b424c:	2101      	movs	r1, #1
   b424e:	2009      	movs	r0, #9
   b4250:	f001 fdc6 	bl	b5de0 <pinMode>
 digitalWrite (BUZZER, LOW);
   b4254:	2100      	movs	r1, #0
   b4256:	2009      	movs	r0, #9
   b4258:	f001 fdd3 	bl	b5e02 <digitalWrite>
 Serial.print("Buzzer off");
   b425c:	f001 fc84 	bl	b5b68 <_Z16_fetch_usbserialv>
   b4260:	491d      	ldr	r1, [pc, #116]	; (b42d8 <setup+0xac>)
 while (!nfc.begin()) {
   b4262:	4d1e      	ldr	r5, [pc, #120]	; (b42dc <setup+0xb0>)
   Serial.print(".");
   b4264:	4c1e      	ldr	r4, [pc, #120]	; (b42e0 <setup+0xb4>)
 Serial.print("Buzzer off");
   b4266:	f001 fa7d 	bl	b5764 <_ZN5Print5printEPKc>
 pinMode(LDO_EN, OUTPUT);
   b426a:	2101      	movs	r1, #1
   b426c:	2017      	movs	r0, #23
   b426e:	f001 fdb7 	bl	b5de0 <pinMode>
 digitalWrite(LDO_EN, HIGH);
   b4272:	2101      	movs	r1, #1
   b4274:	2017      	movs	r0, #23
   b4276:	f001 fdc4 	bl	b5e02 <digitalWrite>
 Serial.println();
   b427a:	f001 fc75 	bl	b5b68 <_Z16_fetch_usbserialv>
   b427e:	f001 fa78 	bl	b5772 <_ZN5Print7printlnEv>
 Serial.print("Initializing PN532");
   b4282:	f001 fc71 	bl	b5b68 <_Z16_fetch_usbserialv>
   b4286:	4917      	ldr	r1, [pc, #92]	; (b42e4 <setup+0xb8>)
   b4288:	f001 fa6c 	bl	b5764 <_ZN5Print5printEPKc>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b428c:	4b16      	ldr	r3, [pc, #88]	; (b42e8 <setup+0xbc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b428e:	4917      	ldr	r1, [pc, #92]	; (b42ec <setup+0xc0>)
   b4290:	781b      	ldrb	r3, [r3, #0]
   b4292:	f88d 3000 	strb.w	r3, [sp]
   b4296:	2200      	movs	r2, #0
   b4298:	233c      	movs	r3, #60	; 0x3c
   b429a:	a802      	add	r0, sp, #8
   b429c:	f000 fed4 	bl	b5048 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b42a0:	a803      	add	r0, sp, #12
   b42a2:	f7ff ffad 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 while (!nfc.begin()) {
   b42a6:	4628      	mov	r0, r5
   b42a8:	f000 fad4 	bl	b4854 <_ZN17DFRobot_PN532_IIC5beginEv>
   b42ac:	b940      	cbnz	r0, b42c0 <setup+0x94>
   Serial.print(".");
   b42ae:	f001 fc5b 	bl	b5b68 <_Z16_fetch_usbserialv>
   b42b2:	4621      	mov	r1, r4
   b42b4:	f001 fa56 	bl	b5764 <_ZN5Print5printEPKc>
   delay (100);
   b42b8:	2064      	movs	r0, #100	; 0x64
   b42ba:	f000 fd13 	bl	b4ce4 <delay>
 while (!nfc.begin()) {
   b42be:	e7f2      	b.n	b42a6 <setup+0x7a>
  Serial.println();                              // DEBUG -- remove later
   b42c0:	f001 fc52 	bl	b5b68 <_Z16_fetch_usbserialv>
   b42c4:	f001 fa55 	bl	b5772 <_ZN5Print7printlnEv>
  Serial.println("Waiting for a card......");    // DEBUG -- remove later
   b42c8:	f001 fc4e 	bl	b5b68 <_Z16_fetch_usbserialv>
   b42cc:	4908      	ldr	r1, [pc, #32]	; (b42f0 <setup+0xc4>)
}
   b42ce:	b005      	add	sp, #20
   b42d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println("Waiting for a card......");    // DEBUG -- remove later
   b42d4:	f001 ba59 	b.w	b578a <_ZN5Print7printlnEPKc>
   b42d8:	000b617f 	.word	0x000b617f
   b42dc:	2003e644 	.word	0x2003e644
   b42e0:	000b61b4 	.word	0x000b61b4
   b42e4:	000b618a 	.word	0x000b618a
   b42e8:	2003e610 	.word	0x2003e610
   b42ec:	000b6197 	.word	0x000b6197
   b42f0:	000b619d 	.word	0x000b619d

000b42f4 <_GLOBAL__sub_I_epd>:
   b42f4:	b508      	push	{r3, lr}
        val_(val) {
   b42f6:	4b0b      	ldr	r3, [pc, #44]	; (b4324 <_GLOBAL__sub_I_epd+0x30>)
Epd epd;
   b42f8:	480b      	ldr	r0, [pc, #44]	; (b4328 <_GLOBAL__sub_I_epd+0x34>)
   b42fa:	2201      	movs	r2, #1
   b42fc:	701a      	strb	r2, [r3, #0]
   b42fe:	f000 f81d 	bl	b433c <_ZN3EpdC1Ev>
}ApiData1, ApiData2;
   b4302:	480a      	ldr	r0, [pc, #40]	; (b432c <_GLOBAL__sub_I_epd+0x38>)
   b4304:	f7ff fee6 	bl	b40d4 <_ZN11myStructureC1Ev>
   b4308:	4809      	ldr	r0, [pc, #36]	; (b4330 <_GLOBAL__sub_I_epd+0x3c>)
   b430a:	f7ff fee3 	bl	b40d4 <_ZN11myStructureC1Ev>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b430e:	4809      	ldr	r0, [pc, #36]	; (b4334 <_GLOBAL__sub_I_epd+0x40>)
   b4310:	2200      	movs	r2, #0
   b4312:	2102      	movs	r1, #2
   b4314:	f000 f9da 	bl	b46cc <_ZN17DFRobot_PN532_IICC1Ehh>
   b4318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
max1720x gauge;
   b431c:	4806      	ldr	r0, [pc, #24]	; (b4338 <_GLOBAL__sub_I_epd+0x44>)
   b431e:	f000 b822 	b.w	b4366 <_ZN8max1720xC1Ev>
   b4322:	bf00      	nop
   b4324:	2003e610 	.word	0x2003e610
   b4328:	2003e628 	.word	0x2003e628
   b432c:	2003e490 	.word	0x2003e490
   b4330:	2003e550 	.word	0x2003e550
   b4334:	2003e644 	.word	0x2003e644
   b4338:	2003e640 	.word	0x2003e640

000b433c <_ZN3EpdC1Ev>:
#include "../lib/EPD4_2/src/epd4in2b_V2.h"

Epd::~Epd() {
};

Epd::Epd() {
   b433c:	b510      	push	{r4, lr}
   b433e:	4604      	mov	r4, r0
   b4340:	f000 f810 	bl	b4364 <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b4344:	2206      	movs	r2, #6
   b4346:	2305      	movs	r3, #5
   b4348:	e9c4 2302 	strd	r2, r3, [r4, #8]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b434c:	2108      	movs	r1, #8
   b434e:	2307      	movs	r3, #7
   b4350:	e9c4 1304 	strd	r1, r3, [r4, #16]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b4354:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b4358:	f44f 7396 	mov.w	r3, #300	; 0x12c
   b435c:	e9c4 0300 	strd	r0, r3, [r4]
};
   b4360:	4620      	mov	r0, r4
   b4362:	bd10      	pop	{r4, pc}

000b4364 <_ZN5EpdIfC1Ev>:
#include "../lib/EPD4_2/src/epdif.h"

#include <spi.h>

EpdIf::EpdIf() {
};
   b4364:	4770      	bx	lr

000b4366 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b4366:	b510      	push	{r4, lr}
   b4368:	4604      	mov	r4, r0
    Wire.begin(); 
   b436a:	f001 fd91 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b436e:	f001 f85f 	bl	b5430 <_ZN7TwoWire5beginEv>
}
   b4372:	4620      	mov	r0, r4
   b4374:	bd10      	pop	{r4, pc}

000b4376 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4376:	6803      	ldr	r3, [r0, #0]
   b4378:	b2c9      	uxtb	r1, r1
   b437a:	689b      	ldr	r3, [r3, #8]
   b437c:	4718      	bx	r3

000b437e <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b437e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b4382:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b4384:	2002      	movs	r0, #2
    cmdlen++;
   b4386:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b4388:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b438a:	f000 fcab 	bl	b4ce4 <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b438e:	f001 fd7f 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4392:	2124      	movs	r1, #36	; 0x24
   b4394:	f001 f882 	bl	b549c <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b4398:	f001 fd7a 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b439c:	2100      	movs	r1, #0
   b439e:	f7ff ffea 	bl	b4376 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b43a2:	f001 fd75 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b43a6:	2100      	movs	r1, #0
   b43a8:	f7ff ffe5 	bl	b4376 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b43ac:	f001 fd70 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b43b0:	21ff      	movs	r1, #255	; 0xff
   b43b2:	f7ff ffe0 	bl	b4376 <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b43b6:	f001 fd6b 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b43ba:	6803      	ldr	r3, [r0, #0]
   b43bc:	4629      	mov	r1, r5
   b43be:	689b      	ldr	r3, [r3, #8]
   b43c0:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b43c2:	f001 fd65 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b43c6:	4269      	negs	r1, r5
   b43c8:	f7ff ffd5 	bl	b4376 <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b43cc:	f001 fd60 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b43d0:	21d4      	movs	r1, #212	; 0xd4
   b43d2:	f7ff ffd0 	bl	b4376 <_ZN7TwoWire5writeEi>
   b43d6:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b43d8:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b43da:	3d01      	subs	r5, #1
   b43dc:	f104 0801 	add.w	r8, r4, #1
   b43e0:	b2e4      	uxtb	r4, r4
   b43e2:	42ac      	cmp	r4, r5
   b43e4:	da0a      	bge.n	b43fc <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b43e6:	f001 fd53 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b43ea:	6803      	ldr	r3, [r0, #0]
   b43ec:	5d39      	ldrb	r1, [r7, r4]
   b43ee:	689b      	ldr	r3, [r3, #8]
   b43f0:	4798      	blx	r3
      checksum += cmd[i];
   b43f2:	5d39      	ldrb	r1, [r7, r4]
   b43f4:	440e      	add	r6, r1
   b43f6:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b43f8:	4644      	mov	r4, r8
   b43fa:	e7ef      	b.n	b43dc <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b43fc:	f001 fd48 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4400:	6803      	ldr	r3, [r0, #0]
   b4402:	43f1      	mvns	r1, r6
   b4404:	689b      	ldr	r3, [r3, #8]
   b4406:	b2c9      	uxtb	r1, r1
   b4408:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b440a:	f001 fd41 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b440e:	6803      	ldr	r3, [r0, #0]
   b4410:	2100      	movs	r1, #0
   b4412:	689b      	ldr	r3, [r3, #8]
   b4414:	4798      	blx	r3
    Wire.endTransmission();
   b4416:	f001 fd3b 	bl	b5e90 <_Z19__fetch_global_Wirev>
}
   b441a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b441e:	f001 b844 	b.w	b54aa <_ZN7TwoWire15endTransmissionEv>

000b4422 <_ZN13DFRobot_PN5328checkDCSEi>:
{
   b4422:	b530      	push	{r4, r5, lr}
   b4424:	4602      	mov	r2, r0
    if(!this->nfcEnable)
   b4426:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b442a:	b1a0      	cbz	r0, b4456 <_ZN13DFRobot_PN5328checkDCSEi+0x34>
    for(int i = 6;i < x - 2;i++)
   b442c:	f06f 0503 	mvn.w	r5, #3
   b4430:	f102 000a 	add.w	r0, r2, #10
    uint32_t sum = 0;
   b4434:	2300      	movs	r3, #0
    for(int i = 6;i < x - 2;i++)
   b4436:	3902      	subs	r1, #2
   b4438:	1aad      	subs	r5, r5, r2
   b443a:	182c      	adds	r4, r5, r0
   b443c:	42a1      	cmp	r1, r4
   b443e:	dd03      	ble.n	b4448 <_ZN13DFRobot_PN5328checkDCSEi+0x26>
        sum += this->receiveACK[i];
   b4440:	f810 4b01 	ldrb.w	r4, [r0], #1
   b4444:	4423      	add	r3, r4
    for(int i = 6;i < x - 2;i++)
   b4446:	e7f8      	b.n	b443a <_ZN13DFRobot_PN5328checkDCSEi+0x18>
    if(dcs==this->receiveACK[x - 2])
   b4448:	440a      	add	r2, r1
    dcs = 0xff - (sum&0xff);
   b444a:	43db      	mvns	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b444c:	7910      	ldrb	r0, [r2, #4]
    dcs = 0xff - (sum&0xff);
   b444e:	b2db      	uxtb	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b4450:	1a1b      	subs	r3, r3, r0
   b4452:	4258      	negs	r0, r3
   b4454:	4158      	adcs	r0, r3
}
   b4456:	bd30      	pop	{r4, r5, pc}

000b4458 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>:
{   //bool success = false;
   b4458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b445a:	4604      	mov	r4, r0
    if(!this->nfcEnable)
   b445c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b4460:	b350      	cbz	r0, b44b8 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    cmdPassWord[0] = COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
   b4462:	2040      	movs	r0, #64	; 0x40
   b4464:	f88d 0000 	strb.w	r0, [sp]
    cmdPassWord[1] = 1;                              /* The quantity number of the maxium card that can be detected in every research*/
   b4468:	2001      	movs	r0, #1
   b446a:	f88d 0001 	strb.w	r0, [sp, #1]
    cmdPassWord[2] = 0x60;                          
   b446e:	2060      	movs	r0, #96	; 0x60
   b4470:	f88d 0002 	strb.w	r0, [sp, #2]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b4474:	6818      	ldr	r0, [r3, #0]
   b4476:	889b      	ldrh	r3, [r3, #4]
   b4478:	f8ad 3008 	strh.w	r3, [sp, #8]
    for(int i = 10;i < 14;i++) cmdPassWord[i] = id[i - 10];           // nfcUid
   b447c:	6813      	ldr	r3, [r2, #0]
   b447e:	f8cd 300a 	str.w	r3, [sp, #10]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b4482:	6823      	ldr	r3, [r4, #0]
    cmdPassWord[3] = block;
   b4484:	f88d 1003 	strb.w	r1, [sp, #3]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b4488:	9001      	str	r0, [sp, #4]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b448a:	681b      	ldr	r3, [r3, #0]
   b448c:	220e      	movs	r2, #14
   b448e:	4669      	mov	r1, sp
   b4490:	4620      	mov	r0, r4
   b4492:	4798      	blx	r3
    if(!this->readAck(16))
   b4494:	6823      	ldr	r3, [r4, #0]
   b4496:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b449a:	685b      	ldr	r3, [r3, #4]
   b449c:	2110      	movs	r1, #16
   b449e:	4620      	mov	r0, r4
   b44a0:	4798      	blx	r3
   b44a2:	b148      	cbz	r0, b44b8 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    if(checkDCS(16) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00)   
   b44a4:	2110      	movs	r1, #16
   b44a6:	4620      	mov	r0, r4
   b44a8:	f7ff ffbb 	bl	b4422 <_ZN13DFRobot_PN5328checkDCSEi>
   b44ac:	b120      	cbz	r0, b44b8 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
   b44ae:	8a20      	ldrh	r0, [r4, #16]
   b44b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b44b4:	4258      	negs	r0, r3
   b44b6:	4158      	adcs	r0, r3
}
   b44b8:	b004      	add	sp, #16
   b44ba:	bd10      	pop	{r4, pc}

000b44bc <_ZN13DFRobot_PN5324scanEv>:
{   if(!this->nfcEnable)
   b44bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b44be:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   b44c2:	4604      	mov	r4, r0
   b44c4:	b313      	cbz	r3, b450c <_ZN13DFRobot_PN5324scanEv+0x50>
    cmdnfcUid[0] = COMMAND_INLISTPASSIVETARGET;
   b44c6:	234a      	movs	r3, #74	; 0x4a
   b44c8:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdnfcUid[1] = 1;                              // The quantity number of the maxium card that can be detected in every research
   b44cc:	2301      	movs	r3, #1
   b44ce:	f88d 3005 	strb.w	r3, [sp, #5]
    cmdnfcUid[2] = MIFARE_ISO14443A;
   b44d2:	2300      	movs	r3, #0
   b44d4:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdnfcUid,3);
   b44d8:	6803      	ldr	r3, [r0, #0]
   b44da:	2203      	movs	r2, #3
   b44dc:	681b      	ldr	r3, [r3, #0]
   b44de:	a901      	add	r1, sp, #4
   b44e0:	4798      	blx	r3
    if(!readAck(25))
   b44e2:	6823      	ldr	r3, [r4, #0]
   b44e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b44e8:	685b      	ldr	r3, [r3, #4]
   b44ea:	2119      	movs	r1, #25
   b44ec:	4620      	mov	r0, r4
   b44ee:	4798      	blx	r3
   b44f0:	4603      	mov	r3, r0
   b44f2:	b158      	cbz	r0, b450c <_ZN13DFRobot_PN5324scanEv+0x50>
        nfcUid[i] = receiveACK[i + 19];
   b44f4:	7ea3      	ldrb	r3, [r4, #26]
   b44f6:	7de2      	ldrb	r2, [r4, #23]
   b44f8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(receiveACK[13]!=1)
   b44fc:	7c63      	ldrb	r3, [r4, #17]
        nfcUid[i] = receiveACK[i + 19];
   b44fe:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
   b4502:	8b22      	ldrh	r2, [r4, #24]
   b4504:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if(receiveACK[13]!=1)
   b4506:	1e5a      	subs	r2, r3, #1
   b4508:	4253      	negs	r3, r2
   b450a:	4153      	adcs	r3, r2
}
   b450c:	4618      	mov	r0, r3
   b450e:	b004      	add	sp, #16
   b4510:	bd10      	pop	{r4, pc}
	...

000b4514 <_ZN13DFRobot_PN5328readDataEi>:
String DFRobot_PN532::readData(int page) {
   b4514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (page > 255)
   b4518:	2aff      	cmp	r2, #255	; 0xff
String DFRobot_PN532::readData(int page) {
   b451a:	b08a      	sub	sp, #40	; 0x28
   b451c:	4605      	mov	r5, r0
   b451e:	460c      	mov	r4, r1
   b4520:	4616      	mov	r6, r2
    if (page > 255)
   b4522:	dd06      	ble.n	b4532 <_ZN13DFRobot_PN5328readDataEi+0x1e>
        return "flase";
   b4524:	4939      	ldr	r1, [pc, #228]	; (b460c <_ZN13DFRobot_PN5328readDataEi+0xf8>)
        return "read timeout!";
   b4526:	f001 f9b4 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b452a:	4628      	mov	r0, r5
   b452c:	b00a      	add	sp, #40	; 0x28
   b452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!this->nfcEnable)
   b4532:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
   b4536:	b90b      	cbnz	r3, b453c <_ZN13DFRobot_PN5328readDataEi+0x28>
        return "wake up error!";
   b4538:	4935      	ldr	r1, [pc, #212]	; (b4610 <_ZN13DFRobot_PN5328readDataEi+0xfc>)
   b453a:	e7f4      	b.n	b4526 <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!scan())
   b453c:	4608      	mov	r0, r1
   b453e:	f7ff ffbd 	bl	b44bc <_ZN13DFRobot_PN5324scanEv>
   b4542:	b910      	cbnz	r0, b454a <_ZN13DFRobot_PN5328readDataEi+0x36>
        return "no card!";
   b4544:	4933      	ldr	r1, [pc, #204]	; (b4614 <_ZN13DFRobot_PN5328readDataEi+0x100>)
        return "read timeout!";
   b4546:	4628      	mov	r0, r5
   b4548:	e7ed      	b.n	b4526 <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!passWordCheck(page,nfcUid,nfcPassword))
   b454a:	f104 0327 	add.w	r3, r4, #39	; 0x27
   b454e:	f104 022d 	add.w	r2, r4, #45	; 0x2d
   b4552:	4631      	mov	r1, r6
   b4554:	4620      	mov	r0, r4
   b4556:	f7ff ff7f 	bl	b4458 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>
   b455a:	b908      	cbnz	r0, b4560 <_ZN13DFRobot_PN5328readDataEi+0x4c>
        return "read error!";
   b455c:	492e      	ldr	r1, [pc, #184]	; (b4618 <_ZN13DFRobot_PN5328readDataEi+0x104>)
   b455e:	e7f2      	b.n	b4546 <_ZN13DFRobot_PN5328readDataEi+0x32>
        cmdRead[0] = COMMAND_INDATAEXCHANGE;
   b4560:	2340      	movs	r3, #64	; 0x40
   b4562:	f88d 3004 	strb.w	r3, [sp, #4]
        cmdRead[1] = 1;                   /* Card number */
   b4566:	2301      	movs	r3, #1
   b4568:	f88d 3005 	strb.w	r3, [sp, #5]
        cmdRead[2] = CARD_CMD_READING;     /* Mifare Read command = 0x30 */
   b456c:	2330      	movs	r3, #48	; 0x30
   b456e:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdRead,4);
   b4572:	6823      	ldr	r3, [r4, #0]
        cmdRead[3] = page; 
   b4574:	f88d 6007 	strb.w	r6, [sp, #7]
    writeCommand(cmdRead,4);
   b4578:	2204      	movs	r2, #4
   b457a:	eb0d 0102 	add.w	r1, sp, r2
   b457e:	681b      	ldr	r3, [r3, #0]
   b4580:	4620      	mov	r0, r4
   b4582:	4798      	blx	r3
    if(!readAck(32))
   b4584:	6823      	ldr	r3, [r4, #0]
   b4586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b458a:	685b      	ldr	r3, [r3, #4]
   b458c:	2120      	movs	r1, #32
   b458e:	4620      	mov	r0, r4
   b4590:	4798      	blx	r3
   b4592:	b908      	cbnz	r0, b4598 <_ZN13DFRobot_PN5328readDataEi+0x84>
        return "read timeout!";
   b4594:	4921      	ldr	r1, [pc, #132]	; (b461c <_ZN13DFRobot_PN5328readDataEi+0x108>)
   b4596:	e7d6      	b.n	b4546 <_ZN13DFRobot_PN5328readDataEi+0x32>
    String dataSrt = "";
   b4598:	4921      	ldr	r1, [pc, #132]	; (b4620 <_ZN13DFRobot_PN5328readDataEi+0x10c>)
   b459a:	a802      	add	r0, sp, #8
   b459c:	f001 f979 	bl	b5892 <_ZN6StringC1EPK19__FlashStringHelper>
    if(checkDCS(32) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00){
   b45a0:	2120      	movs	r1, #32
   b45a2:	4620      	mov	r0, r4
   b45a4:	f7ff ff3d 	bl	b4422 <_ZN13DFRobot_PN5328checkDCSEi>
   b45a8:	b330      	cbz	r0, b45f8 <_ZN13DFRobot_PN5328readDataEi+0xe4>
   b45aa:	8a23      	ldrh	r3, [r4, #16]
   b45ac:	2b41      	cmp	r3, #65	; 0x41
   b45ae:	d123      	bne.n	b45f8 <_ZN13DFRobot_PN5328readDataEi+0xe4>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b45b0:	4f1c      	ldr	r7, [pc, #112]	; (b4624 <_ZN13DFRobot_PN5328readDataEi+0x110>)
   b45b2:	f8df 8074 	ldr.w	r8, [pc, #116]	; b4628 <_ZN13DFRobot_PN5328readDataEi+0x114>
   b45b6:	3412      	adds	r4, #18
   b45b8:	2600      	movs	r6, #0
            blockData[i] = receiveACK[i + 14];
   b45ba:	f814 1b01 	ldrb.w	r1, [r4], #1
   b45be:	77a1      	strb	r1, [r4, #30]
            if(receiveACK[i+14]<=0x0f){
   b45c0:	290f      	cmp	r1, #15
   b45c2:	d821      	bhi.n	b4608 <_ZN13DFRobot_PN5328readDataEi+0xf4>
   b45c4:	4639      	mov	r1, r7
   b45c6:	a802      	add	r0, sp, #8
   b45c8:	f001 f9de 	bl	b5988 <_ZN6String6concatEPKc>
                dataSrt += String(receiveACK[i + 14],HEX);
   b45cc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   b45d0:	2210      	movs	r2, #16
                dataSrt += String(receiveACK[i + 14],HEX);
   b45d2:	a806      	add	r0, sp, #24
   b45d4:	f001 f9ab 	bl	b592e <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b45d8:	a906      	add	r1, sp, #24
   b45da:	a802      	add	r0, sp, #8
   b45dc:	f001 f9d0 	bl	b5980 <_ZN6String6concatERKS_>
   b45e0:	a806      	add	r0, sp, #24
   b45e2:	f001 f90b 	bl	b57fc <_ZN6StringD1Ev>
            if(i<15) dataSrt += " ";
   b45e6:	2e0f      	cmp	r6, #15
   b45e8:	d003      	beq.n	b45f2 <_ZN13DFRobot_PN5328readDataEi+0xde>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b45ea:	4641      	mov	r1, r8
   b45ec:	a802      	add	r0, sp, #8
   b45ee:	f001 f9cb 	bl	b5988 <_ZN6String6concatEPKc>
        for(int i = 0; i<16; i++)
   b45f2:	3601      	adds	r6, #1
   b45f4:	2e10      	cmp	r6, #16
   b45f6:	d1e0      	bne.n	b45ba <_ZN13DFRobot_PN5328readDataEi+0xa6>
    return dataSrt;
   b45f8:	a902      	add	r1, sp, #8
   b45fa:	4628      	mov	r0, r5
   b45fc:	f001 f97a 	bl	b58f4 <_ZN6StringC1EOS_>
    String dataSrt = "";
   b4600:	a802      	add	r0, sp, #8
   b4602:	f001 f8fb 	bl	b57fc <_ZN6StringD1Ev>
   b4606:	e790      	b.n	b452a <_ZN13DFRobot_PN5328readDataEi+0x16>
                dataSrt += String(receiveACK[i + 14],HEX);
   b4608:	2210      	movs	r2, #16
   b460a:	e7e2      	b.n	b45d2 <_ZN13DFRobot_PN5328readDataEi+0xbe>
   b460c:	000b61d0 	.word	0x000b61d0
   b4610:	000b61b8 	.word	0x000b61b8
   b4614:	000b61c7 	.word	0x000b61c7
   b4618:	000b61d6 	.word	0x000b61d6
   b461c:	000b61e2 	.word	0x000b61e2
   b4620:	000b617e 	.word	0x000b617e
   b4624:	000b61b6 	.word	0x000b61b6
   b4628:	000b617d 	.word	0x000b617d

000b462c <_ZN13DFRobot_PN5328readDataEPhh>:
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b462c:	b530      	push	{r4, r5, lr}
    if(!this->nfcEnable)
   b462e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b4632:	b085      	sub	sp, #20
   b4634:	4604      	mov	r4, r0
   b4636:	460d      	mov	r5, r1
    if(!this->nfcEnable)
   b4638:	2b00      	cmp	r3, #0
   b463a:	d039      	beq.n	b46b0 <_ZN13DFRobot_PN5328readDataEPhh+0x84>
    String error = this->readData(block);
   b463c:	4601      	mov	r1, r0
   b463e:	4668      	mov	r0, sp
   b4640:	f7ff ff68 	bl	b4514 <_ZN13DFRobot_PN5328readDataEi>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4644:	491b      	ldr	r1, [pc, #108]	; (b46b4 <_ZN13DFRobot_PN5328readDataEPhh+0x88>)
   b4646:	4668      	mov	r0, sp
   b4648:	f001 f9af 	bl	b59aa <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b464c:	b130      	cbz	r0, b465c <_ZN13DFRobot_PN5328readDataEPhh+0x30>
        return -1;
   b464e:	24ff      	movs	r4, #255	; 0xff
    String error = this->readData(block);
   b4650:	4668      	mov	r0, sp
   b4652:	f001 f8d3 	bl	b57fc <_ZN6StringD1Ev>
}
   b4656:	4620      	mov	r0, r4
   b4658:	b005      	add	sp, #20
   b465a:	bd30      	pop	{r4, r5, pc}
   b465c:	4916      	ldr	r1, [pc, #88]	; (b46b8 <_ZN13DFRobot_PN5328readDataEPhh+0x8c>)
   b465e:	4668      	mov	r0, sp
   b4660:	f001 f9a3 	bl	b59aa <_ZNK6String6equalsEPKc>
    if(error == "no card!" || error == "read error!" || error =="unknown error!"
   b4664:	2800      	cmp	r0, #0
   b4666:	d1f2      	bne.n	b464e <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b4668:	4914      	ldr	r1, [pc, #80]	; (b46bc <_ZN13DFRobot_PN5328readDataEPhh+0x90>)
   b466a:	4668      	mov	r0, sp
   b466c:	f001 f99d 	bl	b59aa <_ZNK6String6equalsEPKc>
   b4670:	2800      	cmp	r0, #0
   b4672:	d1ec      	bne.n	b464e <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b4674:	4912      	ldr	r1, [pc, #72]	; (b46c0 <_ZN13DFRobot_PN5328readDataEPhh+0x94>)
   b4676:	4668      	mov	r0, sp
   b4678:	f001 f997 	bl	b59aa <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b467c:	2800      	cmp	r0, #0
   b467e:	d1e6      	bne.n	b464e <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b4680:	4910      	ldr	r1, [pc, #64]	; (b46c4 <_ZN13DFRobot_PN5328readDataEPhh+0x98>)
   b4682:	4668      	mov	r0, sp
   b4684:	f001 f991 	bl	b59aa <_ZNK6String6equalsEPKc>
   b4688:	2800      	cmp	r0, #0
   b468a:	d1e0      	bne.n	b464e <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b468c:	490e      	ldr	r1, [pc, #56]	; (b46c8 <_ZN13DFRobot_PN5328readDataEPhh+0x9c>)
   b468e:	4668      	mov	r0, sp
   b4690:	f001 f98b 	bl	b59aa <_ZNK6String6equalsEPKc>
   b4694:	2800      	cmp	r0, #0
   b4696:	d1da      	bne.n	b464e <_ZN13DFRobot_PN5328readDataEPhh+0x22>
    memcpy(buffer,blockData,16);
   b4698:	f104 0331 	add.w	r3, r4, #49	; 0x31
   b469c:	4629      	mov	r1, r5
   b469e:	3441      	adds	r4, #65	; 0x41
   b46a0:	f853 2b04 	ldr.w	r2, [r3], #4
   b46a4:	f841 2b04 	str.w	r2, [r1], #4
   b46a8:	42a3      	cmp	r3, r4
   b46aa:	d1f9      	bne.n	b46a0 <_ZN13DFRobot_PN5328readDataEPhh+0x74>
    return  1;
   b46ac:	2401      	movs	r4, #1
   b46ae:	e7cf      	b.n	b4650 <_ZN13DFRobot_PN5328readDataEPhh+0x24>
        return -1;
   b46b0:	24ff      	movs	r4, #255	; 0xff
   b46b2:	e7d0      	b.n	b4656 <_ZN13DFRobot_PN5328readDataEPhh+0x2a>
   b46b4:	000b61c7 	.word	0x000b61c7
   b46b8:	000b61d6 	.word	0x000b61d6
   b46bc:	000b61f0 	.word	0x000b61f0
   b46c0:	000b61e2 	.word	0x000b61e2
   b46c4:	000b61b8 	.word	0x000b61b8
   b46c8:	000b61d0 	.word	0x000b61d0

000b46cc <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b46cc:	b538      	push	{r3, r4, r5, lr}
   b46ce:	4604      	mov	r4, r0
   b46d0:	4b06      	ldr	r3, [pc, #24]	; (b46ec <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b46d2:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b46d6:	4608      	mov	r0, r1
   b46d8:	4615      	mov	r5, r2
   b46da:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b46dc:	2100      	movs	r1, #0
   b46de:	f001 fb7f 	bl	b5de0 <pinMode>
    _mode = mode;
   b46e2:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b46e6:	4620      	mov	r0, r4
   b46e8:	bd38      	pop	{r3, r4, r5, pc}
   b46ea:	bf00      	nop
   b46ec:	000b6208 	.word	0x000b6208

000b46f0 <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b46f0:	b538      	push	{r3, r4, r5, lr}
   b46f2:	4605      	mov	r5, r0
   b46f4:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b46f6:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b46fa:	f001 fb9b 	bl	b5e34 <digitalRead>
   b46fe:	b130      	cbz	r0, b470e <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b4700:	3c01      	subs	r4, #1
   b4702:	b2a4      	uxth	r4, r4
   b4704:	b12c      	cbz	r4, b4712 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b4706:	200a      	movs	r0, #10
   b4708:	f000 faec 	bl	b4ce4 <delay>
    while(digitalRead(_irq)!=0){
   b470c:	e7f3      	b.n	b46f6 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b470e:	2001      	movs	r0, #1
}
   b4710:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b4712:	4620      	mov	r0, r4
   b4714:	e7fc      	b.n	b4710 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b4716 <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b4716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b4718:	2300      	movs	r3, #0
   b471a:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b471e:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b4722:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b4726:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b472a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b472e:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b4730:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b4732:	4604      	mov	r4, r0
   b4734:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b4736:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b473a:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b473e:	d141      	bne.n	b47c4 <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b4740:	f7ff ffd6 	bl	b46f0 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b4744:	b910      	cbnz	r0, b474c <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b4746:	2000      	movs	r0, #0
}
   b4748:	b003      	add	sp, #12
   b474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b474c:	f001 fba0 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4750:	2208      	movs	r2, #8
   b4752:	2124      	movs	r1, #36	; 0x24
   b4754:	f000 fe9b 	bl	b548e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4758:	f001 fb9a 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b475c:	6803      	ldr	r3, [r0, #0]
   b475e:	695b      	ldr	r3, [r3, #20]
   b4760:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b4762:	1d26      	adds	r6, r4, #4
   b4764:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b4768:	2001      	movs	r0, #1
   b476a:	f000 fabb 	bl	b4ce4 <delay>
        receiveACK[i]= Wire.read();
   b476e:	f001 fb8f 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4772:	6803      	ldr	r3, [r0, #0]
   b4774:	695b      	ldr	r3, [r3, #20]
   b4776:	4798      	blx	r3
   b4778:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b477c:	42be      	cmp	r6, r7
   b477e:	d1f3      	bne.n	b4768 <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b4780:	4620      	mov	r0, r4
   b4782:	f7ff ffb5 	bl	b46f0 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b4786:	2800      	cmp	r0, #0
   b4788:	d0dd      	beq.n	b4746 <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b478a:	f001 fb81 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b478e:	1f2a      	subs	r2, r5, #4
   b4790:	2124      	movs	r1, #36	; 0x24
   b4792:	f000 fe7c 	bl	b548e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4796:	f001 fb7b 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b479a:	6803      	ldr	r3, [r0, #0]
   b479c:	695b      	ldr	r3, [r3, #20]
   b479e:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b47a0:	f06f 0709 	mvn.w	r7, #9
   b47a4:	3d06      	subs	r5, #6
   b47a6:	1b3f      	subs	r7, r7, r4
   b47a8:	19bb      	adds	r3, r7, r6
   b47aa:	429d      	cmp	r5, r3
   b47ac:	dd49      	ble.n	b4842 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b47ae:	2001      	movs	r0, #1
   b47b0:	f000 fa98 	bl	b4ce4 <delay>
        receiveACK[6 + i] = Wire.read();
   b47b4:	f001 fb6c 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b47b8:	6803      	ldr	r3, [r0, #0]
   b47ba:	695b      	ldr	r3, [r3, #20]
   b47bc:	4798      	blx	r3
   b47be:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b47c2:	e7f1      	b.n	b47a8 <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b47c4:	2b00      	cmp	r3, #0
   b47c6:	d13c      	bne.n	b4842 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b47c8:	201e      	movs	r0, #30
   b47ca:	f000 fa8b 	bl	b4ce4 <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b47ce:	f001 fb5f 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b47d2:	2208      	movs	r2, #8
   b47d4:	2124      	movs	r1, #36	; 0x24
   b47d6:	f000 fe5a 	bl	b548e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b47da:	f001 fb59 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b47de:	6803      	ldr	r3, [r0, #0]
   b47e0:	695b      	ldr	r3, [r3, #20]
   b47e2:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b47e4:	1d26      	adds	r6, r4, #4
   b47e6:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b47ea:	2001      	movs	r0, #1
   b47ec:	f000 fa7a 	bl	b4ce4 <delay>
        receiveACK[i]= Wire.read();
   b47f0:	f001 fb4e 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b47f4:	6803      	ldr	r3, [r0, #0]
   b47f6:	695b      	ldr	r3, [r3, #20]
   b47f8:	4798      	blx	r3
   b47fa:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b47fe:	42be      	cmp	r6, r7
   b4800:	d1f3      	bne.n	b47ea <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b4802:	201e      	movs	r0, #30
   b4804:	f000 fa6e 	bl	b4ce4 <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b4808:	f001 fb42 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b480c:	1f2a      	subs	r2, r5, #4
   b480e:	2124      	movs	r1, #36	; 0x24
   b4810:	f000 fe3d 	bl	b548e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4814:	f001 fb3c 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4818:	6803      	ldr	r3, [r0, #0]
   b481a:	695b      	ldr	r3, [r3, #20]
   b481c:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b481e:	f06f 0709 	mvn.w	r7, #9
   b4822:	3d06      	subs	r5, #6
   b4824:	1b3f      	subs	r7, r7, r4
   b4826:	19bb      	adds	r3, r7, r6
   b4828:	429d      	cmp	r5, r3
   b482a:	dd0a      	ble.n	b4842 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b482c:	2001      	movs	r0, #1
   b482e:	f000 fa59 	bl	b4ce4 <delay>
        receiveACK[6 + i] = Wire.read();
   b4832:	f001 fb2d 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4836:	6803      	ldr	r3, [r0, #0]
   b4838:	695b      	ldr	r3, [r3, #20]
   b483a:	4798      	blx	r3
   b483c:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b4840:	e7f1      	b.n	b4826 <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b4842:	2206      	movs	r2, #6
   b4844:	1d21      	adds	r1, r4, #4
   b4846:	4668      	mov	r0, sp
   b4848:	f001 fbfb 	bl	b6042 <strncmp>
   b484c:	fab0 f080 	clz	r0, r0
   b4850:	0940      	lsrs	r0, r0, #5
   b4852:	e779      	b.n	b4748 <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b4854 <_ZN17DFRobot_PN532_IIC5beginEv>:
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b4854:	b537      	push	{r0, r1, r2, r4, r5, lr}
    this->nfcPassword[0] = 0xff;
   b4856:	23ff      	movs	r3, #255	; 0xff
   b4858:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    this->nfcPassword[1] = 0xff;
   b485c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b4860:	4604      	mov	r4, r0
    this->nfcPassword[3] = 0xff;
    this->nfcPassword[4] = 0xff;
    this->nfcPassword[5] = 0xff;
    unsigned char cmdWrite[4];
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
    cmdWrite[1] = 0x01; // normal mode;
   b4862:	2501      	movs	r5, #1
    this->nfcPassword[1] = 0xff;
   b4864:	6283      	str	r3, [r0, #40]	; 0x28
    this->nfcPassword[5] = 0xff;
   b4866:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
   b486a:	2314      	movs	r3, #20
   b486c:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdWrite[2] = 0x14; // timeout 50ms * 20 = 1 second
   b4870:	f88d 3006 	strb.w	r3, [sp, #6]
    cmdWrite[1] = 0x01; // normal mode;
   b4874:	f88d 5005 	strb.w	r5, [sp, #5]
    cmdWrite[3] = 0x01; // use IRQ pin!
   b4878:	f88d 5007 	strb.w	r5, [sp, #7]
    Wire.begin();
   b487c:	f001 fb08 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b4880:	f000 fdd6 	bl	b5430 <_ZN7TwoWire5beginEv>
    nfcEnable = true;
    writeCommand(cmdWrite,4);
   b4884:	6823      	ldr	r3, [r4, #0]
    nfcEnable = true;
   b4886:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    writeCommand(cmdWrite,4);
   b488a:	2204      	movs	r2, #4
   b488c:	eb0d 0102 	add.w	r1, sp, r2
   b4890:	681b      	ldr	r3, [r3, #0]
   b4892:	4620      	mov	r0, r4
   b4894:	4798      	blx	r3
    delay(10);
   b4896:	200a      	movs	r0, #10
   b4898:	f000 fa24 	bl	b4ce4 <delay>
    
    if(readAck(14)!= 1){
   b489c:	6823      	ldr	r3, [r4, #0]
   b489e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b48a2:	685b      	ldr	r3, [r3, #4]
   b48a4:	210e      	movs	r1, #14
   b48a6:	4620      	mov	r0, r4
   b48a8:	4798      	blx	r3
   b48aa:	b120      	cbz	r0, b48b6 <_ZN17DFRobot_PN532_IIC5beginEv+0x62>
        
        return false;
    }
    return  ( receiveACK[12] == 0x15);
   b48ac:	7c20      	ldrb	r0, [r4, #16]
   b48ae:	f1a0 0315 	sub.w	r3, r0, #21
   b48b2:	4258      	negs	r0, r3
   b48b4:	4158      	adcs	r0, r3
}
   b48b6:	b003      	add	sp, #12
   b48b8:	bd30      	pop	{r4, r5, pc}
	...

000b48bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b48bc:	b508      	push	{r3, lr}
   b48be:	4b02      	ldr	r3, [pc, #8]	; (b48c8 <os_mutex_recursive_create+0xc>)
   b48c0:	681b      	ldr	r3, [r3, #0]
   b48c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48c4:	9301      	str	r3, [sp, #4]
   b48c6:	bd08      	pop	{r3, pc}
   b48c8:	00030248 	.word	0x00030248

000b48cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b48cc:	b508      	push	{r3, lr}
   b48ce:	4b02      	ldr	r3, [pc, #8]	; (b48d8 <HAL_RNG_GetRandomNumber+0xc>)
   b48d0:	681b      	ldr	r3, [r3, #0]
   b48d2:	685b      	ldr	r3, [r3, #4]
   b48d4:	9301      	str	r3, [sp, #4]
   b48d6:	bd08      	pop	{r3, pc}
   b48d8:	00030218 	.word	0x00030218

000b48dc <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b48dc:	b508      	push	{r3, lr}
   b48de:	4b02      	ldr	r3, [pc, #8]	; (b48e8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b48e0:	681b      	ldr	r3, [r3, #0]
   b48e2:	695b      	ldr	r3, [r3, #20]
   b48e4:	9301      	str	r3, [sp, #4]
   b48e6:	bd08      	pop	{r3, pc}
   b48e8:	00030218 	.word	0x00030218

000b48ec <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b48ec:	b508      	push	{r3, lr}
   b48ee:	4b02      	ldr	r3, [pc, #8]	; (b48f8 <hal_gpio_mode+0xc>)
   b48f0:	681b      	ldr	r3, [r3, #0]
   b48f2:	689b      	ldr	r3, [r3, #8]
   b48f4:	9301      	str	r3, [sp, #4]
   b48f6:	bd08      	pop	{r3, pc}
   b48f8:	0003022c 	.word	0x0003022c

000b48fc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b48fc:	b508      	push	{r3, lr}
   b48fe:	4b02      	ldr	r3, [pc, #8]	; (b4908 <hal_gpio_get_mode+0xc>)
   b4900:	681b      	ldr	r3, [r3, #0]
   b4902:	68db      	ldr	r3, [r3, #12]
   b4904:	9301      	str	r3, [sp, #4]
   b4906:	bd08      	pop	{r3, pc}
   b4908:	0003022c 	.word	0x0003022c

000b490c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b490c:	b508      	push	{r3, lr}
   b490e:	4b02      	ldr	r3, [pc, #8]	; (b4918 <hal_gpio_write+0xc>)
   b4910:	681b      	ldr	r3, [r3, #0]
   b4912:	691b      	ldr	r3, [r3, #16]
   b4914:	9301      	str	r3, [sp, #4]
   b4916:	bd08      	pop	{r3, pc}
   b4918:	0003022c 	.word	0x0003022c

000b491c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b491c:	b508      	push	{r3, lr}
   b491e:	4b02      	ldr	r3, [pc, #8]	; (b4928 <hal_gpio_read+0xc>)
   b4920:	681b      	ldr	r3, [r3, #0]
   b4922:	695b      	ldr	r3, [r3, #20]
   b4924:	9301      	str	r3, [sp, #4]
   b4926:	bd08      	pop	{r3, pc}
   b4928:	0003022c 	.word	0x0003022c

000b492c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b492c:	b508      	push	{r3, lr}
   b492e:	4b02      	ldr	r3, [pc, #8]	; (b4938 <hal_i2c_begin+0xc>)
   b4930:	681b      	ldr	r3, [r3, #0]
   b4932:	68db      	ldr	r3, [r3, #12]
   b4934:	9301      	str	r3, [sp, #4]
   b4936:	bd08      	pop	{r3, pc}
   b4938:	00030228 	.word	0x00030228

000b493c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b493c:	b508      	push	{r3, lr}
   b493e:	4b02      	ldr	r3, [pc, #8]	; (b4948 <hal_i2c_begin_transmission+0xc>)
   b4940:	681b      	ldr	r3, [r3, #0]
   b4942:	699b      	ldr	r3, [r3, #24]
   b4944:	9301      	str	r3, [sp, #4]
   b4946:	bd08      	pop	{r3, pc}
   b4948:	00030228 	.word	0x00030228

000b494c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b494c:	b508      	push	{r3, lr}
   b494e:	4b02      	ldr	r3, [pc, #8]	; (b4958 <hal_i2c_end_transmission+0xc>)
   b4950:	681b      	ldr	r3, [r3, #0]
   b4952:	69db      	ldr	r3, [r3, #28]
   b4954:	9301      	str	r3, [sp, #4]
   b4956:	bd08      	pop	{r3, pc}
   b4958:	00030228 	.word	0x00030228

000b495c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b495c:	b508      	push	{r3, lr}
   b495e:	4b02      	ldr	r3, [pc, #8]	; (b4968 <hal_i2c_write+0xc>)
   b4960:	681b      	ldr	r3, [r3, #0]
   b4962:	6a1b      	ldr	r3, [r3, #32]
   b4964:	9301      	str	r3, [sp, #4]
   b4966:	bd08      	pop	{r3, pc}
   b4968:	00030228 	.word	0x00030228

000b496c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b496c:	b508      	push	{r3, lr}
   b496e:	4b02      	ldr	r3, [pc, #8]	; (b4978 <hal_i2c_available+0xc>)
   b4970:	681b      	ldr	r3, [r3, #0]
   b4972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4974:	9301      	str	r3, [sp, #4]
   b4976:	bd08      	pop	{r3, pc}
   b4978:	00030228 	.word	0x00030228

000b497c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b497c:	b508      	push	{r3, lr}
   b497e:	4b02      	ldr	r3, [pc, #8]	; (b4988 <hal_i2c_read+0xc>)
   b4980:	681b      	ldr	r3, [r3, #0]
   b4982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4984:	9301      	str	r3, [sp, #4]
   b4986:	bd08      	pop	{r3, pc}
   b4988:	00030228 	.word	0x00030228

000b498c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b498c:	b508      	push	{r3, lr}
   b498e:	4b02      	ldr	r3, [pc, #8]	; (b4998 <hal_i2c_peek+0xc>)
   b4990:	681b      	ldr	r3, [r3, #0]
   b4992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4994:	9301      	str	r3, [sp, #4]
   b4996:	bd08      	pop	{r3, pc}
   b4998:	00030228 	.word	0x00030228

000b499c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b499c:	b508      	push	{r3, lr}
   b499e:	4b02      	ldr	r3, [pc, #8]	; (b49a8 <hal_i2c_flush+0xc>)
   b49a0:	681b      	ldr	r3, [r3, #0]
   b49a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b49a4:	9301      	str	r3, [sp, #4]
   b49a6:	bd08      	pop	{r3, pc}
   b49a8:	00030228 	.word	0x00030228

000b49ac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b49ac:	b508      	push	{r3, lr}
   b49ae:	4b02      	ldr	r3, [pc, #8]	; (b49b8 <hal_i2c_is_enabled+0xc>)
   b49b0:	681b      	ldr	r3, [r3, #0]
   b49b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b49b4:	9301      	str	r3, [sp, #4]
   b49b6:	bd08      	pop	{r3, pc}
   b49b8:	00030228 	.word	0x00030228

000b49bc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b49bc:	b508      	push	{r3, lr}
   b49be:	4b02      	ldr	r3, [pc, #8]	; (b49c8 <hal_i2c_init+0xc>)
   b49c0:	681b      	ldr	r3, [r3, #0]
   b49c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b49c4:	9301      	str	r3, [sp, #4]
   b49c6:	bd08      	pop	{r3, pc}
   b49c8:	00030228 	.word	0x00030228

000b49cc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b49cc:	b508      	push	{r3, lr}
   b49ce:	4b02      	ldr	r3, [pc, #8]	; (b49d8 <hal_i2c_request_ex+0xc>)
   b49d0:	681b      	ldr	r3, [r3, #0]
   b49d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b49d4:	9301      	str	r3, [sp, #4]
   b49d6:	bd08      	pop	{r3, pc}
   b49d8:	00030228 	.word	0x00030228

000b49dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b49dc:	b508      	push	{r3, lr}
   b49de:	4b02      	ldr	r3, [pc, #8]	; (b49e8 <inet_inet_ntop+0xc>)
   b49e0:	681b      	ldr	r3, [r3, #0]
   b49e2:	695b      	ldr	r3, [r3, #20]
   b49e4:	9301      	str	r3, [sp, #4]
   b49e6:	bd08      	pop	{r3, pc}
   b49e8:	00030264 	.word	0x00030264

000b49ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b49ec:	b508      	push	{r3, lr}
   b49ee:	4b02      	ldr	r3, [pc, #8]	; (b49f8 <netdb_freeaddrinfo+0xc>)
   b49f0:	681b      	ldr	r3, [r3, #0]
   b49f2:	689b      	ldr	r3, [r3, #8]
   b49f4:	9301      	str	r3, [sp, #4]
   b49f6:	bd08      	pop	{r3, pc}
   b49f8:	00030268 	.word	0x00030268

000b49fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b49fc:	b508      	push	{r3, lr}
   b49fe:	4b02      	ldr	r3, [pc, #8]	; (b4a08 <netdb_getaddrinfo+0xc>)
   b4a00:	681b      	ldr	r3, [r3, #0]
   b4a02:	68db      	ldr	r3, [r3, #12]
   b4a04:	9301      	str	r3, [sp, #4]
   b4a06:	bd08      	pop	{r3, pc}
   b4a08:	00030268 	.word	0x00030268

000b4a0c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4a0c:	b508      	push	{r3, lr}
   b4a0e:	4b02      	ldr	r3, [pc, #8]	; (b4a18 <hal_spi_init+0xc>)
   b4a10:	681b      	ldr	r3, [r3, #0]
   b4a12:	69db      	ldr	r3, [r3, #28]
   b4a14:	9301      	str	r3, [sp, #4]
   b4a16:	bd08      	pop	{r3, pc}
   b4a18:	00030230 	.word	0x00030230

000b4a1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4a1c:	b508      	push	{r3, lr}
   b4a1e:	4b02      	ldr	r3, [pc, #8]	; (b4a28 <hal_spi_is_enabled+0xc>)
   b4a20:	681b      	ldr	r3, [r3, #0]
   b4a22:	6a1b      	ldr	r3, [r3, #32]
   b4a24:	9301      	str	r3, [sp, #4]
   b4a26:	bd08      	pop	{r3, pc}
   b4a28:	00030230 	.word	0x00030230

000b4a2c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4a2c:	b508      	push	{r3, lr}
   b4a2e:	4b02      	ldr	r3, [pc, #8]	; (b4a38 <hal_usart_write+0xc>)
   b4a30:	681b      	ldr	r3, [r3, #0]
   b4a32:	68db      	ldr	r3, [r3, #12]
   b4a34:	9301      	str	r3, [sp, #4]
   b4a36:	bd08      	pop	{r3, pc}
   b4a38:	0003023c 	.word	0x0003023c

000b4a3c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4a3c:	b508      	push	{r3, lr}
   b4a3e:	4b02      	ldr	r3, [pc, #8]	; (b4a48 <hal_usart_available+0xc>)
   b4a40:	681b      	ldr	r3, [r3, #0]
   b4a42:	691b      	ldr	r3, [r3, #16]
   b4a44:	9301      	str	r3, [sp, #4]
   b4a46:	bd08      	pop	{r3, pc}
   b4a48:	0003023c 	.word	0x0003023c

000b4a4c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4a4c:	b508      	push	{r3, lr}
   b4a4e:	4b02      	ldr	r3, [pc, #8]	; (b4a58 <hal_usart_read+0xc>)
   b4a50:	681b      	ldr	r3, [r3, #0]
   b4a52:	695b      	ldr	r3, [r3, #20]
   b4a54:	9301      	str	r3, [sp, #4]
   b4a56:	bd08      	pop	{r3, pc}
   b4a58:	0003023c 	.word	0x0003023c

000b4a5c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4a5c:	b508      	push	{r3, lr}
   b4a5e:	4b02      	ldr	r3, [pc, #8]	; (b4a68 <hal_usart_peek+0xc>)
   b4a60:	681b      	ldr	r3, [r3, #0]
   b4a62:	699b      	ldr	r3, [r3, #24]
   b4a64:	9301      	str	r3, [sp, #4]
   b4a66:	bd08      	pop	{r3, pc}
   b4a68:	0003023c 	.word	0x0003023c

000b4a6c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4a6c:	b508      	push	{r3, lr}
   b4a6e:	4b02      	ldr	r3, [pc, #8]	; (b4a78 <hal_usart_flush+0xc>)
   b4a70:	681b      	ldr	r3, [r3, #0]
   b4a72:	69db      	ldr	r3, [r3, #28]
   b4a74:	9301      	str	r3, [sp, #4]
   b4a76:	bd08      	pop	{r3, pc}
   b4a78:	0003023c 	.word	0x0003023c

000b4a7c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4a7c:	b508      	push	{r3, lr}
   b4a7e:	4b02      	ldr	r3, [pc, #8]	; (b4a88 <hal_usart_is_enabled+0xc>)
   b4a80:	681b      	ldr	r3, [r3, #0]
   b4a82:	6a1b      	ldr	r3, [r3, #32]
   b4a84:	9301      	str	r3, [sp, #4]
   b4a86:	bd08      	pop	{r3, pc}
   b4a88:	0003023c 	.word	0x0003023c

000b4a8c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4a8c:	b508      	push	{r3, lr}
   b4a8e:	4b02      	ldr	r3, [pc, #8]	; (b4a98 <hal_usart_available_data_for_write+0xc>)
   b4a90:	681b      	ldr	r3, [r3, #0]
   b4a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a94:	9301      	str	r3, [sp, #4]
   b4a96:	bd08      	pop	{r3, pc}
   b4a98:	0003023c 	.word	0x0003023c

000b4a9c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4a9c:	b508      	push	{r3, lr}
   b4a9e:	4b02      	ldr	r3, [pc, #8]	; (b4aa8 <hal_usart_init_ex+0xc>)
   b4aa0:	681b      	ldr	r3, [r3, #0]
   b4aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4aa4:	9301      	str	r3, [sp, #4]
   b4aa6:	bd08      	pop	{r3, pc}
   b4aa8:	0003023c 	.word	0x0003023c

000b4aac <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4aac:	b508      	push	{r3, lr}
   b4aae:	4b02      	ldr	r3, [pc, #8]	; (b4ab8 <HAL_USB_USART_Init+0xc>)
   b4ab0:	681b      	ldr	r3, [r3, #0]
   b4ab2:	681b      	ldr	r3, [r3, #0]
   b4ab4:	9301      	str	r3, [sp, #4]
   b4ab6:	bd08      	pop	{r3, pc}
   b4ab8:	0003024c 	.word	0x0003024c

000b4abc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4abc:	b508      	push	{r3, lr}
   b4abe:	4b02      	ldr	r3, [pc, #8]	; (b4ac8 <HAL_USB_USART_Begin+0xc>)
   b4ac0:	681b      	ldr	r3, [r3, #0]
   b4ac2:	685b      	ldr	r3, [r3, #4]
   b4ac4:	9301      	str	r3, [sp, #4]
   b4ac6:	bd08      	pop	{r3, pc}
   b4ac8:	0003024c 	.word	0x0003024c

000b4acc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4acc:	b508      	push	{r3, lr}
   b4ace:	4b02      	ldr	r3, [pc, #8]	; (b4ad8 <HAL_USB_USART_Available_Data+0xc>)
   b4ad0:	681b      	ldr	r3, [r3, #0]
   b4ad2:	691b      	ldr	r3, [r3, #16]
   b4ad4:	9301      	str	r3, [sp, #4]
   b4ad6:	bd08      	pop	{r3, pc}
   b4ad8:	0003024c 	.word	0x0003024c

000b4adc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4adc:	b508      	push	{r3, lr}
   b4ade:	4b02      	ldr	r3, [pc, #8]	; (b4ae8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4ae0:	681b      	ldr	r3, [r3, #0]
   b4ae2:	695b      	ldr	r3, [r3, #20]
   b4ae4:	9301      	str	r3, [sp, #4]
   b4ae6:	bd08      	pop	{r3, pc}
   b4ae8:	0003024c 	.word	0x0003024c

000b4aec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4aec:	b508      	push	{r3, lr}
   b4aee:	4b02      	ldr	r3, [pc, #8]	; (b4af8 <HAL_USB_USART_Receive_Data+0xc>)
   b4af0:	681b      	ldr	r3, [r3, #0]
   b4af2:	699b      	ldr	r3, [r3, #24]
   b4af4:	9301      	str	r3, [sp, #4]
   b4af6:	bd08      	pop	{r3, pc}
   b4af8:	0003024c 	.word	0x0003024c

000b4afc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4afc:	b508      	push	{r3, lr}
   b4afe:	4b02      	ldr	r3, [pc, #8]	; (b4b08 <HAL_USB_USART_Send_Data+0xc>)
   b4b00:	681b      	ldr	r3, [r3, #0]
   b4b02:	69db      	ldr	r3, [r3, #28]
   b4b04:	9301      	str	r3, [sp, #4]
   b4b06:	bd08      	pop	{r3, pc}
   b4b08:	0003024c 	.word	0x0003024c

000b4b0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4b0c:	b508      	push	{r3, lr}
   b4b0e:	4b02      	ldr	r3, [pc, #8]	; (b4b18 <HAL_USB_USART_Flush_Data+0xc>)
   b4b10:	681b      	ldr	r3, [r3, #0]
   b4b12:	6a1b      	ldr	r3, [r3, #32]
   b4b14:	9301      	str	r3, [sp, #4]
   b4b16:	bd08      	pop	{r3, pc}
   b4b18:	0003024c 	.word	0x0003024c

000b4b1c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4b1c:	b508      	push	{r3, lr}
   b4b1e:	4b02      	ldr	r3, [pc, #8]	; (b4b28 <set_system_mode+0xc>)
   b4b20:	681b      	ldr	r3, [r3, #0]
   b4b22:	685b      	ldr	r3, [r3, #4]
   b4b24:	9301      	str	r3, [sp, #4]
   b4b26:	bd08      	pop	{r3, pc}
   b4b28:	00030220 	.word	0x00030220

000b4b2c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4b2c:	b508      	push	{r3, lr}
   b4b2e:	4b02      	ldr	r3, [pc, #8]	; (b4b38 <system_delay_ms+0xc>)
   b4b30:	681b      	ldr	r3, [r3, #0]
   b4b32:	695b      	ldr	r3, [r3, #20]
   b4b34:	9301      	str	r3, [sp, #4]
   b4b36:	bd08      	pop	{r3, pc}
   b4b38:	00030220 	.word	0x00030220

000b4b3c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4b3c:	b508      	push	{r3, lr}
   b4b3e:	4b02      	ldr	r3, [pc, #8]	; (b4b48 <application_thread_current+0xc>)
   b4b40:	681b      	ldr	r3, [r3, #0]
   b4b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4b44:	9301      	str	r3, [sp, #4]
   b4b46:	bd08      	pop	{r3, pc}
   b4b48:	00030220 	.word	0x00030220

000b4b4c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4b4c:	b508      	push	{r3, lr}
   b4b4e:	4b02      	ldr	r3, [pc, #8]	; (b4b58 <application_thread_invoke+0xc>)
   b4b50:	681b      	ldr	r3, [r3, #0]
   b4b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4b54:	9301      	str	r3, [sp, #4]
   b4b56:	bd08      	pop	{r3, pc}
   b4b58:	00030220 	.word	0x00030220

000b4b5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4b5c:	b508      	push	{r3, lr}
   b4b5e:	4b03      	ldr	r3, [pc, #12]	; (b4b6c <system_ctrl_set_app_request_handler+0x10>)
   b4b60:	681b      	ldr	r3, [r3, #0]
   b4b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4b66:	9301      	str	r3, [sp, #4]
   b4b68:	bd08      	pop	{r3, pc}
   b4b6a:	0000      	.short	0x0000
   b4b6c:	00030220 	.word	0x00030220

000b4b70 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b03      	ldr	r3, [pc, #12]	; (b4b80 <system_ctrl_set_result+0x10>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4b7a:	9301      	str	r3, [sp, #4]
   b4b7c:	bd08      	pop	{r3, pc}
   b4b7e:	0000      	.short	0x0000
   b4b80:	00030220 	.word	0x00030220

000b4b84 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4b84:	b508      	push	{r3, lr}
   b4b86:	4b02      	ldr	r3, [pc, #8]	; (b4b90 <spark_cloud_flag_connected+0xc>)
   b4b88:	681b      	ldr	r3, [r3, #0]
   b4b8a:	695b      	ldr	r3, [r3, #20]
   b4b8c:	9301      	str	r3, [sp, #4]
   b4b8e:	bd08      	pop	{r3, pc}
   b4b90:	00030244 	.word	0x00030244

000b4b94 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4b94:	b508      	push	{r3, lr}
   b4b96:	4b02      	ldr	r3, [pc, #8]	; (b4ba0 <spark_send_event+0xc>)
   b4b98:	681b      	ldr	r3, [r3, #0]
   b4b9a:	6a1b      	ldr	r3, [r3, #32]
   b4b9c:	9301      	str	r3, [sp, #4]
   b4b9e:	bd08      	pop	{r3, pc}
   b4ba0:	00030244 	.word	0x00030244

000b4ba4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4ba4:	b508      	push	{r3, lr}
   b4ba6:	4b02      	ldr	r3, [pc, #8]	; (b4bb0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4ba8:	681b      	ldr	r3, [r3, #0]
   b4baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	bd08      	pop	{r3, pc}
   b4bb0:	00030244 	.word	0x00030244

000b4bb4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bb4:	b508      	push	{r3, lr}
   b4bb6:	4b02      	ldr	r3, [pc, #8]	; (b4bc0 <network_connect+0xc>)
   b4bb8:	681b      	ldr	r3, [r3, #0]
   b4bba:	685b      	ldr	r3, [r3, #4]
   b4bbc:	9301      	str	r3, [sp, #4]
   b4bbe:	bd08      	pop	{r3, pc}
   b4bc0:	00030240 	.word	0x00030240

000b4bc4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4bc4:	b508      	push	{r3, lr}
   b4bc6:	4b02      	ldr	r3, [pc, #8]	; (b4bd0 <network_connecting+0xc>)
   b4bc8:	681b      	ldr	r3, [r3, #0]
   b4bca:	689b      	ldr	r3, [r3, #8]
   b4bcc:	9301      	str	r3, [sp, #4]
   b4bce:	bd08      	pop	{r3, pc}
   b4bd0:	00030240 	.word	0x00030240

000b4bd4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4bd4:	b508      	push	{r3, lr}
   b4bd6:	4b02      	ldr	r3, [pc, #8]	; (b4be0 <network_disconnect+0xc>)
   b4bd8:	681b      	ldr	r3, [r3, #0]
   b4bda:	68db      	ldr	r3, [r3, #12]
   b4bdc:	9301      	str	r3, [sp, #4]
   b4bde:	bd08      	pop	{r3, pc}
   b4be0:	00030240 	.word	0x00030240

000b4be4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4be4:	b508      	push	{r3, lr}
   b4be6:	4b02      	ldr	r3, [pc, #8]	; (b4bf0 <network_ready+0xc>)
   b4be8:	681b      	ldr	r3, [r3, #0]
   b4bea:	691b      	ldr	r3, [r3, #16]
   b4bec:	9301      	str	r3, [sp, #4]
   b4bee:	bd08      	pop	{r3, pc}
   b4bf0:	00030240 	.word	0x00030240

000b4bf4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4bf4:	b508      	push	{r3, lr}
   b4bf6:	4b02      	ldr	r3, [pc, #8]	; (b4c00 <network_on+0xc>)
   b4bf8:	681b      	ldr	r3, [r3, #0]
   b4bfa:	695b      	ldr	r3, [r3, #20]
   b4bfc:	9301      	str	r3, [sp, #4]
   b4bfe:	bd08      	pop	{r3, pc}
   b4c00:	00030240 	.word	0x00030240

000b4c04 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c04:	b508      	push	{r3, lr}
   b4c06:	4b02      	ldr	r3, [pc, #8]	; (b4c10 <network_off+0xc>)
   b4c08:	681b      	ldr	r3, [r3, #0]
   b4c0a:	699b      	ldr	r3, [r3, #24]
   b4c0c:	9301      	str	r3, [sp, #4]
   b4c0e:	bd08      	pop	{r3, pc}
   b4c10:	00030240 	.word	0x00030240

000b4c14 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4c14:	b508      	push	{r3, lr}
   b4c16:	4b02      	ldr	r3, [pc, #8]	; (b4c20 <network_listen+0xc>)
   b4c18:	681b      	ldr	r3, [r3, #0]
   b4c1a:	69db      	ldr	r3, [r3, #28]
   b4c1c:	9301      	str	r3, [sp, #4]
   b4c1e:	bd08      	pop	{r3, pc}
   b4c20:	00030240 	.word	0x00030240

000b4c24 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b02      	ldr	r3, [pc, #8]	; (b4c30 <network_listening+0xc>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	6a1b      	ldr	r3, [r3, #32]
   b4c2c:	9301      	str	r3, [sp, #4]
   b4c2e:	bd08      	pop	{r3, pc}
   b4c30:	00030240 	.word	0x00030240

000b4c34 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4c34:	b508      	push	{r3, lr}
   b4c36:	4b02      	ldr	r3, [pc, #8]	; (b4c40 <network_set_listen_timeout+0xc>)
   b4c38:	681b      	ldr	r3, [r3, #0]
   b4c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4c3c:	9301      	str	r3, [sp, #4]
   b4c3e:	bd08      	pop	{r3, pc}
   b4c40:	00030240 	.word	0x00030240

000b4c44 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4c44:	b508      	push	{r3, lr}
   b4c46:	4b02      	ldr	r3, [pc, #8]	; (b4c50 <network_get_listen_timeout+0xc>)
   b4c48:	681b      	ldr	r3, [r3, #0]
   b4c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4c4c:	9301      	str	r3, [sp, #4]
   b4c4e:	bd08      	pop	{r3, pc}
   b4c50:	00030240 	.word	0x00030240

000b4c54 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4c54:	b508      	push	{r3, lr}
   b4c56:	4b02      	ldr	r3, [pc, #8]	; (b4c60 <network_is_on+0xc>)
   b4c58:	681b      	ldr	r3, [r3, #0]
   b4c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4c5c:	9301      	str	r3, [sp, #4]
   b4c5e:	bd08      	pop	{r3, pc}
   b4c60:	00030240 	.word	0x00030240

000b4c64 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4c64:	b508      	push	{r3, lr}
   b4c66:	4b02      	ldr	r3, [pc, #8]	; (b4c70 <network_is_off+0xc>)
   b4c68:	681b      	ldr	r3, [r3, #0]
   b4c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c6c:	9301      	str	r3, [sp, #4]
   b4c6e:	bd08      	pop	{r3, pc}
   b4c70:	00030240 	.word	0x00030240

000b4c74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4c74:	b508      	push	{r3, lr}
   b4c76:	4b02      	ldr	r3, [pc, #8]	; (b4c80 <malloc+0xc>)
   b4c78:	681b      	ldr	r3, [r3, #0]
   b4c7a:	681b      	ldr	r3, [r3, #0]
   b4c7c:	9301      	str	r3, [sp, #4]
   b4c7e:	bd08      	pop	{r3, pc}
   b4c80:	0003021c 	.word	0x0003021c

000b4c84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4c84:	b508      	push	{r3, lr}
   b4c86:	4b02      	ldr	r3, [pc, #8]	; (b4c90 <free+0xc>)
   b4c88:	681b      	ldr	r3, [r3, #0]
   b4c8a:	685b      	ldr	r3, [r3, #4]
   b4c8c:	9301      	str	r3, [sp, #4]
   b4c8e:	bd08      	pop	{r3, pc}
   b4c90:	0003021c 	.word	0x0003021c

000b4c94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4c94:	b508      	push	{r3, lr}
   b4c96:	4b02      	ldr	r3, [pc, #8]	; (b4ca0 <realloc+0xc>)
   b4c98:	681b      	ldr	r3, [r3, #0]
   b4c9a:	689b      	ldr	r3, [r3, #8]
   b4c9c:	9301      	str	r3, [sp, #4]
   b4c9e:	bd08      	pop	{r3, pc}
   b4ca0:	0003021c 	.word	0x0003021c

000b4ca4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4ca4:	b508      	push	{r3, lr}
   b4ca6:	4b02      	ldr	r3, [pc, #8]	; (b4cb0 <abort+0xc>)
   b4ca8:	681b      	ldr	r3, [r3, #0]
   b4caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4cac:	9301      	str	r3, [sp, #4]
   b4cae:	bd08      	pop	{r3, pc}
   b4cb0:	0003021c 	.word	0x0003021c

000b4cb4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4cb4:	b508      	push	{r3, lr}
   b4cb6:	4b02      	ldr	r3, [pc, #8]	; (b4cc0 <_malloc_r+0xc>)
   b4cb8:	681b      	ldr	r3, [r3, #0]
   b4cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cbc:	9301      	str	r3, [sp, #4]
   b4cbe:	bd08      	pop	{r3, pc}
   b4cc0:	0003021c 	.word	0x0003021c

000b4cc4 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4cc4:	b508      	push	{r3, lr}
   b4cc6:	4b02      	ldr	r3, [pc, #8]	; (b4cd0 <__assert_func+0xc>)
   b4cc8:	681b      	ldr	r3, [r3, #0]
   b4cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ccc:	9301      	str	r3, [sp, #4]
   b4cce:	bd08      	pop	{r3, pc}
   b4cd0:	0003021c 	.word	0x0003021c

000b4cd4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4cd4:	b508      	push	{r3, lr}
   b4cd6:	4b02      	ldr	r3, [pc, #8]	; (b4ce0 <newlib_impure_ptr_callback+0xc>)
   b4cd8:	681b      	ldr	r3, [r3, #0]
   b4cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4cdc:	9301      	str	r3, [sp, #4]
   b4cde:	bd08      	pop	{r3, pc}
   b4ce0:	0003021c 	.word	0x0003021c

000b4ce4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4ce4:	2100      	movs	r1, #0
   b4ce6:	f7ff bf21 	b.w	b4b2c <system_delay_ms>

000b4cea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b4cea:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4cec:	6883      	ldr	r3, [r0, #8]
   b4cee:	4604      	mov	r4, r0
   b4cf0:	b90b      	cbnz	r3, b4cf6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b4cf2:	f001 f933 	bl	b5f5c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4cf6:	68c3      	ldr	r3, [r0, #12]
   b4cf8:	4798      	blx	r3
      if (_M_manager)
   b4cfa:	68a3      	ldr	r3, [r4, #8]
   b4cfc:	b11b      	cbz	r3, b4d06 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4cfe:	2203      	movs	r2, #3
   b4d00:	4621      	mov	r1, r4
   b4d02:	4620      	mov	r0, r4
   b4d04:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b4d06:	4620      	mov	r0, r4
   b4d08:	2110      	movs	r1, #16
}
   b4d0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b4d0e:	f7ff b9d6 	b.w	b40be <_ZdlPvj>

000b4d12 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4d12:	b510      	push	{r4, lr}
      if (_M_manager)
   b4d14:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4d16:	4604      	mov	r4, r0
      if (_M_manager)
   b4d18:	b113      	cbz	r3, b4d20 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4d1a:	2203      	movs	r2, #3
   b4d1c:	4601      	mov	r1, r0
   b4d1e:	4798      	blx	r3
    }
   b4d20:	4620      	mov	r0, r4
   b4d22:	bd10      	pop	{r4, pc}

000b4d24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b4d24:	b513      	push	{r0, r1, r4, lr}
   b4d26:	460b      	mov	r3, r1
   b4d28:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4d2a:	e9d0 0100 	ldrd	r0, r1, [r0]
   b4d2e:	466c      	mov	r4, sp
   b4d30:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4d34:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4d38:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4d40:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b4d44:	b002      	add	sp, #8
   b4d46:	bd10      	pop	{r4, pc}

000b4d48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d48:	4802      	ldr	r0, [pc, #8]	; (b4d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d4a:	2300      	movs	r3, #0
   b4d4c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d4e:	f7ff bdb5 	b.w	b48bc <os_mutex_recursive_create>
   b4d52:	bf00      	nop
   b4d54:	2003e69c 	.word	0x2003e69c

000b4d58 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4d58:	2200      	movs	r2, #0
   b4d5a:	6840      	ldr	r0, [r0, #4]
   b4d5c:	4611      	mov	r1, r2
   b4d5e:	f7ff bf41 	b.w	b4be4 <network_ready>

000b4d62 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b4d62:	2200      	movs	r2, #0
   b4d64:	6840      	ldr	r0, [r0, #4]
   b4d66:	4611      	mov	r1, r2
   b4d68:	f7ff bf5c 	b.w	b4c24 <network_listening>

000b4d6c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d6c:	2200      	movs	r2, #0
   b4d6e:	6840      	ldr	r0, [r0, #4]
   b4d70:	4611      	mov	r1, r2
   b4d72:	f7ff bf67 	b.w	b4c44 <network_get_listen_timeout>

000b4d76 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d76:	6840      	ldr	r0, [r0, #4]
   b4d78:	2200      	movs	r2, #0
   b4d7a:	f7ff bf5b 	b.w	b4c34 <network_set_listen_timeout>

000b4d7e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d7e:	6840      	ldr	r0, [r0, #4]
   b4d80:	2200      	movs	r2, #0
   b4d82:	f081 0101 	eor.w	r1, r1, #1
   b4d86:	f7ff bf45 	b.w	b4c14 <network_listen>

000b4d8a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d8a:	2300      	movs	r3, #0
   b4d8c:	6840      	ldr	r0, [r0, #4]
   b4d8e:	461a      	mov	r2, r3
   b4d90:	4619      	mov	r1, r3
   b4d92:	f7ff bf37 	b.w	b4c04 <network_off>

000b4d96 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d96:	2300      	movs	r3, #0
   b4d98:	6840      	ldr	r0, [r0, #4]
   b4d9a:	461a      	mov	r2, r3
   b4d9c:	4619      	mov	r1, r3
   b4d9e:	f7ff bf29 	b.w	b4bf4 <network_on>

000b4da2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4da2:	2200      	movs	r2, #0
   b4da4:	6840      	ldr	r0, [r0, #4]
   b4da6:	4611      	mov	r1, r2
   b4da8:	f7ff bf0c 	b.w	b4bc4 <network_connecting>

000b4dac <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	2200      	movs	r2, #0
   b4db0:	2102      	movs	r1, #2
   b4db2:	f7ff bf0f 	b.w	b4bd4 <network_disconnect>

000b4db6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4db6:	2300      	movs	r3, #0
   b4db8:	6840      	ldr	r0, [r0, #4]
   b4dba:	461a      	mov	r2, r3
   b4dbc:	f7ff befa 	b.w	b4bb4 <network_connect>

000b4dc0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4dc0:	4b08      	ldr	r3, [pc, #32]	; (b4de4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b4dc2:	b510      	push	{r4, lr}
   b4dc4:	2428      	movs	r4, #40	; 0x28
   b4dc6:	4622      	mov	r2, r4
   b4dc8:	4618      	mov	r0, r3
   b4dca:	2100      	movs	r1, #0
   b4dcc:	f001 f8dd 	bl	b5f8a <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4dd0:	4b05      	ldr	r3, [pc, #20]	; (b4de8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b4dd2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b4dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b4dd8:	6042      	str	r2, [r0, #4]
   b4dda:	2204      	movs	r2, #4
   b4ddc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b4dde:	4a03      	ldr	r2, [pc, #12]	; (b4dec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b4de0:	601a      	str	r2, [r3, #0]
   b4de2:	bd10      	pop	{r4, pc}
   b4de4:	2003e6a8 	.word	0x2003e6a8
   b4de8:	2003e6a0 	.word	0x2003e6a0
   b4dec:	000b6218 	.word	0x000b6218

000b4df0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4df0:	4770      	bx	lr

000b4df2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b4df2:	2000      	movs	r0, #0
   b4df4:	4770      	bx	lr

000b4df6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b4df6:	b510      	push	{r4, lr}
   b4df8:	2110      	movs	r1, #16
   b4dfa:	4604      	mov	r4, r0
   b4dfc:	f7ff f95f 	bl	b40be <_ZdlPvj>
   b4e00:	4620      	mov	r0, r4
   b4e02:	bd10      	pop	{r4, pc}

000b4e04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b4e04:	b508      	push	{r3, lr}
      { delete this; }
   b4e06:	f7ff fff6 	bl	b4df6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b4e0a:	bd08      	pop	{r3, pc}

000b4e0c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b4e0c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b4e0e:	2200      	movs	r2, #0
   b4e10:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b4e14:	6002      	str	r2, [r0, #0]
   b4e16:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4e18:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e1a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b4e1c:	680c      	ldr	r4, [r1, #0]
   b4e1e:	8085      	strh	r5, [r0, #4]
   b4e20:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e22:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b4e24:	bd30      	pop	{r4, r5, pc}

000b4e26 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b4e26:	b510      	push	{r4, lr}
   b4e28:	4604      	mov	r4, r0
    free((void*)msg_);
   b4e2a:	6800      	ldr	r0, [r0, #0]
   b4e2c:	f7ff ff2a 	bl	b4c84 <free>
}
   b4e30:	4620      	mov	r0, r4
   b4e32:	bd10      	pop	{r4, pc}

000b4e34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4e34:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b4e36:	68c4      	ldr	r4, [r0, #12]
   b4e38:	b1f4      	cbz	r4, b4e78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4e3a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4e3c:	2b02      	cmp	r3, #2
   b4e3e:	d103      	bne.n	b4e48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4e40:	f104 000c 	add.w	r0, r4, #12
   b4e44:	f7ff ffef 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4e48:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4e4a:	b135      	cbz	r5, b4e5a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4e4c:	4628      	mov	r0, r5
   b4e4e:	f7ff ff60 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
   b4e52:	2110      	movs	r1, #16
   b4e54:	4628      	mov	r0, r5
   b4e56:	f7ff f932 	bl	b40be <_ZdlPvj>
   b4e5a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4e5c:	b135      	cbz	r5, b4e6c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4e5e:	4628      	mov	r0, r5
   b4e60:	f7ff ff57 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
   b4e64:	2110      	movs	r1, #16
   b4e66:	4628      	mov	r0, r5
   b4e68:	f7ff f929 	bl	b40be <_ZdlPvj>
   b4e6c:	4620      	mov	r0, r4
   b4e6e:	2114      	movs	r1, #20
   b4e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4e74:	f7ff b923 	b.w	b40be <_ZdlPvj>
   b4e78:	bd38      	pop	{r3, r4, r5, pc}

000b4e7a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e7a:	680b      	ldr	r3, [r1, #0]
   b4e7c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4e7e:	684b      	ldr	r3, [r1, #4]
   b4e80:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4e82:	b113      	cbz	r3, b4e8a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b4e84:	685a      	ldr	r2, [r3, #4]
   b4e86:	3201      	adds	r2, #1
   b4e88:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e8a:	4770      	bx	lr

000b4e8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4e8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4e8e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4e90:	4668      	mov	r0, sp
   b4e92:	460d      	mov	r5, r1
   b4e94:	f7ff fff1 	bl	b4e7a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e98:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4e9a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4e9c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4e9e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4ea0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4ea2:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b4ea4:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b4ea6:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4ea8:	f7ff f9aa 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4eac:	b135      	cbz	r5, b4ebc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4eae:	1d28      	adds	r0, r5, #4
   b4eb0:	f7ff f9a6 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4eb4:	2108      	movs	r1, #8
   b4eb6:	4628      	mov	r0, r5
   b4eb8:	f7ff f901 	bl	b40be <_ZdlPvj>
        return p;
    }
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	b003      	add	sp, #12
   b4ec0:	bd30      	pop	{r4, r5, pc}

000b4ec2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b4ec2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4ec4:	b510      	push	{r4, lr}
      if (_M_empty())
   b4ec6:	b90a      	cbnz	r2, b4ecc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4ec8:	f001 f848 	bl	b5f5c <_ZSt25__throw_bad_function_callv>
    }
   b4ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ed0:	68c3      	ldr	r3, [r0, #12]
   b4ed2:	4718      	bx	r3

000b4ed4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ed4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4ed6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4ed8:	f100 0110 	add.w	r1, r0, #16
   b4edc:	f7ff fff1 	bl	b4ec2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b4ee0:	bd08      	pop	{r3, pc}

000b4ee2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b4ee2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b4ee4:	b510      	push	{r4, lr}
      if (_M_empty())
   b4ee6:	b90a      	cbnz	r2, b4eec <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b4ee8:	f001 f838 	bl	b5f5c <_ZSt25__throw_bad_function_callv>
    }
   b4eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4ef0:	68c3      	ldr	r3, [r0, #12]
   b4ef2:	4718      	bx	r3

000b4ef4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ef4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b4ef6:	6800      	ldr	r0, [r0, #0]
   b4ef8:	f100 0110 	add.w	r1, r0, #16
   b4efc:	f7ff fff1 	bl	b4ee2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b4f00:	bd08      	pop	{r3, pc}
	...

000b4f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b4f04:	b538      	push	{r3, r4, r5, lr}
   b4f06:	2300      	movs	r3, #0
   b4f08:	4604      	mov	r4, r0
   b4f0a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4f0c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b4f0e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4f10:	f7ff f8d1 	bl	b40b6 <_Znwj>
   b4f14:	b128      	cbz	r0, b4f22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b4f16:	2301      	movs	r3, #1
   b4f18:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b4f1c:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b4f1e:	6003      	str	r3, [r0, #0]
   b4f20:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b4f22:	6020      	str	r0, [r4, #0]
	}
   b4f24:	4620      	mov	r0, r4
   b4f26:	bd38      	pop	{r3, r4, r5, pc}
   b4f28:	000b6254 	.word	0x000b6254

000b4f2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b4f2c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4f2e:	2300      	movs	r3, #0
   b4f30:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4f32:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4f34:	4604      	mov	r4, r0
   b4f36:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4f38:	b12b      	cbz	r3, b4f46 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4f3a:	2202      	movs	r2, #2
   b4f3c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4f3e:	68eb      	ldr	r3, [r5, #12]
   b4f40:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4f42:	68ab      	ldr	r3, [r5, #8]
   b4f44:	60a3      	str	r3, [r4, #8]
    }
   b4f46:	4620      	mov	r0, r4
   b4f48:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f4e:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4f50:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b4f52:	4668      	mov	r0, sp
   b4f54:	f7ff ff5a 	bl	b4e0c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4f58:	f04f 0302 	mov.w	r3, #2
   b4f5c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4f60:	2a00      	cmp	r2, #0
   b4f62:	d103      	bne.n	b4f6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b4f64:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4f68:	2900      	cmp	r1, #0
   b4f6a:	d1f7      	bne.n	b4f5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4f6c:	d125      	bne.n	b4fba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4f6e:	f104 050c 	add.w	r5, r4, #12
   b4f72:	4669      	mov	r1, sp
   b4f74:	4628      	mov	r0, r5
   b4f76:	f7ff ff49 	bl	b4e0c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4f7a:	f3bf 8f5b 	dmb	ish
   b4f7e:	2301      	movs	r3, #1
   b4f80:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4f82:	2000      	movs	r0, #0
   b4f84:	f104 0308 	add.w	r3, r4, #8
   b4f88:	f3bf 8f5b 	dmb	ish
   b4f8c:	e853 6f00 	ldrex	r6, [r3]
   b4f90:	e843 0200 	strex	r2, r0, [r3]
   b4f94:	2a00      	cmp	r2, #0
   b4f96:	d1f9      	bne.n	b4f8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4f98:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4f9c:	b16e      	cbz	r6, b4fba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4f9e:	f7ff fdcd 	bl	b4b3c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4fa2:	b178      	cbz	r0, b4fc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4fa4:	4629      	mov	r1, r5
   b4fa6:	4630      	mov	r0, r6
   b4fa8:	f7ff ff8b 	bl	b4ec2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4fac:	4630      	mov	r0, r6
   b4fae:	f7ff feb0 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4fb2:	2110      	movs	r1, #16
   b4fb4:	4630      	mov	r0, r6
   b4fb6:	f7ff f882 	bl	b40be <_ZdlPvj>
        p_->setError(std::move(error));
   b4fba:	4668      	mov	r0, sp
   b4fbc:	f7ff ff33 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
    }
   b4fc0:	b009      	add	sp, #36	; 0x24
   b4fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4fc4:	4631      	mov	r1, r6
   b4fc6:	a802      	add	r0, sp, #8
   b4fc8:	f7ff ffb0 	bl	b4f2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4fcc:	68e0      	ldr	r0, [r4, #12]
   b4fce:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4fd2:	b108      	cbz	r0, b4fd8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b4fd4:	f001 f818 	bl	b6008 <strdup>
        type_(type) {
   b4fd8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4fda:	2010      	movs	r0, #16
   b4fdc:	f8ad 501c 	strh.w	r5, [sp, #28]
   b4fe0:	f7ff f869 	bl	b40b6 <_Znwj>
   b4fe4:	4605      	mov	r5, r0
   b4fe6:	b1e8      	cbz	r0, b5024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b4fe8:	2700      	movs	r7, #0
   b4fea:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4fec:	2018      	movs	r0, #24
   b4fee:	f7ff f862 	bl	b40b6 <_Znwj>
   b4ff2:	4604      	mov	r4, r0
   b4ff4:	b188      	cbz	r0, b501a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b4ff6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b4ff8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4ffa:	a802      	add	r0, sp, #8
   b4ffc:	f7ff fe92 	bl	b4d24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5000:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5002:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5004:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5006:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5008:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b500a:	a906      	add	r1, sp, #24
   b500c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b500e:	60e3      	str	r3, [r4, #12]
   b5010:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b5014:	9205      	str	r2, [sp, #20]
   b5016:	f7ff fef9 	bl	b4e0c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b501a:	4b08      	ldr	r3, [pc, #32]	; (b503c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b501c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b501e:	4b08      	ldr	r3, [pc, #32]	; (b5040 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5020:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5022:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b5024:	a806      	add	r0, sp, #24
   b5026:	f7ff fefe 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b502a:	a802      	add	r0, sp, #8
   b502c:	f7ff fe71 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5030:	2200      	movs	r2, #0
   b5032:	4629      	mov	r1, r5
   b5034:	4803      	ldr	r0, [pc, #12]	; (b5044 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b5036:	f7ff fd89 	bl	b4b4c <application_thread_invoke>
   b503a:	e7b7      	b.n	b4fac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b503c:	000b4ed5 	.word	0x000b4ed5
   b5040:	000b5159 	.word	0x000b5159
   b5044:	000b4ceb 	.word	0x000b4ceb

000b5048 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b5048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b504c:	b08b      	sub	sp, #44	; 0x2c
   b504e:	4605      	mov	r5, r0
   b5050:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5054:	460f      	mov	r7, r1
   b5056:	4690      	mov	r8, r2
   b5058:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b505a:	f7ff fd93 	bl	b4b84 <spark_cloud_flag_connected>
   b505e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5060:	4683      	mov	fp, r0
   b5062:	bb38      	cbnz	r0, b50b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5064:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5068:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b506a:	a905      	add	r1, sp, #20
   b506c:	4630      	mov	r0, r6
   b506e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5072:	f7ff fecb 	bl	b4e0c <_ZN8particle5ErrorC1EOS0_>
   b5076:	2014      	movs	r0, #20
   b5078:	f7ff f81d 	bl	b40b6 <_Znwj>
   b507c:	4604      	mov	r4, r0
   b507e:	b148      	cbz	r0, b5094 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5080:	2302      	movs	r3, #2
   b5082:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5084:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5086:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b508a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b508c:	4631      	mov	r1, r6
   b508e:	300c      	adds	r0, #12
   b5090:	f7ff febc 	bl	b4e0c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5094:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5096:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5098:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b509c:	f7ff ff32 	bl	b4f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b50a0:	4630      	mov	r0, r6
   b50a2:	f7ff fec0 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b50a6:	a805      	add	r0, sp, #20
   b50a8:	f7ff febd 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b50ac:	4628      	mov	r0, r5
   b50ae:	b00b      	add	sp, #44	; 0x2c
   b50b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b50b4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b50b6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b50b8:	2014      	movs	r0, #20
   b50ba:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b50be:	9307      	str	r3, [sp, #28]
   b50c0:	f7fe fff9 	bl	b40b6 <_Znwj>
   b50c4:	4601      	mov	r1, r0
   b50c6:	b118      	cbz	r0, b50d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b50c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b50cc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b50ce:	7044      	strb	r4, [r0, #1]
   b50d0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b50d2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b50d4:	f7ff ff16 	bl	b4f04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b50d8:	4b1e      	ldr	r3, [pc, #120]	; (b5154 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b50da:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b50dc:	2008      	movs	r0, #8
   b50de:	f7fe ffea 	bl	b40b6 <_Znwj>
   b50e2:	4604      	mov	r4, r0
   b50e4:	b110      	cbz	r0, b50ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b50e6:	a903      	add	r1, sp, #12
   b50e8:	f7ff fec7 	bl	b4e7a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b50ec:	9600      	str	r6, [sp, #0]
   b50ee:	fa5f f38a 	uxtb.w	r3, sl
   b50f2:	464a      	mov	r2, r9
   b50f4:	4641      	mov	r1, r8
   b50f6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b50f8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b50fa:	f7ff fd4b 	bl	b4b94 <spark_send_event>
   b50fe:	b9b8      	cbnz	r0, b5130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b5100:	9b03      	ldr	r3, [sp, #12]
   b5102:	785b      	ldrb	r3, [r3, #1]
   b5104:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b5108:	b993      	cbnz	r3, b5130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b510a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b510e:	a905      	add	r1, sp, #20
   b5110:	a803      	add	r0, sp, #12
   b5112:	9205      	str	r2, [sp, #20]
   b5114:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5118:	f7ff ff18 	bl	b4f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b511c:	a805      	add	r0, sp, #20
   b511e:	f7ff fe82 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b5122:	a805      	add	r0, sp, #20
   b5124:	9909      	ldr	r1, [sp, #36]	; 0x24
   b5126:	f7ff feb1 	bl	b4e8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b512a:	a806      	add	r0, sp, #24
   b512c:	f7ff f868 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5130:	a903      	add	r1, sp, #12
   b5132:	a805      	add	r0, sp, #20
   b5134:	f7ff fea1 	bl	b4e7a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5138:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b513a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b513c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b513e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b5140:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5142:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b5144:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b5146:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b5148:	f7ff f85a 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b514c:	a804      	add	r0, sp, #16
   b514e:	f7ff f857 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5152:	e7ab      	b.n	b50ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5154:	000b51d5 	.word	0x000b51d5

000b5158 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5158:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b515a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b515c:	4605      	mov	r5, r0
	switch (__op)
   b515e:	d103      	bne.n	b5168 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5160:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5162:	6003      	str	r3, [r0, #0]
      }
   b5164:	2000      	movs	r0, #0
   b5166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5168:	2a02      	cmp	r2, #2
   b516a:	d010      	beq.n	b518e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b516c:	2a03      	cmp	r2, #3
   b516e:	d1f9      	bne.n	b5164 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5170:	6804      	ldr	r4, [r0, #0]
   b5172:	2c00      	cmp	r4, #0
   b5174:	d0f6      	beq.n	b5164 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5176:	f104 0010 	add.w	r0, r4, #16
   b517a:	f7ff fe54 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b517e:	4620      	mov	r0, r4
   b5180:	f7ff fdc7 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5184:	2118      	movs	r1, #24
   b5186:	4620      	mov	r0, r4
   b5188:	f7fe ff99 	bl	b40be <_ZdlPvj>
   b518c:	e7ea      	b.n	b5164 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b518e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5190:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5192:	f7fe ff90 	bl	b40b6 <_Znwj>
   b5196:	4604      	mov	r4, r0
   b5198:	b150      	cbz	r0, b51b0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b519a:	4631      	mov	r1, r6
   b519c:	f7ff fec6 	bl	b4f2c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b51a0:	6930      	ldr	r0, [r6, #16]
   b51a2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b51a6:	b108      	cbz	r0, b51ac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b51a8:	f000 ff2e 	bl	b6008 <strdup>
        type_(type) {
   b51ac:	6120      	str	r0, [r4, #16]
   b51ae:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b51b0:	602c      	str	r4, [r5, #0]
	}
   b51b2:	e7d7      	b.n	b5164 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b51b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b51b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b51b6:	2300      	movs	r3, #0
   b51b8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b51ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b51bc:	4604      	mov	r4, r0
   b51be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b51c0:	b12b      	cbz	r3, b51ce <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b51c2:	2202      	movs	r2, #2
   b51c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b51c6:	68eb      	ldr	r3, [r5, #12]
   b51c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b51ca:	68ab      	ldr	r3, [r5, #8]
   b51cc:	60a3      	str	r3, [r4, #8]
    }
   b51ce:	4620      	mov	r0, r4
   b51d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b51d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b51d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b51d6:	b089      	sub	sp, #36	; 0x24
   b51d8:	4604      	mov	r4, r0
   b51da:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b51dc:	a801      	add	r0, sp, #4
   b51de:	4611      	mov	r1, r2
   b51e0:	f7ff fe54 	bl	b4e8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b51e4:	b1a4      	cbz	r4, b5210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b51e6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b51e8:	b11d      	cbz	r5, b51f2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b51ea:	4628      	mov	r0, r5
   b51ec:	f000 ff0c 	bl	b6008 <strdup>
   b51f0:	4605      	mov	r5, r0
   b51f2:	a801      	add	r0, sp, #4
   b51f4:	a903      	add	r1, sp, #12
        type_(type) {
   b51f6:	9503      	str	r5, [sp, #12]
   b51f8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b51fc:	f7ff fea6 	bl	b4f4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b5200:	a803      	add	r0, sp, #12
   b5202:	f7ff fe10 	bl	b4e26 <_ZN8particle5ErrorD1Ev>
   b5206:	a802      	add	r0, sp, #8
   b5208:	f7fe fffa 	bl	b4200 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b520c:	b009      	add	sp, #36	; 0x24
   b520e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b5210:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5212:	2301      	movs	r3, #1
   b5214:	e8d5 2f4f 	ldrexb	r2, [r5]
   b5218:	2a00      	cmp	r2, #0
   b521a:	d103      	bne.n	b5224 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b521c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b5220:	2900      	cmp	r1, #0
   b5222:	d1f7      	bne.n	b5214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b5224:	d1ef      	bne.n	b5206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b5226:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b5228:	f3bf 8f5b 	dmb	ish
   b522c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b522e:	1d2b      	adds	r3, r5, #4
   b5230:	f3bf 8f5b 	dmb	ish
   b5234:	e853 6f00 	ldrex	r6, [r3]
   b5238:	e843 4200 	strex	r2, r4, [r3]
   b523c:	2a00      	cmp	r2, #0
   b523e:	d1f9      	bne.n	b5234 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b5240:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b5244:	2e00      	cmp	r6, #0
   b5246:	d0de      	beq.n	b5206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b5248:	4620      	mov	r0, r4
   b524a:	f7ff fc77 	bl	b4b3c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b524e:	4607      	mov	r7, r0
   b5250:	b160      	cbz	r0, b526c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5252:	f105 010c 	add.w	r1, r5, #12
   b5256:	4630      	mov	r0, r6
   b5258:	f7ff fe43 	bl	b4ee2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b525c:	4630      	mov	r0, r6
   b525e:	f7ff fd58 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5262:	2110      	movs	r1, #16
   b5264:	4630      	mov	r0, r6
   b5266:	f7fe ff2a 	bl	b40be <_ZdlPvj>
   b526a:	e7cc      	b.n	b5206 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b526c:	4631      	mov	r1, r6
   b526e:	a803      	add	r0, sp, #12
   b5270:	f7ff ffa0 	bl	b51b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5274:	7b2b      	ldrb	r3, [r5, #12]
   b5276:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b527a:	2010      	movs	r0, #16
   b527c:	f7fe ff1b 	bl	b40b6 <_Znwj>
   b5280:	4605      	mov	r5, r0
   b5282:	b1d0      	cbz	r0, b52ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5284:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5286:	2014      	movs	r0, #20
   b5288:	f7fe ff15 	bl	b40b6 <_Znwj>
   b528c:	4604      	mov	r4, r0
   b528e:	b178      	cbz	r0, b52b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5290:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5292:	4601      	mov	r1, r0
   b5294:	a803      	add	r0, sp, #12
   b5296:	f7ff fd45 	bl	b4d24 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b529a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b529c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b529e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b52a0:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b52a2:	9205      	str	r2, [sp, #20]
   b52a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b52a6:	60e3      	str	r3, [r4, #12]
   b52a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b52ac:	9206      	str	r2, [sp, #24]
   b52ae:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b52b0:	4b06      	ldr	r3, [pc, #24]	; (b52cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b52b2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b52b4:	4b06      	ldr	r3, [pc, #24]	; (b52d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b52b6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b52b8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b52ba:	a803      	add	r0, sp, #12
   b52bc:	f7ff fd29 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b52c0:	2200      	movs	r2, #0
   b52c2:	4629      	mov	r1, r5
   b52c4:	4803      	ldr	r0, [pc, #12]	; (b52d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b52c6:	f7ff fc41 	bl	b4b4c <application_thread_invoke>
   b52ca:	e7c7      	b.n	b525c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b52cc:	000b4ef5 	.word	0x000b4ef5
   b52d0:	000b52d9 	.word	0x000b52d9
   b52d4:	000b4ceb 	.word	0x000b4ceb

000b52d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b52d8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b52da:	b570      	push	{r4, r5, r6, lr}
   b52dc:	4604      	mov	r4, r0
	switch (__op)
   b52de:	d103      	bne.n	b52e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b52e0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b52e2:	6003      	str	r3, [r0, #0]
      }
   b52e4:	2000      	movs	r0, #0
   b52e6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b52e8:	2a02      	cmp	r2, #2
   b52ea:	d00c      	beq.n	b5306 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b52ec:	2a03      	cmp	r2, #3
   b52ee:	d1f9      	bne.n	b52e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b52f0:	6804      	ldr	r4, [r0, #0]
   b52f2:	2c00      	cmp	r4, #0
   b52f4:	d0f6      	beq.n	b52e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b52f6:	4620      	mov	r0, r4
   b52f8:	f7ff fd0b 	bl	b4d12 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b52fc:	2114      	movs	r1, #20
   b52fe:	4620      	mov	r0, r4
   b5300:	f7fe fedd 	bl	b40be <_ZdlPvj>
   b5304:	e7ee      	b.n	b52e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b5306:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b5308:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b530a:	f7fe fed4 	bl	b40b6 <_Znwj>
   b530e:	4605      	mov	r5, r0
   b5310:	b120      	cbz	r0, b531c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b5312:	4631      	mov	r1, r6
   b5314:	f7ff ff4e 	bl	b51b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b5318:	7c33      	ldrb	r3, [r6, #16]
   b531a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b531c:	6025      	str	r5, [r4, #0]
	}
   b531e:	e7e1      	b.n	b52e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b5320 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5320:	2200      	movs	r2, #0
   b5322:	6840      	ldr	r0, [r0, #4]
   b5324:	4611      	mov	r1, r2
   b5326:	f7ff bc7d 	b.w	b4c24 <network_listening>

000b532a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b532a:	2200      	movs	r2, #0
   b532c:	6840      	ldr	r0, [r0, #4]
   b532e:	4611      	mov	r1, r2
   b5330:	f7ff bc88 	b.w	b4c44 <network_get_listen_timeout>

000b5334 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5334:	6840      	ldr	r0, [r0, #4]
   b5336:	2200      	movs	r2, #0
   b5338:	f7ff bc7c 	b.w	b4c34 <network_set_listen_timeout>

000b533c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b533c:	6840      	ldr	r0, [r0, #4]
   b533e:	2200      	movs	r2, #0
   b5340:	f081 0101 	eor.w	r1, r1, #1
   b5344:	f7ff bc66 	b.w	b4c14 <network_listen>

000b5348 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5348:	2300      	movs	r3, #0
   b534a:	6840      	ldr	r0, [r0, #4]
   b534c:	461a      	mov	r2, r3
   b534e:	4619      	mov	r1, r3
   b5350:	f7ff bc58 	b.w	b4c04 <network_off>

000b5354 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5354:	2300      	movs	r3, #0
   b5356:	6840      	ldr	r0, [r0, #4]
   b5358:	461a      	mov	r2, r3
   b535a:	4619      	mov	r1, r3
   b535c:	f7ff bc4a 	b.w	b4bf4 <network_on>

000b5360 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5360:	2200      	movs	r2, #0
   b5362:	6840      	ldr	r0, [r0, #4]
   b5364:	4611      	mov	r1, r2
   b5366:	f7ff bc3d 	b.w	b4be4 <network_ready>

000b536a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b536a:	2200      	movs	r2, #0
   b536c:	6840      	ldr	r0, [r0, #4]
   b536e:	4611      	mov	r1, r2
   b5370:	f7ff bc28 	b.w	b4bc4 <network_connecting>

000b5374 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5374:	6840      	ldr	r0, [r0, #4]
   b5376:	2200      	movs	r2, #0
   b5378:	2102      	movs	r1, #2
   b537a:	f7ff bc2b 	b.w	b4bd4 <network_disconnect>

000b537e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b537e:	2300      	movs	r3, #0
   b5380:	6840      	ldr	r0, [r0, #4]
   b5382:	461a      	mov	r2, r3
   b5384:	f7ff bc16 	b.w	b4bb4 <network_connect>

000b5388 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5388:	4b02      	ldr	r3, [pc, #8]	; (b5394 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b538a:	2203      	movs	r2, #3
   b538c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b538e:	4a02      	ldr	r2, [pc, #8]	; (b5398 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5390:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5392:	4770      	bx	lr
   b5394:	2003e6d0 	.word	0x2003e6d0
   b5398:	000b6270 	.word	0x000b6270

000b539c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b539c:	4770      	bx	lr

000b539e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b539e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53a0:	4606      	mov	r6, r0
   b53a2:	4615      	mov	r5, r2
   b53a4:	460c      	mov	r4, r1
   b53a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b53a8:	42bc      	cmp	r4, r7
   b53aa:	d006      	beq.n	b53ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b53ac:	6833      	ldr	r3, [r6, #0]
   b53ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   b53b2:	689b      	ldr	r3, [r3, #8]
   b53b4:	4630      	mov	r0, r6
   b53b6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b53b8:	e7f6      	b.n	b53a8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b53ba:	4628      	mov	r0, r5
   b53bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53be <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b53be:	7c00      	ldrb	r0, [r0, #16]
   b53c0:	2200      	movs	r2, #0
   b53c2:	f7ff bacb 	b.w	b495c <hal_i2c_write>

000b53c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b53c6:	7c00      	ldrb	r0, [r0, #16]
   b53c8:	2100      	movs	r1, #0
   b53ca:	f7ff bacf 	b.w	b496c <hal_i2c_available>

000b53ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b53ce:	7c00      	ldrb	r0, [r0, #16]
   b53d0:	2100      	movs	r1, #0
   b53d2:	f7ff bad3 	b.w	b497c <hal_i2c_read>

000b53d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b53d6:	7c00      	ldrb	r0, [r0, #16]
   b53d8:	2100      	movs	r1, #0
   b53da:	f7ff bad7 	b.w	b498c <hal_i2c_peek>

000b53de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b53de:	7c00      	ldrb	r0, [r0, #16]
   b53e0:	2100      	movs	r1, #0
   b53e2:	f7ff badb 	b.w	b499c <hal_i2c_flush>

000b53e6 <_ZN7TwoWireD0Ev>:
   b53e6:	b510      	push	{r4, lr}
   b53e8:	2114      	movs	r1, #20
   b53ea:	4604      	mov	r4, r0
   b53ec:	f7fe fe67 	bl	b40be <_ZdlPvj>
   b53f0:	4620      	mov	r0, r4
   b53f2:	bd10      	pop	{r4, pc}

000b53f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b53f4:	b538      	push	{r3, r4, r5, lr}
   b53f6:	4604      	mov	r4, r0
   b53f8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b53fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b53fe:	2200      	movs	r2, #0
   b5400:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5404:	4b09      	ldr	r3, [pc, #36]	; (b542c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5406:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5408:	4608      	mov	r0, r1
   b540a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b540c:	4629      	mov	r1, r5
   b540e:	f7ff fad5 	bl	b49bc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5412:	30bf      	adds	r0, #191	; 0xbf
   b5414:	d108      	bne.n	b5428 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5416:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5418:	07db      	lsls	r3, r3, #31
   b541a:	d505      	bpl.n	b5428 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b541c:	6868      	ldr	r0, [r5, #4]
   b541e:	f7ff fc31 	bl	b4c84 <free>
    free(conf.tx_buffer);
   b5422:	68e8      	ldr	r0, [r5, #12]
   b5424:	f7ff fc2e 	bl	b4c84 <free>
}
   b5428:	4620      	mov	r0, r4
   b542a:	bd38      	pop	{r3, r4, r5, pc}
   b542c:	000b62ac 	.word	0x000b62ac

000b5430 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5430:	2300      	movs	r3, #0
   b5432:	7c00      	ldrb	r0, [r0, #16]
   b5434:	461a      	mov	r2, r3
   b5436:	4619      	mov	r1, r3
   b5438:	f7ff ba78 	b.w	b492c <hal_i2c_begin>

000b543c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b543c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b543e:	2200      	movs	r2, #0
   b5440:	2314      	movs	r3, #20
   b5442:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5446:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b544a:	780b      	ldrb	r3, [r1, #0]
   b544c:	f88d 3008 	strb.w	r3, [sp, #8]
   b5450:	684b      	ldr	r3, [r1, #4]
   b5452:	9303      	str	r3, [sp, #12]
   b5454:	68cb      	ldr	r3, [r1, #12]
   b5456:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5458:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b545a:	7a0b      	ldrb	r3, [r1, #8]
   b545c:	9305      	str	r3, [sp, #20]
   b545e:	a901      	add	r1, sp, #4
   b5460:	f7ff fab4 	bl	b49cc <hal_i2c_request_ex>
}
   b5464:	b007      	add	sp, #28
   b5466:	f85d fb04 	ldr.w	pc, [sp], #4

000b546a <_ZN7TwoWire11requestFromEhjh>:
{
   b546a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b546c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b546e:	f88d 1000 	strb.w	r1, [sp]
   b5472:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5476:	9103      	str	r1, [sp, #12]
   b5478:	bf18      	it	ne
   b547a:	2301      	movne	r3, #1
   b547c:	4669      	mov	r1, sp
    size_ = size;
   b547e:	9201      	str	r2, [sp, #4]
   b5480:	f88d 3008 	strb.w	r3, [sp, #8]
   b5484:	f7ff ffda 	bl	b543c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5488:	b005      	add	sp, #20
   b548a:	f85d fb04 	ldr.w	pc, [sp], #4

000b548e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b548e:	2301      	movs	r3, #1
   b5490:	f7ff bfeb 	b.w	b546a <_ZN7TwoWire11requestFromEhjh>

000b5494 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5494:	7c00      	ldrb	r0, [r0, #16]
   b5496:	2200      	movs	r2, #0
   b5498:	f7ff ba50 	b.w	b493c <hal_i2c_begin_transmission>

000b549c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b549c:	b2c9      	uxtb	r1, r1
   b549e:	f7ff bff9 	b.w	b5494 <_ZN7TwoWire17beginTransmissionEh>

000b54a2 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b54a2:	7c00      	ldrb	r0, [r0, #16]
   b54a4:	2200      	movs	r2, #0
   b54a6:	f7ff ba51 	b.w	b494c <hal_i2c_end_transmission>

000b54aa <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b54aa:	2101      	movs	r1, #1
   b54ac:	f7ff bff9 	b.w	b54a2 <_ZN7TwoWire15endTransmissionEh>

000b54b0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b54b0:	4770      	bx	lr

000b54b2 <_ZN9IPAddressD0Ev>:
   b54b2:	b510      	push	{r4, lr}
   b54b4:	2118      	movs	r1, #24
   b54b6:	4604      	mov	r4, r0
   b54b8:	f7fe fe01 	bl	b40be <_ZdlPvj>
   b54bc:	4620      	mov	r0, r4
   b54be:	bd10      	pop	{r4, pc}

000b54c0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b54c0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b54c2:	7d03      	ldrb	r3, [r0, #20]
   b54c4:	2b06      	cmp	r3, #6
{
   b54c6:	b08d      	sub	sp, #52	; 0x34
   b54c8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54ca:	f100 0704 	add.w	r7, r0, #4
   b54ce:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b54d2:	d012      	beq.n	b54fa <_ZNK9IPAddress7printToER5Print+0x3a>
   b54d4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b54d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b54dc:	220a      	movs	r2, #10
   b54de:	4630      	mov	r0, r6
   b54e0:	f000 f95d 	bl	b579e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b54e4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b54e6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b54e8:	d019      	beq.n	b551e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b54ea:	2c00      	cmp	r4, #0
   b54ec:	d0f4      	beq.n	b54d8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b54ee:	212e      	movs	r1, #46	; 0x2e
   b54f0:	4630      	mov	r0, r6
   b54f2:	f000 f93b 	bl	b576c <_ZN5Print5printEc>
   b54f6:	4404      	add	r4, r0
   b54f8:	e7ee      	b.n	b54d8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b54fa:	232f      	movs	r3, #47	; 0x2f
   b54fc:	466a      	mov	r2, sp
   b54fe:	4639      	mov	r1, r7
   b5500:	200a      	movs	r0, #10
		buf[0] = 0;
   b5502:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5506:	f7ff fa69 	bl	b49dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b550a:	4668      	mov	r0, sp
   b550c:	f7fe fd90 	bl	b4030 <strlen>
   b5510:	6833      	ldr	r3, [r6, #0]
   b5512:	4602      	mov	r2, r0
   b5514:	68db      	ldr	r3, [r3, #12]
   b5516:	4669      	mov	r1, sp
   b5518:	4630      	mov	r0, r6
   b551a:	4798      	blx	r3
   b551c:	4604      	mov	r4, r0
    }
    return n;
}
   b551e:	4620      	mov	r0, r4
   b5520:	b00d      	add	sp, #52	; 0x34
   b5522:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5524 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5524:	b510      	push	{r4, lr}
   b5526:	4b05      	ldr	r3, [pc, #20]	; (b553c <_ZN9IPAddressC1Ev+0x18>)
   b5528:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b552a:	2211      	movs	r2, #17
   b552c:	f840 3b04 	str.w	r3, [r0], #4
   b5530:	2100      	movs	r1, #0
   b5532:	f000 fd2a 	bl	b5f8a <memset>
}
   b5536:	4620      	mov	r0, r4
   b5538:	bd10      	pop	{r4, pc}
   b553a:	bf00      	nop
   b553c:	000b62d4 	.word	0x000b62d4

000b5540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5540:	4603      	mov	r3, r0
   b5542:	4a07      	ldr	r2, [pc, #28]	; (b5560 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5544:	b510      	push	{r4, lr}
   b5546:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b554a:	f101 0210 	add.w	r2, r1, #16
   b554e:	f851 4b04 	ldr.w	r4, [r1], #4
   b5552:	f843 4b04 	str.w	r4, [r3], #4
   b5556:	4291      	cmp	r1, r2
   b5558:	d1f9      	bne.n	b554e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b555a:	780a      	ldrb	r2, [r1, #0]
   b555c:	701a      	strb	r2, [r3, #0]
}
   b555e:	bd10      	pop	{r4, pc}
   b5560:	000b62d4 	.word	0x000b62d4

000b5564 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5564:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5566:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b556a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b556e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5572:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5576:	2304      	movs	r3, #4
   b5578:	6041      	str	r1, [r0, #4]
   b557a:	7503      	strb	r3, [r0, #20]
}
   b557c:	bd10      	pop	{r4, pc}
	...

000b5580 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5580:	b507      	push	{r0, r1, r2, lr}
   b5582:	4b06      	ldr	r3, [pc, #24]	; (b559c <_ZN9IPAddressC1EPKh+0x1c>)
   b5584:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5586:	78cb      	ldrb	r3, [r1, #3]
   b5588:	9300      	str	r3, [sp, #0]
   b558a:	788b      	ldrb	r3, [r1, #2]
   b558c:	784a      	ldrb	r2, [r1, #1]
   b558e:	7809      	ldrb	r1, [r1, #0]
   b5590:	f7ff ffe8 	bl	b5564 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5594:	b003      	add	sp, #12
   b5596:	f85d fb04 	ldr.w	pc, [sp], #4
   b559a:	bf00      	nop
   b559c:	000b62d4 	.word	0x000b62d4

000b55a0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b55a0:	4b01      	ldr	r3, [pc, #4]	; (b55a8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b55a2:	4a02      	ldr	r2, [pc, #8]	; (b55ac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b55a4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b55a6:	4770      	bx	lr
   b55a8:	2003e6d8 	.word	0x2003e6d8
   b55ac:	000b62e0 	.word	0x000b62e0

000b55b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b55b0:	2300      	movs	r3, #0
   b55b2:	6840      	ldr	r0, [r0, #4]
   b55b4:	461a      	mov	r2, r3
   b55b6:	f7ff bafd 	b.w	b4bb4 <network_connect>

000b55ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b55ba:	6840      	ldr	r0, [r0, #4]
   b55bc:	2200      	movs	r2, #0
   b55be:	2102      	movs	r1, #2
   b55c0:	f7ff bb08 	b.w	b4bd4 <network_disconnect>

000b55c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b55c4:	2200      	movs	r2, #0
   b55c6:	6840      	ldr	r0, [r0, #4]
   b55c8:	4611      	mov	r1, r2
   b55ca:	f7ff bafb 	b.w	b4bc4 <network_connecting>

000b55ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b55ce:	2200      	movs	r2, #0
   b55d0:	6840      	ldr	r0, [r0, #4]
   b55d2:	4611      	mov	r1, r2
   b55d4:	f7ff bb06 	b.w	b4be4 <network_ready>

000b55d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b55d8:	2300      	movs	r3, #0
   b55da:	6840      	ldr	r0, [r0, #4]
   b55dc:	461a      	mov	r2, r3
   b55de:	4619      	mov	r1, r3
   b55e0:	f7ff bb08 	b.w	b4bf4 <network_on>

000b55e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b55e4:	2300      	movs	r3, #0
   b55e6:	6840      	ldr	r0, [r0, #4]
   b55e8:	461a      	mov	r2, r3
   b55ea:	4619      	mov	r1, r3
   b55ec:	f7ff bb0a 	b.w	b4c04 <network_off>

000b55f0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b55f0:	6840      	ldr	r0, [r0, #4]
   b55f2:	2100      	movs	r1, #0
   b55f4:	f7ff bb2e 	b.w	b4c54 <network_is_on>

000b55f8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b55f8:	6840      	ldr	r0, [r0, #4]
   b55fa:	2100      	movs	r1, #0
   b55fc:	f7ff bb32 	b.w	b4c64 <network_is_off>

000b5600 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5600:	6840      	ldr	r0, [r0, #4]
   b5602:	2200      	movs	r2, #0
   b5604:	f081 0101 	eor.w	r1, r1, #1
   b5608:	f7ff bb04 	b.w	b4c14 <network_listen>

000b560c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b560c:	6840      	ldr	r0, [r0, #4]
   b560e:	2200      	movs	r2, #0
   b5610:	f7ff bb10 	b.w	b4c34 <network_set_listen_timeout>

000b5614 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5614:	2200      	movs	r2, #0
   b5616:	6840      	ldr	r0, [r0, #4]
   b5618:	4611      	mov	r1, r2
   b561a:	f7ff bb13 	b.w	b4c44 <network_get_listen_timeout>

000b561e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b561e:	2200      	movs	r2, #0
   b5620:	6840      	ldr	r0, [r0, #4]
   b5622:	4611      	mov	r1, r2
   b5624:	f7ff bafe 	b.w	b4c24 <network_listening>

000b5628 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b562c:	b095      	sub	sp, #84	; 0x54
   b562e:	4614      	mov	r4, r2
   b5630:	460d      	mov	r5, r1
   b5632:	4607      	mov	r7, r0
    IPAddress addr;
   b5634:	f7ff ff76 	bl	b5524 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5638:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b563a:	221c      	movs	r2, #28
   b563c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b563e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5640:	f000 fca3 	bl	b5f8a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5644:	2340      	movs	r3, #64	; 0x40
   b5646:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5648:	4620      	mov	r0, r4
   b564a:	466b      	mov	r3, sp
   b564c:	aa0c      	add	r2, sp, #48	; 0x30
   b564e:	2100      	movs	r1, #0
   b5650:	f7ff f9d4 	bl	b49fc <netdb_getaddrinfo>
    if (!r) {
   b5654:	4604      	mov	r4, r0
   b5656:	2800      	cmp	r0, #0
   b5658:	d14b      	bne.n	b56f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b565a:	4602      	mov	r2, r0
   b565c:	2101      	movs	r1, #1
   b565e:	6868      	ldr	r0, [r5, #4]
   b5660:	f7ff fac0 	bl	b4be4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5664:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5666:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5668:	4622      	mov	r2, r4
   b566a:	6868      	ldr	r0, [r5, #4]
   b566c:	f7ff faba 	bl	b4be4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5670:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5672:	4681      	mov	r9, r0
        bool ok = false;
   b5674:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5676:	2e00      	cmp	r6, #0
   b5678:	d03b      	beq.n	b56f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b567a:	2900      	cmp	r1, #0
   b567c:	d139      	bne.n	b56f2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b567e:	6873      	ldr	r3, [r6, #4]
   b5680:	2b02      	cmp	r3, #2
   b5682:	d003      	beq.n	b568c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5684:	2b0a      	cmp	r3, #10
   b5686:	d011      	beq.n	b56ac <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5688:	69f6      	ldr	r6, [r6, #28]
   b568a:	e7f4      	b.n	b5676 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b568c:	f1b8 0f00 	cmp.w	r8, #0
   b5690:	d0fa      	beq.n	b5688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5692:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5694:	a806      	add	r0, sp, #24
   b5696:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5698:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b569a:	f7ff ff71 	bl	b5580 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b569e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b56a0:	1d3c      	adds	r4, r7, #4
   b56a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b56a4:	682b      	ldr	r3, [r5, #0]
   b56a6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b56a8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b56aa:	e7ed      	b.n	b5688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b56ac:	f1b9 0f00 	cmp.w	r9, #0
   b56b0:	d0ea      	beq.n	b5688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b56b2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b56b4:	2210      	movs	r2, #16
   b56b6:	a801      	add	r0, sp, #4
   b56b8:	f000 fc67 	bl	b5f8a <memset>
                    a.v = 6;
   b56bc:	2306      	movs	r3, #6
   b56be:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b56c2:	ad01      	add	r5, sp, #4
   b56c4:	f104 0308 	add.w	r3, r4, #8
   b56c8:	3418      	adds	r4, #24
   b56ca:	6818      	ldr	r0, [r3, #0]
   b56cc:	6859      	ldr	r1, [r3, #4]
   b56ce:	462a      	mov	r2, r5
   b56d0:	c203      	stmia	r2!, {r0, r1}
   b56d2:	3308      	adds	r3, #8
   b56d4:	42a3      	cmp	r3, r4
   b56d6:	4615      	mov	r5, r2
   b56d8:	d1f7      	bne.n	b56ca <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b56da:	a901      	add	r1, sp, #4
   b56dc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b56de:	ad07      	add	r5, sp, #28
   b56e0:	f7ff ff2e 	bl	b5540 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b56e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b56e6:	1d3c      	adds	r4, r7, #4
   b56e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b56ea:	682b      	ldr	r3, [r5, #0]
   b56ec:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b56ee:	4649      	mov	r1, r9
   b56f0:	e7ca      	b.n	b5688 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b56f2:	9800      	ldr	r0, [sp, #0]
   b56f4:	f7ff f97a 	bl	b49ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b56f8:	4638      	mov	r0, r7
   b56fa:	b015      	add	sp, #84	; 0x54
   b56fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5700 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5700:	4b02      	ldr	r3, [pc, #8]	; (b570c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5702:	4a03      	ldr	r2, [pc, #12]	; (b5710 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5704:	601a      	str	r2, [r3, #0]
   b5706:	2200      	movs	r2, #0
   b5708:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b570a:	4770      	bx	lr
   b570c:	2003e6dc 	.word	0x2003e6dc
   b5710:	000b62ec 	.word	0x000b62ec

000b5714 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5716:	4606      	mov	r6, r0
   b5718:	460d      	mov	r5, r1
  size_t n = 0;
   b571a:	188f      	adds	r7, r1, r2
   b571c:	2400      	movs	r4, #0
  while (size--) {
   b571e:	42bd      	cmp	r5, r7
   b5720:	d00c      	beq.n	b573c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5722:	6833      	ldr	r3, [r6, #0]
   b5724:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5728:	689b      	ldr	r3, [r3, #8]
   b572a:	4630      	mov	r0, r6
   b572c:	4798      	blx	r3
     if (chunk>=0)
   b572e:	1e03      	subs	r3, r0, #0
   b5730:	db01      	blt.n	b5736 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5732:	441c      	add	r4, r3
  while (size--) {
   b5734:	e7f3      	b.n	b571e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5736:	2c00      	cmp	r4, #0
   b5738:	bf08      	it	eq
   b573a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b573c:	4620      	mov	r0, r4
   b573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5740 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5740:	b513      	push	{r0, r1, r4, lr}
   b5742:	4604      	mov	r4, r0
    }
   b5744:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5746:	b159      	cbz	r1, b5760 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5748:	9101      	str	r1, [sp, #4]
   b574a:	f7fe fc71 	bl	b4030 <strlen>
   b574e:	6823      	ldr	r3, [r4, #0]
   b5750:	9901      	ldr	r1, [sp, #4]
   b5752:	68db      	ldr	r3, [r3, #12]
   b5754:	4602      	mov	r2, r0
   b5756:	4620      	mov	r0, r4
    }
   b5758:	b002      	add	sp, #8
   b575a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b575e:	4718      	bx	r3
    }
   b5760:	b002      	add	sp, #8
   b5762:	bd10      	pop	{r4, pc}

000b5764 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5764:	b508      	push	{r3, lr}
  return write(str);
   b5766:	f7ff ffeb 	bl	b5740 <_ZN5Print5writeEPKc>
}
   b576a:	bd08      	pop	{r3, pc}

000b576c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b576c:	6803      	ldr	r3, [r0, #0]
   b576e:	689b      	ldr	r3, [r3, #8]
   b5770:	4718      	bx	r3

000b5772 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5772:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5774:	210d      	movs	r1, #13
{
   b5776:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5778:	f7ff fff8 	bl	b576c <_ZN5Print5printEc>
  n += print('\n');
   b577c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b577e:	4604      	mov	r4, r0
  n += print('\n');
   b5780:	4628      	mov	r0, r5
   b5782:	f7ff fff3 	bl	b576c <_ZN5Print5printEc>
  return n;
}
   b5786:	4420      	add	r0, r4
   b5788:	bd38      	pop	{r3, r4, r5, pc}

000b578a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b578a:	b538      	push	{r3, r4, r5, lr}
   b578c:	4605      	mov	r5, r0
  return write(str);
   b578e:	f7ff ffd7 	bl	b5740 <_ZN5Print5writeEPKc>
   b5792:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5794:	4628      	mov	r0, r5
   b5796:	f7ff ffec 	bl	b5772 <_ZN5Print7printlnEv>
  return n;
}
   b579a:	4420      	add	r0, r4
   b579c:	bd38      	pop	{r3, r4, r5, pc}

000b579e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b579e:	b530      	push	{r4, r5, lr}
   b57a0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b57a2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b57a4:	2a01      	cmp	r2, #1
  *str = '\0';
   b57a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b57aa:	bf98      	it	ls
   b57ac:	220a      	movls	r2, #10
   b57ae:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b57b0:	460d      	mov	r5, r1
   b57b2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b57b6:	fb01 5312 	mls	r3, r1, r2, r5
   b57ba:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b57be:	2b09      	cmp	r3, #9
   b57c0:	bf94      	ite	ls
   b57c2:	3330      	addls	r3, #48	; 0x30
   b57c4:	3337      	addhi	r3, #55	; 0x37
   b57c6:	b2db      	uxtb	r3, r3
  } while(n);
   b57c8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b57ca:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b57ce:	d9ef      	bls.n	b57b0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b57d0:	4621      	mov	r1, r4
   b57d2:	f7ff ffb5 	bl	b5740 <_ZN5Print5writeEPKc>
}
   b57d6:	b00b      	add	sp, #44	; 0x2c
   b57d8:	bd30      	pop	{r4, r5, pc}
	...

000b57dc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b57dc:	4b01      	ldr	r3, [pc, #4]	; (b57e4 <_GLOBAL__sub_I_RGB+0x8>)
   b57de:	2200      	movs	r2, #0
   b57e0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b57e2:	4770      	bx	lr
   b57e4:	2003e6e4 	.word	0x2003e6e4

000b57e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b57e8:	b510      	push	{r4, lr}
   b57ea:	4604      	mov	r4, r0
   b57ec:	4608      	mov	r0, r1
{
    _spi = spi;
   b57ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b57f0:	f7ff f90c 	bl	b4a0c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b57f4:	2300      	movs	r3, #0
   b57f6:	6063      	str	r3, [r4, #4]
}
   b57f8:	4620      	mov	r0, r4
   b57fa:	bd10      	pop	{r4, pc}

000b57fc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b57fc:	b510      	push	{r4, lr}
   b57fe:	4604      	mov	r4, r0
{
	free(buffer);
   b5800:	6800      	ldr	r0, [r0, #0]
   b5802:	f7ff fa3f 	bl	b4c84 <free>
}
   b5806:	4620      	mov	r0, r4
   b5808:	bd10      	pop	{r4, pc}

000b580a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b580a:	b510      	push	{r4, lr}
   b580c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b580e:	6800      	ldr	r0, [r0, #0]
   b5810:	b108      	cbz	r0, b5816 <_ZN6String10invalidateEv+0xc>
   b5812:	f7ff fa37 	bl	b4c84 <free>
	buffer = NULL;
   b5816:	2300      	movs	r3, #0
	capacity = len = 0;
   b5818:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b581c:	6023      	str	r3, [r4, #0]
}
   b581e:	bd10      	pop	{r4, pc}

000b5820 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5820:	b538      	push	{r3, r4, r5, lr}
   b5822:	4604      	mov	r4, r0
   b5824:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5826:	6800      	ldr	r0, [r0, #0]
   b5828:	3101      	adds	r1, #1
   b582a:	f7ff fa33 	bl	b4c94 <realloc>
	if (newbuffer) {
   b582e:	b110      	cbz	r0, b5836 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5830:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5834:	2001      	movs	r0, #1
	}
	return 0;
}
   b5836:	bd38      	pop	{r3, r4, r5, pc}

000b5838 <_ZN6String7reserveEj>:
{
   b5838:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b583a:	6803      	ldr	r3, [r0, #0]
{
   b583c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b583e:	b123      	cbz	r3, b584a <_ZN6String7reserveEj+0x12>
   b5840:	6843      	ldr	r3, [r0, #4]
   b5842:	428b      	cmp	r3, r1
   b5844:	d301      	bcc.n	b584a <_ZN6String7reserveEj+0x12>
   b5846:	2001      	movs	r0, #1
}
   b5848:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b584a:	4620      	mov	r0, r4
   b584c:	f7ff ffe8 	bl	b5820 <_ZN6String12changeBufferEj>
   b5850:	2800      	cmp	r0, #0
   b5852:	d0f9      	beq.n	b5848 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5854:	68a3      	ldr	r3, [r4, #8]
   b5856:	2b00      	cmp	r3, #0
   b5858:	d1f5      	bne.n	b5846 <_ZN6String7reserveEj+0xe>
   b585a:	6822      	ldr	r2, [r4, #0]
   b585c:	7013      	strb	r3, [r2, #0]
   b585e:	e7f2      	b.n	b5846 <_ZN6String7reserveEj+0xe>

000b5860 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5860:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5862:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5864:	4611      	mov	r1, r2
   b5866:	9201      	str	r2, [sp, #4]
{
   b5868:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b586a:	f7ff ffe5 	bl	b5838 <_ZN6String7reserveEj>
   b586e:	9a01      	ldr	r2, [sp, #4]
   b5870:	b928      	cbnz	r0, b587e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5872:	4620      	mov	r0, r4
   b5874:	f7ff ffc9 	bl	b580a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5878:	4620      	mov	r0, r4
   b587a:	b003      	add	sp, #12
   b587c:	bd30      	pop	{r4, r5, pc}
	len = length;
   b587e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5880:	4629      	mov	r1, r5
   b5882:	6820      	ldr	r0, [r4, #0]
   b5884:	f000 fb73 	bl	b5f6e <memcpy>
	buffer[len] = 0;
   b5888:	6822      	ldr	r2, [r4, #0]
   b588a:	68a3      	ldr	r3, [r4, #8]
   b588c:	2100      	movs	r1, #0
   b588e:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5890:	e7f2      	b.n	b5878 <_ZN6String4copyEPKcj+0x18>

000b5892 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5892:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5894:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5896:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b589a:	4604      	mov	r4, r0
	len = 0;
   b589c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b589e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b58a0:	b141      	cbz	r1, b58b4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b58a2:	4608      	mov	r0, r1
   b58a4:	9101      	str	r1, [sp, #4]
   b58a6:	f7fe fbc3 	bl	b4030 <strlen>
   b58aa:	9901      	ldr	r1, [sp, #4]
   b58ac:	4602      	mov	r2, r0
   b58ae:	4620      	mov	r0, r4
   b58b0:	f7ff ffd6 	bl	b5860 <_ZN6String4copyEPKcj>
}
   b58b4:	4620      	mov	r0, r4
   b58b6:	b002      	add	sp, #8
   b58b8:	bd10      	pop	{r4, pc}

000b58ba <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b58ba:	b538      	push	{r3, r4, r5, lr}
   b58bc:	4605      	mov	r5, r0
	if (buffer) {
   b58be:	6800      	ldr	r0, [r0, #0]
{
   b58c0:	460c      	mov	r4, r1
	if (buffer) {
   b58c2:	b168      	cbz	r0, b58e0 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b58c4:	686a      	ldr	r2, [r5, #4]
   b58c6:	688b      	ldr	r3, [r1, #8]
   b58c8:	429a      	cmp	r2, r3
   b58ca:	d307      	bcc.n	b58dc <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b58cc:	6809      	ldr	r1, [r1, #0]
   b58ce:	f000 fb93 	bl	b5ff8 <strcpy>
			len = rhs.len;
   b58d2:	68a3      	ldr	r3, [r4, #8]
   b58d4:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b58d6:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b58d8:	60a3      	str	r3, [r4, #8]
}
   b58da:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b58dc:	f7ff f9d2 	bl	b4c84 <free>
	buffer = rhs.buffer;
   b58e0:	6823      	ldr	r3, [r4, #0]
   b58e2:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b58e4:	6863      	ldr	r3, [r4, #4]
   b58e6:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b58e8:	68a3      	ldr	r3, [r4, #8]
   b58ea:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b58ec:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b58ee:	e9c4 3300 	strd	r3, r3, [r4]
   b58f2:	e7f1      	b.n	b58d8 <_ZN6String4moveERS_+0x1e>

000b58f4 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b58f4:	b510      	push	{r4, lr}
	buffer = NULL;
   b58f6:	2300      	movs	r3, #0
	capacity = 0;
   b58f8:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b58fc:	4604      	mov	r4, r0
	len = 0;
   b58fe:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5900:	7303      	strb	r3, [r0, #12]
	move(rval);
   b5902:	f7ff ffda 	bl	b58ba <_ZN6String4moveERS_>
}
   b5906:	4620      	mov	r0, r4
   b5908:	bd10      	pop	{r4, pc}

000b590a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b590a:	b513      	push	{r0, r1, r4, lr}
   b590c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b590e:	b159      	cbz	r1, b5928 <_ZN6StringaSEPKc+0x1e>
   b5910:	4608      	mov	r0, r1
   b5912:	9101      	str	r1, [sp, #4]
   b5914:	f7fe fb8c 	bl	b4030 <strlen>
   b5918:	9901      	ldr	r1, [sp, #4]
   b591a:	4602      	mov	r2, r0
   b591c:	4620      	mov	r0, r4
   b591e:	f7ff ff9f 	bl	b5860 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5922:	4620      	mov	r0, r4
   b5924:	b002      	add	sp, #8
   b5926:	bd10      	pop	{r4, pc}
	else invalidate();
   b5928:	f7ff ff6f 	bl	b580a <_ZN6String10invalidateEv>
   b592c:	e7f9      	b.n	b5922 <_ZN6StringaSEPKc+0x18>

000b592e <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b592e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5930:	4604      	mov	r4, r0
	buffer = NULL;
   b5932:	2300      	movs	r3, #0
	capacity = 0;
   b5934:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5938:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b593a:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b593c:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b593e:	a901      	add	r1, sp, #4
   b5940:	f000 f96e 	bl	b5c20 <utoa>
	*this = buf;
   b5944:	a901      	add	r1, sp, #4
   b5946:	4620      	mov	r0, r4
   b5948:	f7ff ffdf 	bl	b590a <_ZN6StringaSEPKc>
}
   b594c:	4620      	mov	r0, r4
   b594e:	b004      	add	sp, #16
   b5950:	bd10      	pop	{r4, pc}

000b5952 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5952:	b570      	push	{r4, r5, r6, lr}
   b5954:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5956:	460e      	mov	r6, r1
   b5958:	b909      	cbnz	r1, b595e <_ZN6String6concatEPKcj+0xc>
   b595a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b595c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b595e:	b16a      	cbz	r2, b597c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5960:	6884      	ldr	r4, [r0, #8]
   b5962:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5964:	4621      	mov	r1, r4
   b5966:	f7ff ff67 	bl	b5838 <_ZN6String7reserveEj>
   b596a:	2800      	cmp	r0, #0
   b596c:	d0f5      	beq.n	b595a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b596e:	6828      	ldr	r0, [r5, #0]
   b5970:	68ab      	ldr	r3, [r5, #8]
   b5972:	4631      	mov	r1, r6
   b5974:	4418      	add	r0, r3
   b5976:	f000 fb3f 	bl	b5ff8 <strcpy>
	len = newlen;
   b597a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b597c:	2001      	movs	r0, #1
   b597e:	e7ed      	b.n	b595c <_ZN6String6concatEPKcj+0xa>

000b5980 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b5980:	688a      	ldr	r2, [r1, #8]
   b5982:	6809      	ldr	r1, [r1, #0]
   b5984:	f7ff bfe5 	b.w	b5952 <_ZN6String6concatEPKcj>

000b5988 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b5988:	b513      	push	{r0, r1, r4, lr}
   b598a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b598c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b598e:	b151      	cbz	r1, b59a6 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b5990:	9101      	str	r1, [sp, #4]
   b5992:	f7fe fb4d 	bl	b4030 <strlen>
   b5996:	9901      	ldr	r1, [sp, #4]
   b5998:	4602      	mov	r2, r0
   b599a:	4620      	mov	r0, r4
}
   b599c:	b002      	add	sp, #8
   b599e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b59a2:	f7ff bfd6 	b.w	b5952 <_ZN6String6concatEPKcj>
}
   b59a6:	b002      	add	sp, #8
   b59a8:	bd10      	pop	{r4, pc}

000b59aa <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b59aa:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b59ac:	6882      	ldr	r2, [r0, #8]
   b59ae:	b93a      	cbnz	r2, b59c0 <_ZNK6String6equalsEPKc+0x16>
   b59b0:	b121      	cbz	r1, b59bc <_ZNK6String6equalsEPKc+0x12>
   b59b2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b59b4:	fab0 f080 	clz	r0, r0
   b59b8:	0940      	lsrs	r0, r0, #5
   b59ba:	e000      	b.n	b59be <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b59bc:	2001      	movs	r0, #1
}
   b59be:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b59c0:	6800      	ldr	r0, [r0, #0]
   b59c2:	b909      	cbnz	r1, b59c8 <_ZNK6String6equalsEPKc+0x1e>
   b59c4:	7800      	ldrb	r0, [r0, #0]
   b59c6:	e7f5      	b.n	b59b4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b59c8:	f7fe fb28 	bl	b401c <strcmp>
   b59cc:	e7f2      	b.n	b59b4 <_ZNK6String6equalsEPKc+0xa>
	...

000b59d0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b59d0:	4b05      	ldr	r3, [pc, #20]	; (b59e8 <_GLOBAL__sub_I_System+0x18>)
   b59d2:	2202      	movs	r2, #2
   b59d4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b59d6:	4b05      	ldr	r3, [pc, #20]	; (b59ec <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b59d8:	4a05      	ldr	r2, [pc, #20]	; (b59f0 <_GLOBAL__sub_I_System+0x20>)
   b59da:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b59dc:	2000      	movs	r0, #0
   b59de:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b59e2:	f7ff b89b 	b.w	b4b1c <set_system_mode>
   b59e6:	bf00      	nop
   b59e8:	2003e700 	.word	0x2003e700
   b59ec:	2003e6f4 	.word	0x2003e6f4
   b59f0:	ffff0000 	.word	0xffff0000

000b59f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b59f4:	4b02      	ldr	r3, [pc, #8]	; (b5a00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b59f6:	681a      	ldr	r2, [r3, #0]
   b59f8:	4b02      	ldr	r3, [pc, #8]	; (b5a04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b59fa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b59fc:	4770      	bx	lr
   b59fe:	bf00      	nop
   b5a00:	2003e424 	.word	0x2003e424
   b5a04:	2003e704 	.word	0x2003e704

000b5a08 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5a08:	4770      	bx	lr

000b5a0a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5a0a:	7441      	strb	r1, [r0, #17]
}
   b5a0c:	4770      	bx	lr

000b5a0e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5a0e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5a10:	7c00      	ldrb	r0, [r0, #16]
   b5a12:	f7ff f83b 	bl	b4a8c <hal_usart_available_data_for_write>
}
   b5a16:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a1a:	bd08      	pop	{r3, pc}

000b5a1c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5a1c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5a1e:	7c00      	ldrb	r0, [r0, #16]
   b5a20:	f7ff f80c 	bl	b4a3c <hal_usart_available>
}
   b5a24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5a28:	bd08      	pop	{r3, pc}

000b5a2a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5a2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5a2c:	7c00      	ldrb	r0, [r0, #16]
   b5a2e:	f7ff f815 	bl	b4a5c <hal_usart_peek>
}
   b5a32:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a36:	bd08      	pop	{r3, pc}

000b5a38 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5a38:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5a3a:	7c00      	ldrb	r0, [r0, #16]
   b5a3c:	f7ff f806 	bl	b4a4c <hal_usart_read>
}
   b5a40:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5a44:	bd08      	pop	{r3, pc}

000b5a46 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5a46:	7c00      	ldrb	r0, [r0, #16]
   b5a48:	f7ff b810 	b.w	b4a6c <hal_usart_flush>

000b5a4c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a4e:	7c45      	ldrb	r5, [r0, #17]
{
   b5a50:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a52:	b12d      	cbz	r5, b5a60 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5a54:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5a56:	b003      	add	sp, #12
   b5a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5a5c:	f7fe bfe6 	b.w	b4a2c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5a60:	7c00      	ldrb	r0, [r0, #16]
   b5a62:	9101      	str	r1, [sp, #4]
   b5a64:	f7ff f812 	bl	b4a8c <hal_usart_available_data_for_write>
   b5a68:	2800      	cmp	r0, #0
   b5a6a:	9901      	ldr	r1, [sp, #4]
   b5a6c:	dcf2      	bgt.n	b5a54 <_ZN11USARTSerial5writeEh+0x8>
}
   b5a6e:	4628      	mov	r0, r5
   b5a70:	b003      	add	sp, #12
   b5a72:	bd30      	pop	{r4, r5, pc}

000b5a74 <_ZN11USARTSerialD0Ev>:
   b5a74:	b510      	push	{r4, lr}
   b5a76:	2114      	movs	r1, #20
   b5a78:	4604      	mov	r4, r0
   b5a7a:	f7fe fb20 	bl	b40be <_ZdlPvj>
   b5a7e:	4620      	mov	r0, r4
   b5a80:	bd10      	pop	{r4, pc}
	...

000b5a84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5a84:	b510      	push	{r4, lr}
   b5a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a8a:	4604      	mov	r4, r0
   b5a8c:	4608      	mov	r0, r1
   b5a8e:	4611      	mov	r1, r2
   b5a90:	2200      	movs	r2, #0
   b5a92:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5a96:	4b04      	ldr	r3, [pc, #16]	; (b5aa8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5a98:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a9a:	2301      	movs	r3, #1
  _serial = serial;
   b5a9c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a9e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5aa0:	f7fe fffc 	bl	b4a9c <hal_usart_init_ex>
}
   b5aa4:	4620      	mov	r0, r4
   b5aa6:	bd10      	pop	{r4, pc}
   b5aa8:	000b6344 	.word	0x000b6344

000b5aac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5aac:	7441      	strb	r1, [r0, #17]
}
   b5aae:	4770      	bx	lr

000b5ab0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5ab0:	4770      	bx	lr

000b5ab2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5ab2:	4770      	bx	lr

000b5ab4 <_ZN9USBSerial4readEv>:
{
   b5ab4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5ab6:	2100      	movs	r1, #0
   b5ab8:	7c00      	ldrb	r0, [r0, #16]
   b5aba:	f7ff f817 	bl	b4aec <HAL_USB_USART_Receive_Data>
}
   b5abe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ac2:	bd08      	pop	{r3, pc}

000b5ac4 <_ZN9USBSerial4peekEv>:
{
   b5ac4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5ac6:	2101      	movs	r1, #1
   b5ac8:	7c00      	ldrb	r0, [r0, #16]
   b5aca:	f7ff f80f 	bl	b4aec <HAL_USB_USART_Receive_Data>
}
   b5ace:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ad2:	bd08      	pop	{r3, pc}

000b5ad4 <_ZN9USBSerial17availableForWriteEv>:
{
   b5ad4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5ad6:	7c00      	ldrb	r0, [r0, #16]
   b5ad8:	f7ff f800 	bl	b4adc <HAL_USB_USART_Available_Data_For_Write>
}
   b5adc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ae0:	bd08      	pop	{r3, pc}

000b5ae2 <_ZN9USBSerial9availableEv>:
{
   b5ae2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ae4:	7c00      	ldrb	r0, [r0, #16]
   b5ae6:	f7fe fff1 	bl	b4acc <HAL_USB_USART_Available_Data>
}
   b5aea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5aee:	bd08      	pop	{r3, pc}

000b5af0 <_ZN9USBSerial5writeEh>:
{
   b5af0:	b513      	push	{r0, r1, r4, lr}
   b5af2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5af4:	7c00      	ldrb	r0, [r0, #16]
{
   b5af6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5af8:	f7fe fff0 	bl	b4adc <HAL_USB_USART_Available_Data_For_Write>
   b5afc:	2800      	cmp	r0, #0
   b5afe:	9901      	ldr	r1, [sp, #4]
   b5b00:	dc01      	bgt.n	b5b06 <_ZN9USBSerial5writeEh+0x16>
   b5b02:	7c60      	ldrb	r0, [r4, #17]
   b5b04:	b120      	cbz	r0, b5b10 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5b06:	7c20      	ldrb	r0, [r4, #16]
   b5b08:	f7fe fff8 	bl	b4afc <HAL_USB_USART_Send_Data>
   b5b0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5b10:	b002      	add	sp, #8
   b5b12:	bd10      	pop	{r4, pc}

000b5b14 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5b14:	7c00      	ldrb	r0, [r0, #16]
   b5b16:	f7fe bff9 	b.w	b4b0c <HAL_USB_USART_Flush_Data>

000b5b1a <_ZN9USBSerialD0Ev>:
   b5b1a:	b510      	push	{r4, lr}
   b5b1c:	2114      	movs	r1, #20
   b5b1e:	4604      	mov	r4, r0
   b5b20:	f7fe facd 	bl	b40be <_ZdlPvj>
   b5b24:	4620      	mov	r0, r4
   b5b26:	bd10      	pop	{r4, pc}

000b5b28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5b28:	b510      	push	{r4, lr}
   b5b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b2e:	4604      	mov	r4, r0
   b5b30:	4608      	mov	r0, r1
   b5b32:	2100      	movs	r1, #0
   b5b34:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5b38:	4b04      	ldr	r3, [pc, #16]	; (b5b4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5b3a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b3c:	2301      	movs	r3, #1
  _serial = serial;
   b5b3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b40:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5b42:	4611      	mov	r1, r2
   b5b44:	f7fe ffb2 	bl	b4aac <HAL_USB_USART_Init>
}
   b5b48:	4620      	mov	r0, r4
   b5b4a:	bd10      	pop	{r4, pc}
   b5b4c:	000b6374 	.word	0x000b6374

000b5b50 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5b50:	7c00      	ldrb	r0, [r0, #16]
   b5b52:	2200      	movs	r2, #0
   b5b54:	f7fe bfb2 	b.w	b4abc <HAL_USB_USART_Begin>

000b5b58 <_Z19acquireSerialBufferv>:
{
   b5b58:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5b5a:	2214      	movs	r2, #20
{
   b5b5c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5b5e:	2100      	movs	r1, #0
   b5b60:	f000 fa13 	bl	b5f8a <memset>
}
   b5b64:	4620      	mov	r0, r4
   b5b66:	bd10      	pop	{r4, pc}

000b5b68 <_Z16_fetch_usbserialv>:
{
   b5b68:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b6a:	4c0f      	ldr	r4, [pc, #60]	; (b5ba8 <_Z16_fetch_usbserialv+0x40>)
{
   b5b6c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5b6e:	a803      	add	r0, sp, #12
   b5b70:	f7ff fff2 	bl	b5b58 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5b74:	7821      	ldrb	r1, [r4, #0]
   b5b76:	f3bf 8f5b 	dmb	ish
   b5b7a:	f011 0101 	ands.w	r1, r1, #1
   b5b7e:	d10f      	bne.n	b5ba0 <_Z16_fetch_usbserialv+0x38>
   b5b80:	4620      	mov	r0, r4
   b5b82:	9101      	str	r1, [sp, #4]
   b5b84:	f7fe fa9d 	bl	b40c2 <__cxa_guard_acquire>
   b5b88:	9901      	ldr	r1, [sp, #4]
   b5b8a:	b148      	cbz	r0, b5ba0 <_Z16_fetch_usbserialv+0x38>
   b5b8c:	aa03      	add	r2, sp, #12
   b5b8e:	4807      	ldr	r0, [pc, #28]	; (b5bac <_Z16_fetch_usbserialv+0x44>)
   b5b90:	f7ff ffca 	bl	b5b28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5b94:	4620      	mov	r0, r4
   b5b96:	f7fe fa99 	bl	b40cc <__cxa_guard_release>
   b5b9a:	4805      	ldr	r0, [pc, #20]	; (b5bb0 <_Z16_fetch_usbserialv+0x48>)
   b5b9c:	f000 f9e1 	bl	b5f62 <atexit>
	return _usbserial;
}
   b5ba0:	4802      	ldr	r0, [pc, #8]	; (b5bac <_Z16_fetch_usbserialv+0x44>)
   b5ba2:	b008      	add	sp, #32
   b5ba4:	bd10      	pop	{r4, pc}
   b5ba6:	bf00      	nop
   b5ba8:	2003e708 	.word	0x2003e708
   b5bac:	2003e70c 	.word	0x2003e70c
   b5bb0:	000b5ab1 	.word	0x000b5ab1

000b5bb4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b5bb4:	b510      	push	{r4, lr}
   b5bb6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b5bb8:	f7fe fa3a 	bl	b4030 <strlen>
   b5bbc:	3801      	subs	r0, #1
   b5bbe:	1823      	adds	r3, r4, r0
   b5bc0:	4620      	mov	r0, r4
	while(i<j){
   b5bc2:	4283      	cmp	r3, r0
   b5bc4:	d906      	bls.n	b5bd4 <_Z11str_reversePc+0x20>
		c = *i;
   b5bc6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b5bc8:	7819      	ldrb	r1, [r3, #0]
   b5bca:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b5bce:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b5bd2:	e7f6      	b.n	b5bc2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b5bd4:	bd10      	pop	{r4, pc}

000b5bd6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b5bd6:	b570      	push	{r4, r5, r6, lr}
   b5bd8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b5bda:	1e91      	subs	r1, r2, #2
   b5bdc:	2922      	cmp	r1, #34	; 0x22
   b5bde:	d81d      	bhi.n	b5c1c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b5be0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b5be2:	b930      	cbnz	r0, b5bf2 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b5be4:	4423      	add	r3, r4
            *ptr++ = '0';
   b5be6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b5be8:	429d      	cmp	r5, r3
   b5bea:	d210      	bcs.n	b5c0e <ultoa+0x38>
            *ptr++ = '0';
   b5bec:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b5bf0:	e7fa      	b.n	b5be8 <ultoa+0x12>
            result.quot = a/radix;
   b5bf2:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b5bf6:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b5bfa:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b5bfc:	2809      	cmp	r0, #9
                *ptr += '0';
   b5bfe:	bf94      	ite	ls
   b5c00:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b5c02:	3157      	addhi	r1, #87	; 0x57
   b5c04:	b2c9      	uxtb	r1, r1
   b5c06:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b5c0a:	4630      	mov	r0, r6
	while(a){
   b5c0c:	e7e9      	b.n	b5be2 <ultoa+0xc>

	*ptr = '\0';
   b5c0e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b5c10:	4620      	mov	r0, r4
	*ptr = '\0';
   b5c12:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b5c14:	f7ff ffce 	bl	b5bb4 <_Z11str_reversePc>
	return buffer;
   b5c18:	4620      	mov	r0, r4
}
   b5c1a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b5c1c:	2000      	movs	r0, #0
   b5c1e:	e7fc      	b.n	b5c1a <ultoa+0x44>

000b5c20 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b5c20:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b5c22:	2301      	movs	r3, #1
   b5c24:	f7ff ffd7 	bl	b5bd6 <ultoa>
}
   b5c28:	bd08      	pop	{r3, pc}
	...

000b5c2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5c2c:	4b01      	ldr	r3, [pc, #4]	; (b5c34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5c2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5c30:	4770      	bx	lr
   b5c32:	bf00      	nop
   b5c34:	2003e428 	.word	0x2003e428

000b5c38 <serialEventRun>:
{
   b5c38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5c3a:	4b0b      	ldr	r3, [pc, #44]	; (b5c68 <serialEventRun+0x30>)
   b5c3c:	b143      	cbz	r3, b5c50 <serialEventRun+0x18>
   b5c3e:	f7ff ff93 	bl	b5b68 <_Z16_fetch_usbserialv>
   b5c42:	6803      	ldr	r3, [r0, #0]
   b5c44:	691b      	ldr	r3, [r3, #16]
   b5c46:	4798      	blx	r3
   b5c48:	2800      	cmp	r0, #0
   b5c4a:	dd01      	ble.n	b5c50 <serialEventRun+0x18>
        serialEvent();
   b5c4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5c50:	4b06      	ldr	r3, [pc, #24]	; (b5c6c <serialEventRun+0x34>)
   b5c52:	b143      	cbz	r3, b5c66 <serialEventRun+0x2e>
   b5c54:	f000 f95c 	bl	b5f10 <_Z22__fetch_global_Serial1v>
   b5c58:	6803      	ldr	r3, [r0, #0]
   b5c5a:	691b      	ldr	r3, [r3, #16]
   b5c5c:	4798      	blx	r3
   b5c5e:	2800      	cmp	r0, #0
   b5c60:	dd01      	ble.n	b5c66 <serialEventRun+0x2e>
        serialEvent1();
   b5c62:	f3af 8000 	nop.w
}
   b5c66:	bd08      	pop	{r3, pc}
	...

000b5c70 <_post_loop>:
{
   b5c70:	b508      	push	{r3, lr}
	serialEventRun();
   b5c72:	f7ff ffe1 	bl	b5c38 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5c76:	f7fe fe31 	bl	b48dc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5c7a:	4b01      	ldr	r3, [pc, #4]	; (b5c80 <_post_loop+0x10>)
   b5c7c:	6018      	str	r0, [r3, #0]
}
   b5c7e:	bd08      	pop	{r3, pc}
   b5c80:	2003e728 	.word	0x2003e728

000b5c84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c84:	4805      	ldr	r0, [pc, #20]	; (b5c9c <_Z33system_initialize_user_backup_ramv+0x18>)
   b5c86:	4a06      	ldr	r2, [pc, #24]	; (b5ca0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5c88:	4906      	ldr	r1, [pc, #24]	; (b5ca4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5c8a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5c8c:	1a12      	subs	r2, r2, r0
   b5c8e:	f000 f96e 	bl	b5f6e <memcpy>
    __backup_sram_signature = signature;
   b5c92:	4b05      	ldr	r3, [pc, #20]	; (b5ca8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5c94:	4a05      	ldr	r2, [pc, #20]	; (b5cac <_Z33system_initialize_user_backup_ramv+0x28>)
   b5c96:	601a      	str	r2, [r3, #0]
}
   b5c98:	bd08      	pop	{r3, pc}
   b5c9a:	bf00      	nop
   b5c9c:	2003f400 	.word	0x2003f400
   b5ca0:	2003f404 	.word	0x2003f404
   b5ca4:	000b64c4 	.word	0x000b64c4
   b5ca8:	2003f400 	.word	0x2003f400
   b5cac:	9a271c1e 	.word	0x9a271c1e

000b5cb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5cb0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5cb2:	2300      	movs	r3, #0
   b5cb4:	9300      	str	r3, [sp, #0]
   b5cb6:	461a      	mov	r2, r3
   b5cb8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5cbc:	f7fe ff58 	bl	b4b70 <system_ctrl_set_result>
}
   b5cc0:	b003      	add	sp, #12
   b5cc2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5cc8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5cc8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5cca:	8843      	ldrh	r3, [r0, #2]
   b5ccc:	2b0a      	cmp	r3, #10
   b5cce:	d008      	beq.n	b5ce2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5cd0:	2b50      	cmp	r3, #80	; 0x50
   b5cd2:	d10b      	bne.n	b5cec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5cd4:	4b09      	ldr	r3, [pc, #36]	; (b5cfc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5cd6:	681b      	ldr	r3, [r3, #0]
   b5cd8:	b14b      	cbz	r3, b5cee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5cda:	b003      	add	sp, #12
   b5cdc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5ce0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5ce2:	f7ff ffe5 	bl	b5cb0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5ce6:	b003      	add	sp, #12
   b5ce8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5cec:	2300      	movs	r3, #0
   b5cee:	9300      	str	r3, [sp, #0]
   b5cf0:	461a      	mov	r2, r3
   b5cf2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5cf6:	f7fe ff3b 	bl	b4b70 <system_ctrl_set_result>
}
   b5cfa:	e7f4      	b.n	b5ce6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5cfc:	2003e724 	.word	0x2003e724

000b5d00 <module_user_init_hook>:
{
   b5d00:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5d02:	4812      	ldr	r0, [pc, #72]	; (b5d4c <module_user_init_hook+0x4c>)
   b5d04:	2100      	movs	r1, #0
   b5d06:	f7fe ffe5 	bl	b4cd4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5d0a:	4b11      	ldr	r3, [pc, #68]	; (b5d50 <module_user_init_hook+0x50>)
   b5d0c:	681a      	ldr	r2, [r3, #0]
   b5d0e:	4b11      	ldr	r3, [pc, #68]	; (b5d54 <module_user_init_hook+0x54>)
   b5d10:	429a      	cmp	r2, r3
   b5d12:	4b11      	ldr	r3, [pc, #68]	; (b5d58 <module_user_init_hook+0x58>)
   b5d14:	bf0c      	ite	eq
   b5d16:	2201      	moveq	r2, #1
   b5d18:	2200      	movne	r2, #0
   b5d1a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5d1c:	d001      	beq.n	b5d22 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5d1e:	f7ff ffb1 	bl	b5c84 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5d22:	f7fe fdd3 	bl	b48cc <HAL_RNG_GetRandomNumber>
   b5d26:	4604      	mov	r4, r0
    srand(seed);
   b5d28:	f000 f938 	bl	b5f9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5d2c:	4b0b      	ldr	r3, [pc, #44]	; (b5d5c <module_user_init_hook+0x5c>)
   b5d2e:	b113      	cbz	r3, b5d36 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5d30:	4620      	mov	r0, r4
   b5d32:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5d36:	2100      	movs	r1, #0
   b5d38:	4808      	ldr	r0, [pc, #32]	; (b5d5c <module_user_init_hook+0x5c>)
   b5d3a:	f7fe ff33 	bl	b4ba4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5d42:	4807      	ldr	r0, [pc, #28]	; (b5d60 <module_user_init_hook+0x60>)
   b5d44:	2100      	movs	r1, #0
   b5d46:	f7fe bf09 	b.w	b4b5c <system_ctrl_set_app_request_handler>
   b5d4a:	bf00      	nop
   b5d4c:	000b5c2d 	.word	0x000b5c2d
   b5d50:	2003f400 	.word	0x2003f400
   b5d54:	9a271c1e 	.word	0x9a271c1e
   b5d58:	2003e720 	.word	0x2003e720
   b5d5c:	00000000 	.word	0x00000000
   b5d60:	000b5cc9 	.word	0x000b5cc9

000b5d64 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5d64:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b5d66:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5d68:	d902      	bls.n	b5d70 <pinAvailable+0xc>
    return false;
   b5d6a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5d6c:	b002      	add	sp, #8
   b5d6e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5d70:	f1a0 030b 	sub.w	r3, r0, #11
   b5d74:	2b02      	cmp	r3, #2
   b5d76:	d81a      	bhi.n	b5dae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5d78:	4c17      	ldr	r4, [pc, #92]	; (b5dd8 <pinAvailable+0x74>)
   b5d7a:	7821      	ldrb	r1, [r4, #0]
   b5d7c:	f3bf 8f5b 	dmb	ish
   b5d80:	f011 0101 	ands.w	r1, r1, #1
   b5d84:	d10b      	bne.n	b5d9e <pinAvailable+0x3a>
   b5d86:	4620      	mov	r0, r4
   b5d88:	9101      	str	r1, [sp, #4]
   b5d8a:	f7fe f99a 	bl	b40c2 <__cxa_guard_acquire>
   b5d8e:	9901      	ldr	r1, [sp, #4]
   b5d90:	b128      	cbz	r0, b5d9e <pinAvailable+0x3a>
   b5d92:	4812      	ldr	r0, [pc, #72]	; (b5ddc <pinAvailable+0x78>)
   b5d94:	f7ff fd28 	bl	b57e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5d98:	4620      	mov	r0, r4
   b5d9a:	f7fe f997 	bl	b40cc <__cxa_guard_release>
   b5d9e:	4b0f      	ldr	r3, [pc, #60]	; (b5ddc <pinAvailable+0x78>)
   b5da0:	7818      	ldrb	r0, [r3, #0]
   b5da2:	f7fe fe3b 	bl	b4a1c <hal_spi_is_enabled>
   b5da6:	2800      	cmp	r0, #0
   b5da8:	d1df      	bne.n	b5d6a <pinAvailable+0x6>
  return true; // 'pin' is available
   b5daa:	2001      	movs	r0, #1
   b5dac:	e7de      	b.n	b5d6c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5dae:	2801      	cmp	r0, #1
   b5db0:	d809      	bhi.n	b5dc6 <pinAvailable+0x62>
   b5db2:	f000 f86d 	bl	b5e90 <_Z19__fetch_global_Wirev>
   b5db6:	2100      	movs	r1, #0
   b5db8:	7c00      	ldrb	r0, [r0, #16]
   b5dba:	f7fe fdf7 	bl	b49ac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5dbe:	f080 0001 	eor.w	r0, r0, #1
   b5dc2:	b2c0      	uxtb	r0, r0
   b5dc4:	e7d2      	b.n	b5d6c <pinAvailable+0x8>
   b5dc6:	3809      	subs	r0, #9
   b5dc8:	2801      	cmp	r0, #1
   b5dca:	d8ee      	bhi.n	b5daa <pinAvailable+0x46>
   b5dcc:	f000 f8a0 	bl	b5f10 <_Z22__fetch_global_Serial1v>
   b5dd0:	7c00      	ldrb	r0, [r0, #16]
   b5dd2:	f7fe fe53 	bl	b4a7c <hal_usart_is_enabled>
   b5dd6:	e7f2      	b.n	b5dbe <pinAvailable+0x5a>
   b5dd8:	2003e690 	.word	0x2003e690
   b5ddc:	2003e694 	.word	0x2003e694

000b5de0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5de0:	2825      	cmp	r0, #37	; 0x25
{
   b5de2:	b538      	push	{r3, r4, r5, lr}
   b5de4:	4604      	mov	r4, r0
   b5de6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5de8:	d80a      	bhi.n	b5e00 <pinMode+0x20>
   b5dea:	29ff      	cmp	r1, #255	; 0xff
   b5dec:	d008      	beq.n	b5e00 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5dee:	f7ff ffb9 	bl	b5d64 <pinAvailable>
   b5df2:	b128      	cbz	r0, b5e00 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5df4:	4629      	mov	r1, r5
   b5df6:	4620      	mov	r0, r4
}
   b5df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5dfc:	f7fe bd76 	b.w	b48ec <hal_gpio_mode>
}
   b5e00:	bd38      	pop	{r3, r4, r5, pc}

000b5e02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5e02:	b538      	push	{r3, r4, r5, lr}
   b5e04:	4604      	mov	r4, r0
   b5e06:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5e08:	f7fe fd78 	bl	b48fc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5e0c:	28ff      	cmp	r0, #255	; 0xff
   b5e0e:	d010      	beq.n	b5e32 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5e10:	2806      	cmp	r0, #6
   b5e12:	d804      	bhi.n	b5e1e <digitalWrite+0x1c>
   b5e14:	234d      	movs	r3, #77	; 0x4d
   b5e16:	fa23 f000 	lsr.w	r0, r3, r0
   b5e1a:	07c3      	lsls	r3, r0, #31
   b5e1c:	d409      	bmi.n	b5e32 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5e1e:	4620      	mov	r0, r4
   b5e20:	f7ff ffa0 	bl	b5d64 <pinAvailable>
   b5e24:	b128      	cbz	r0, b5e32 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5e26:	4629      	mov	r1, r5
   b5e28:	4620      	mov	r0, r4
}
   b5e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b5e2e:	f7fe bd6d 	b.w	b490c <hal_gpio_write>
}
   b5e32:	bd38      	pop	{r3, r4, r5, pc}

000b5e34 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b5e34:	b510      	push	{r4, lr}
   b5e36:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5e38:	f7fe fd60 	bl	b48fc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5e3c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5e3e:	b2db      	uxtb	r3, r3
   b5e40:	2b01      	cmp	r3, #1
   b5e42:	d908      	bls.n	b5e56 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5e44:	4620      	mov	r0, r4
   b5e46:	f7ff ff8d 	bl	b5d64 <pinAvailable>
   b5e4a:	b120      	cbz	r0, b5e56 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b5e4c:	4620      	mov	r0, r4
}
   b5e4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b5e52:	f7fe bd63 	b.w	b491c <hal_gpio_read>
}
   b5e56:	2000      	movs	r0, #0
   b5e58:	bd10      	pop	{r4, pc}

000b5e5a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e5a:	4770      	bx	lr

000b5e5c <_Z17acquireWireBufferv>:
{
   b5e5c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5e5e:	4b0a      	ldr	r3, [pc, #40]	; (b5e88 <_Z17acquireWireBufferv+0x2c>)
   b5e60:	6003      	str	r3, [r0, #0]
   b5e62:	2301      	movs	r3, #1
{
   b5e64:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5e66:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5e68:	4908      	ldr	r1, [pc, #32]	; (b5e8c <_Z17acquireWireBufferv+0x30>)
   b5e6a:	2020      	movs	r0, #32
   b5e6c:	f000 f874 	bl	b5f58 <_ZnajRKSt9nothrow_t>
	};
   b5e70:	2520      	movs	r5, #32
   b5e72:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5e74:	4905      	ldr	r1, [pc, #20]	; (b5e8c <_Z17acquireWireBufferv+0x30>)
	};
   b5e76:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5e78:	4628      	mov	r0, r5
   b5e7a:	f000 f86d 	bl	b5f58 <_ZnajRKSt9nothrow_t>
	};
   b5e7e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5e82:	4620      	mov	r0, r4
   b5e84:	bd38      	pop	{r3, r4, r5, pc}
   b5e86:	bf00      	nop
   b5e88:	00010018 	.word	0x00010018
   b5e8c:	000b639c 	.word	0x000b639c

000b5e90 <_Z19__fetch_global_Wirev>:
{
   b5e90:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5e92:	4d0e      	ldr	r5, [pc, #56]	; (b5ecc <_Z19__fetch_global_Wirev+0x3c>)
   b5e94:	7829      	ldrb	r1, [r5, #0]
   b5e96:	f3bf 8f5b 	dmb	ish
   b5e9a:	f011 0401 	ands.w	r4, r1, #1
{
   b5e9e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ea0:	d111      	bne.n	b5ec6 <_Z19__fetch_global_Wirev+0x36>
   b5ea2:	4628      	mov	r0, r5
   b5ea4:	f7fe f90d 	bl	b40c2 <__cxa_guard_acquire>
   b5ea8:	b168      	cbz	r0, b5ec6 <_Z19__fetch_global_Wirev+0x36>
   b5eaa:	4668      	mov	r0, sp
   b5eac:	f7ff ffd6 	bl	b5e5c <_Z17acquireWireBufferv>
   b5eb0:	466a      	mov	r2, sp
   b5eb2:	4621      	mov	r1, r4
   b5eb4:	4806      	ldr	r0, [pc, #24]	; (b5ed0 <_Z19__fetch_global_Wirev+0x40>)
   b5eb6:	f7ff fa9d 	bl	b53f4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5eba:	4628      	mov	r0, r5
   b5ebc:	f7fe f906 	bl	b40cc <__cxa_guard_release>
   b5ec0:	4804      	ldr	r0, [pc, #16]	; (b5ed4 <_Z19__fetch_global_Wirev+0x44>)
   b5ec2:	f000 f84e 	bl	b5f62 <atexit>
	return wire;
}
   b5ec6:	4802      	ldr	r0, [pc, #8]	; (b5ed0 <_Z19__fetch_global_Wirev+0x40>)
   b5ec8:	b007      	add	sp, #28
   b5eca:	bd30      	pop	{r4, r5, pc}
   b5ecc:	2003e72c 	.word	0x2003e72c
   b5ed0:	2003e730 	.word	0x2003e730
   b5ed4:	000b5e5b 	.word	0x000b5e5b

000b5ed8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5ed8:	4770      	bx	lr
	...

000b5edc <_Z20acquireSerial1Bufferv>:
{
   b5edc:	b538      	push	{r3, r4, r5, lr}
   b5ede:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5ee0:	2514      	movs	r5, #20
   b5ee2:	462a      	mov	r2, r5
   b5ee4:	2100      	movs	r1, #0
   b5ee6:	f000 f850 	bl	b5f8a <memset>
   b5eea:	8025      	strh	r5, [r4, #0]
   b5eec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5eee:	4907      	ldr	r1, [pc, #28]	; (b5f0c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5ef0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ef2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5ef4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5ef6:	f000 f82f 	bl	b5f58 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5efa:	4904      	ldr	r1, [pc, #16]	; (b5f0c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5efc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5efe:	4628      	mov	r0, r5
   b5f00:	f000 f82a 	bl	b5f58 <_ZnajRKSt9nothrow_t>
    };
   b5f04:	60e0      	str	r0, [r4, #12]
}
   b5f06:	4620      	mov	r0, r4
   b5f08:	bd38      	pop	{r3, r4, r5, pc}
   b5f0a:	bf00      	nop
   b5f0c:	000b639c 	.word	0x000b639c

000b5f10 <_Z22__fetch_global_Serial1v>:
{
   b5f10:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f12:	4d0e      	ldr	r5, [pc, #56]	; (b5f4c <_Z22__fetch_global_Serial1v+0x3c>)
   b5f14:	7829      	ldrb	r1, [r5, #0]
   b5f16:	f3bf 8f5b 	dmb	ish
   b5f1a:	f011 0401 	ands.w	r4, r1, #1
{
   b5f1e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f20:	d111      	bne.n	b5f46 <_Z22__fetch_global_Serial1v+0x36>
   b5f22:	4628      	mov	r0, r5
   b5f24:	f7fe f8cd 	bl	b40c2 <__cxa_guard_acquire>
   b5f28:	b168      	cbz	r0, b5f46 <_Z22__fetch_global_Serial1v+0x36>
   b5f2a:	a801      	add	r0, sp, #4
   b5f2c:	f7ff ffd6 	bl	b5edc <_Z20acquireSerial1Bufferv>
   b5f30:	aa01      	add	r2, sp, #4
   b5f32:	4621      	mov	r1, r4
   b5f34:	4806      	ldr	r0, [pc, #24]	; (b5f50 <_Z22__fetch_global_Serial1v+0x40>)
   b5f36:	f7ff fda5 	bl	b5a84 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5f3a:	4628      	mov	r0, r5
   b5f3c:	f7fe f8c6 	bl	b40cc <__cxa_guard_release>
   b5f40:	4804      	ldr	r0, [pc, #16]	; (b5f54 <_Z22__fetch_global_Serial1v+0x44>)
   b5f42:	f000 f80e 	bl	b5f62 <atexit>
    return serial1;
}
   b5f46:	4802      	ldr	r0, [pc, #8]	; (b5f50 <_Z22__fetch_global_Serial1v+0x40>)
   b5f48:	b007      	add	sp, #28
   b5f4a:	bd30      	pop	{r4, r5, pc}
   b5f4c:	2003e744 	.word	0x2003e744
   b5f50:	2003e748 	.word	0x2003e748
   b5f54:	000b5ed9 	.word	0x000b5ed9

000b5f58 <_ZnajRKSt9nothrow_t>:
   b5f58:	f7fe b8af 	b.w	b40ba <_Znaj>

000b5f5c <_ZSt25__throw_bad_function_callv>:
   b5f5c:	b508      	push	{r3, lr}
   b5f5e:	f7fe fea1 	bl	b4ca4 <abort>

000b5f62 <atexit>:
   b5f62:	2300      	movs	r3, #0
   b5f64:	4601      	mov	r1, r0
   b5f66:	461a      	mov	r2, r3
   b5f68:	4618      	mov	r0, r3
   b5f6a:	f000 b87f 	b.w	b606c <__register_exitproc>

000b5f6e <memcpy>:
   b5f6e:	440a      	add	r2, r1
   b5f70:	4291      	cmp	r1, r2
   b5f72:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5f76:	d100      	bne.n	b5f7a <memcpy+0xc>
   b5f78:	4770      	bx	lr
   b5f7a:	b510      	push	{r4, lr}
   b5f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5f80:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5f84:	4291      	cmp	r1, r2
   b5f86:	d1f9      	bne.n	b5f7c <memcpy+0xe>
   b5f88:	bd10      	pop	{r4, pc}

000b5f8a <memset>:
   b5f8a:	4402      	add	r2, r0
   b5f8c:	4603      	mov	r3, r0
   b5f8e:	4293      	cmp	r3, r2
   b5f90:	d100      	bne.n	b5f94 <memset+0xa>
   b5f92:	4770      	bx	lr
   b5f94:	f803 1b01 	strb.w	r1, [r3], #1
   b5f98:	e7f9      	b.n	b5f8e <memset+0x4>
	...

000b5f9c <srand>:
   b5f9c:	b538      	push	{r3, r4, r5, lr}
   b5f9e:	4b10      	ldr	r3, [pc, #64]	; (b5fe0 <srand+0x44>)
   b5fa0:	681d      	ldr	r5, [r3, #0]
   b5fa2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5fa4:	4604      	mov	r4, r0
   b5fa6:	b9b3      	cbnz	r3, b5fd6 <srand+0x3a>
   b5fa8:	2018      	movs	r0, #24
   b5faa:	f7fe fe63 	bl	b4c74 <malloc>
   b5fae:	4602      	mov	r2, r0
   b5fb0:	63a8      	str	r0, [r5, #56]	; 0x38
   b5fb2:	b920      	cbnz	r0, b5fbe <srand+0x22>
   b5fb4:	4b0b      	ldr	r3, [pc, #44]	; (b5fe4 <srand+0x48>)
   b5fb6:	480c      	ldr	r0, [pc, #48]	; (b5fe8 <srand+0x4c>)
   b5fb8:	2142      	movs	r1, #66	; 0x42
   b5fba:	f7fe fe83 	bl	b4cc4 <__assert_func>
   b5fbe:	490b      	ldr	r1, [pc, #44]	; (b5fec <srand+0x50>)
   b5fc0:	4b0b      	ldr	r3, [pc, #44]	; (b5ff0 <srand+0x54>)
   b5fc2:	e9c0 1300 	strd	r1, r3, [r0]
   b5fc6:	4b0b      	ldr	r3, [pc, #44]	; (b5ff4 <srand+0x58>)
   b5fc8:	6083      	str	r3, [r0, #8]
   b5fca:	230b      	movs	r3, #11
   b5fcc:	8183      	strh	r3, [r0, #12]
   b5fce:	2100      	movs	r1, #0
   b5fd0:	2001      	movs	r0, #1
   b5fd2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5fd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5fd8:	2200      	movs	r2, #0
   b5fda:	611c      	str	r4, [r3, #16]
   b5fdc:	615a      	str	r2, [r3, #20]
   b5fde:	bd38      	pop	{r3, r4, r5, pc}
   b5fe0:	2003e428 	.word	0x2003e428
   b5fe4:	000b639d 	.word	0x000b639d
   b5fe8:	000b63b4 	.word	0x000b63b4
   b5fec:	abcd330e 	.word	0xabcd330e
   b5ff0:	e66d1234 	.word	0xe66d1234
   b5ff4:	0005deec 	.word	0x0005deec

000b5ff8 <strcpy>:
   b5ff8:	4603      	mov	r3, r0
   b5ffa:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5ffe:	f803 2b01 	strb.w	r2, [r3], #1
   b6002:	2a00      	cmp	r2, #0
   b6004:	d1f9      	bne.n	b5ffa <strcpy+0x2>
   b6006:	4770      	bx	lr

000b6008 <strdup>:
   b6008:	4b02      	ldr	r3, [pc, #8]	; (b6014 <strdup+0xc>)
   b600a:	4601      	mov	r1, r0
   b600c:	6818      	ldr	r0, [r3, #0]
   b600e:	f000 b803 	b.w	b6018 <_strdup_r>
   b6012:	bf00      	nop
   b6014:	2003e428 	.word	0x2003e428

000b6018 <_strdup_r>:
   b6018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b601a:	4604      	mov	r4, r0
   b601c:	4608      	mov	r0, r1
   b601e:	460d      	mov	r5, r1
   b6020:	f7fe f806 	bl	b4030 <strlen>
   b6024:	1c42      	adds	r2, r0, #1
   b6026:	4611      	mov	r1, r2
   b6028:	4620      	mov	r0, r4
   b602a:	9201      	str	r2, [sp, #4]
   b602c:	f7fe fe42 	bl	b4cb4 <_malloc_r>
   b6030:	4604      	mov	r4, r0
   b6032:	b118      	cbz	r0, b603c <_strdup_r+0x24>
   b6034:	9a01      	ldr	r2, [sp, #4]
   b6036:	4629      	mov	r1, r5
   b6038:	f7ff ff99 	bl	b5f6e <memcpy>
   b603c:	4620      	mov	r0, r4
   b603e:	b003      	add	sp, #12
   b6040:	bd30      	pop	{r4, r5, pc}

000b6042 <strncmp>:
   b6042:	b510      	push	{r4, lr}
   b6044:	b17a      	cbz	r2, b6066 <strncmp+0x24>
   b6046:	4603      	mov	r3, r0
   b6048:	3901      	subs	r1, #1
   b604a:	1884      	adds	r4, r0, r2
   b604c:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6050:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6054:	4290      	cmp	r0, r2
   b6056:	d101      	bne.n	b605c <strncmp+0x1a>
   b6058:	42a3      	cmp	r3, r4
   b605a:	d101      	bne.n	b6060 <strncmp+0x1e>
   b605c:	1a80      	subs	r0, r0, r2
   b605e:	bd10      	pop	{r4, pc}
   b6060:	2800      	cmp	r0, #0
   b6062:	d1f3      	bne.n	b604c <strncmp+0xa>
   b6064:	e7fa      	b.n	b605c <strncmp+0x1a>
   b6066:	4610      	mov	r0, r2
   b6068:	e7f9      	b.n	b605e <strncmp+0x1c>
	...

000b606c <__register_exitproc>:
   b606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6070:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b612c <__register_exitproc+0xc0>
   b6074:	4606      	mov	r6, r0
   b6076:	f8d8 0000 	ldr.w	r0, [r8]
   b607a:	461f      	mov	r7, r3
   b607c:	460d      	mov	r5, r1
   b607e:	4691      	mov	r9, r2
   b6080:	f000 f856 	bl	b6130 <__retarget_lock_acquire_recursive>
   b6084:	4b25      	ldr	r3, [pc, #148]	; (b611c <__register_exitproc+0xb0>)
   b6086:	681c      	ldr	r4, [r3, #0]
   b6088:	b934      	cbnz	r4, b6098 <__register_exitproc+0x2c>
   b608a:	4c25      	ldr	r4, [pc, #148]	; (b6120 <__register_exitproc+0xb4>)
   b608c:	601c      	str	r4, [r3, #0]
   b608e:	4b25      	ldr	r3, [pc, #148]	; (b6124 <__register_exitproc+0xb8>)
   b6090:	b113      	cbz	r3, b6098 <__register_exitproc+0x2c>
   b6092:	681b      	ldr	r3, [r3, #0]
   b6094:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6098:	6863      	ldr	r3, [r4, #4]
   b609a:	2b1f      	cmp	r3, #31
   b609c:	dd07      	ble.n	b60ae <__register_exitproc+0x42>
   b609e:	f8d8 0000 	ldr.w	r0, [r8]
   b60a2:	f000 f847 	bl	b6134 <__retarget_lock_release_recursive>
   b60a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b60aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b60ae:	b34e      	cbz	r6, b6104 <__register_exitproc+0x98>
   b60b0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b60b4:	b988      	cbnz	r0, b60da <__register_exitproc+0x6e>
   b60b6:	4b1c      	ldr	r3, [pc, #112]	; (b6128 <__register_exitproc+0xbc>)
   b60b8:	b923      	cbnz	r3, b60c4 <__register_exitproc+0x58>
   b60ba:	f8d8 0000 	ldr.w	r0, [r8]
   b60be:	f000 f838 	bl	b6132 <__retarget_lock_release>
   b60c2:	e7f0      	b.n	b60a6 <__register_exitproc+0x3a>
   b60c4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b60c8:	f7fe fdd4 	bl	b4c74 <malloc>
   b60cc:	2800      	cmp	r0, #0
   b60ce:	d0f4      	beq.n	b60ba <__register_exitproc+0x4e>
   b60d0:	2300      	movs	r3, #0
   b60d2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b60d6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b60da:	6863      	ldr	r3, [r4, #4]
   b60dc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b60e0:	2201      	movs	r2, #1
   b60e2:	409a      	lsls	r2, r3
   b60e4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b60e8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b60ec:	4313      	orrs	r3, r2
   b60ee:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b60f2:	2e02      	cmp	r6, #2
   b60f4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b60f8:	bf02      	ittt	eq
   b60fa:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b60fe:	4313      	orreq	r3, r2
   b6100:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6104:	6863      	ldr	r3, [r4, #4]
   b6106:	f8d8 0000 	ldr.w	r0, [r8]
   b610a:	1c5a      	adds	r2, r3, #1
   b610c:	3302      	adds	r3, #2
   b610e:	6062      	str	r2, [r4, #4]
   b6110:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6114:	f000 f80e 	bl	b6134 <__retarget_lock_release_recursive>
   b6118:	2000      	movs	r0, #0
   b611a:	e7c6      	b.n	b60aa <__register_exitproc+0x3e>
   b611c:	2003e7e8 	.word	0x2003e7e8
   b6120:	2003e75c 	.word	0x2003e75c
   b6124:	00000000 	.word	0x00000000
   b6128:	000b4c75 	.word	0x000b4c75
   b612c:	2003e48c 	.word	0x2003e48c

000b6130 <__retarget_lock_acquire_recursive>:
   b6130:	4770      	bx	lr

000b6132 <__retarget_lock_release>:
   b6132:	4770      	bx	lr

000b6134 <__retarget_lock_release_recursive>:
   b6134:	4770      	bx	lr

000b6136 <link_code_end>:
	...

000b6138 <dynalib_user>:
   b6138:	4041 000b 407d 000b 40a5 000b 40a9 000b     A@..}@...@...@..
   b6148:	0000 0000 4146 4c49 4445 2d20 5020 454c     ....FAILED - PLE
   b6158:	5341 2045 4353 4e41 4120 4147 4e49 0021     ASE SCAN AGAIN!.
   b6168:	4e45 4f4a 2059 4854 2045 5645 4e45 2154     ENJOY THE EVENT!
   b6178:	5500 4449 203a 4200 7a75 657a 2072 666f     .UID: .Buzzer of
   b6188:	0066 6e49 7469 6169 696c 697a 676e 5020     f.Initializing P
   b6198:	354e 3233 5700 6961 6974 676e 6620 726f     N532.Waiting for
   b61a8:	6120 6320 7261 2e64 2e2e 2e2e 002e 0030      a card.......0.
   b61b8:	6177 656b 7520 2070 7265 6f72 2172 6e00     wake up error!.n
   b61c8:	206f 6163 6472 0021 6c66 7361 0065 6572     o card!.flase.re
   b61d8:	6461 6520 7272 726f 0021 6572 6461 7420     ad error!.read t
   b61e8:	6d69 6f65 7475 0021 6e75 6e6b 776f 206e     imeout!.unknown 
   b61f8:	7265 6f72 2172 0000                         error!..

000b6200 <_ZTV17DFRobot_PN532_IIC>:
	...
   b6208:	437f 000b 4717 000b                         .C...G..

000b6210 <_ZTVN5spark13CellularClassE>:
	...
   b6218:	4db7 000b 4dad 000b 4da3 000b 4d59 000b     .M...M...M..YM..
   b6228:	4d97 000b 4d8b 000b 55f1 000b 55f9 000b     .M...M...U...U..
   b6238:	4d7f 000b 4d77 000b 4d6d 000b 4d63 000b     .M..wM..mM..cM..
   b6248:	5629 000b                                   )V..

000b624c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6254:	4df1 000b 4df7 000b 4e35 000b 4e05 000b     .M...M..5N...N..
   b6264:	4df3 000b                                   .M..

000b6268 <_ZTVN5spark13EthernetClassE>:
	...
   b6270:	537f 000b 5375 000b 536b 000b 5361 000b     .S..uS..kS..aS..
   b6280:	5355 000b 5349 000b 55f1 000b 55f9 000b     US..IS...U...U..
   b6290:	533d 000b 5335 000b 532b 000b 5321 000b     =S..5S..+S..!S..
   b62a0:	5629 000b                                   )V..

000b62a4 <_ZTV7TwoWire>:
	...
   b62ac:	539d 000b 53e7 000b 53bf 000b 539f 000b     .S...S...S...S..
   b62bc:	53c7 000b 53cf 000b 53d7 000b 53df 000b     .S...S...S...S..

000b62cc <_ZTV9IPAddress>:
	...
   b62d4:	54c1 000b 54b1 000b 54b3 000b 7061 0070     .T...T...T..app.

000b62e4 <_ZTVN5spark12NetworkClassE>:
	...
   b62ec:	55b1 000b 55bb 000b 55c5 000b 55cf 000b     .U...U...U...U..
   b62fc:	55d9 000b 55e5 000b 55f1 000b 55f9 000b     .U...U...U...U..
   b630c:	5601 000b 560d 000b 5615 000b 561f 000b     .V...V...V...V..
   b631c:	5629 000b 5925 252d 2d6d 6425 2554 3a48     )V..%Y-%m-%dT%H:
   b632c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b633c <_ZTV11USARTSerial>:
	...
   b6344:	5a09 000b 5a75 000b 5a4d 000b 5715 000b     .Z..uZ..MZ...W..
   b6354:	5a1d 000b 5a39 000b 5a2b 000b 5a47 000b     .Z..9Z..+Z..GZ..
   b6364:	5a0b 000b 5a0f 000b                         .Z...Z..

000b636c <_ZTV9USBSerial>:
	...
   b6374:	5ab3 000b 5b1b 000b 5af1 000b 5715 000b     .Z...[...Z...W..
   b6384:	5ae3 000b 5ab5 000b 5ac5 000b 5b15 000b     .Z...Z...Z...[..
   b6394:	5ad5 000b 5aad 000b                         .Z...Z..

000b639c <_ZSt7nothrow>:
   b639c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b63ac:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b63bc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b63cc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b63dc:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b63ec:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b63fc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b640d <link_const_data_end>:
   b640d:	00          	.byte	0x00
	...

000b6410 <link_constructors_location>:
   b6410:	000b42f5 	.word	0x000b42f5
   b6414:	000b4d49 	.word	0x000b4d49
   b6418:	000b4dc1 	.word	0x000b4dc1
   b641c:	000b5389 	.word	0x000b5389
   b6420:	000b55a1 	.word	0x000b55a1
   b6424:	000b5701 	.word	0x000b5701
   b6428:	000b57dd 	.word	0x000b57dd
   b642c:	000b59d1 	.word	0x000b59d1
   b6430:	000b59f5 	.word	0x000b59f5
