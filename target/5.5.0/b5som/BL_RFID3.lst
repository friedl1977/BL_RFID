
/Users/friedlbasson/Desktop/VSC/BL_RFID3/target/5.5.0/b5som/BL_RFID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008ebc  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bced8  000bced8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000009c  2003de44  000bcefc  0000de44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000910  2003dee0  2003dee0  0001dee0  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bcf98  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bcf9c  000bcf9c  0001cf9c  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bcfa2  000bcfa2  0001cfa2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bcfc6  000bcfc6  0001cfc6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00185792  00000000  00000000  0001cfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000192c9  00000000  00000000  001a275c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00047f24  00000000  00000000  001bba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003430  00000000  00000000  00203949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c800  00000000  00000000  00206d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004179d  00000000  00000000  00213579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000529a8  00000000  00000000  00254d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001503bd  00000000  00000000  002a76be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009930  00000000  00000000  003f7a7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__aeabi_d2uiz>:
   b47b8:	004a      	lsls	r2, r1, #1
   b47ba:	d211      	bcs.n	b47e0 <__aeabi_d2uiz+0x28>
   b47bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b47c0:	d211      	bcs.n	b47e6 <__aeabi_d2uiz+0x2e>
   b47c2:	d50d      	bpl.n	b47e0 <__aeabi_d2uiz+0x28>
   b47c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b47c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b47cc:	d40e      	bmi.n	b47ec <__aeabi_d2uiz+0x34>
   b47ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b47d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b47d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b47da:	fa23 f002 	lsr.w	r0, r3, r2
   b47de:	4770      	bx	lr
   b47e0:	f04f 0000 	mov.w	r0, #0
   b47e4:	4770      	bx	lr
   b47e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b47ea:	d102      	bne.n	b47f2 <__aeabi_d2uiz+0x3a>
   b47ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b47f0:	4770      	bx	lr
   b47f2:	f04f 0000 	mov.w	r0, #0
   b47f6:	4770      	bx	lr

000b47f8 <__aeabi_f2lz>:
   b47f8:	ee07 0a90 	vmov	s15, r0
   b47fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4804:	d401      	bmi.n	b480a <__aeabi_f2lz+0x12>
   b4806:	f000 b80b 	b.w	b4820 <__aeabi_f2ulz>
   b480a:	eef1 7a67 	vneg.f32	s15, s15
   b480e:	b508      	push	{r3, lr}
   b4810:	ee17 0a90 	vmov	r0, s15
   b4814:	f000 f804 	bl	b4820 <__aeabi_f2ulz>
   b4818:	4240      	negs	r0, r0
   b481a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b481e:	bd08      	pop	{r3, pc}

000b4820 <__aeabi_f2ulz>:
   b4820:	b5d0      	push	{r4, r6, r7, lr}
   b4822:	f7ff fd5f 	bl	b42e4 <__aeabi_f2d>
   b4826:	4b0c      	ldr	r3, [pc, #48]	; (b4858 <__aeabi_f2ulz+0x38>)
   b4828:	2200      	movs	r2, #0
   b482a:	4606      	mov	r6, r0
   b482c:	460f      	mov	r7, r1
   b482e:	f7ff fdb1 	bl	b4394 <__aeabi_dmul>
   b4832:	f7ff ffc1 	bl	b47b8 <__aeabi_d2uiz>
   b4836:	4604      	mov	r4, r0
   b4838:	f7ff fd32 	bl	b42a0 <__aeabi_ui2d>
   b483c:	4b07      	ldr	r3, [pc, #28]	; (b485c <__aeabi_f2ulz+0x3c>)
   b483e:	2200      	movs	r2, #0
   b4840:	f7ff fda8 	bl	b4394 <__aeabi_dmul>
   b4844:	4602      	mov	r2, r0
   b4846:	460b      	mov	r3, r1
   b4848:	4630      	mov	r0, r6
   b484a:	4639      	mov	r1, r7
   b484c:	f7ff fbea 	bl	b4024 <__aeabi_dsub>
   b4850:	f7ff ffb2 	bl	b47b8 <__aeabi_d2uiz>
   b4854:	4621      	mov	r1, r4
   b4856:	bdd0      	pop	{r4, r6, r7, pc}
   b4858:	3df00000 	.word	0x3df00000
   b485c:	41f00000 	.word	0x41f00000

000b4860 <strcmp>:
   b4860:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4864:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4868:	2a01      	cmp	r2, #1
   b486a:	bf28      	it	cs
   b486c:	429a      	cmpcs	r2, r3
   b486e:	d0f7      	beq.n	b4860 <strcmp>
   b4870:	1ad0      	subs	r0, r2, r3
   b4872:	4770      	bx	lr

000b4874 <strlen>:
   b4874:	4603      	mov	r3, r0
   b4876:	f813 2b01 	ldrb.w	r2, [r3], #1
   b487a:	2a00      	cmp	r2, #0
   b487c:	d1fb      	bne.n	b4876 <strlen+0x2>
   b487e:	1a18      	subs	r0, r3, r0
   b4880:	3801      	subs	r0, #1
   b4882:	4770      	bx	lr

000b4884 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4884:	4809      	ldr	r0, [pc, #36]	; (b48ac <module_user_pre_init+0x28>)
   b4886:	490a      	ldr	r1, [pc, #40]	; (b48b0 <module_user_pre_init+0x2c>)
   b4888:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b488a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b488c:	d005      	beq.n	b489a <module_user_pre_init+0x16>
   b488e:	4a09      	ldr	r2, [pc, #36]	; (b48b4 <module_user_pre_init+0x30>)
   b4890:	4282      	cmp	r2, r0
   b4892:	d002      	beq.n	b489a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4894:	1a12      	subs	r2, r2, r0
   b4896:	f004 fb03 	bl	b8ea0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b489a:	4807      	ldr	r0, [pc, #28]	; (b48b8 <module_user_pre_init+0x34>)
   b489c:	4a07      	ldr	r2, [pc, #28]	; (b48bc <module_user_pre_init+0x38>)
   b489e:	2100      	movs	r1, #0
   b48a0:	1a12      	subs	r2, r2, r0
   b48a2:	f004 fb25 	bl	b8ef0 <memset>
    return &link_global_data_start;
}
   b48a6:	4801      	ldr	r0, [pc, #4]	; (b48ac <module_user_pre_init+0x28>)
   b48a8:	bd08      	pop	{r3, pc}
   b48aa:	bf00      	nop
   b48ac:	2003de44 	.word	0x2003de44
   b48b0:	000bcefc 	.word	0x000bcefc
   b48b4:	2003dee0 	.word	0x2003dee0
   b48b8:	2003dee0 	.word	0x2003dee0
   b48bc:	2003e7f0 	.word	0x2003e7f0

000b48c0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48c0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c2:	4e07      	ldr	r6, [pc, #28]	; (b48e0 <module_user_init+0x20>)
   b48c4:	4c07      	ldr	r4, [pc, #28]	; (b48e4 <module_user_init+0x24>)
    module_user_init_hook();
   b48c6:	f004 f9a5 	bl	b8c14 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48ca:	1ba4      	subs	r4, r4, r6
   b48cc:	08a4      	lsrs	r4, r4, #2
   b48ce:	2500      	movs	r5, #0
   b48d0:	42ac      	cmp	r4, r5
   b48d2:	d100      	bne.n	b48d6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48d4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48d6:	f856 3b04 	ldr.w	r3, [r6], #4
   b48da:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48dc:	3501      	adds	r5, #1
   b48de:	e7f7      	b.n	b48d0 <module_user_init+0x10>
   b48e0:	000bceb4 	.word	0x000bceb4
   b48e4:	000bced8 	.word	0x000bced8

000b48e8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48e8:	f000 ba92 	b.w	b4e10 <setup>

000b48ec <module_user_loop>:
}

void module_user_loop() {
   b48ec:	b508      	push	{r3, lr}
    loop();
   b48ee:	f000 fc6d 	bl	b51cc <loop>
    _post_loop();
}
   b48f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48f6:	f004 b945 	b.w	b8b84 <_post_loop>

000b48fa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b48fa:	f001 bd71 	b.w	b63e0 <malloc>

000b48fe <_Znaj>:
   b48fe:	f001 bd6f 	b.w	b63e0 <malloc>

000b4902 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4902:	f001 bd75 	b.w	b63f0 <free>
	...

000b4908 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4908:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b490a:	4a03      	ldr	r2, [pc, #12]	; (b4918 <__cxa_pure_virtual+0x10>)
   b490c:	4903      	ldr	r1, [pc, #12]	; (b491c <__cxa_pure_virtual+0x14>)
   b490e:	200c      	movs	r0, #12
   b4910:	f001 fc5a 	bl	b61c8 <panic_>
  while (1);
   b4914:	e7fe      	b.n	b4914 <__cxa_pure_virtual+0xc>
   b4916:	bf00      	nop
   b4918:	000b5ec9 	.word	0x000b5ec9
   b491c:	000b92d8 	.word	0x000b92d8

000b4920 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4920:	7800      	ldrb	r0, [r0, #0]
   b4922:	fab0 f080 	clz	r0, r0
   b4926:	0940      	lsrs	r0, r0, #5
   b4928:	4770      	bx	lr

000b492a <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b492a:	2301      	movs	r3, #1
   b492c:	7003      	strb	r3, [r0, #0]
   b492e:	4770      	bx	lr

000b4930 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4930:	4770      	bx	lr
	...

000b4934 <_Z3EPDv.part.0>:
    //Particle.publish("Battery Statistics", msgFG);        // Send messages to Particle Cloud
    Serial.print(msgFG);                                    //DEBUG

}

void EPD() {
   b4934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   Serial.print("Failed to initialize display");
   return;
   }

/* This clears the SRAM of the e-paper display */
  epd.ClearFrame();
   b4938:	f8df 8364 	ldr.w	r8, [pc, #868]	; b4ca0 <_Z3EPDv.part.0+0x36c>
 
  // Print BLACK text
  paint.Clear(UNCOLORED);
  paint.SetRotate(2);
  
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b493c:	f8df 9364 	ldr.w	r9, [pc, #868]	; b4ca4 <_Z3EPDv.part.0+0x370>
    paint.DrawStringAt(10, 145, "Start ", &Font20, COLORED);
   b4940:	4dca      	ldr	r5, [pc, #808]	; (b4c6c <_Z3EPDv.part.0+0x338>)
    paint.DrawStringAt(10, 165, "Time", &Font20, COLORED);
   b4942:	4ecb      	ldr	r6, [pc, #812]	; (b4c70 <_Z3EPDv.part.0+0x33c>)
    paint.DrawStringAt(115, 165, String(ApiData1.startTime), &Font20, COLORED);
   b4944:	f8df a360 	ldr.w	sl, [pc, #864]	; b4ca8 <_Z3EPDv.part.0+0x374>
void EPD() {
   b4948:	f5ad 4d43 	sub.w	sp, sp, #49920	; 0xc300
   b494c:	b0a4      	sub	sp, #144	; 0x90
  epd.ClearFrame();
   b494e:	4640      	mov	r0, r8
   b4950:	f000 fef5 	bl	b573e <_ZN3Epd10ClearFrameEv>
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4954:	f44f 7394 	mov.w	r3, #296	; 0x128
   b4958:	f44f 72c8 	mov.w	r2, #400	; 0x190
   b495c:	a910      	add	r1, sp, #64	; 0x40
   b495e:	a804      	add	r0, sp, #16
   b4960:	f000 ffcf 	bl	b5902 <_ZN5PaintC1EPhii>
  paint.Clear(UNCOLORED);
   b4964:	a804      	add	r0, sp, #16
   b4966:	2101      	movs	r1, #1
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b4968:	2400      	movs	r4, #0
  paint.Clear(UNCOLORED);
   b496a:	f000 fffb 	bl	b5964 <_ZN5Paint5ClearEi>
  paint.SetRotate(2);
   b496e:	a804      	add	r0, sp, #16
   b4970:	2102      	movs	r1, #2
   b4972:	f001 f812 	bl	b599a <_ZN5Paint9SetRotateEi>
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b4976:	a804      	add	r0, sp, #16
   b4978:	4bbe      	ldr	r3, [pc, #760]	; (b4c74 <_Z3EPDv.part.0+0x340>)
   b497a:	9401      	str	r4, [sp, #4]
   b497c:	f8cd 9000 	str.w	r9, [sp]
   b4980:	2205      	movs	r2, #5
   b4982:	210a      	movs	r1, #10
   b4984:	f001 f888 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(10, 145, "Start ", &Font20, COLORED);
   b4988:	9500      	str	r5, [sp, #0]
   b498a:	a804      	add	r0, sp, #16
   b498c:	4bba      	ldr	r3, [pc, #744]	; (b4c78 <_Z3EPDv.part.0+0x344>)
   b498e:	9401      	str	r4, [sp, #4]
   b4990:	2291      	movs	r2, #145	; 0x91
   b4992:	210a      	movs	r1, #10
   b4994:	f001 f880 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(10, 165, "Time", &Font20, COLORED);
   b4998:	4633      	mov	r3, r6
   b499a:	e9cd 5400 	strd	r5, r4, [sp]
   b499e:	22a5      	movs	r2, #165	; 0xa5
   b49a0:	a804      	add	r0, sp, #16
   b49a2:	210a      	movs	r1, #10
   b49a4:	f001 f878 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(115, 165, String(ApiData1.startTime), &Font20, COLORED);
   b49a8:	f10a 0150 	add.w	r1, sl, #80	; 0x50
   b49ac:	a80c      	add	r0, sp, #48	; 0x30
   b49ae:	f003 fe5a 	bl	b8666 <_ZN6StringC1ERKS_>
   b49b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b49b4:	e9cd 5400 	strd	r5, r4, [sp]
   b49b8:	22a5      	movs	r2, #165	; 0xa5
   b49ba:	2173      	movs	r1, #115	; 0x73
   b49bc:	a804      	add	r0, sp, #16
   b49be:	f001 f86b 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b49c2:	a80c      	add	r0, sp, #48	; 0x30
   b49c4:	f003 fdb8 	bl	b8538 <_ZN6StringD1Ev>
    paint.DrawStringAt(205, 145, "End   ", &Font20, COLORED);
   b49c8:	e9cd 5400 	strd	r5, r4, [sp]
   b49cc:	a804      	add	r0, sp, #16
   b49ce:	4bab      	ldr	r3, [pc, #684]	; (b4c7c <_Z3EPDv.part.0+0x348>)
   b49d0:	2291      	movs	r2, #145	; 0x91
   b49d2:	21cd      	movs	r1, #205	; 0xcd
   b49d4:	f001 f860 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(205, 165, "Time", &Font20, COLORED);
   b49d8:	4633      	mov	r3, r6
   b49da:	e9cd 5400 	strd	r5, r4, [sp]
   b49de:	22a5      	movs	r2, #165	; 0xa5
   b49e0:	a804      	add	r0, sp, #16
   b49e2:	21cd      	movs	r1, #205	; 0xcd
   b49e4:	f001 f858 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(310, 165, String(ApiData1.endTime), &Font20, COLORED);
   b49e8:	f10a 0160 	add.w	r1, sl, #96	; 0x60
   b49ec:	a80c      	add	r0, sp, #48	; 0x30
   b49ee:	f003 fe3a 	bl	b8666 <_ZN6StringC1ERKS_>
   b49f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b49f4:	e9cd 5400 	strd	r5, r4, [sp]
   b49f8:	22a5      	movs	r2, #165	; 0xa5
   b49fa:	f44f 719b 	mov.w	r1, #310	; 0x136
   b49fe:	a804      	add	r0, sp, #16
   b4a00:	f001 f84a 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  
    paint.DrawFilledRectangle(10, 35, 100, 120, COLORED);
   b4a04:	2678      	movs	r6, #120	; 0x78
    paint.DrawStringAt(310, 165, String(ApiData1.endTime), &Font20, COLORED);
   b4a06:	a80c      	add	r0, sp, #48	; 0x30
   b4a08:	f003 fd96 	bl	b8538 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(10, 35, 100, 120, COLORED);
   b4a0c:	9600      	str	r6, [sp, #0]
   b4a0e:	a804      	add	r0, sp, #16
   b4a10:	9401      	str	r4, [sp, #4]
   b4a12:	2364      	movs	r3, #100	; 0x64
   b4a14:	2223      	movs	r2, #35	; 0x23
   b4a16:	210a      	movs	r1, #10
   b4a18:	f001 f8b2 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 27, 110, 27, COLORED);
   b4a1c:	221b      	movs	r2, #27
   b4a1e:	9200      	str	r2, [sp, #0]
   b4a20:	a804      	add	r0, sp, #16
   b4a22:	9401      	str	r4, [sp, #4]
   b4a24:	236e      	movs	r3, #110	; 0x6e
   b4a26:	210a      	movs	r1, #10
   b4a28:	f001 f8aa 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(110, 27, 110, 120, COLORED);
   b4a2c:	236e      	movs	r3, #110	; 0x6e
   b4a2e:	e9cd 6400 	strd	r6, r4, [sp]
   b4a32:	4619      	mov	r1, r3
   b4a34:	a804      	add	r0, sp, #16
   b4a36:	221b      	movs	r2, #27
   b4a38:	f001 f8a2 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(110, 120, 395, 120, COLORED);

    paint.DrawFilledRectangle(10, 140, 190, 140, COLORED);
   b4a3c:	278c      	movs	r7, #140	; 0x8c
    paint.DrawFilledRectangle(110, 120, 395, 120, COLORED);
   b4a3e:	e9cd 6400 	strd	r6, r4, [sp]
   b4a42:	4632      	mov	r2, r6
   b4a44:	a804      	add	r0, sp, #16
   b4a46:	f240 138b 	movw	r3, #395	; 0x18b
   b4a4a:	216e      	movs	r1, #110	; 0x6e
   b4a4c:	f001 f898 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 185, 190, 185, COLORED);
   b4a50:	26b9      	movs	r6, #185	; 0xb9
    paint.DrawFilledRectangle(10, 140, 190, 140, COLORED);
   b4a52:	9700      	str	r7, [sp, #0]
   b4a54:	463a      	mov	r2, r7
   b4a56:	a804      	add	r0, sp, #16
   b4a58:	9401      	str	r4, [sp, #4]
   b4a5a:	23be      	movs	r3, #190	; 0xbe
   b4a5c:	210a      	movs	r1, #10
   b4a5e:	f001 f88f 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 185, 190, 185, COLORED);
   b4a62:	9600      	str	r6, [sp, #0]
   b4a64:	4632      	mov	r2, r6
   b4a66:	a804      	add	r0, sp, #16
   b4a68:	9401      	str	r4, [sp, #4]
   b4a6a:	23be      	movs	r3, #190	; 0xbe
   b4a6c:	210a      	movs	r1, #10
   b4a6e:	f001 f887 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(190, 140, 190, 185, COLORED);
   b4a72:	23be      	movs	r3, #190	; 0xbe
   b4a74:	e9cd 6400 	strd	r6, r4, [sp]
   b4a78:	463a      	mov	r2, r7
   b4a7a:	4619      	mov	r1, r3
   b4a7c:	a804      	add	r0, sp, #16
   b4a7e:	f001 f87f 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 140, 200, 185, COLORED);
   b4a82:	23c8      	movs	r3, #200	; 0xc8
   b4a84:	e9cd 6400 	strd	r6, r4, [sp]
   b4a88:	463a      	mov	r2, r7
   b4a8a:	4619      	mov	r1, r3
   b4a8c:	a804      	add	r0, sp, #16
   b4a8e:	f001 f877 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 185, 390, 185, COLORED);
   b4a92:	e9cd 6400 	strd	r6, r4, [sp]
   b4a96:	4632      	mov	r2, r6
   b4a98:	a804      	add	r0, sp, #16
   b4a9a:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4a9e:	21c8      	movs	r1, #200	; 0xc8
   b4aa0:	f001 f86e 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 140, 390, 140, COLORED);
   b4aa4:	e9cd 7400 	strd	r7, r4, [sp]
   b4aa8:	463a      	mov	r2, r7
   b4aaa:	a804      	add	r0, sp, #16
   b4aac:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4ab0:	21c8      	movs	r1, #200	; 0xc8
   b4ab2:	f001 f865 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>

    paint.DrawFilledRectangle(205, 185, 390, 185, COLORED);
   b4ab6:	e9cd 6400 	strd	r6, r4, [sp]
   b4aba:	4632      	mov	r2, r6
   b4abc:	a804      	add	r0, sp, #16
    paint.DrawRectangle(10, 230, 260, 290, COLORED);
   b4abe:	f44f 7691 	mov.w	r6, #290	; 0x122
    paint.DrawFilledRectangle(205, 185, 390, 185, COLORED);
   b4ac2:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4ac6:	21cd      	movs	r1, #205	; 0xcd
   b4ac8:	f001 f85a 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawRectangle(10, 230, 260, 290, COLORED);
   b4acc:	9600      	str	r6, [sp, #0]
   b4ace:	a804      	add	r0, sp, #16
   b4ad0:	9401      	str	r4, [sp, #4]
   b4ad2:	f44f 7382 	mov.w	r3, #260	; 0x104
   b4ad6:	22e6      	movs	r2, #230	; 0xe6
   b4ad8:	210a      	movs	r1, #10
   b4ada:	f001 f815 	bl	b5b08 <_ZN5Paint13DrawRectangleEiiiii>
    paint.DrawRectangle(280, 200, 390, 290, COLORED);
   b4ade:	e9cd 6400 	strd	r6, r4, [sp]
   b4ae2:	a804      	add	r0, sp, #16
   b4ae4:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4ae8:	22c8      	movs	r2, #200	; 0xc8
   b4aea:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4aee:	f001 f80b 	bl	b5b08 <_ZN5Paint13DrawRectangleEiiiii>
    
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                               // battery background
   b4af2:	23de      	movs	r3, #222	; 0xde
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                        // Battery Title
   b4af4:	4f62      	ldr	r7, [pc, #392]	; (b4c80 <_Z3EPDv.part.0+0x34c>)
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                               // battery background
   b4af6:	9300      	str	r3, [sp, #0]
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                        // Battery Title
   b4af8:	2601      	movs	r6, #1
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                               // battery background
   b4afa:	a804      	add	r0, sp, #16
   b4afc:	9401      	str	r4, [sp, #4]
   b4afe:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4b02:	22c8      	movs	r2, #200	; 0xc8
   b4b04:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4b08:	f001 f83a 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                        // Battery Title
   b4b0c:	a804      	add	r0, sp, #16
   b4b0e:	4b5d      	ldr	r3, [pc, #372]	; (b4c84 <_Z3EPDv.part.0+0x350>)
   b4b10:	9601      	str	r6, [sp, #4]
   b4b12:	9700      	str	r7, [sp, #0]
   b4b14:	22cd      	movs	r2, #205	; 0xcd
   b4b16:	f240 111d 	movw	r1, #285	; 0x11d
   b4b1a:	f000 ffbd 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(320, 227, String(SOC) + "%", &Font16, COLORED);                    // SOC
   b4b1e:	ab08      	add	r3, sp, #32
   b4b20:	9303      	str	r3, [sp, #12]
   b4b22:	4b59      	ldr	r3, [pc, #356]	; (b4c88 <_Z3EPDv.part.0+0x354>)
   b4b24:	9803      	ldr	r0, [sp, #12]
   b4b26:	6819      	ldr	r1, [r3, #0]
   b4b28:	220a      	movs	r2, #10
   b4b2a:	f003 fdb9 	bl	b86a0 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4b2e:	9903      	ldr	r1, [sp, #12]
   b4b30:	a80c      	add	r0, sp, #48	; 0x30
   b4b32:	f003 fd98 	bl	b8666 <_ZN6StringC1ERKS_>
   b4b36:	4955      	ldr	r1, [pc, #340]	; (b4c8c <_Z3EPDv.part.0+0x358>)
   b4b38:	a80c      	add	r0, sp, #48	; 0x30
   b4b3a:	f003 fddb 	bl	b86f4 <_ZplRK15StringSumHelperPKc>
   b4b3e:	e9cd 7400 	strd	r7, r4, [sp]
   b4b42:	22e3      	movs	r2, #227	; 0xe3
   b4b44:	6803      	ldr	r3, [r0, #0]
   b4b46:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b4b4a:	a804      	add	r0, sp, #16
   b4b4c:	f000 ffa4 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
class StringSumHelper : public String
   b4b50:	a80c      	add	r0, sp, #48	; 0x30
   b4b52:	f003 fcf1 	bl	b8538 <_ZN6StringD1Ev>
   b4b56:	9803      	ldr	r0, [sp, #12]
   b4b58:	f003 fcee 	bl	b8538 <_ZN6StringD1Ev>

    paint.DrawFilledRectangle(280, 244, 390, 266, COLORED);                               // Time Zone background
   b4b5c:	f44f 7385 	mov.w	r3, #266	; 0x10a
   b4b60:	9300      	str	r3, [sp, #0]
   b4b62:	a804      	add	r0, sp, #16
   b4b64:	9401      	str	r4, [sp, #4]
   b4b66:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4b6a:	22f4      	movs	r2, #244	; 0xf4
   b4b6c:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4b70:	f001 f806 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(285, 249, "Time Zone", &Font16, UNCOLORED);                        // Time Zone background
   b4b74:	4b46      	ldr	r3, [pc, #280]	; (b4c90 <_Z3EPDv.part.0+0x35c>)
   b4b76:	22f9      	movs	r2, #249	; 0xf9
   b4b78:	a804      	add	r0, sp, #16
   b4b7a:	e9cd 7600 	strd	r7, r6, [sp]
   b4b7e:	f240 111d 	movw	r1, #285	; 0x11d
   b4b82:	f000 ff89 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(305, 271, String(ApiData1.timezone), &Font16, COLORED);  // GMT
   b4b86:	f10a 0170 	add.w	r1, sl, #112	; 0x70
   b4b8a:	a80c      	add	r0, sp, #48	; 0x30
   b4b8c:	f003 fd6b 	bl	b8666 <_ZN6StringC1ERKS_>
   b4b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4b92:	f240 120f 	movw	r2, #271	; 0x10f
   b4b96:	f240 1131 	movw	r1, #305	; 0x131
   b4b9a:	a804      	add	r0, sp, #16
   b4b9c:	e9cd 7400 	strd	r7, r4, [sp]
   b4ba0:	f000 ff7a 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4ba4:	a80c      	add	r0, sp, #48	; 0x30
   b4ba6:	f003 fcc7 	bl	b8538 <_ZN6StringD1Ev>
    
    paint.DrawFilledRectangle(10, 230, 260, 200, COLORED);                                // instructor background
   b4baa:	23c8      	movs	r3, #200	; 0xc8
   b4bac:	9300      	str	r3, [sp, #0]
   b4bae:	a804      	add	r0, sp, #16
   b4bb0:	9401      	str	r4, [sp, #4]
   b4bb2:	f44f 7382 	mov.w	r3, #260	; 0x104
   b4bb6:	22e6      	movs	r2, #230	; 0xe6
   b4bb8:	210a      	movs	r1, #10
   b4bba:	f000 ffe1 	bl	b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(15, 210, "INSTRUCTOR:", &Font20, UNCOLORED);                       // instructor Title
   b4bbe:	e9cd 5600 	strd	r5, r6, [sp]
   b4bc2:	4b34      	ldr	r3, [pc, #208]	; (b4c94 <_Z3EPDv.part.0+0x360>)
   b4bc4:	22d2      	movs	r2, #210	; 0xd2
   b4bc6:	a804      	add	r0, sp, #16
   b4bc8:	210f      	movs	r1, #15
   b4bca:	f000 ff65 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(15, 240, String(ApiData1.instructorFirstName), &Font20, COLORED);      // instructor Title
   b4bce:	f10a 0190 	add.w	r1, sl, #144	; 0x90
   b4bd2:	a80c      	add	r0, sp, #48	; 0x30
   b4bd4:	f003 fd47 	bl	b8666 <_ZN6StringC1ERKS_>
   b4bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4bda:	22f0      	movs	r2, #240	; 0xf0
   b4bdc:	e9cd 5400 	strd	r5, r4, [sp]
   b4be0:	210f      	movs	r1, #15
   b4be2:	a804      	add	r0, sp, #16
   b4be4:	f000 ff58 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4be8:	a80c      	add	r0, sp, #48	; 0x30
   b4bea:	f003 fca5 	bl	b8538 <_ZN6StringD1Ev>
    paint.DrawStringAt(15, 260, String(ApiData1.instructorLastName), &Font20, COLORED);        // instructor Title
   b4bee:	f10a 01a0 	add.w	r1, sl, #160	; 0xa0
   b4bf2:	a80c      	add	r0, sp, #48	; 0x30
   b4bf4:	f003 fd37 	bl	b8666 <_ZN6StringC1ERKS_>
   b4bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4bfa:	f44f 7282 	mov.w	r2, #260	; 0x104
   b4bfe:	210f      	movs	r1, #15
   b4c00:	e9cd 5400 	strd	r5, r4, [sp]
   b4c04:	a804      	add	r0, sp, #16
   b4c06:	f000 ff47 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4c0a:	a80c      	add	r0, sp, #48	; 0x30
   b4c0c:	f003 fc94 	bl	b8538 <_ZN6StringD1Ev>
    
     epd.SetPartialWindowBlack(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());
   b4c10:	a804      	add	r0, sp, #16
   b4c12:	f000 febc 	bl	b598e <_ZN5Paint8GetImageEv>
   b4c16:	9003      	str	r0, [sp, #12]
   b4c18:	a804      	add	r0, sp, #16
   b4c1a:	f000 feba 	bl	b5992 <_ZN5Paint8GetWidthEv>
   b4c1e:	4605      	mov	r5, r0
   b4c20:	a804      	add	r0, sp, #16
   b4c22:	f000 feb8 	bl	b5996 <_ZN5Paint9GetHeightEv>
   b4c26:	4623      	mov	r3, r4
   b4c28:	4622      	mov	r2, r4
   b4c2a:	e9cd 5000 	strd	r5, r0, [sp]
   b4c2e:	9903      	ldr	r1, [sp, #12]
   b4c30:	4640      	mov	r0, r8
   b4c32:	f000 fcb4 	bl	b559e <_ZN3Epd21SetPartialWindowBlackEPKhiiii>

  //Print RED text
  paint.Clear(UNCOLORED);
   b4c36:	4631      	mov	r1, r6
   b4c38:	a804      	add	r0, sp, #16
   b4c3a:	f000 fe93 	bl	b5964 <_ZN5Paint5ClearEi>
  paint.SetRotate(2);
   b4c3e:	a804      	add	r0, sp, #16
   b4c40:	2102      	movs	r1, #2
   b4c42:	f000 feaa 	bl	b599a <_ZN5Paint9SetRotateEi>
  
    paint.DrawStringAt(130, 5, "Starship IFT3 - ", &Font24, COLORED);
   b4c46:	a804      	add	r0, sp, #16
   b4c48:	e9cd 9400 	strd	r9, r4, [sp]
   b4c4c:	4b12      	ldr	r3, [pc, #72]	; (b4c98 <_Z3EPDv.part.0+0x364>)
   b4c4e:	2205      	movs	r2, #5
   b4c50:	2182      	movs	r1, #130	; 0x82
   b4c52:	f000 ff21 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 35, "What to expect ", &Font24, COLORED);
   b4c56:	a804      	add	r0, sp, #16
   b4c58:	e9cd 9400 	strd	r9, r4, [sp]
   b4c5c:	4b0f      	ldr	r3, [pc, #60]	; (b4c9c <_Z3EPDv.part.0+0x368>)
   b4c5e:	2223      	movs	r2, #35	; 0x23
   b4c60:	2182      	movs	r1, #130	; 0x82
   b4c62:	f000 ff19 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 65, "from the next ", &Font24, COLORED);
   b4c66:	a804      	add	r0, sp, #16
   b4c68:	e020      	b.n	b4cac <_Z3EPDv.part.0+0x378>
   b4c6a:	bf00      	nop
   b4c6c:	2003de5c 	.word	0x2003de5c
   b4c70:	000b92fa 	.word	0x000b92fa
   b4c74:	000b92ed 	.word	0x000b92ed
   b4c78:	000b92f3 	.word	0x000b92f3
   b4c7c:	000b92ff 	.word	0x000b92ff
   b4c80:	2003de54 	.word	0x2003de54
   b4c84:	000b9306 	.word	0x000b9306
   b4c88:	2003e060 	.word	0x2003e060
   b4c8c:	000b930e 	.word	0x000b930e
   b4c90:	000b9310 	.word	0x000b9310
   b4c94:	000b931a 	.word	0x000b931a
   b4c98:	000b9326 	.word	0x000b9326
   b4c9c:	000b9337 	.word	0x000b9337
   b4ca0:	2003e0dc 	.word	0x2003e0dc
   b4ca4:	2003de64 	.word	0x2003de64
   b4ca8:	2003dee0 	.word	0x2003dee0
   b4cac:	e9cd 9400 	strd	r9, r4, [sp]
   b4cb0:	4b17      	ldr	r3, [pc, #92]	; (b4d10 <_Z3EPDv.part.0+0x3dc>)
   b4cb2:	2241      	movs	r2, #65	; 0x41
   b4cb4:	2182      	movs	r1, #130	; 0x82
   b4cb6:	f000 feef 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 95, "flight test", &Font24, COLORED);
   b4cba:	4b16      	ldr	r3, [pc, #88]	; (b4d14 <_Z3EPDv.part.0+0x3e0>)
   b4cbc:	225f      	movs	r2, #95	; 0x5f
   b4cbe:	2182      	movs	r1, #130	; 0x82
   b4cc0:	a804      	add	r0, sp, #16
   b4cc2:	e9cd 9400 	strd	r9, r4, [sp]
   b4cc6:	f000 fee7 	bl	b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    epd.SetPartialWindowRed(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());
   b4cca:	a804      	add	r0, sp, #16
   b4ccc:	f000 fe5f 	bl	b598e <_ZN5Paint8GetImageEv>
   b4cd0:	9003      	str	r0, [sp, #12]
   b4cd2:	a804      	add	r0, sp, #16
   b4cd4:	f000 fe5d 	bl	b5992 <_ZN5Paint8GetWidthEv>
   b4cd8:	4605      	mov	r5, r0
   b4cda:	a804      	add	r0, sp, #16
   b4cdc:	f000 fe5b 	bl	b5996 <_ZN5Paint9GetHeightEv>
   b4ce0:	9903      	ldr	r1, [sp, #12]
   b4ce2:	4623      	mov	r3, r4
   b4ce4:	4622      	mov	r2, r4
   b4ce6:	e9cd 5000 	strd	r5, r0, [sp]
   b4cea:	4640      	mov	r0, r8
   b4cec:	f000 fcbf 	bl	b566e <_ZN3Epd19SetPartialWindowRedEPKhiiii>

  // /* This displays the data from the SRAM in e-Paper module */
  epd.DisplayFrame();
   b4cf0:	4640      	mov	r0, r8
   b4cf2:	f000 fd55 	bl	b57a0 <_ZN3Epd12DisplayFrameEv>
  epd.ClearFrame(); 
   b4cf6:	4640      	mov	r0, r8
   b4cf8:	f000 fd21 	bl	b573e <_ZN3Epd10ClearFrameEv>
  
  new_end_point_STATE = 0;
   b4cfc:	4b06      	ldr	r3, [pc, #24]	; (b4d18 <_Z3EPDv.part.0+0x3e4>)
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4cfe:	a804      	add	r0, sp, #16
  new_end_point_STATE = 0;
   b4d00:	601c      	str	r4, [r3, #0]
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4d02:	f000 fe11 	bl	b5928 <_ZN5PaintD1Ev>
  //epd.DisplayFrame(IMAGE_BLACK, IMAGE_RED);
  //epd.DisplayFrame(QR_BLACK, QR_RED);

  /* Deep sleep */
  //epd.Sleep();
}
   b4d06:	f50d 4d43 	add.w	sp, sp, #49920	; 0xc300
   b4d0a:	b024      	add	sp, #144	; 0x90
   b4d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d10:	000b9347 	.word	0x000b9347
   b4d14:	000b9356 	.word	0x000b9356
   b4d18:	2003e11c 	.word	0x2003e11c

000b4d1c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4d1c:	b570      	push	{r4, r5, r6, lr}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b4d1e:	1e0c      	subs	r4, r1, #0
size_t Print::print(T n, int base)
   b4d20:	4606      	mov	r6, r0
   b4d22:	4615      	mov	r5, r2
        if (n < 0 && base == 10) {
   b4d24:	da0b      	bge.n	b4d3e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
   b4d26:	2a0a      	cmp	r2, #10
   b4d28:	d109      	bne.n	b4d3e <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x22>
            t = print('-');
   b4d2a:	212d      	movs	r1, #45	; 0x2d
   b4d2c:	f003 fae8 	bl	b8300 <_ZN5Print5printEc>
            val = -n;
   b4d30:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4d32:	b2ea      	uxtb	r2, r5
   b4d34:	4630      	mov	r0, r6
    }
}
   b4d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return printNumber(val, base) + t;
   b4d3a:	f003 bafa 	b.w	b8332 <_ZN5Print11printNumberEmh>
            val = n;
   b4d3e:	4621      	mov	r1, r4
   b4d40:	e7f7      	b.n	b4d32 <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0+0x16>
	...

000b4d44 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4d44:	4b0a      	ldr	r3, [pc, #40]	; (b4d70 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4d46:	b510      	push	{r4, lr}
   b4d48:	4604      	mov	r4, r0
   b4d4a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4d4c:	f002 fbc6 	bl	b74dc <_ZN5spark10LogManager8instanceEv>
   b4d50:	4621      	mov	r1, r4
   b4d52:	f002 fdfe 	bl	b7952 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4d56:	f003 fe81 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4d5a:	f003 fe73 	bl	b8a44 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4d5e:	4620      	mov	r0, r4
   b4d60:	4b04      	ldr	r3, [pc, #16]	; (b4d74 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4d62:	f840 3b04 	str.w	r3, [r0], #4
   b4d66:	f002 fc8f 	bl	b7688 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	bd10      	pop	{r4, pc}
   b4d6e:	bf00      	nop
   b4d70:	000b9478 	.word	0x000b9478
   b4d74:	000b9460 	.word	0x000b9460

000b4d78 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4d78:	b510      	push	{r4, lr}
   b4d7a:	4604      	mov	r4, r0
    }
   b4d7c:	f7ff ffe2 	bl	b4d44 <_ZN5spark16SerialLogHandlerD1Ev>
   b4d80:	4620      	mov	r0, r4
   b4d82:	2124      	movs	r1, #36	; 0x24
   b4d84:	f7ff fdbd 	bl	b4902 <_ZdlPvj>
   b4d88:	4620      	mov	r0, r4
   b4d8a:	bd10      	pop	{r4, pc}

000b4d8c <_ZN11myStructureC1Ev>:
struct myStructure{
   b4d8c:	b538      	push	{r3, r4, r5, lr}
   b4d8e:	4d1f      	ldr	r5, [pc, #124]	; (b4e0c <_ZN11myStructureC1Ev+0x80>)
   b4d90:	4604      	mov	r4, r0
   b4d92:	4629      	mov	r1, r5
   b4d94:	f003 fc1b 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4d98:	4629      	mov	r1, r5
   b4d9a:	f104 0010 	add.w	r0, r4, #16
   b4d9e:	f003 fc16 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4da2:	4629      	mov	r1, r5
   b4da4:	f104 0020 	add.w	r0, r4, #32
   b4da8:	f003 fc11 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4dac:	4629      	mov	r1, r5
   b4dae:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4db2:	f003 fc0c 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4db6:	4629      	mov	r1, r5
   b4db8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4dbc:	f003 fc07 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4dc0:	4629      	mov	r1, r5
   b4dc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b4dc6:	f003 fc02 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4dca:	4629      	mov	r1, r5
   b4dcc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4dd0:	f003 fbfd 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4dd4:	4629      	mov	r1, r5
   b4dd6:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4dda:	f003 fbf8 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4dde:	4629      	mov	r1, r5
   b4de0:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b4de4:	f003 fbf3 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4de8:	4629      	mov	r1, r5
   b4dea:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b4dee:	f003 fbee 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4df2:	4629      	mov	r1, r5
   b4df4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b4df8:	f003 fbe9 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4dfc:	4629      	mov	r1, r5
   b4dfe:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b4e02:	f003 fbe4 	bl	b85ce <_ZN6StringC1EPK19__FlashStringHelper>
   b4e06:	4620      	mov	r0, r4
   b4e08:	bd38      	pop	{r3, r4, r5, pc}
   b4e0a:	bf00      	nop
   b4e0c:	000bcb96 	.word	0x000bcb96

000b4e10 <setup>:
void setup() {
   b4e10:	b530      	push	{r4, r5, lr}
   b4e12:	b087      	sub	sp, #28
Serial.begin(115200);
   b4e14:	f003 fe22 	bl	b8a5c <_Z16_fetch_usbserialv>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4e18:	2400      	movs	r4, #0
   b4e1a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4e1e:	f003 fe0d 	bl	b8a3c <_ZN9USBSerial5beginEl>
   b4e22:	4936      	ldr	r1, [pc, #216]	; (b4efc <setup+0xec>)
   b4e24:	4836      	ldr	r0, [pc, #216]	; (b4f00 <setup+0xf0>)
   b4e26:	4623      	mov	r3, r4
   b4e28:	4622      	mov	r2, r4
   b4e2a:	e9cd 4400 	strd	r4, r4, [sp]
   b4e2e:	f001 fa4f 	bl	b62d0 <spark_subscribe>
inline CloudDisconnectOptions::CloudDisconnectOptions() :
        CloudDisconnectOptions(0, 0, false, false) {
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
   b4e32:	2501      	movs	r5, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b4e34:	2203      	movs	r2, #3
   b4e36:	f241 3388 	movw	r3, #5000	; 0x1388
Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
   b4e3a:	a803      	add	r0, sp, #12
   b4e3c:	e9cd 2303 	strd	r2, r3, [sp, #12]
        bool clearSession) :
   b4e40:	f8ad 5014 	strh.w	r5, [sp, #20]
   b4e44:	f001 fc3d 	bl	b66c2 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
 pinMode(BATON, OUTPUT);
   b4e48:	4629      	mov	r1, r5
   b4e4a:	2016      	movs	r0, #22
   b4e4c:	f003 ff52 	bl	b8cf4 <pinMode>
 digitalWrite(BATON,HIGH);
   b4e50:	4629      	mov	r1, r5
   b4e52:	2016      	movs	r0, #22
   b4e54:	f003 ff5f 	bl	b8d16 <digitalWrite>
 pinMode (BUZZER, OUTPUT);
   b4e58:	4629      	mov	r1, r5
   b4e5a:	2009      	movs	r0, #9
   b4e5c:	f003 ff4a 	bl	b8cf4 <pinMode>
 digitalWrite (BUZZER, LOW);
   b4e60:	4621      	mov	r1, r4
   b4e62:	2009      	movs	r0, #9
   b4e64:	f003 ff57 	bl	b8d16 <digitalWrite>
 Serial.print("Buzzer off");
   b4e68:	f003 fdf8 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4e6c:	4925      	ldr	r1, [pc, #148]	; (b4f04 <setup+0xf4>)
   b4e6e:	f003 fa43 	bl	b82f8 <_ZN5Print5printEPKc>
 pinMode(LDO_EN, OUTPUT);
   b4e72:	4629      	mov	r1, r5
   b4e74:	2017      	movs	r0, #23
   b4e76:	f003 ff3d 	bl	b8cf4 <pinMode>
 digitalWrite(LDO_EN, LOW);
   b4e7a:	4621      	mov	r1, r4
   b4e7c:	2017      	movs	r0, #23
   b4e7e:	f003 ff4a 	bl	b8d16 <digitalWrite>
delay(500);                                       // Waits for the initial measurements to be made
   b4e82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4e86:	f001 fafb 	bl	b6480 <delay>
 Serial.println();
   b4e8a:	f003 fde7 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4e8e:	f003 fa3a 	bl	b8306 <_ZN5Print7printlnEv>
 Serial.print("Initializing e-Paper display");
   b4e92:	f003 fde3 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4e96:	491c      	ldr	r1, [pc, #112]	; (b4f08 <setup+0xf8>)
   b4e98:	f003 fa2e 	bl	b82f8 <_ZN5Print5printEPKc>
 if (epd.Init() != 0) { 
   b4e9c:	481b      	ldr	r0, [pc, #108]	; (b4f0c <setup+0xfc>)
   b4e9e:	f000 fb61 	bl	b5564 <_ZN3Epd4InitEv>
   b4ea2:	b138      	cbz	r0, b4eb4 <setup+0xa4>
   Serial.print("Failed to initialize display");
   b4ea4:	f003 fdda 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4ea8:	4919      	ldr	r1, [pc, #100]	; (b4f10 <setup+0x100>)
}
   b4eaa:	b007      	add	sp, #28
   b4eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   Serial.print("Failed to initialize display");
   b4eb0:	f003 ba22 	b.w	b82f8 <_ZN5Print5printEPKc>
 Serial.println();
   b4eb4:	f003 fdd2 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4eb8:	f003 fa25 	bl	b8306 <_ZN5Print7printlnEv>
 Serial.print("Initializing PN532");
   b4ebc:	f003 fdce 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4ec0:	4914      	ldr	r1, [pc, #80]	; (b4f14 <setup+0x104>)
 while (!nfc.begin()) {
   b4ec2:	4d15      	ldr	r5, [pc, #84]	; (b4f18 <setup+0x108>)
   Serial.print(".");
   b4ec4:	4c15      	ldr	r4, [pc, #84]	; (b4f1c <setup+0x10c>)
 Serial.print("Initializing PN532");
   b4ec6:	f003 fa17 	bl	b82f8 <_ZN5Print5printEPKc>
 while (!nfc.begin()) {
   b4eca:	4628      	mov	r0, r5
   b4ecc:	f000 ffa0 	bl	b5e10 <_ZN17DFRobot_PN532_IIC5beginEv>
   b4ed0:	b940      	cbnz	r0, b4ee4 <setup+0xd4>
   Serial.print(".");
   b4ed2:	f003 fdc3 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4ed6:	4621      	mov	r1, r4
   b4ed8:	f003 fa0e 	bl	b82f8 <_ZN5Print5printEPKc>
   delay (100);
   b4edc:	2064      	movs	r0, #100	; 0x64
   b4ede:	f001 facf 	bl	b6480 <delay>
 while (!nfc.begin()) {
   b4ee2:	e7f2      	b.n	b4eca <setup+0xba>
  Serial.println();                              // DEBUG -- remove later
   b4ee4:	f003 fdba 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4ee8:	f003 fa0d 	bl	b8306 <_ZN5Print7printlnEv>
  Serial.println("Waiting for a card......");    // DEBUG -- remove later
   b4eec:	f003 fdb6 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4ef0:	490b      	ldr	r1, [pc, #44]	; (b4f20 <setup+0x110>)
}
   b4ef2:	b007      	add	sp, #28
   b4ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println("Waiting for a card......");    // DEBUG -- remove later
   b4ef8:	f003 ba11 	b.w	b831e <_ZN5Print7printlnEPKc>
   b4efc:	000b53ed 	.word	0x000b53ed
   b4f00:	000b9362 	.word	0x000b9362
   b4f04:	000b9379 	.word	0x000b9379
   b4f08:	000b9384 	.word	0x000b9384
   b4f0c:	2003e0dc 	.word	0x2003e0dc
   b4f10:	000b93a1 	.word	0x000b93a1
   b4f14:	000b93be 	.word	0x000b93be
   b4f18:	2003e120 	.word	0x2003e120
   b4f1c:	000b93e8 	.word	0x000b93e8
   b4f20:	000b93d1 	.word	0x000b93d1

000b4f24 <_Z9End_Pointv>:
void End_Point() {
   b4f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Serial.println("Calling End Point function..."); 
   b4f26:	f003 fd99 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4f2a:	4923      	ldr	r1, [pc, #140]	; (b4fb8 <_Z9End_Pointv+0x94>)
   b4f2c:	f003 f9f7 	bl	b831e <_ZN5Print7printlnEPKc>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f30:	f001 f9be 	bl	b62b0 <spark_cloud_flag_connected>
  if (Particle.connected() == false) {
   b4f34:	4604      	mov	r4, r0
   b4f36:	2800      	cmp	r0, #0
   b4f38:	d13b      	bne.n	b4fb2 <_Z9End_Pointv+0x8e>
      Serial.print("IF Statement executing");
   b4f3a:	f003 fd8f 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4f3e:	491f      	ldr	r1, [pc, #124]	; (b4fbc <_Z9End_Pointv+0x98>)
   b4f40:	f003 f9da 	bl	b82f8 <_ZN5Print5printEPKc>
      digitalWrite(LDO_EN, HIGH);
   b4f44:	2101      	movs	r1, #1
   b4f46:	2017      	movs	r0, #23
   b4f48:	f003 fee5 	bl	b8d16 <digitalWrite>
      delay(50);
   b4f4c:	2032      	movs	r0, #50	; 0x32
   b4f4e:	f001 fa97 	bl	b6480 <delay>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b4f52:	481b      	ldr	r0, [pc, #108]	; (b4fc0 <_Z9End_Pointv+0x9c>)
   b4f54:	4623      	mov	r3, r4
   b4f56:	6840      	ldr	r0, [r0, #4]
   b4f58:	4622      	mov	r2, r4
   b4f5a:	4621      	mov	r1, r4
   b4f5c:	f001 fa00 	bl	b6360 <network_on>
        spark_cloud_flag_connect();
   b4f60:	f001 f99e 	bl	b62a0 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4f64:	f001 f9a4 	bl	b62b0 <spark_cloud_flag_connected>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b4f68:	b910      	cbnz	r0, b4f70 <_Z9End_Pointv+0x4c>
            spark_process();
   b4f6a:	f001 f991 	bl	b6290 <spark_process>
        while (_while() && !_condition()) {
   b4f6e:	e7f9      	b.n	b4f64 <_Z9End_Pointv+0x40>
   b4f70:	f001 f99e 	bl	b62b0 <spark_cloud_flag_connected>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4f74:	4b13      	ldr	r3, [pc, #76]	; (b4fc4 <_Z9End_Pointv+0xa0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4f76:	4a14      	ldr	r2, [pc, #80]	; (b4fc8 <_Z9End_Pointv+0xa4>)
   b4f78:	781b      	ldrb	r3, [r3, #0]
   b4f7a:	f88d 3000 	strb.w	r3, [sp]
   b4f7e:	4913      	ldr	r1, [pc, #76]	; (b4fcc <_Z9End_Pointv+0xa8>)
   b4f80:	233c      	movs	r3, #60	; 0x3c
   b4f82:	a802      	add	r0, sp, #8
   b4f84:	f001 fca0 	bl	b68c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4f88:	9c03      	ldr	r4, [sp, #12]
   b4f8a:	b17c      	cbz	r4, b4fac <_Z9End_Pointv+0x88>
      if (--_M_use_count == 0)
   b4f8c:	6863      	ldr	r3, [r4, #4]
   b4f8e:	3b01      	subs	r3, #1
   b4f90:	6063      	str	r3, [r4, #4]
   b4f92:	b95b      	cbnz	r3, b4fac <_Z9End_Pointv+0x88>
          _M_dispose();
   b4f94:	6823      	ldr	r3, [r4, #0]
   b4f96:	4620      	mov	r0, r4
   b4f98:	689b      	ldr	r3, [r3, #8]
   b4f9a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4f9c:	68a3      	ldr	r3, [r4, #8]
   b4f9e:	3b01      	subs	r3, #1
   b4fa0:	60a3      	str	r3, [r4, #8]
   b4fa2:	b91b      	cbnz	r3, b4fac <_Z9End_Pointv+0x88>
            _M_destroy();
   b4fa4:	6823      	ldr	r3, [r4, #0]
   b4fa6:	4620      	mov	r0, r4
   b4fa8:	68db      	ldr	r3, [r3, #12]
   b4faa:	4798      	blx	r3
  new_end_point_STATE = 1;                                 
   b4fac:	4b08      	ldr	r3, [pc, #32]	; (b4fd0 <_Z9End_Pointv+0xac>)
   b4fae:	2201      	movs	r2, #1
   b4fb0:	601a      	str	r2, [r3, #0]
}
   b4fb2:	b004      	add	sp, #16
   b4fb4:	bd10      	pop	{r4, pc}
   b4fb6:	bf00      	nop
   b4fb8:	000b93ea 	.word	0x000b93ea
   b4fbc:	000b9408 	.word	0x000b9408
   b4fc0:	2003e630 	.word	0x2003e630
   b4fc4:	2003e070 	.word	0x2003e070
   b4fc8:	2003de44 	.word	0x2003de44
   b4fcc:	000b9370 	.word	0x000b9370
   b4fd0:	2003e11c 	.word	0x2003e11c

000b4fd4 <_Z3EPDv>:
void EPD() {
   b4fd4:	b508      	push	{r3, lr}
  Serial.print("Updating E-Paper Display\r\n ");
   b4fd6:	f003 fd41 	bl	b8a5c <_Z16_fetch_usbserialv>
   b4fda:	4909      	ldr	r1, [pc, #36]	; (b5000 <_Z3EPDv+0x2c>)
   b4fdc:	f003 f98c 	bl	b82f8 <_ZN5Print5printEPKc>
 if (epd.Init() != 0) { 
   b4fe0:	4808      	ldr	r0, [pc, #32]	; (b5004 <_Z3EPDv+0x30>)
   b4fe2:	f000 fabf 	bl	b5564 <_ZN3Epd4InitEv>
   b4fe6:	b130      	cbz	r0, b4ff6 <_Z3EPDv+0x22>
   Serial.print("Failed to initialize display");
   b4fe8:	f003 fd38 	bl	b8a5c <_Z16_fetch_usbserialv>
}
   b4fec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   Serial.print("Failed to initialize display");
   b4ff0:	4905      	ldr	r1, [pc, #20]	; (b5008 <_Z3EPDv+0x34>)
   b4ff2:	f003 b981 	b.w	b82f8 <_ZN5Print5printEPKc>
}
   b4ff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4ffa:	f7ff bc9b 	b.w	b4934 <_Z3EPDv.part.0>
   b4ffe:	bf00      	nop
   b5000:	000b941f 	.word	0x000b941f
   b5004:	2003e0dc 	.word	0x2003e0dc
   b5008:	000b93a1 	.word	0x000b93a1

000b500c <_Z8RealTimev>:
    delay(10);
    digitalWrite(LDO_EN, LOW);
    Serial.print("LDO Disconnected");
}

void RealTime(void){
   b500c:	b510      	push	{r4, lr}
	const char * c_str() const { return buffer; }
   b500e:	4b2a      	ldr	r3, [pc, #168]	; (b50b8 <_Z8RealTimev+0xac>)

Time.zone(atoi(ApiData2.timeZoneOffset));             /* ad*/
   b5010:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   b5014:	f003 ff37 	bl	b8e86 <atoi>
   b5018:	ee07 0a90 	vmov	s15, r0
   b501c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b5020:	f003 fbfe 	bl	b8820 <_ZN9TimeClass4zoneEf>

    Serial.print(Time.hourFormat12(Time.now()));      /* print serially current hour*/
   b5024:	f003 fd1a 	bl	b8a5c <_Z16_fetch_usbserialv>
   b5028:	4604      	mov	r4, r0
   b502a:	f003 fc36 	bl	b889a <_ZN9TimeClass3nowEv>
   b502e:	17c1      	asrs	r1, r0, #31
   b5030:	f003 fbcc 	bl	b87cc <_ZN9TimeClass12hourFormat12Ex>
   b5034:	220a      	movs	r2, #10
   b5036:	4601      	mov	r1, r0
size_t Print::print(T n, int base)
   b5038:	4620      	mov	r0, r4
   b503a:	f7ff fe6f 	bl	b4d1c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    Serial.print(":");
   b503e:	f003 fd0d 	bl	b8a5c <_Z16_fetch_usbserialv>
   b5042:	491e      	ldr	r1, [pc, #120]	; (b50bc <_Z8RealTimev+0xb0>)
   b5044:	f003 f958 	bl	b82f8 <_ZN5Print5printEPKc>
    Serial.print(Time.minute(Time.now()));            /* print serially current minute*/
   b5048:	f003 fd08 	bl	b8a5c <_Z16_fetch_usbserialv>
   b504c:	4604      	mov	r4, r0
   b504e:	f003 fc24 	bl	b889a <_ZN9TimeClass3nowEv>
   b5052:	17c1      	asrs	r1, r0, #31
   b5054:	f003 fbd4 	bl	b8800 <_ZN9TimeClass6minuteEx>
   b5058:	220a      	movs	r2, #10
   b505a:	4601      	mov	r1, r0
   b505c:	4620      	mov	r0, r4
   b505e:	f7ff fe5d 	bl	b4d1c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    Serial.print(":");
   b5062:	f003 fcfb 	bl	b8a5c <_Z16_fetch_usbserialv>
   b5066:	4915      	ldr	r1, [pc, #84]	; (b50bc <_Z8RealTimev+0xb0>)
   b5068:	f003 f946 	bl	b82f8 <_ZN5Print5printEPKc>
    Serial.print(Time.second(Time.now()));            /* print serially second hour*/
   b506c:	f003 fcf6 	bl	b8a5c <_Z16_fetch_usbserialv>
   b5070:	4604      	mov	r4, r0
   b5072:	f003 fc12 	bl	b889a <_ZN9TimeClass3nowEv>
   b5076:	17c1      	asrs	r1, r0, #31
   b5078:	f003 fbca 	bl	b8810 <_ZN9TimeClass6secondEx>
   b507c:	220a      	movs	r2, #10
   b507e:	4601      	mov	r1, r0
   b5080:	4620      	mov	r0, r4
   b5082:	f7ff fe4b 	bl	b4d1c <_ZN5Print5printIiLi0EEEjT_i.part.0.isra.0>
    if(!Time.isPM())
   b5086:	f003 fc18 	bl	b88ba <_ZN9TimeClass4isPMEv>
   b508a:	b980      	cbnz	r0, b50ae <_Z8RealTimev+0xa2>
        Serial.println(" AM");
   b508c:	f003 fce6 	bl	b8a5c <_Z16_fetch_usbserialv>
   b5090:	490b      	ldr	r1, [pc, #44]	; (b50c0 <_Z8RealTimev+0xb4>)
    else
        Serial.println(" PM");
   b5092:	f003 f944 	bl	b831e <_ZN5Print7printlnEPKc>
        Serial.println("\n");
   b5096:	f003 fce1 	bl	b8a5c <_Z16_fetch_usbserialv>
   b509a:	490a      	ldr	r1, [pc, #40]	; (b50c4 <_Z8RealTimev+0xb8>)
   b509c:	f003 f93f 	bl	b831e <_ZN5Print7printlnEPKc>
        Serial.println("\n");
   b50a0:	f003 fcdc 	bl	b8a5c <_Z16_fetch_usbserialv>
}
   b50a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.println("\n");
   b50a8:	4906      	ldr	r1, [pc, #24]	; (b50c4 <_Z8RealTimev+0xb8>)
   b50aa:	f003 b938 	b.w	b831e <_ZN5Print7printlnEPKc>
        Serial.println(" PM");
   b50ae:	f003 fcd5 	bl	b8a5c <_Z16_fetch_usbserialv>
   b50b2:	4905      	ldr	r1, [pc, #20]	; (b50c8 <_Z8RealTimev+0xbc>)
   b50b4:	e7ed      	b.n	b5092 <_Z8RealTimev+0x86>
   b50b6:	bf00      	nop
   b50b8:	2003dfa0 	.word	0x2003dfa0
   b50bc:	000b9324 	.word	0x000b9324
   b50c0:	000b943b 	.word	0x000b943b
   b50c4:	000bcb95 	.word	0x000bcb95
   b50c8:	000b943f 	.word	0x000b943f

000b50cc <_Z16ApiParser_event1v>:

void ApiParser_event1(void){                  //store all sperate data from API into the struct variable
   b50cc:	b538      	push	{r3, r4, r5, lr}

//ApiData.id = array[0];
  ApiData1.readerMode = array[1];
   b50ce:	4d1d      	ldr	r5, [pc, #116]	; (b5144 <_Z16ApiParser_event1v+0x78>)
   b50d0:	4c1d      	ldr	r4, [pc, #116]	; (b5148 <_Z16ApiParser_event1v+0x7c>)
   b50d2:	6869      	ldr	r1, [r5, #4]
   b50d4:	f104 0020 	add.w	r0, r4, #32
   b50d8:	f003 fad0 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.roomName = array[2];
   b50dc:	68a9      	ldr	r1, [r5, #8]
   b50de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b50e2:	f003 facb 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.id = array[3];
   b50e6:	68e9      	ldr	r1, [r5, #12]
   b50e8:	4620      	mov	r0, r4
   b50ea:	f003 fac7 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.title = array[4];
   b50ee:	6929      	ldr	r1, [r5, #16]
   b50f0:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b50f4:	f003 fac2 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.startTime = array[5];
   b50f8:	6969      	ldr	r1, [r5, #20]
   b50fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b50fe:	f003 fabd 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.endTime = array[6];
   b5102:	69a9      	ldr	r1, [r5, #24]
   b5104:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5108:	f003 fab8 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.timezone = array[7];
   b510c:	69e9      	ldr	r1, [r5, #28]
   b510e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b5112:	f003 fab3 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.timeZoneOffset = array[8];
   b5116:	6a29      	ldr	r1, [r5, #32]
   b5118:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b511c:	f003 faae 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.instructorFirstName = array[9];
   b5120:	6a69      	ldr	r1, [r5, #36]	; 0x24
   b5122:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b5126:	f003 faa9 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.instructorLastName = array[10];
   b512a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   b512c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b5130:	f003 faa4 	bl	b867c <_ZN6StringaSEPKc>
  ApiData1.isHybrid = array[11];
   b5134:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   b5136:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
  // Serial.print("instructorLastName1: "); 
  // Serial.println(ApiData1.instructorLastName);
    
  // Serial.print("sHybrid1: "); 
  // Serial.println(ApiData1.isHybrid);
}
   b513a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ApiData1.isHybrid = array[11];
   b513e:	f003 ba9d 	b.w	b867c <_ZN6StringaSEPKc>
   b5142:	bf00      	nop
   b5144:	2003e074 	.word	0x2003e074
   b5148:	2003dee0 	.word	0x2003dee0

000b514c <_Z16ApiParser_event2v>:

void ApiParser_event2(void){                  //store all sperate data from API into the struct variable
   b514c:	b538      	push	{r3, r4, r5, lr}

    //ApiData.id = array[0];
    ApiData2.readerMode = array[10];
   b514e:	4d1d      	ldr	r5, [pc, #116]	; (b51c4 <_Z16ApiParser_event2v+0x78>)
   b5150:	4c1d      	ldr	r4, [pc, #116]	; (b51c8 <_Z16ApiParser_event2v+0x7c>)
   b5152:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   b5154:	f104 0020 	add.w	r0, r4, #32
   b5158:	f003 fa90 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.roomName = array[2];
   b515c:	68a9      	ldr	r1, [r5, #8]
   b515e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b5162:	f003 fa8b 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.id = array[12];
   b5166:	6b29      	ldr	r1, [r5, #48]	; 0x30
   b5168:	4620      	mov	r0, r4
   b516a:	f003 fa87 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.title = array[13];
   b516e:	6b69      	ldr	r1, [r5, #52]	; 0x34
   b5170:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b5174:	f003 fa82 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.startTime = array[14];
   b5178:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   b517a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b517e:	f003 fa7d 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.endTime = array[15];
   b5182:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b5184:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5188:	f003 fa78 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.timezone = array[16];
   b518c:	6c29      	ldr	r1, [r5, #64]	; 0x40
   b518e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b5192:	f003 fa73 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.timeZoneOffset = array[17];
   b5196:	6c69      	ldr	r1, [r5, #68]	; 0x44
   b5198:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b519c:	f003 fa6e 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.instructorFirstName = array[18];
   b51a0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   b51a2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b51a6:	f003 fa69 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.instructorLastName = array[19];
   b51aa:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   b51ac:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b51b0:	f003 fa64 	bl	b867c <_ZN6StringaSEPKc>
    ApiData2.isHybrid = array[20];
   b51b4:	6d29      	ldr	r1, [r5, #80]	; 0x50
   b51b6:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
//     Serial.print("instructorLastName2: "); 
//     Serial.println(ApiData2.instructorLastName);
    
//     Serial.print("sHybrid2: "); 
//     Serial.println(ApiData2.isHybrid);
}
   b51ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ApiData2.isHybrid = array[20];
   b51be:	f003 ba5d 	b.w	b867c <_ZN6StringaSEPKc>
   b51c2:	bf00      	nop
   b51c4:	2003e074 	.word	0x2003e074
   b51c8:	2003dfa0 	.word	0x2003dfa0

000b51cc <loop>:

void loop() {
   b51cc:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b51ce:	f000 fe83 	bl	b5ed8 <HAL_Timer_Get_Milli_Seconds>

currentMillis1 = millis();
   b51d2:	4b0b      	ldr	r3, [pc, #44]	; (b5200 <loop+0x34>)

   if ((currentMillis1 - previousMillis1 >= interval1) && (new_end_point_STATE == 0)) {
   b51d4:	4a0b      	ldr	r2, [pc, #44]	; (b5204 <loop+0x38>)
   b51d6:	490c      	ldr	r1, [pc, #48]	; (b5208 <loop+0x3c>)
currentMillis1 = millis();
   b51d8:	6018      	str	r0, [r3, #0]
   if ((currentMillis1 - previousMillis1 >= interval1) && (new_end_point_STATE == 0)) {
   b51da:	6813      	ldr	r3, [r2, #0]
   b51dc:	6809      	ldr	r1, [r1, #0]
   b51de:	4c0b      	ldr	r4, [pc, #44]	; (b520c <loop+0x40>)
   b51e0:	1ac3      	subs	r3, r0, r3
   b51e2:	428b      	cmp	r3, r1
   b51e4:	d304      	bcc.n	b51f0 <loop+0x24>
   b51e6:	6823      	ldr	r3, [r4, #0]
   b51e8:	b913      	cbnz	r3, b51f0 <loop+0x24>
     previousMillis1 = currentMillis1;
   b51ea:	6010      	str	r0, [r2, #0]
     End_Point();
   b51ec:	f7ff fe9a 	bl	b4f24 <_Z9End_Pointv>
   } 

   if (new_end_point_STATE == 2) {
   b51f0:	6823      	ldr	r3, [r4, #0]
   b51f2:	2b02      	cmp	r3, #2
   b51f4:	d103      	bne.n	b51fe <loop+0x32>
   }
  
  //I2C_Scanner();
  //Fuel_Gauge();
  //RFID();
   b51f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
       EPD();
   b51fa:	f7ff beeb 	b.w	b4fd4 <_Z3EPDv>
   b51fe:	bd10      	pop	{r4, pc}
   b5200:	2003e0d8 	.word	0x2003e0d8
   b5204:	2003e16c 	.word	0x2003e16c
   b5208:	2003de50 	.word	0x2003de50
   b520c:	2003e11c 	.word	0x2003e11c

000b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5210:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5212:	e9d0 5300 	ldrd	r5, r3, [r0]
   b5216:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5218:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b521a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b521e:	42ae      	cmp	r6, r5
   b5220:	d004      	beq.n	b522c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b5222:	4628      	mov	r0, r5
   b5224:	f003 f988 	bl	b8538 <_ZN6StringD1Ev>
   b5228:	3514      	adds	r5, #20
   b522a:	e7f8      	b.n	b521e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b522c:	6820      	ldr	r0, [r4, #0]
   b522e:	f001 f8df 	bl	b63f0 <free>
    AllocatorT::free(data_);
}
   b5232:	4620      	mov	r0, r4
   b5234:	bd70      	pop	{r4, r5, r6, pc}

000b5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b5236:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b523a:	4604      	mov	r4, r0
   b523c:	460d      	mov	r5, r1
   b523e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b5240:	d916      	bls.n	b5270 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b5242:	4290      	cmp	r0, r2
   b5244:	d215      	bcs.n	b5272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b5246:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b524a:	1a75      	subs	r5, r6, r1
   b524c:	f1a1 0714 	sub.w	r7, r1, #20
   b5250:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5252:	42b7      	cmp	r7, r6
   b5254:	d01c      	beq.n	b5290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b5256:	b12c      	cbz	r4, b5264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b5258:	4631      	mov	r1, r6
   b525a:	4620      	mov	r0, r4
   b525c:	f003 f9e9 	bl	b8632 <_ZN6StringC1EOS_>
   b5260:	7c33      	ldrb	r3, [r6, #16]
   b5262:	7423      	strb	r3, [r4, #16]
   b5264:	4630      	mov	r0, r6
   b5266:	f003 f967 	bl	b8538 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b526a:	3e14      	subs	r6, #20
   b526c:	3c14      	subs	r4, #20
   b526e:	e7f0      	b.n	b5252 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5270:	d00e      	beq.n	b5290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b5272:	42b5      	cmp	r5, r6
   b5274:	d00c      	beq.n	b5290 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b5276:	b12c      	cbz	r4, b5284 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b5278:	4629      	mov	r1, r5
   b527a:	4620      	mov	r0, r4
   b527c:	f003 f9d9 	bl	b8632 <_ZN6StringC1EOS_>
   b5280:	7c2b      	ldrb	r3, [r5, #16]
   b5282:	7423      	strb	r3, [r4, #16]
   b5284:	4628      	mov	r0, r5
   b5286:	f003 f957 	bl	b8538 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b528a:	3514      	adds	r5, #20
   b528c:	3414      	adds	r4, #20
   b528e:	e7f0      	b.n	b5272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b5290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b5292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b5296:	2300      	movs	r3, #0
   b5298:	e9c0 3300 	strd	r3, r3, [r0]
   b529c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b529e:	684f      	ldr	r7, [r1, #4]
   b52a0:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b52a2:	4604      	mov	r4, r0
   b52a4:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b52a6:	dd23      	ble.n	b52f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b52a8:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b52ac:	fb08 f007 	mul.w	r0, r8, r7
   b52b0:	f001 f896 	bl	b63e0 <malloc>
            if (!d) {
   b52b4:	4605      	mov	r5, r0
   b52b6:	b1d8      	cbz	r0, b52f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b52b8:	e9d4 1200 	ldrd	r1, r2, [r4]
   b52bc:	fb08 1202 	mla	r2, r8, r2, r1
   b52c0:	f7ff ffb9 	bl	b5236 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b52c4:	6820      	ldr	r0, [r4, #0]
   b52c6:	f001 f893 	bl	b63f0 <free>
        data_ = d;
   b52ca:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b52cc:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b52ce:	e9d6 7300 	ldrd	r7, r3, [r6]
   b52d2:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b52d6:	45b8      	cmp	r8, r7
   b52d8:	d008      	beq.n	b52ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b52da:	4639      	mov	r1, r7
   b52dc:	4628      	mov	r0, r5
   b52de:	f003 f9c2 	bl	b8666 <_ZN6StringC1ERKS_>
   b52e2:	7c3b      	ldrb	r3, [r7, #16]
   b52e4:	742b      	strb	r3, [r5, #16]
   b52e6:	3714      	adds	r7, #20
   b52e8:	3514      	adds	r5, #20
   b52ea:	e7f4      	b.n	b52d6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b52ec:	6873      	ldr	r3, [r6, #4]
   b52ee:	6063      	str	r3, [r4, #4]
}
   b52f0:	4620      	mov	r0, r4
   b52f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b52f8 <_GLOBAL__sub_I_SystemMode>:
   b52f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   b52fc:	4b2f      	ldr	r3, [pc, #188]	; (b53bc <_GLOBAL__sub_I_SystemMode+0xc4>)
    SleepResult() {}
   b52fe:	4a30      	ldr	r2, [pc, #192]	; (b53c0 <_GLOBAL__sub_I_SystemMode+0xc8>)
        filter_(level, filters) {
   b5300:	4d30      	ldr	r5, [pc, #192]	; (b53c4 <_GLOBAL__sub_I_SystemMode+0xcc>)
   b5302:	f04f 0801 	mov.w	r8, #1
   b5306:	f883 8000 	strb.w	r8, [r3]
              error_(SYSTEM_ERROR_NONE) {
   b530a:	4b2f      	ldr	r3, [pc, #188]	; (b53c8 <_GLOBAL__sub_I_SystemMode+0xd0>)
   b530c:	2400      	movs	r4, #0
   b530e:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b5310:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5312:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b5316:	2002      	movs	r0, #2
   b5318:	f000 ff76 	bl	b6208 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b531c:	4621      	mov	r1, r4
   b531e:	4640      	mov	r0, r8
   b5320:	f000 ff82 	bl	b6228 <system_thread_set_state>
        capacity_(0) {
   b5324:	e9cd 4400 	strd	r4, r4, [sp]
   b5328:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b532a:	f003 fb97 	bl	b8a5c <_Z16_fetch_usbserialv>
   b532e:	4669      	mov	r1, sp
   b5330:	4606      	mov	r6, r0
   b5332:	a803      	add	r0, sp, #12
   b5334:	f7ff ffad 	bl	b5292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5338:	462f      	mov	r7, r5

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   b533a:	a903      	add	r1, sp, #12
   b533c:	a806      	add	r0, sp, #24
   b533e:	f7ff ffa8 	bl	b5292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5342:	4b22      	ldr	r3, [pc, #136]	; (b53cc <_GLOBAL__sub_I_SystemMode+0xd4>)
   b5344:	f847 3b04 	str.w	r3, [r7], #4
   b5348:	a906      	add	r1, sp, #24
   b534a:	a809      	add	r0, sp, #36	; 0x24
   b534c:	f7ff ffa1 	bl	b5292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5350:	aa09      	add	r2, sp, #36	; 0x24
   b5352:	4641      	mov	r1, r8
   b5354:	4638      	mov	r0, r7
   b5356:	f002 fbdf 	bl	b7b18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b535a:	a809      	add	r0, sp, #36	; 0x24
   b535c:	f7ff ff58 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5360:	a806      	add	r0, sp, #24
   b5362:	f7ff ff55 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5366:	4b1a      	ldr	r3, [pc, #104]	; (b53d0 <_GLOBAL__sub_I_SystemMode+0xd8>)
   b5368:	602b      	str	r3, [r5, #0]
   b536a:	a803      	add	r0, sp, #12
   b536c:	622e      	str	r6, [r5, #32]
   b536e:	f7ff ff4f 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5372:	4b18      	ldr	r3, [pc, #96]	; (b53d4 <_GLOBAL__sub_I_SystemMode+0xdc>)
   b5374:	602b      	str	r3, [r5, #0]
        Serial.begin();
   b5376:	f003 fb71 	bl	b8a5c <_Z16_fetch_usbserialv>
   b537a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b537e:	f003 fb5d 	bl	b8a3c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b5382:	f002 f8ab 	bl	b74dc <_ZN5spark10LogManager8instanceEv>
   b5386:	4629      	mov	r1, r5
   b5388:	f002 fa9c 	bl	b78c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   b538c:	4668      	mov	r0, sp
   b538e:	f7ff ff3f 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
Epd epd;
   b5392:	4811      	ldr	r0, [pc, #68]	; (b53d8 <_GLOBAL__sub_I_SystemMode+0xe0>)
   b5394:	f000 f898 	bl	b54c8 <_ZN3EpdC1Ev>
}ApiData1, ApiData2;
   b5398:	4810      	ldr	r0, [pc, #64]	; (b53dc <_GLOBAL__sub_I_SystemMode+0xe4>)
   b539a:	f7ff fcf7 	bl	b4d8c <_ZN11myStructureC1Ev>
   b539e:	4810      	ldr	r0, [pc, #64]	; (b53e0 <_GLOBAL__sub_I_SystemMode+0xe8>)
   b53a0:	f7ff fcf4 	bl	b4d8c <_ZN11myStructureC1Ev>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b53a4:	4622      	mov	r2, r4
   b53a6:	2102      	movs	r1, #2
   b53a8:	480e      	ldr	r0, [pc, #56]	; (b53e4 <_GLOBAL__sub_I_SystemMode+0xec>)
   b53aa:	f000 fc6d 	bl	b5c88 <_ZN17DFRobot_PN532_IICC1Ehh>
max1720x gauge;
   b53ae:	480e      	ldr	r0, [pc, #56]	; (b53e8 <_GLOBAL__sub_I_SystemMode+0xf0>)
   b53b0:	b00c      	add	sp, #48	; 0x30
   b53b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
max1720x gauge;
   b53b6:	f000 bc09 	b.w	b5bcc <_ZN8max1720xC1Ev>
   b53ba:	bf00      	nop
   b53bc:	2003e070 	.word	0x2003e070
   b53c0:	ffff0000 	.word	0xffff0000
   b53c4:	2003e0f8 	.word	0x2003e0f8
   b53c8:	2003e064 	.word	0x2003e064
   b53cc:	000b9460 	.word	0x000b9460
   b53d0:	000bcbcc 	.word	0x000bcbcc
   b53d4:	000b9478 	.word	0x000b9478
   b53d8:	2003e0dc 	.word	0x2003e0dc
   b53dc:	2003dee0 	.word	0x2003dee0
   b53e0:	2003dfa0 	.word	0x2003dfa0
   b53e4:	2003e120 	.word	0x2003e120
   b53e8:	2003e0f4 	.word	0x2003e0f4

000b53ec <_Z9myHandlerPKcS0_>:
void myHandler(const char *event, const char *data) {
   b53ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    strcpy(testval, (const char *)data);
   b53ee:	482f      	ldr	r0, [pc, #188]	; (b54ac <_Z9myHandlerPKcS0_+0xc0>)
   b53f0:	4d2f      	ldr	r5, [pc, #188]	; (b54b0 <_Z9myHandlerPKcS0_+0xc4>)
            p = strtok (NULL, "|");
   b53f2:	4e30      	ldr	r6, [pc, #192]	; (b54b4 <_Z9myHandlerPKcS0_+0xc8>)
    strcpy(testval, (const char *)data);
   b53f4:	f003 fdc9 	bl	b8f8a <strcpy>
    char *p = strtok (( char *)testval, "|");
   b53f8:	492e      	ldr	r1, [pc, #184]	; (b54b4 <_Z9myHandlerPKcS0_+0xc8>)
   b53fa:	482c      	ldr	r0, [pc, #176]	; (b54ac <_Z9myHandlerPKcS0_+0xc0>)
   b53fc:	f003 fe14 	bl	b9028 <strtok>
   b5400:	4604      	mov	r4, r0
    while (p != NULL)
   b5402:	b13c      	cbz	r4, b5414 <_Z9myHandlerPKcS0_+0x28>
            array[i++] = p;
   b5404:	f845 4b04 	str.w	r4, [r5], #4
            p = strtok (NULL, "|");
   b5408:	4631      	mov	r1, r6
   b540a:	2000      	movs	r0, #0
   b540c:	f003 fe0c 	bl	b9028 <strtok>
   b5410:	4604      	mov	r4, r0
    while (p != NULL)
   b5412:	e7f6      	b.n	b5402 <_Z9myHandlerPKcS0_+0x16>
    ApiParser_event1();
   b5414:	f7ff fe5a 	bl	b50cc <_Z16ApiParser_event1v>
    Serial.print("\n"); 
   b5418:	f003 fb20 	bl	b8a5c <_Z16_fetch_usbserialv>
   b541c:	4926      	ldr	r1, [pc, #152]	; (b54b8 <_Z9myHandlerPKcS0_+0xcc>)
   b541e:	f002 ff6b 	bl	b82f8 <_ZN5Print5printEPKc>
    Serial.print("\n"); 
   b5422:	f003 fb1b 	bl	b8a5c <_Z16_fetch_usbserialv>
   b5426:	4924      	ldr	r1, [pc, #144]	; (b54b8 <_Z9myHandlerPKcS0_+0xcc>)
   b5428:	f002 ff66 	bl	b82f8 <_ZN5Print5printEPKc>
    ApiParser_event2();
   b542c:	f7ff fe8e 	bl	b514c <_Z16ApiParser_event2v>
    RealTime();
   b5430:	f7ff fdec 	bl	b500c <_Z8RealTimev>
    memset(testval, '\0', sizeof(testval));
   b5434:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   b5438:	4621      	mov	r1, r4
   b543a:	481c      	ldr	r0, [pc, #112]	; (b54ac <_Z9myHandlerPKcS0_+0xc0>)
   b543c:	f003 fd58 	bl	b8ef0 <memset>
    delay(50);
   b5440:	2032      	movs	r0, #50	; 0x32
   b5442:	f001 f81d 	bl	b6480 <delay>
    new_end_point_STATE = 2;
   b5446:	4b1d      	ldr	r3, [pc, #116]	; (b54bc <_Z9myHandlerPKcS0_+0xd0>)
        bool clearSession) :
   b5448:	f8ad 400c 	strh.w	r4, [sp, #12]
   b544c:	2202      	movs	r2, #2
    Particle.disconnect();                                                 // Use only in SEMI_AUTOMATIC mode
   b544e:	a801      	add	r0, sp, #4
        clearSession_(clearSession) {
   b5450:	e9cd 4401 	strd	r4, r4, [sp, #4]
    new_end_point_STATE = 2;
   b5454:	601a      	str	r2, [r3, #0]
    Particle.disconnect();                                                 // Use only in SEMI_AUTOMATIC mode
   b5456:	f001 f91a 	bl	b668e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b545a:	f000 ff29 	bl	b62b0 <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   b545e:	4604      	mov	r4, r0
   b5460:	b110      	cbz	r0, b5468 <_Z9myHandlerPKcS0_+0x7c>
            spark_process();
   b5462:	f000 ff15 	bl	b6290 <spark_process>
        while (_while() && !_condition()) {
   b5466:	e7f8      	b.n	b545a <_Z9myHandlerPKcS0_+0x6e>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b5468:	4d15      	ldr	r5, [pc, #84]	; (b54c0 <_Z9myHandlerPKcS0_+0xd4>)
   b546a:	f000 ff21 	bl	b62b0 <spark_cloud_flag_connected>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b546e:	6868      	ldr	r0, [r5, #4]
   b5470:	4623      	mov	r3, r4
   b5472:	4622      	mov	r2, r4
   b5474:	4621      	mov	r1, r4
   b5476:	f000 ff7b 	bl	b6370 <network_off>
    waitUntil(Cellular.isOff);
   b547a:	4628      	mov	r0, r5
   b547c:	f002 fe86 	bl	b818c <_ZN5spark12NetworkClass5isOffEv>
   b5480:	b910      	cbnz	r0, b5488 <_Z9myHandlerPKcS0_+0x9c>
            spark_process();
   b5482:	f000 ff05 	bl	b6290 <spark_process>
        while (_while() && !_condition()) {
   b5486:	e7f8      	b.n	b547a <_Z9myHandlerPKcS0_+0x8e>
   b5488:	480d      	ldr	r0, [pc, #52]	; (b54c0 <_Z9myHandlerPKcS0_+0xd4>)
   b548a:	f002 fe7f 	bl	b818c <_ZN5spark12NetworkClass5isOffEv>
    delay(10);
   b548e:	200a      	movs	r0, #10
   b5490:	f000 fff6 	bl	b6480 <delay>
    digitalWrite(LDO_EN, LOW);
   b5494:	2100      	movs	r1, #0
   b5496:	2017      	movs	r0, #23
   b5498:	f003 fc3d 	bl	b8d16 <digitalWrite>
    Serial.print("LDO Disconnected");
   b549c:	f003 fade 	bl	b8a5c <_Z16_fetch_usbserialv>
   b54a0:	4908      	ldr	r1, [pc, #32]	; (b54c4 <_Z9myHandlerPKcS0_+0xd8>)
}
   b54a2:	b004      	add	sp, #16
   b54a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Serial.print("LDO Disconnected");
   b54a8:	f002 bf26 	b.w	b82f8 <_ZN5Print5printEPKc>
   b54ac:	2003e170 	.word	0x2003e170
   b54b0:	2003e074 	.word	0x2003e074
   b54b4:	000b9443 	.word	0x000b9443
   b54b8:	000bcb95 	.word	0x000bcb95
   b54bc:	2003e11c 	.word	0x2003e11c
   b54c0:	2003e630 	.word	0x2003e630
   b54c4:	000b9445 	.word	0x000b9445

000b54c8 <_ZN3EpdC1Ev>:
#include "../lib/EPD4_2/src/epd4in2b_V2.h"

Epd::~Epd() {
};

Epd::Epd() {
   b54c8:	b510      	push	{r4, lr}
   b54ca:	4604      	mov	r4, r0
   b54cc:	f000 f9b6 	bl	b583c <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b54d0:	2206      	movs	r2, #6
   b54d2:	2305      	movs	r3, #5
   b54d4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b54d8:	2108      	movs	r1, #8
   b54da:	2307      	movs	r3, #7
   b54dc:	e9c4 1304 	strd	r1, r3, [r4, #16]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b54e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b54e4:	f44f 7396 	mov.w	r3, #300	; 0x12c
   b54e8:	e9c4 0300 	strd	r0, r3, [r4]
};
   b54ec:	4620      	mov	r0, r4
   b54ee:	bd10      	pop	{r4, pc}

000b54f0 <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
   b54f0:	b510      	push	{r4, lr}
   b54f2:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
   b54f4:	68c0      	ldr	r0, [r0, #12]
   b54f6:	2100      	movs	r1, #0
   b54f8:	f000 f9a1 	bl	b583e <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
   b54fc:	4620      	mov	r0, r4
}
   b54fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
   b5502:	f000 b9ed 	b.w	b58e0 <_ZN5EpdIf11SpiTransferEh>

000b5506 <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
   b5506:	b510      	push	{r4, lr}
   b5508:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
   b550a:	68c0      	ldr	r0, [r0, #12]
   b550c:	2101      	movs	r1, #1
   b550e:	f000 f996 	bl	b583e <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
   b5512:	4620      	mov	r0, r4
}
   b5514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
   b5518:	f000 b9e2 	b.w	b58e0 <_ZN5EpdIf11SpiTransferEh>

000b551c <_ZN3Epd13WaitUntilIdleEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::WaitUntilIdle(void) {
   b551c:	b510      	push	{r4, lr}
   b551e:	4604      	mov	r4, r0
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b5520:	6960      	ldr	r0, [r4, #20]
   b5522:	f000 f990 	bl	b5846 <_ZN5EpdIf11DigitalReadEi>
   b5526:	b918      	cbnz	r0, b5530 <_ZN3Epd13WaitUntilIdleEv+0x14>
        DelayMs(100);
   b5528:	2064      	movs	r0, #100	; 0x64
   b552a:	f000 f98f 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b552e:	e7f7      	b.n	b5520 <_ZN3Epd13WaitUntilIdleEv+0x4>
    }      
}
   b5530:	bd10      	pop	{r4, pc}

000b5532 <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset. 
 *          often used to awaken the module in deep sleep, 
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
   b5532:	b510      	push	{r4, lr}
    DigitalWrite(reset_pin, HIGH);
   b5534:	2101      	movs	r1, #1
void Epd::Reset(void) {
   b5536:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
   b5538:	6880      	ldr	r0, [r0, #8]
   b553a:	f000 f980 	bl	b583e <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
   b553e:	20c8      	movs	r0, #200	; 0xc8
   b5540:	f000 f984 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);
   b5544:	68a0      	ldr	r0, [r4, #8]
   b5546:	2100      	movs	r1, #0
   b5548:	f000 f979 	bl	b583e <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
   b554c:	2002      	movs	r0, #2
   b554e:	f000 f97d 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
   b5552:	68a0      	ldr	r0, [r4, #8]
   b5554:	2101      	movs	r1, #1
   b5556:	f000 f972 	bl	b583e <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
}
   b555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);   
   b555e:	20c8      	movs	r0, #200	; 0xc8
   b5560:	f000 b974 	b.w	b584c <_ZN5EpdIf7DelayMsEj>

000b5564 <_ZN3Epd4InitEv>:
int Epd::Init(void) {
   b5564:	b538      	push	{r3, r4, r5, lr}
   b5566:	4604      	mov	r4, r0
    if (IfInit() != 0) {
   b5568:	f000 f98e 	bl	b5888 <_ZN5EpdIf6IfInitEv>
   b556c:	4605      	mov	r5, r0
   b556e:	b998      	cbnz	r0, b5598 <_ZN3Epd4InitEv+0x34>
    Reset();
   b5570:	4620      	mov	r0, r4
   b5572:	f7ff ffde 	bl	b5532 <_ZN3Epd5ResetEv>
    SendCommand(POWER_ON);
   b5576:	2104      	movs	r1, #4
   b5578:	4620      	mov	r0, r4
   b557a:	f7ff ffb9 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b557e:	4620      	mov	r0, r4
   b5580:	f7ff ffcc 	bl	b551c <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(PANEL_SETTING);
   b5584:	4629      	mov	r1, r5
   b5586:	4620      	mov	r0, r4
   b5588:	f7ff ffb2 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    SendData(0x0F);     // LUT from OTP
   b558c:	210f      	movs	r1, #15
   b558e:	4620      	mov	r0, r4
   b5590:	f7ff ffb9 	bl	b5506 <_ZN3Epd8SendDataEh>
}
   b5594:	4628      	mov	r0, r5
   b5596:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   b5598:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b559c:	e7fa      	b.n	b5594 <_ZN3Epd4InitEv+0x30>

000b559e <_ZN3Epd21SetPartialWindowBlackEPKhiiii>:
}

/**
 *  @brief: transmit partial data to the black part of SRAM
 */
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b559e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b55a2:	4604      	mov	r4, r0
   b55a4:	460f      	mov	r7, r1
    SendCommand(PARTIAL_IN);
   b55a6:	2191      	movs	r1, #145	; 0x91
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b55a8:	4616      	mov	r6, r2
   b55aa:	4699      	mov	r9, r3
   b55ac:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    SendCommand(PARTIAL_IN);
   b55b0:	f7ff ff9e 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    SendCommand(PARTIAL_WINDOW);
   b55b4:	2190      	movs	r1, #144	; 0x90
   b55b6:	4620      	mov	r0, r4
    SendData(x >> 8);
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b55b8:	f006 0af8 	and.w	sl, r6, #248	; 0xf8
    SendCommand(PARTIAL_WINDOW);
   b55bc:	f7ff ff98 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    SendData(x >> 8);
   b55c0:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b55c4:	4620      	mov	r0, r4
   b55c6:	f7ff ff9e 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b55ca:	4651      	mov	r1, sl
   b55cc:	4620      	mov	r0, r4
   b55ce:	f7ff ff9a 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) >> 8);
   b55d2:	4651      	mov	r1, sl
   b55d4:	4429      	add	r1, r5
   b55d6:	3901      	subs	r1, #1
   b55d8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b55dc:	4620      	mov	r0, r4
   b55de:	f7ff ff92 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) | 0x07);
   b55e2:	1e69      	subs	r1, r5, #1
   b55e4:	4451      	add	r1, sl
   b55e6:	f041 0107 	orr.w	r1, r1, #7
   b55ea:	b2c9      	uxtb	r1, r1
   b55ec:	4620      	mov	r0, r4
   b55ee:	f7ff ff8a 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(y >> 8);        
    SendData(y & 0xff);
   b55f2:	fa5f f689 	uxtb.w	r6, r9
    SendData(y >> 8);        
   b55f6:	f3c9 2107 	ubfx	r1, r9, #8, #8
   b55fa:	4620      	mov	r0, r4
   b55fc:	f7ff ff83 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(y & 0xff);
   b5600:	4631      	mov	r1, r6
   b5602:	4620      	mov	r0, r4
   b5604:	f7ff ff7f 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) >> 8);        
   b5608:	eb09 0108 	add.w	r1, r9, r8
   b560c:	3901      	subs	r1, #1
   b560e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5612:	4620      	mov	r0, r4
   b5614:	f7ff ff77 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) & 0xff);
   b5618:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   b561c:	4431      	add	r1, r6
   b561e:	b2c9      	uxtb	r1, r1
   b5620:	4620      	mov	r0, r4
   b5622:	f7ff ff70 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(0x01);         // Gates scan both inside and outside of the partial window. (default) 
   b5626:	2101      	movs	r1, #1
   b5628:	4620      	mov	r0, r4
   b562a:	f7ff ff6c 	bl	b5506 <_ZN3Epd8SendDataEh>
    DelayMs(2);
   b562e:	2002      	movs	r0, #2
   b5630:	f000 f90c 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_1);
   b5634:	2110      	movs	r1, #16
   b5636:	4620      	mov	r0, r4
   b5638:	f7ff ff5a 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    if (buffer_black != NULL) {
   b563c:	b177      	cbz	r7, b565c <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
        for(int i = 0; i < w  / 8 * l; i++) {
   b563e:	2d00      	cmp	r5, #0
   b5640:	bfb8      	it	lt
   b5642:	3507      	addlt	r5, #7
   b5644:	10ed      	asrs	r5, r5, #3
   b5646:	fb08 f505 	mul.w	r5, r8, r5
   b564a:	2600      	movs	r6, #0
   b564c:	42b5      	cmp	r5, r6
   b564e:	dd05      	ble.n	b565c <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
            SendData(buffer_black[i]);  
   b5650:	5db9      	ldrb	r1, [r7, r6]
   b5652:	4620      	mov	r0, r4
   b5654:	f7ff ff57 	bl	b5506 <_ZN3Epd8SendDataEh>
        for(int i = 0; i < w  / 8 * l; i++) {
   b5658:	3601      	adds	r6, #1
   b565a:	e7f7      	b.n	b564c <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xae>
        }  
    }
    DelayMs(2);
   b565c:	2002      	movs	r0, #2
   b565e:	f000 f8f5 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    SendCommand(PARTIAL_OUT);  
   b5662:	4620      	mov	r0, r4
   b5664:	2192      	movs	r1, #146	; 0x92
}
   b5666:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SendCommand(PARTIAL_OUT);  
   b566a:	f7ff bf41 	b.w	b54f0 <_ZN3Epd11SendCommandEh>

000b566e <_ZN3Epd19SetPartialWindowRedEPKhiiii>:

/**
 *  @brief: transmit partial data to the red part of SRAM
 */
void Epd::SetPartialWindowRed(const unsigned char* buffer_red, int x, int y, int w, int l) {
   b566e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5672:	4604      	mov	r4, r0
   b5674:	460f      	mov	r7, r1
    SendCommand(PARTIAL_IN);
   b5676:	2191      	movs	r1, #145	; 0x91
void Epd::SetPartialWindowRed(const unsigned char* buffer_red, int x, int y, int w, int l) {
   b5678:	4616      	mov	r6, r2
   b567a:	4699      	mov	r9, r3
   b567c:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    SendCommand(PARTIAL_IN);
   b5680:	f7ff ff36 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    SendCommand(PARTIAL_WINDOW);
   b5684:	2190      	movs	r1, #144	; 0x90
   b5686:	4620      	mov	r0, r4
    SendData(x >> 8);
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b5688:	f006 0af8 	and.w	sl, r6, #248	; 0xf8
    SendCommand(PARTIAL_WINDOW);
   b568c:	f7ff ff30 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    SendData(x >> 8);
   b5690:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b5694:	4620      	mov	r0, r4
   b5696:	f7ff ff36 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b569a:	4651      	mov	r1, sl
   b569c:	4620      	mov	r0, r4
   b569e:	f7ff ff32 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) >> 8);
   b56a2:	4651      	mov	r1, sl
   b56a4:	4429      	add	r1, r5
   b56a6:	3901      	subs	r1, #1
   b56a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b56ac:	4620      	mov	r0, r4
   b56ae:	f7ff ff2a 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) | 0x07);
   b56b2:	1e69      	subs	r1, r5, #1
   b56b4:	4451      	add	r1, sl
   b56b6:	f041 0107 	orr.w	r1, r1, #7
   b56ba:	b2c9      	uxtb	r1, r1
   b56bc:	4620      	mov	r0, r4
   b56be:	f7ff ff22 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(y >> 8);        
    SendData(y & 0xff);
   b56c2:	fa5f f689 	uxtb.w	r6, r9
    SendData(y >> 8);        
   b56c6:	f3c9 2107 	ubfx	r1, r9, #8, #8
   b56ca:	4620      	mov	r0, r4
   b56cc:	f7ff ff1b 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(y & 0xff);
   b56d0:	4631      	mov	r1, r6
   b56d2:	4620      	mov	r0, r4
   b56d4:	f7ff ff17 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) >> 8);        
   b56d8:	eb09 0108 	add.w	r1, r9, r8
   b56dc:	3901      	subs	r1, #1
   b56de:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b56e2:	4620      	mov	r0, r4
   b56e4:	f7ff ff0f 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) & 0xff);
   b56e8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   b56ec:	4431      	add	r1, r6
   b56ee:	b2c9      	uxtb	r1, r1
   b56f0:	4620      	mov	r0, r4
   b56f2:	f7ff ff08 	bl	b5506 <_ZN3Epd8SendDataEh>
    SendData(0x01);         // Gates scan both inside and outside of the partial window. (default) 
   b56f6:	2101      	movs	r1, #1
   b56f8:	4620      	mov	r0, r4
   b56fa:	f7ff ff04 	bl	b5506 <_ZN3Epd8SendDataEh>
    DelayMs(2);
   b56fe:	2002      	movs	r0, #2
   b5700:	f000 f8a4 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_2);
   b5704:	2113      	movs	r1, #19
   b5706:	4620      	mov	r0, r4
   b5708:	f7ff fef2 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    if (buffer_red != NULL) {
   b570c:	b177      	cbz	r7, b572c <_ZN3Epd19SetPartialWindowRedEPKhiiii+0xbe>
        for(int i = 0; i < w  / 8 * l; i++) {
   b570e:	2d00      	cmp	r5, #0
   b5710:	bfb8      	it	lt
   b5712:	3507      	addlt	r5, #7
   b5714:	10ed      	asrs	r5, r5, #3
   b5716:	fb08 f505 	mul.w	r5, r8, r5
   b571a:	2600      	movs	r6, #0
   b571c:	42b5      	cmp	r5, r6
   b571e:	dd05      	ble.n	b572c <_ZN3Epd19SetPartialWindowRedEPKhiiii+0xbe>
            SendData(buffer_red[i]);  
   b5720:	5db9      	ldrb	r1, [r7, r6]
   b5722:	4620      	mov	r0, r4
   b5724:	f7ff feef 	bl	b5506 <_ZN3Epd8SendDataEh>
        for(int i = 0; i < w  / 8 * l; i++) {
   b5728:	3601      	adds	r6, #1
   b572a:	e7f7      	b.n	b571c <_ZN3Epd19SetPartialWindowRedEPKhiiii+0xae>
        }  
    }
    DelayMs(2);
   b572c:	2002      	movs	r0, #2
   b572e:	f000 f88d 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    SendCommand(PARTIAL_OUT);  
   b5732:	4620      	mov	r0, r4
   b5734:	2192      	movs	r1, #146	; 0x92
}
   b5736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SendCommand(PARTIAL_OUT);  
   b573a:	f7ff bed9 	b.w	b54f0 <_ZN3Epd11SendCommandEh>

000b573e <_ZN3Epd10ClearFrameEv>:
}

/**
 * @brief: clear the frame data from the SRAM, this won't refresh the display
 */
void Epd::ClearFrame(void) {
   b573e:	b538      	push	{r3, r4, r5, lr}
    SendCommand(DATA_START_TRANSMISSION_1);           
   b5740:	2110      	movs	r1, #16
void Epd::ClearFrame(void) {
   b5742:	4604      	mov	r4, r0
    SendCommand(DATA_START_TRANSMISSION_1);           
   b5744:	f7ff fed4 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b5748:	2002      	movs	r0, #2
   b574a:	f000 f87f 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b574e:	2500      	movs	r5, #0
   b5750:	6823      	ldr	r3, [r4, #0]
   b5752:	6862      	ldr	r2, [r4, #4]
   b5754:	08db      	lsrs	r3, r3, #3
   b5756:	4353      	muls	r3, r2
   b5758:	42ab      	cmp	r3, r5
   b575a:	d905      	bls.n	b5768 <_ZN3Epd10ClearFrameEv+0x2a>
        SendData(0xFF);  
   b575c:	21ff      	movs	r1, #255	; 0xff
   b575e:	4620      	mov	r0, r4
   b5760:	f7ff fed1 	bl	b5506 <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b5764:	3501      	adds	r5, #1
   b5766:	e7f3      	b.n	b5750 <_ZN3Epd10ClearFrameEv+0x12>
    }  
    DelayMs(2);
   b5768:	2002      	movs	r0, #2
   b576a:	f000 f86f 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_2);           
   b576e:	2113      	movs	r1, #19
   b5770:	4620      	mov	r0, r4
   b5772:	f7ff febd 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b5776:	2002      	movs	r0, #2
   b5778:	f000 f868 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b577c:	2500      	movs	r5, #0
   b577e:	6823      	ldr	r3, [r4, #0]
   b5780:	6862      	ldr	r2, [r4, #4]
   b5782:	08db      	lsrs	r3, r3, #3
   b5784:	4353      	muls	r3, r2
   b5786:	42ab      	cmp	r3, r5
   b5788:	d905      	bls.n	b5796 <_ZN3Epd10ClearFrameEv+0x58>
        SendData(0xFF);  
   b578a:	21ff      	movs	r1, #255	; 0xff
   b578c:	4620      	mov	r0, r4
   b578e:	f7ff feba 	bl	b5506 <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b5792:	3501      	adds	r5, #1
   b5794:	e7f3      	b.n	b577e <_ZN3Epd10ClearFrameEv+0x40>
    }  
    DelayMs(2);
}
   b5796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    DelayMs(2);
   b579a:	2002      	movs	r0, #2
   b579c:	f000 b856 	b.w	b584c <_ZN5EpdIf7DelayMsEj>

000b57a0 <_ZN3Epd12DisplayFrameEv>:

/**
 * @brief: This displays the frame data from SRAM
 */
void Epd::DisplayFrame(void) {
   b57a0:	b510      	push	{r4, lr}
    SendCommand(DISPLAY_REFRESH); 
   b57a2:	2112      	movs	r1, #18
void Epd::DisplayFrame(void) {
   b57a4:	4604      	mov	r4, r0
    SendCommand(DISPLAY_REFRESH); 
   b57a6:	f7ff fea3 	bl	b54f0 <_ZN3Epd11SendCommandEh>
    DelayMs(100);
   b57aa:	2064      	movs	r0, #100	; 0x64
   b57ac:	f000 f84e 	bl	b584c <_ZN5EpdIf7DelayMsEj>
    WaitUntilIdle();
   b57b0:	4620      	mov	r0, r4
}
   b57b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WaitUntilIdle();
   b57b6:	f7ff beb1 	b.w	b551c <_ZN3Epd13WaitUntilIdleEv>

000b57ba <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b57ba:	4770      	bx	lr

000b57bc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b57bc:	b510      	push	{r4, lr}
  }
   b57be:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b57c0:	4604      	mov	r4, r0
  }
   b57c2:	f7ff f89e 	bl	b4902 <_ZdlPvj>
   b57c6:	4620      	mov	r0, r4
   b57c8:	bd10      	pop	{r4, pc}

000b57ca <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b57ca:	b40e      	push	{r1, r2, r3}
   b57cc:	b503      	push	{r0, r1, lr}
   b57ce:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b57d0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b57d2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b57d6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b57d8:	f002 fdc9 	bl	b836e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b57dc:	b002      	add	sp, #8
   b57de:	f85d eb04 	ldr.w	lr, [sp], #4
   b57e2:	b003      	add	sp, #12
   b57e4:	4770      	bx	lr
	...

000b57e8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b57e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b57ea:	4604      	mov	r4, r0
   b57ec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b57ee:	7922      	ldrb	r2, [r4, #4]
   b57f0:	68a3      	ldr	r3, [r4, #8]
   b57f2:	b132      	cbz	r2, b5802 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b57f4:	b9a3      	cbnz	r3, b5820 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b57f6:	490b      	ldr	r1, [pc, #44]	; (b5824 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b57f8:	b002      	add	sp, #8
   b57fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b57fe:	f002 bd7b 	b.w	b82f8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5802:	4a09      	ldr	r2, [pc, #36]	; (b5828 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b5804:	7b26      	ldrb	r6, [r4, #12]
   b5806:	4d09      	ldr	r5, [pc, #36]	; (b582c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b5808:	4909      	ldr	r1, [pc, #36]	; (b5830 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b580a:	7b64      	ldrb	r4, [r4, #13]
   b580c:	2e01      	cmp	r6, #1
   b580e:	bf18      	it	ne
   b5810:	4629      	movne	r1, r5
   b5812:	e9cd 1400 	strd	r1, r4, [sp]
   b5816:	4907      	ldr	r1, [pc, #28]	; (b5834 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5818:	f7ff ffd7 	bl	b57ca <_ZN5Print6printfEPKcz>
  }
   b581c:	b002      	add	sp, #8
   b581e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5820:	4a05      	ldr	r2, [pc, #20]	; (b5838 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5822:	e7ef      	b.n	b5804 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5824:	000b9499 	.word	0x000b9499
   b5828:	000bcb96 	.word	0x000bcb96
   b582c:	000b9495 	.word	0x000b9495
   b5830:	000b9491 	.word	0x000b9491
   b5834:	000b94af 	.word	0x000b94af
   b5838:	000b9488 	.word	0x000b9488

000b583c <_ZN5EpdIfC1Ev>:
#include "../lib/EPD4_2/src/epdif.h"

#include <spi.h>

EpdIf::EpdIf() {
};
   b583c:	4770      	bx	lr

000b583e <_ZN5EpdIf12DigitalWriteEii>:

EpdIf::~EpdIf() {
};

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
   b583e:	b2c9      	uxtb	r1, r1
   b5840:	b280      	uxth	r0, r0
   b5842:	f003 ba68 	b.w	b8d16 <digitalWrite>

000b5846 <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
   b5846:	b280      	uxth	r0, r0
   b5848:	f003 ba7e 	b.w	b8d48 <digitalRead>

000b584c <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
   b584c:	f000 be18 	b.w	b6480 <delay>

000b5850 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5850:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5852:	4c0b      	ldr	r4, [pc, #44]	; (b5880 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5854:	7821      	ldrb	r1, [r4, #0]
   b5856:	f3bf 8f5b 	dmb	ish
   b585a:	f011 0101 	ands.w	r1, r1, #1
   b585e:	d10b      	bne.n	b5878 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5860:	4620      	mov	r0, r4
   b5862:	9101      	str	r1, [sp, #4]
   b5864:	f7ff f85c 	bl	b4920 <__cxa_guard_acquire>
   b5868:	9901      	ldr	r1, [sp, #4]
   b586a:	b128      	cbz	r0, b5878 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b586c:	4805      	ldr	r0, [pc, #20]	; (b5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b586e:	f002 fdbb 	bl	b83e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5872:	4620      	mov	r0, r4
   b5874:	f7ff f859 	bl	b492a <__cxa_guard_release>
        return instance;
    }
   b5878:	4802      	ldr	r0, [pc, #8]	; (b5884 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b587a:	b002      	add	sp, #8
   b587c:	bd10      	pop	{r4, pc}
   b587e:	bf00      	nop
   b5880:	2003e620 	.word	0x2003e620
   b5884:	2003e624 	.word	0x2003e624

000b5888 <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
   b5888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
   b588a:	2101      	movs	r1, #1
   b588c:	2008      	movs	r0, #8
   b588e:	f003 fa31 	bl	b8cf4 <pinMode>
    pinMode(RST_PIN, OUTPUT);
   b5892:	2101      	movs	r1, #1
   b5894:	2006      	movs	r0, #6
   b5896:	f003 fa2d 	bl	b8cf4 <pinMode>
    pinMode(DC_PIN, OUTPUT);
   b589a:	2101      	movs	r1, #1
   b589c:	2005      	movs	r0, #5
   b589e:	f003 fa29 	bl	b8cf4 <pinMode>
    pinMode(BUSY_PIN, INPUT); 
   b58a2:	2100      	movs	r1, #0
   b58a4:	2007      	movs	r0, #7
   b58a6:	f003 fa25 	bl	b8cf4 <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b58aa:	f7ff ffd1 	bl	b5850 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58ae:	f002 fda5 	bl	b83fc <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
   b58b2:	4b09      	ldr	r3, [pc, #36]	; (b58d8 <_ZN5EpdIf6IfInitEv+0x50>)
   b58b4:	9300      	str	r3, [sp, #0]
   b58b6:	4b09      	ldr	r3, [pc, #36]	; (b58dc <_ZN5EpdIf6IfInitEv+0x54>)
   b58b8:	9302      	str	r3, [sp, #8]
   b58ba:	2400      	movs	r4, #0
   b58bc:	2301      	movs	r3, #1
   b58be:	f8ad 300c 	strh.w	r3, [sp, #12]
   b58c2:	f88d 4004 	strb.w	r4, [sp, #4]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b58c6:	f7ff ffc3 	bl	b5850 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58ca:	4669      	mov	r1, sp
   b58cc:	f002 fdc0 	bl	b8450 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    
    return 0;
}
   b58d0:	4620      	mov	r0, r4
   b58d2:	b004      	add	sp, #16
   b58d4:	bd10      	pop	{r4, pc}
   b58d6:	bf00      	nop
   b58d8:	000b94d4 	.word	0x000b94d4
   b58dc:	001e8480 	.word	0x001e8480

000b58e0 <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
   b58e0:	b510      	push	{r4, lr}
    digitalWrite(CS_PIN, LOW);
   b58e2:	2100      	movs	r1, #0
void EpdIf::SpiTransfer(unsigned char data) {
   b58e4:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
   b58e6:	2008      	movs	r0, #8
   b58e8:	f003 fa15 	bl	b8d16 <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b58ec:	f7ff ffb0 	bl	b5850 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b58f0:	4621      	mov	r1, r4
   b58f2:	f002 fe1b 	bl	b852c <_ZN8SPIClass8transferEh>
}
   b58f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
   b58fa:	2101      	movs	r1, #1
   b58fc:	2008      	movs	r0, #8
   b58fe:	f003 ba0a 	b.w	b8d16 <digitalWrite>

000b5902 <_ZN5PaintC1EPhii>:

#include <avr/pgmspace.h>
//#include "epdpaint.h"
#include "../lib/EPD4_2/src/epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
   b5902:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
   b5904:	2400      	movs	r4, #0
   b5906:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b5908:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
   b590c:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b590e:	d008      	beq.n	b5922 <_ZN5PaintC1EPhii+0x20>
   b5910:	f102 0508 	add.w	r5, r2, #8
   b5914:	4252      	negs	r2, r2
   b5916:	f002 0107 	and.w	r1, r2, #7
   b591a:	4622      	mov	r2, r4
   b591c:	bf58      	it	pl
   b591e:	424a      	negpl	r2, r1
   b5920:	1aaa      	subs	r2, r5, r2
    this->height = height;
   b5922:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
   b5926:	bd30      	pop	{r4, r5, pc}

000b5928 <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
   b5928:	4770      	bx	lr

000b592a <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b592a:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
   b592c:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b592e:	db15      	blt.n	b595c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5930:	6844      	ldr	r4, [r0, #4]
   b5932:	428c      	cmp	r4, r1
   b5934:	dd12      	ble.n	b595c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5936:	2a00      	cmp	r2, #0
   b5938:	db10      	blt.n	b595c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b593a:	6885      	ldr	r5, [r0, #8]
   b593c:	4295      	cmp	r5, r2
   b593e:	dd0d      	ble.n	b595c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b5940:	fb02 1204 	mla	r2, r2, r4, r1
   b5944:	6805      	ldr	r5, [r0, #0]
   b5946:	10d2      	asrs	r2, r2, #3
   b5948:	f001 0107 	and.w	r1, r1, #7
   b594c:	2480      	movs	r4, #128	; 0x80
   b594e:	fa44 f101 	asr.w	r1, r4, r1
   b5952:	56a8      	ldrsb	r0, [r5, r2]
   b5954:	b249      	sxtb	r1, r1
        if (colored) {
   b5956:	b113      	cbz	r3, b595e <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b5958:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b595a:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
   b595c:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b595e:	ea20 0001 	bic.w	r0, r0, r1
   b5962:	e7fa      	b.n	b595a <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

000b5964 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
   b5964:	b570      	push	{r4, r5, r6, lr}
   b5966:	460b      	mov	r3, r1
   b5968:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
   b596a:	2500      	movs	r5, #0
   b596c:	6862      	ldr	r2, [r4, #4]
   b596e:	42aa      	cmp	r2, r5
   b5970:	dd0c      	ble.n	b598c <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
   b5972:	2600      	movs	r6, #0
   b5974:	68a2      	ldr	r2, [r4, #8]
   b5976:	42b2      	cmp	r2, r6
   b5978:	dd06      	ble.n	b5988 <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
   b597a:	4632      	mov	r2, r6
   b597c:	4629      	mov	r1, r5
   b597e:	4620      	mov	r0, r4
   b5980:	f7ff ffd3 	bl	b592a <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
   b5984:	3601      	adds	r6, #1
   b5986:	e7f5      	b.n	b5974 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
   b5988:	3501      	adds	r5, #1
   b598a:	e7ef      	b.n	b596c <_ZN5Paint5ClearEi+0x8>
}
   b598c:	bd70      	pop	{r4, r5, r6, pc}

000b598e <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
   b598e:	6800      	ldr	r0, [r0, #0]
   b5990:	4770      	bx	lr

000b5992 <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
   b5992:	6840      	ldr	r0, [r0, #4]
   b5994:	4770      	bx	lr

000b5996 <_ZN5Paint9GetHeightEv>:
    this->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint::GetHeight(void) {
    return this->height;
}
   b5996:	6880      	ldr	r0, [r0, #8]
   b5998:	4770      	bx	lr

000b599a <_ZN5Paint9SetRotateEi>:
int Paint::GetRotate(void) {
    return this->rotate;
}

void Paint::SetRotate(int rotate){
    this->rotate = rotate;
   b599a:	60c1      	str	r1, [r0, #12]
}
   b599c:	4770      	bx	lr

000b599e <_ZN5Paint9DrawPixelEiii>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
   b599e:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
   b59a0:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
   b59a2:	460d      	mov	r5, r1
   b59a4:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
   b59a6:	b967      	cbnz	r7, b59c2 <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b59a8:	2900      	cmp	r1, #0
   b59aa:	db37      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59ac:	6847      	ldr	r7, [r0, #4]
   b59ae:	428f      	cmp	r7, r1
   b59b0:	dd34      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59b2:	2a00      	cmp	r2, #0
   b59b4:	db32      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59b6:	6885      	ldr	r5, [r0, #8]
   b59b8:	4295      	cmp	r5, r2
   b59ba:	dd2f      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
   b59bc:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
   b59be:	f7ff bfb4 	b.w	b592a <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
   b59c2:	2f01      	cmp	r7, #1
   b59c4:	d10c      	bne.n	b59e0 <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b59c6:	2900      	cmp	r1, #0
   b59c8:	db28      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59ca:	6882      	ldr	r2, [r0, #8]
   b59cc:	428a      	cmp	r2, r1
   b59ce:	dd25      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59d0:	2c00      	cmp	r4, #0
   b59d2:	db23      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59d4:	6841      	ldr	r1, [r0, #4]
   b59d6:	42a1      	cmp	r1, r4
   b59d8:	dd20      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b59da:	462a      	mov	r2, r5
   b59dc:	1b09      	subs	r1, r1, r4
   b59de:	e7ed      	b.n	b59bc <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
   b59e0:	2f02      	cmp	r7, #2
   b59e2:	d10c      	bne.n	b59fe <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b59e4:	2900      	cmp	r1, #0
   b59e6:	db19      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59e8:	6841      	ldr	r1, [r0, #4]
   b59ea:	42a9      	cmp	r1, r5
   b59ec:	dd16      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59ee:	2a00      	cmp	r2, #0
   b59f0:	db14      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b59f2:	6882      	ldr	r2, [r0, #8]
   b59f4:	42a2      	cmp	r2, r4
   b59f6:	dd11      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b59f8:	1b12      	subs	r2, r2, r4
   b59fa:	1b49      	subs	r1, r1, r5
   b59fc:	e7de      	b.n	b59bc <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
   b59fe:	2f03      	cmp	r7, #3
   b5a00:	d10c      	bne.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b5a02:	2900      	cmp	r1, #0
   b5a04:	db0a      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b5a06:	6882      	ldr	r2, [r0, #8]
   b5a08:	428a      	cmp	r2, r1
   b5a0a:	dd07      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b5a0c:	2c00      	cmp	r4, #0
   b5a0e:	db05      	blt.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
   b5a10:	6841      	ldr	r1, [r0, #4]
   b5a12:	42a1      	cmp	r1, r4
   b5a14:	dd02      	ble.n	b5a1c <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5a16:	1b52      	subs	r2, r2, r5
   b5a18:	4621      	mov	r1, r4
   b5a1a:	e7cf      	b.n	b59bc <_ZN5Paint9DrawPixelEiii+0x1e>
}
   b5a1c:	bcf0      	pop	{r4, r5, r6, r7}
   b5a1e:	4770      	bx	lr

000b5a20 <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b5a26:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5a28:	4691      	mov	r9, r2
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b5a2a:	f014 0207 	ands.w	r2, r4, #7
   b5a2e:	bf18      	it	ne
   b5a30:	2201      	movne	r2, #1
   b5a32:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
   b5a36:	88ec      	ldrh	r4, [r5, #6]
   b5a38:	3b20      	subs	r3, #32
   b5a3a:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
   b5a3c:	682c      	ldr	r4, [r5, #0]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5a3e:	4688      	mov	r8, r1
    const unsigned char* ptr = &font->table[char_offset];
   b5a40:	fb03 4402 	mla	r4, r3, r2, r4

    for (j = 0; j < font->Height; j++) {
   b5a44:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b5a46:	f04f 0b80 	mov.w	fp, #128	; 0x80
    for (j = 0; j < font->Height; j++) {
   b5a4a:	88eb      	ldrh	r3, [r5, #6]
   b5a4c:	42bb      	cmp	r3, r7
   b5a4e:	dd20      	ble.n	b5a92 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
   b5a50:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
   b5a52:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
   b5a56:	88ab      	ldrh	r3, [r5, #4]
   b5a58:	42b3      	cmp	r3, r6
   b5a5a:	dd15      	ble.n	b5a88 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b5a5c:	7821      	ldrb	r1, [r4, #0]
   b5a5e:	f006 0a07 	and.w	sl, r6, #7
   b5a62:	fa4b f30a 	asr.w	r3, fp, sl
   b5a66:	4219      	tst	r1, r3
   b5a68:	d008      	beq.n	b5a7c <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
   b5a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5a6c:	9201      	str	r2, [sp, #4]
   b5a6e:	eb06 0108 	add.w	r1, r6, r8
   b5a72:	9000      	str	r0, [sp, #0]
   b5a74:	f7ff ff93 	bl	b599e <_ZN5Paint9DrawPixelEiii>
   b5a78:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
   b5a7c:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
   b5a80:	bf08      	it	eq
   b5a82:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
   b5a84:	3601      	adds	r6, #1
   b5a86:	e7e6      	b.n	b5a56 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
   b5a88:	075b      	lsls	r3, r3, #29
            ptr++;
   b5a8a:	bf18      	it	ne
   b5a8c:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
   b5a8e:	3701      	adds	r7, #1
   b5a90:	e7db      	b.n	b5a4a <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
   b5a92:	b003      	add	sp, #12
   b5a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5a98 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
   b5a98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5a9c:	9f08      	ldr	r7, [sp, #32]
   b5a9e:	4606      	mov	r6, r0
   b5aa0:	460c      	mov	r4, r1
   b5aa2:	4690      	mov	r8, r2
   b5aa4:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
   b5aa6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b5aaa:	b153      	cbz	r3, b5ac2 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
   b5aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5aae:	4621      	mov	r1, r4
   b5ab0:	e9cd 7200 	strd	r7, r2, [sp]
   b5ab4:	4630      	mov	r0, r6
   b5ab6:	4642      	mov	r2, r8
   b5ab8:	f7ff ffb2 	bl	b5a20 <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
   b5abc:	88bb      	ldrh	r3, [r7, #4]
   b5abe:	441c      	add	r4, r3
    while (*p_text != 0) {
   b5ac0:	e7f1      	b.n	b5aa6 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
   b5ac2:	b002      	add	sp, #8
   b5ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5ac8 <_ZN5Paint18DrawHorizontalLineEiiii>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
   b5ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5aca:	4606      	mov	r6, r0
   b5acc:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
   b5ace:	460c      	mov	r4, r1
   b5ad0:	18cd      	adds	r5, r1, r3
   b5ad2:	42a5      	cmp	r5, r4
   b5ad4:	dd07      	ble.n	b5ae6 <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
   b5ad6:	4621      	mov	r1, r4
   b5ad8:	9b06      	ldr	r3, [sp, #24]
   b5ada:	463a      	mov	r2, r7
   b5adc:	4630      	mov	r0, r6
   b5ade:	f7ff ff5e 	bl	b599e <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
   b5ae2:	3401      	adds	r4, #1
   b5ae4:	e7f5      	b.n	b5ad2 <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
   b5ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5ae8 <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
   b5ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5aea:	4606      	mov	r6, r0
   b5aec:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
   b5aee:	4614      	mov	r4, r2
   b5af0:	18d5      	adds	r5, r2, r3
   b5af2:	42a5      	cmp	r5, r4
   b5af4:	dd07      	ble.n	b5b06 <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
   b5af6:	4622      	mov	r2, r4
   b5af8:	9b06      	ldr	r3, [sp, #24]
   b5afa:	4639      	mov	r1, r7
   b5afc:	4630      	mov	r0, r6
   b5afe:	f7ff ff4e 	bl	b599e <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
   b5b02:	3401      	adds	r4, #1
   b5b04:	e7f5      	b.n	b5af2 <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
   b5b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b08 <_ZN5Paint13DrawRectangleEiiiii>:

/**
*  @brief: this draws a rectangle
*/
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5b08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5b0c:	460f      	mov	r7, r1
   b5b0e:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
   b5b12:	42bb      	cmp	r3, r7
   b5b14:	4619      	mov	r1, r3
   b5b16:	bfa8      	it	ge
   b5b18:	4639      	movge	r1, r7
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b5b1a:	42bb      	cmp	r3, r7
   b5b1c:	bfb8      	it	lt
   b5b1e:	463b      	movlt	r3, r7
   b5b20:	4294      	cmp	r4, r2
   b5b22:	4627      	mov	r7, r4
   b5b24:	461d      	mov	r5, r3
    min_y = y1 > y0 ? y0 : y1;
   b5b26:	bfa8      	it	ge
   b5b28:	4617      	movge	r7, r2
    max_y = y1 > y0 ? y1 : y0;
    
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b5b2a:	1a5b      	subs	r3, r3, r1
   b5b2c:	4294      	cmp	r4, r2
   b5b2e:	bfb8      	it	lt
   b5b30:	4614      	movlt	r4, r2
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5b32:	4606      	mov	r6, r0
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b5b34:	3301      	adds	r3, #1
   b5b36:	463a      	mov	r2, r7
   b5b38:	f8cd 8000 	str.w	r8, [sp]
   b5b3c:	9303      	str	r3, [sp, #12]
   b5b3e:	9102      	str	r1, [sp, #8]
   b5b40:	f7ff ffc2 	bl	b5ac8 <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawHorizontalLine(min_x, max_y, max_x - min_x + 1, colored);
   b5b44:	9b03      	ldr	r3, [sp, #12]
   b5b46:	9902      	ldr	r1, [sp, #8]
   b5b48:	f8cd 8000 	str.w	r8, [sp]
   b5b4c:	4622      	mov	r2, r4
   b5b4e:	4630      	mov	r0, r6
   b5b50:	9103      	str	r1, [sp, #12]
   b5b52:	f7ff ffb9 	bl	b5ac8 <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawVerticalLine(min_x, min_y, max_y - min_y + 1, colored);
   b5b56:	1be3      	subs	r3, r4, r7
   b5b58:	9903      	ldr	r1, [sp, #12]
   b5b5a:	f8cd 8000 	str.w	r8, [sp]
   b5b5e:	3301      	adds	r3, #1
   b5b60:	463a      	mov	r2, r7
   b5b62:	4630      	mov	r0, r6
   b5b64:	9302      	str	r3, [sp, #8]
   b5b66:	f7ff ffbf 	bl	b5ae8 <_ZN5Paint16DrawVerticalLineEiiii>
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b5b6a:	9b02      	ldr	r3, [sp, #8]
   b5b6c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5b70:	463a      	mov	r2, r7
   b5b72:	4629      	mov	r1, r5
   b5b74:	4630      	mov	r0, r6
}
   b5b76:	b004      	add	sp, #16
   b5b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b5b7c:	f7ff bfb4 	b.w	b5ae8 <_ZN5Paint16DrawVerticalLineEiiii>

000b5b80 <_ZN5Paint19DrawFilledRectangleEiiiii>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5b80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b84:	428b      	cmp	r3, r1
   b5b86:	4604      	mov	r4, r0
   b5b88:	9808      	ldr	r0, [sp, #32]
   b5b8a:	461e      	mov	r6, r3
   b5b8c:	bfa8      	it	ge
   b5b8e:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b5b90:	428b      	cmp	r3, r1
   b5b92:	bfb8      	it	lt
   b5b94:	460b      	movlt	r3, r1
   b5b96:	4290      	cmp	r0, r2
   b5b98:	4680      	mov	r8, r0
   b5b9a:	bfa8      	it	ge
   b5b9c:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b5b9e:	4290      	cmp	r0, r2
   b5ba0:	bfac      	ite	ge
   b5ba2:	ebc8 0700 	rsbge	r7, r8, r0
   b5ba6:	ebc8 0702 	rsblt	r7, r8, r2
   b5baa:	461d      	mov	r5, r3
   b5bac:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
   b5bae:	42ae      	cmp	r6, r5
   b5bb0:	dc09      	bgt.n	b5bc6 <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b5bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5bb4:	9300      	str	r3, [sp, #0]
   b5bb6:	4631      	mov	r1, r6
   b5bb8:	463b      	mov	r3, r7
   b5bba:	4642      	mov	r2, r8
   b5bbc:	4620      	mov	r0, r4
   b5bbe:	f7ff ff93 	bl	b5ae8 <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
   b5bc2:	3601      	adds	r6, #1
   b5bc4:	e7f3      	b.n	b5bae <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
   b5bc6:	b002      	add	sp, #8
   b5bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5bcc <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b5bcc:	b510      	push	{r4, lr}
   b5bce:	4604      	mov	r4, r0
    Wire.begin(); 
   b5bd0:	f003 f8e8 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5bd4:	f001 f86c 	bl	b6cb0 <_ZN7TwoWire5beginEv>
}
   b5bd8:	4620      	mov	r0, r4
   b5bda:	bd10      	pop	{r4, pc}

000b5bdc <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5bdc:	6803      	ldr	r3, [r0, #0]
   b5bde:	b2c9      	uxtb	r1, r1
   b5be0:	689b      	ldr	r3, [r3, #8]
   b5be2:	4718      	bx	r3

000b5be4 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b5be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b5be8:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b5bea:	2002      	movs	r0, #2
    cmdlen++;
   b5bec:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b5bee:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b5bf0:	f000 fc46 	bl	b6480 <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b5bf4:	f003 f8d6 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5bf8:	2124      	movs	r1, #36	; 0x24
   b5bfa:	f001 f88f 	bl	b6d1c <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b5bfe:	f003 f8d1 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c02:	2100      	movs	r1, #0
   b5c04:	f7ff ffea 	bl	b5bdc <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b5c08:	f003 f8cc 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c0c:	2100      	movs	r1, #0
   b5c0e:	f7ff ffe5 	bl	b5bdc <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b5c12:	f003 f8c7 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c16:	21ff      	movs	r1, #255	; 0xff
   b5c18:	f7ff ffe0 	bl	b5bdc <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b5c1c:	f003 f8c2 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c20:	6803      	ldr	r3, [r0, #0]
   b5c22:	4629      	mov	r1, r5
   b5c24:	689b      	ldr	r3, [r3, #8]
   b5c26:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b5c28:	f003 f8bc 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c2c:	4269      	negs	r1, r5
   b5c2e:	f7ff ffd5 	bl	b5bdc <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b5c32:	f003 f8b7 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c36:	21d4      	movs	r1, #212	; 0xd4
   b5c38:	f7ff ffd0 	bl	b5bdc <_ZN7TwoWire5writeEi>
   b5c3c:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b5c3e:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b5c40:	3d01      	subs	r5, #1
   b5c42:	f104 0801 	add.w	r8, r4, #1
   b5c46:	b2e4      	uxtb	r4, r4
   b5c48:	42ac      	cmp	r4, r5
   b5c4a:	da0a      	bge.n	b5c62 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b5c4c:	f003 f8aa 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c50:	6803      	ldr	r3, [r0, #0]
   b5c52:	5d39      	ldrb	r1, [r7, r4]
   b5c54:	689b      	ldr	r3, [r3, #8]
   b5c56:	4798      	blx	r3
      checksum += cmd[i];
   b5c58:	5d39      	ldrb	r1, [r7, r4]
   b5c5a:	440e      	add	r6, r1
   b5c5c:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b5c5e:	4644      	mov	r4, r8
   b5c60:	e7ef      	b.n	b5c42 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b5c62:	f003 f89f 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c66:	6803      	ldr	r3, [r0, #0]
   b5c68:	43f1      	mvns	r1, r6
   b5c6a:	689b      	ldr	r3, [r3, #8]
   b5c6c:	b2c9      	uxtb	r1, r1
   b5c6e:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b5c70:	f003 f898 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5c74:	6803      	ldr	r3, [r0, #0]
   b5c76:	2100      	movs	r1, #0
   b5c78:	689b      	ldr	r3, [r3, #8]
   b5c7a:	4798      	blx	r3
    Wire.endTransmission();
   b5c7c:	f003 f892 	bl	b8da4 <_Z19__fetch_global_Wirev>
}
   b5c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b5c84:	f001 b851 	b.w	b6d2a <_ZN7TwoWire15endTransmissionEv>

000b5c88 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b5c88:	b538      	push	{r3, r4, r5, lr}
   b5c8a:	4604      	mov	r4, r0
   b5c8c:	4b06      	ldr	r3, [pc, #24]	; (b5ca8 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b5c8e:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b5c92:	4608      	mov	r0, r1
   b5c94:	4615      	mov	r5, r2
   b5c96:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b5c98:	2100      	movs	r1, #0
   b5c9a:	f003 f82b 	bl	b8cf4 <pinMode>
    _mode = mode;
   b5c9e:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b5ca2:	4620      	mov	r0, r4
   b5ca4:	bd38      	pop	{r3, r4, r5, pc}
   b5ca6:	bf00      	nop
   b5ca8:	000bca58 	.word	0x000bca58

000b5cac <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b5cac:	b538      	push	{r3, r4, r5, lr}
   b5cae:	4605      	mov	r5, r0
   b5cb0:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b5cb2:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b5cb6:	f003 f847 	bl	b8d48 <digitalRead>
   b5cba:	b130      	cbz	r0, b5cca <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b5cbc:	3c01      	subs	r4, #1
   b5cbe:	b2a4      	uxth	r4, r4
   b5cc0:	b12c      	cbz	r4, b5cce <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b5cc2:	200a      	movs	r0, #10
   b5cc4:	f000 fbdc 	bl	b6480 <delay>
    while(digitalRead(_irq)!=0){
   b5cc8:	e7f3      	b.n	b5cb2 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b5cca:	2001      	movs	r0, #1
}
   b5ccc:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b5cce:	4620      	mov	r0, r4
   b5cd0:	e7fc      	b.n	b5ccc <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b5cd2 <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b5cd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b5cd4:	2300      	movs	r3, #0
   b5cd6:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b5cda:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b5cde:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b5ce2:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b5ce6:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b5cea:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b5cec:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b5cee:	4604      	mov	r4, r0
   b5cf0:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b5cf2:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b5cf6:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b5cfa:	d141      	bne.n	b5d80 <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b5cfc:	f7ff ffd6 	bl	b5cac <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b5d00:	b910      	cbnz	r0, b5d08 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b5d02:	2000      	movs	r0, #0
}
   b5d04:	b003      	add	sp, #12
   b5d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b5d08:	f003 f84c 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d0c:	2208      	movs	r2, #8
   b5d0e:	2124      	movs	r1, #36	; 0x24
   b5d10:	f000 fffd 	bl	b6d0e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b5d14:	f003 f846 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d18:	6803      	ldr	r3, [r0, #0]
   b5d1a:	695b      	ldr	r3, [r3, #20]
   b5d1c:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b5d1e:	1d26      	adds	r6, r4, #4
   b5d20:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b5d24:	2001      	movs	r0, #1
   b5d26:	f000 fbab 	bl	b6480 <delay>
        receiveACK[i]= Wire.read();
   b5d2a:	f003 f83b 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d2e:	6803      	ldr	r3, [r0, #0]
   b5d30:	695b      	ldr	r3, [r3, #20]
   b5d32:	4798      	blx	r3
   b5d34:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b5d38:	42be      	cmp	r6, r7
   b5d3a:	d1f3      	bne.n	b5d24 <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b5d3c:	4620      	mov	r0, r4
   b5d3e:	f7ff ffb5 	bl	b5cac <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b5d42:	2800      	cmp	r0, #0
   b5d44:	d0dd      	beq.n	b5d02 <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b5d46:	f003 f82d 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d4a:	1f2a      	subs	r2, r5, #4
   b5d4c:	2124      	movs	r1, #36	; 0x24
   b5d4e:	f000 ffde 	bl	b6d0e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b5d52:	f003 f827 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d56:	6803      	ldr	r3, [r0, #0]
   b5d58:	695b      	ldr	r3, [r3, #20]
   b5d5a:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b5d5c:	f06f 0709 	mvn.w	r7, #9
   b5d60:	3d06      	subs	r5, #6
   b5d62:	1b3f      	subs	r7, r7, r4
   b5d64:	19bb      	adds	r3, r7, r6
   b5d66:	429d      	cmp	r5, r3
   b5d68:	dd49      	ble.n	b5dfe <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b5d6a:	2001      	movs	r0, #1
   b5d6c:	f000 fb88 	bl	b6480 <delay>
        receiveACK[6 + i] = Wire.read();
   b5d70:	f003 f818 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d74:	6803      	ldr	r3, [r0, #0]
   b5d76:	695b      	ldr	r3, [r3, #20]
   b5d78:	4798      	blx	r3
   b5d7a:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b5d7e:	e7f1      	b.n	b5d64 <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b5d80:	2b00      	cmp	r3, #0
   b5d82:	d13c      	bne.n	b5dfe <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b5d84:	201e      	movs	r0, #30
   b5d86:	f000 fb7b 	bl	b6480 <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b5d8a:	f003 f80b 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d8e:	2208      	movs	r2, #8
   b5d90:	2124      	movs	r1, #36	; 0x24
   b5d92:	f000 ffbc 	bl	b6d0e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b5d96:	f003 f805 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5d9a:	6803      	ldr	r3, [r0, #0]
   b5d9c:	695b      	ldr	r3, [r3, #20]
   b5d9e:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b5da0:	1d26      	adds	r6, r4, #4
   b5da2:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b5da6:	2001      	movs	r0, #1
   b5da8:	f000 fb6a 	bl	b6480 <delay>
        receiveACK[i]= Wire.read();
   b5dac:	f002 fffa 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5db0:	6803      	ldr	r3, [r0, #0]
   b5db2:	695b      	ldr	r3, [r3, #20]
   b5db4:	4798      	blx	r3
   b5db6:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b5dba:	42be      	cmp	r6, r7
   b5dbc:	d1f3      	bne.n	b5da6 <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b5dbe:	201e      	movs	r0, #30
   b5dc0:	f000 fb5e 	bl	b6480 <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b5dc4:	f002 ffee 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5dc8:	1f2a      	subs	r2, r5, #4
   b5dca:	2124      	movs	r1, #36	; 0x24
   b5dcc:	f000 ff9f 	bl	b6d0e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b5dd0:	f002 ffe8 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5dd4:	6803      	ldr	r3, [r0, #0]
   b5dd6:	695b      	ldr	r3, [r3, #20]
   b5dd8:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b5dda:	f06f 0709 	mvn.w	r7, #9
   b5dde:	3d06      	subs	r5, #6
   b5de0:	1b3f      	subs	r7, r7, r4
   b5de2:	19bb      	adds	r3, r7, r6
   b5de4:	429d      	cmp	r5, r3
   b5de6:	dd0a      	ble.n	b5dfe <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b5de8:	2001      	movs	r0, #1
   b5dea:	f000 fb49 	bl	b6480 <delay>
        receiveACK[6 + i] = Wire.read();
   b5dee:	f002 ffd9 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5df2:	6803      	ldr	r3, [r0, #0]
   b5df4:	695b      	ldr	r3, [r3, #20]
   b5df6:	4798      	blx	r3
   b5df8:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b5dfc:	e7f1      	b.n	b5de2 <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b5dfe:	2206      	movs	r2, #6
   b5e00:	1d21      	adds	r1, r4, #4
   b5e02:	4668      	mov	r0, sp
   b5e04:	f003 f8e7 	bl	b8fd6 <strncmp>
   b5e08:	fab0 f080 	clz	r0, r0
   b5e0c:	0940      	lsrs	r0, r0, #5
   b5e0e:	e779      	b.n	b5d04 <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b5e10 <_ZN17DFRobot_PN532_IIC5beginEv>:
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b5e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    this->nfcPassword[0] = 0xff;
   b5e12:	23ff      	movs	r3, #255	; 0xff
   b5e14:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    this->nfcPassword[1] = 0xff;
   b5e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b5e1c:	4604      	mov	r4, r0
    this->nfcPassword[3] = 0xff;
    this->nfcPassword[4] = 0xff;
    this->nfcPassword[5] = 0xff;
    unsigned char cmdWrite[4];
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
    cmdWrite[1] = 0x01; // normal mode;
   b5e1e:	2501      	movs	r5, #1
    this->nfcPassword[1] = 0xff;
   b5e20:	6283      	str	r3, [r0, #40]	; 0x28
    this->nfcPassword[5] = 0xff;
   b5e22:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
   b5e26:	2314      	movs	r3, #20
   b5e28:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdWrite[2] = 0x14; // timeout 50ms * 20 = 1 second
   b5e2c:	f88d 3006 	strb.w	r3, [sp, #6]
    cmdWrite[1] = 0x01; // normal mode;
   b5e30:	f88d 5005 	strb.w	r5, [sp, #5]
    cmdWrite[3] = 0x01; // use IRQ pin!
   b5e34:	f88d 5007 	strb.w	r5, [sp, #7]
    Wire.begin();
   b5e38:	f002 ffb4 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b5e3c:	f000 ff38 	bl	b6cb0 <_ZN7TwoWire5beginEv>
    nfcEnable = true;
    writeCommand(cmdWrite,4);
   b5e40:	6823      	ldr	r3, [r4, #0]
    nfcEnable = true;
   b5e42:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    writeCommand(cmdWrite,4);
   b5e46:	2204      	movs	r2, #4
   b5e48:	eb0d 0102 	add.w	r1, sp, r2
   b5e4c:	681b      	ldr	r3, [r3, #0]
   b5e4e:	4620      	mov	r0, r4
   b5e50:	4798      	blx	r3
    delay(10);
   b5e52:	200a      	movs	r0, #10
   b5e54:	f000 fb14 	bl	b6480 <delay>
    
    if(readAck(14)!= 1){
   b5e58:	6823      	ldr	r3, [r4, #0]
   b5e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5e5e:	685b      	ldr	r3, [r3, #4]
   b5e60:	210e      	movs	r1, #14
   b5e62:	4620      	mov	r0, r4
   b5e64:	4798      	blx	r3
   b5e66:	b120      	cbz	r0, b5e72 <_ZN17DFRobot_PN532_IIC5beginEv+0x62>
        
        return false;
    }
    return  ( receiveACK[12] == 0x15);
   b5e68:	7c20      	ldrb	r0, [r4, #16]
   b5e6a:	f1a0 0315 	sub.w	r3, r0, #21
   b5e6e:	4258      	negs	r0, r3
   b5e70:	4158      	adcs	r0, r3
}
   b5e72:	b003      	add	sp, #12
   b5e74:	bd30      	pop	{r4, r5, pc}
	...

000b5e78 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5e78:	b508      	push	{r3, lr}
   b5e7a:	4b02      	ldr	r3, [pc, #8]	; (b5e84 <os_mutex_recursive_create+0xc>)
   b5e7c:	681b      	ldr	r3, [r3, #0]
   b5e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5e80:	9301      	str	r3, [sp, #4]
   b5e82:	bd08      	pop	{r3, pc}
   b5e84:	00030248 	.word	0x00030248

000b5e88 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b5e88:	b508      	push	{r3, lr}
   b5e8a:	4b02      	ldr	r3, [pc, #8]	; (b5e94 <os_mutex_recursive_destroy+0xc>)
   b5e8c:	681b      	ldr	r3, [r3, #0]
   b5e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b5e90:	9301      	str	r3, [sp, #4]
   b5e92:	bd08      	pop	{r3, pc}
   b5e94:	00030248 	.word	0x00030248

000b5e98 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b5e98:	b508      	push	{r3, lr}
   b5e9a:	4b02      	ldr	r3, [pc, #8]	; (b5ea4 <os_mutex_recursive_lock+0xc>)
   b5e9c:	681b      	ldr	r3, [r3, #0]
   b5e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5ea0:	9301      	str	r3, [sp, #4]
   b5ea2:	bd08      	pop	{r3, pc}
   b5ea4:	00030248 	.word	0x00030248

000b5ea8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b5ea8:	b508      	push	{r3, lr}
   b5eaa:	4b02      	ldr	r3, [pc, #8]	; (b5eb4 <os_mutex_recursive_unlock+0xc>)
   b5eac:	681b      	ldr	r3, [r3, #0]
   b5eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5eb0:	9301      	str	r3, [sp, #4]
   b5eb2:	bd08      	pop	{r3, pc}
   b5eb4:	00030248 	.word	0x00030248

000b5eb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5eb8:	b508      	push	{r3, lr}
   b5eba:	4b02      	ldr	r3, [pc, #8]	; (b5ec4 <HAL_RNG_GetRandomNumber+0xc>)
   b5ebc:	681b      	ldr	r3, [r3, #0]
   b5ebe:	685b      	ldr	r3, [r3, #4]
   b5ec0:	9301      	str	r3, [sp, #4]
   b5ec2:	bd08      	pop	{r3, pc}
   b5ec4:	00030218 	.word	0x00030218

000b5ec8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ec8:	b508      	push	{r3, lr}
   b5eca:	4b02      	ldr	r3, [pc, #8]	; (b5ed4 <HAL_Delay_Microseconds+0xc>)
   b5ecc:	681b      	ldr	r3, [r3, #0]
   b5ece:	68db      	ldr	r3, [r3, #12]
   b5ed0:	9301      	str	r3, [sp, #4]
   b5ed2:	bd08      	pop	{r3, pc}
   b5ed4:	00030218 	.word	0x00030218

000b5ed8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5ed8:	b508      	push	{r3, lr}
   b5eda:	4b02      	ldr	r3, [pc, #8]	; (b5ee4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5edc:	681b      	ldr	r3, [r3, #0]
   b5ede:	695b      	ldr	r3, [r3, #20]
   b5ee0:	9301      	str	r3, [sp, #4]
   b5ee2:	bd08      	pop	{r3, pc}
   b5ee4:	00030218 	.word	0x00030218

000b5ee8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <hal_rtc_time_is_valid+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030218 	.word	0x00030218

000b5ef8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <hal_rtc_get_time+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030218 	.word	0x00030218

000b5f08 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b02      	ldr	r3, [pc, #8]	; (b5f14 <hal_gpio_mode+0xc>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	689b      	ldr	r3, [r3, #8]
   b5f10:	9301      	str	r3, [sp, #4]
   b5f12:	bd08      	pop	{r3, pc}
   b5f14:	0003022c 	.word	0x0003022c

000b5f18 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b5f18:	b508      	push	{r3, lr}
   b5f1a:	4b02      	ldr	r3, [pc, #8]	; (b5f24 <hal_gpio_get_mode+0xc>)
   b5f1c:	681b      	ldr	r3, [r3, #0]
   b5f1e:	68db      	ldr	r3, [r3, #12]
   b5f20:	9301      	str	r3, [sp, #4]
   b5f22:	bd08      	pop	{r3, pc}
   b5f24:	0003022c 	.word	0x0003022c

000b5f28 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b5f28:	b508      	push	{r3, lr}
   b5f2a:	4b02      	ldr	r3, [pc, #8]	; (b5f34 <hal_gpio_write+0xc>)
   b5f2c:	681b      	ldr	r3, [r3, #0]
   b5f2e:	691b      	ldr	r3, [r3, #16]
   b5f30:	9301      	str	r3, [sp, #4]
   b5f32:	bd08      	pop	{r3, pc}
   b5f34:	0003022c 	.word	0x0003022c

000b5f38 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b5f38:	b508      	push	{r3, lr}
   b5f3a:	4b02      	ldr	r3, [pc, #8]	; (b5f44 <hal_gpio_read+0xc>)
   b5f3c:	681b      	ldr	r3, [r3, #0]
   b5f3e:	695b      	ldr	r3, [r3, #20]
   b5f40:	9301      	str	r3, [sp, #4]
   b5f42:	bd08      	pop	{r3, pc}
   b5f44:	0003022c 	.word	0x0003022c

000b5f48 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5f48:	b508      	push	{r3, lr}
   b5f4a:	4b02      	ldr	r3, [pc, #8]	; (b5f54 <hal_i2c_begin+0xc>)
   b5f4c:	681b      	ldr	r3, [r3, #0]
   b5f4e:	68db      	ldr	r3, [r3, #12]
   b5f50:	9301      	str	r3, [sp, #4]
   b5f52:	bd08      	pop	{r3, pc}
   b5f54:	00030228 	.word	0x00030228

000b5f58 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5f58:	b508      	push	{r3, lr}
   b5f5a:	4b02      	ldr	r3, [pc, #8]	; (b5f64 <hal_i2c_begin_transmission+0xc>)
   b5f5c:	681b      	ldr	r3, [r3, #0]
   b5f5e:	699b      	ldr	r3, [r3, #24]
   b5f60:	9301      	str	r3, [sp, #4]
   b5f62:	bd08      	pop	{r3, pc}
   b5f64:	00030228 	.word	0x00030228

000b5f68 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5f68:	b508      	push	{r3, lr}
   b5f6a:	4b02      	ldr	r3, [pc, #8]	; (b5f74 <hal_i2c_end_transmission+0xc>)
   b5f6c:	681b      	ldr	r3, [r3, #0]
   b5f6e:	69db      	ldr	r3, [r3, #28]
   b5f70:	9301      	str	r3, [sp, #4]
   b5f72:	bd08      	pop	{r3, pc}
   b5f74:	00030228 	.word	0x00030228

000b5f78 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5f78:	b508      	push	{r3, lr}
   b5f7a:	4b02      	ldr	r3, [pc, #8]	; (b5f84 <hal_i2c_write+0xc>)
   b5f7c:	681b      	ldr	r3, [r3, #0]
   b5f7e:	6a1b      	ldr	r3, [r3, #32]
   b5f80:	9301      	str	r3, [sp, #4]
   b5f82:	bd08      	pop	{r3, pc}
   b5f84:	00030228 	.word	0x00030228

000b5f88 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5f88:	b508      	push	{r3, lr}
   b5f8a:	4b02      	ldr	r3, [pc, #8]	; (b5f94 <hal_i2c_available+0xc>)
   b5f8c:	681b      	ldr	r3, [r3, #0]
   b5f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f90:	9301      	str	r3, [sp, #4]
   b5f92:	bd08      	pop	{r3, pc}
   b5f94:	00030228 	.word	0x00030228

000b5f98 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5f98:	b508      	push	{r3, lr}
   b5f9a:	4b02      	ldr	r3, [pc, #8]	; (b5fa4 <hal_i2c_read+0xc>)
   b5f9c:	681b      	ldr	r3, [r3, #0]
   b5f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5fa0:	9301      	str	r3, [sp, #4]
   b5fa2:	bd08      	pop	{r3, pc}
   b5fa4:	00030228 	.word	0x00030228

000b5fa8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5fa8:	b508      	push	{r3, lr}
   b5faa:	4b02      	ldr	r3, [pc, #8]	; (b5fb4 <hal_i2c_peek+0xc>)
   b5fac:	681b      	ldr	r3, [r3, #0]
   b5fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fb0:	9301      	str	r3, [sp, #4]
   b5fb2:	bd08      	pop	{r3, pc}
   b5fb4:	00030228 	.word	0x00030228

000b5fb8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5fb8:	b508      	push	{r3, lr}
   b5fba:	4b02      	ldr	r3, [pc, #8]	; (b5fc4 <hal_i2c_flush+0xc>)
   b5fbc:	681b      	ldr	r3, [r3, #0]
   b5fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5fc0:	9301      	str	r3, [sp, #4]
   b5fc2:	bd08      	pop	{r3, pc}
   b5fc4:	00030228 	.word	0x00030228

000b5fc8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <hal_i2c_is_enabled+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030228 	.word	0x00030228

000b5fd8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <hal_i2c_init+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030228 	.word	0x00030228

000b5fe8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <hal_i2c_request_ex+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030228 	.word	0x00030228

000b5ff8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <inet_inet_ntop+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	695b      	ldr	r3, [r3, #20]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030264 	.word	0x00030264

000b6008 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <netdb_freeaddrinfo+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	689b      	ldr	r3, [r3, #8]
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030268 	.word	0x00030268

000b6018 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <netdb_getaddrinfo+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	68db      	ldr	r3, [r3, #12]
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030268 	.word	0x00030268

000b6028 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <hal_spi_begin+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	681b      	ldr	r3, [r3, #0]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	00030230 	.word	0x00030230

000b6038 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <hal_spi_transfer+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	695b      	ldr	r3, [r3, #20]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	00030230 	.word	0x00030230

000b6048 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <hal_spi_init+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	69db      	ldr	r3, [r3, #28]
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	00030230 	.word	0x00030230

000b6058 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <hal_spi_is_enabled+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	6a1b      	ldr	r3, [r3, #32]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	00030230 	.word	0x00030230

000b6068 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <hal_spi_info+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	00030230 	.word	0x00030230

000b6078 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <hal_spi_set_settings+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	00030230 	.word	0x00030230

000b6088 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <hal_spi_acquire+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	00030230 	.word	0x00030230

000b6098 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <hal_spi_release+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	00030230 	.word	0x00030230

000b60a8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <hal_usart_end+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	689b      	ldr	r3, [r3, #8]
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	0003023c 	.word	0x0003023c

000b60b8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <hal_usart_write+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	68db      	ldr	r3, [r3, #12]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	0003023c 	.word	0x0003023c

000b60c8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <hal_usart_available+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	691b      	ldr	r3, [r3, #16]
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	0003023c 	.word	0x0003023c

000b60d8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <hal_usart_read+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	695b      	ldr	r3, [r3, #20]
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	0003023c 	.word	0x0003023c

000b60e8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <hal_usart_peek+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	699b      	ldr	r3, [r3, #24]
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	0003023c 	.word	0x0003023c

000b60f8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <hal_usart_flush+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	69db      	ldr	r3, [r3, #28]
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	0003023c 	.word	0x0003023c

000b6108 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <hal_usart_is_enabled+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6a1b      	ldr	r3, [r3, #32]
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	0003023c 	.word	0x0003023c

000b6118 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <hal_usart_available_data_for_write+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	0003023c 	.word	0x0003023c

000b6128 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <hal_usart_begin_config+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	0003023c 	.word	0x0003023c

000b6138 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <hal_usart_init_ex+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	0003023c 	.word	0x0003023c

000b6148 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <HAL_USB_USART_Init+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	681b      	ldr	r3, [r3, #0]
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	0003024c 	.word	0x0003024c

000b6158 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <HAL_USB_USART_Begin+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	685b      	ldr	r3, [r3, #4]
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	0003024c 	.word	0x0003024c

000b6168 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <HAL_USB_USART_End+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	689b      	ldr	r3, [r3, #8]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	0003024c 	.word	0x0003024c

000b6178 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <HAL_USB_USART_Available_Data+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	691b      	ldr	r3, [r3, #16]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	0003024c 	.word	0x0003024c

000b6188 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	695b      	ldr	r3, [r3, #20]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	0003024c 	.word	0x0003024c

000b6198 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <HAL_USB_USART_Receive_Data+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	699b      	ldr	r3, [r3, #24]
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	0003024c 	.word	0x0003024c

000b61a8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <HAL_USB_USART_Send_Data+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	69db      	ldr	r3, [r3, #28]
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	0003024c 	.word	0x0003024c

000b61b8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <HAL_USB_USART_Flush_Data+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6a1b      	ldr	r3, [r3, #32]
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	0003024c 	.word	0x0003024c

000b61c8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <panic_+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030260 	.word	0x00030260

000b61d8 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <log_level_name+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030260 	.word	0x00030260

000b61e8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <log_set_callbacks+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030260 	.word	0x00030260

000b61f8 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <system_mode+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	681b      	ldr	r3, [r3, #0]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030220 	.word	0x00030220

000b6208 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <set_system_mode+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	685b      	ldr	r3, [r3, #4]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030220 	.word	0x00030220

000b6218 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <system_delay_ms+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	695b      	ldr	r3, [r3, #20]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030220 	.word	0x00030220

000b6228 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <system_thread_set_state+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030220 	.word	0x00030220

000b6238 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <application_thread_current+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	00030220 	.word	0x00030220

000b6248 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <application_thread_invoke+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	00030220 	.word	0x00030220

000b6258 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <system_thread_get_state+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	00030220 	.word	0x00030220

000b6268 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b03      	ldr	r3, [pc, #12]	; (b6278 <system_ctrl_set_app_request_handler+0x10>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6272:	9301      	str	r3, [sp, #4]
   b6274:	bd08      	pop	{r3, pc}
   b6276:	0000      	.short	0x0000
   b6278:	00030220 	.word	0x00030220

000b627c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b627c:	b508      	push	{r3, lr}
   b627e:	4b03      	ldr	r3, [pc, #12]	; (b628c <system_ctrl_set_result+0x10>)
   b6280:	681b      	ldr	r3, [r3, #0]
   b6282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6286:	9301      	str	r3, [sp, #4]
   b6288:	bd08      	pop	{r3, pc}
   b628a:	0000      	.short	0x0000
   b628c:	00030220 	.word	0x00030220

000b6290 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <spark_process+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	689b      	ldr	r3, [r3, #8]
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030244 	.word	0x00030244

000b62a0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <spark_cloud_flag_connect+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	68db      	ldr	r3, [r3, #12]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030244 	.word	0x00030244

000b62b0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <spark_cloud_flag_connected+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	695b      	ldr	r3, [r3, #20]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030244 	.word	0x00030244

000b62c0 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <spark_send_event+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6a1b      	ldr	r3, [r3, #32]
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030244 	.word	0x00030244

000b62d0 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <spark_subscribe+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030244 	.word	0x00030244

000b62e0 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <spark_sync_time_pending+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	00030244 	.word	0x00030244

000b62f0 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <spark_set_connection_property+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	00030244 	.word	0x00030244

000b6300 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	00030244 	.word	0x00030244

000b6310 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <spark_cloud_disconnect+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	00030244 	.word	0x00030244

000b6320 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <network_connect+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	685b      	ldr	r3, [r3, #4]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030240 	.word	0x00030240

000b6330 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <network_connecting+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	689b      	ldr	r3, [r3, #8]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030240 	.word	0x00030240

000b6340 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <network_disconnect+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	68db      	ldr	r3, [r3, #12]
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030240 	.word	0x00030240

000b6350 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <network_ready+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	691b      	ldr	r3, [r3, #16]
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030240 	.word	0x00030240

000b6360 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <network_on+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	695b      	ldr	r3, [r3, #20]
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030240 	.word	0x00030240

000b6370 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <network_off+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	699b      	ldr	r3, [r3, #24]
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030240 	.word	0x00030240

000b6380 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <network_listen+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	69db      	ldr	r3, [r3, #28]
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030240 	.word	0x00030240

000b6390 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <network_listening+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	6a1b      	ldr	r3, [r3, #32]
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	00030240 	.word	0x00030240

000b63a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <network_set_listen_timeout+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	00030240 	.word	0x00030240

000b63b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <network_get_listen_timeout+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	00030240 	.word	0x00030240

000b63c0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <network_is_on+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	00030240 	.word	0x00030240

000b63d0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <network_is_off+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	00030240 	.word	0x00030240

000b63e0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <malloc+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	681b      	ldr	r3, [r3, #0]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	0003021c 	.word	0x0003021c

000b63f0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <free+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	685b      	ldr	r3, [r3, #4]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	0003021c 	.word	0x0003021c

000b6400 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <realloc+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	689b      	ldr	r3, [r3, #8]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	0003021c 	.word	0x0003021c

000b6410 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <vsnprintf+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	0003021c 	.word	0x0003021c

000b6420 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <abort+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	0003021c 	.word	0x0003021c

000b6430 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <_malloc_r+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	0003021c 	.word	0x0003021c

000b6440 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <__errno+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	0003021c 	.word	0x0003021c

000b6450 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <__assert_func+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	0003021c 	.word	0x0003021c

000b6460 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <newlib_impure_ptr_callback+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	0003021c 	.word	0x0003021c

000b6470 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <localtime_r+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	0003021c 	.word	0x0003021c

000b6480 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6480:	2100      	movs	r1, #0
   b6482:	f7ff bec9 	b.w	b6218 <system_delay_ms>

000b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b6486:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6488:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b648a:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b648c:	b17c      	cbz	r4, b64ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b648e:	6863      	ldr	r3, [r4, #4]
   b6490:	3b01      	subs	r3, #1
   b6492:	6063      	str	r3, [r4, #4]
   b6494:	b95b      	cbnz	r3, b64ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b6496:	6823      	ldr	r3, [r4, #0]
   b6498:	4620      	mov	r0, r4
   b649a:	689b      	ldr	r3, [r3, #8]
   b649c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b649e:	68a3      	ldr	r3, [r4, #8]
   b64a0:	3b01      	subs	r3, #1
   b64a2:	60a3      	str	r3, [r4, #8]
   b64a4:	b91b      	cbnz	r3, b64ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b64a6:	6823      	ldr	r3, [r4, #0]
   b64a8:	4620      	mov	r0, r4
   b64aa:	68db      	ldr	r3, [r3, #12]
   b64ac:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b64ae:	4628      	mov	r0, r5
   b64b0:	bd38      	pop	{r3, r4, r5, pc}

000b64b2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b64b2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b64b4:	6883      	ldr	r3, [r0, #8]
   b64b6:	4604      	mov	r4, r0
   b64b8:	b90b      	cbnz	r3, b64be <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b64ba:	f002 fcdb 	bl	b8e74 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b64be:	68c3      	ldr	r3, [r0, #12]
   b64c0:	4798      	blx	r3
      if (_M_manager)
   b64c2:	68a3      	ldr	r3, [r4, #8]
   b64c4:	b11b      	cbz	r3, b64ce <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b64c6:	2203      	movs	r2, #3
   b64c8:	4621      	mov	r1, r4
   b64ca:	4620      	mov	r0, r4
   b64cc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b64ce:	4620      	mov	r0, r4
   b64d0:	2110      	movs	r1, #16
}
   b64d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b64d6:	f7fe ba14 	b.w	b4902 <_ZdlPvj>

000b64da <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b64da:	b510      	push	{r4, lr}
      if (_M_manager)
   b64dc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b64de:	4604      	mov	r4, r0
      if (_M_manager)
   b64e0:	b113      	cbz	r3, b64e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b64e2:	2203      	movs	r2, #3
   b64e4:	4601      	mov	r1, r0
   b64e6:	4798      	blx	r3
    }
   b64e8:	4620      	mov	r0, r4
   b64ea:	bd10      	pop	{r4, pc}

000b64ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b64ec:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b64ee:	6843      	ldr	r3, [r0, #4]
   b64f0:	3b01      	subs	r3, #1
    {
   b64f2:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b64f4:	6043      	str	r3, [r0, #4]
   b64f6:	b963      	cbnz	r3, b6512 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b64f8:	6803      	ldr	r3, [r0, #0]
   b64fa:	689b      	ldr	r3, [r3, #8]
   b64fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b64fe:	68a3      	ldr	r3, [r4, #8]
   b6500:	3b01      	subs	r3, #1
   b6502:	60a3      	str	r3, [r4, #8]
   b6504:	b92b      	cbnz	r3, b6512 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b6506:	6823      	ldr	r3, [r4, #0]
   b6508:	4620      	mov	r0, r4
   b650a:	68db      	ldr	r3, [r3, #12]
    }
   b650c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b6510:	4718      	bx	r3
    }
   b6512:	bd10      	pop	{r4, pc}

000b6514 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b6514:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b6516:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b651a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b651c:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b6520:	42ae      	cmp	r6, r5
   b6522:	d004      	beq.n	b652e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b6524:	4628      	mov	r0, r5
   b6526:	f002 f807 	bl	b8538 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b652a:	3510      	adds	r5, #16
   b652c:	e7f8      	b.n	b6520 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b652e:	6820      	ldr	r0, [r4, #0]
   b6530:	f7ff ff5e 	bl	b63f0 <free>
    AllocatorT::free(data_);
}
   b6534:	4620      	mov	r0, r4
   b6536:	bd70      	pop	{r4, r5, r6, pc}

000b6538 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6538:	b513      	push	{r0, r1, r4, lr}
   b653a:	460b      	mov	r3, r1
   b653c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b653e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6542:	466c      	mov	r4, sp
   b6544:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6548:	e893 0003 	ldmia.w	r3, {r0, r1}
   b654c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6550:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6554:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6558:	b002      	add	sp, #8
   b655a:	bd10      	pop	{r4, pc}

000b655c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b655c:	4802      	ldr	r0, [pc, #8]	; (b6568 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b655e:	2300      	movs	r3, #0
   b6560:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6562:	f7ff bc89 	b.w	b5e78 <os_mutex_recursive_create>
   b6566:	bf00      	nop
   b6568:	2003e62c 	.word	0x2003e62c

000b656c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b656c:	2200      	movs	r2, #0
   b656e:	6840      	ldr	r0, [r0, #4]
   b6570:	4611      	mov	r1, r2
   b6572:	f7ff beed 	b.w	b6350 <network_ready>

000b6576 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6576:	2200      	movs	r2, #0
   b6578:	6840      	ldr	r0, [r0, #4]
   b657a:	4611      	mov	r1, r2
   b657c:	f7ff bf08 	b.w	b6390 <network_listening>

000b6580 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6580:	2200      	movs	r2, #0
   b6582:	6840      	ldr	r0, [r0, #4]
   b6584:	4611      	mov	r1, r2
   b6586:	f7ff bf13 	b.w	b63b0 <network_get_listen_timeout>

000b658a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b658a:	6840      	ldr	r0, [r0, #4]
   b658c:	2200      	movs	r2, #0
   b658e:	f7ff bf07 	b.w	b63a0 <network_set_listen_timeout>

000b6592 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6592:	6840      	ldr	r0, [r0, #4]
   b6594:	2200      	movs	r2, #0
   b6596:	f081 0101 	eor.w	r1, r1, #1
   b659a:	f7ff bef1 	b.w	b6380 <network_listen>

000b659e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b659e:	2300      	movs	r3, #0
   b65a0:	6840      	ldr	r0, [r0, #4]
   b65a2:	461a      	mov	r2, r3
   b65a4:	4619      	mov	r1, r3
   b65a6:	f7ff bee3 	b.w	b6370 <network_off>

000b65aa <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b65aa:	2300      	movs	r3, #0
   b65ac:	6840      	ldr	r0, [r0, #4]
   b65ae:	461a      	mov	r2, r3
   b65b0:	4619      	mov	r1, r3
   b65b2:	f7ff bed5 	b.w	b6360 <network_on>

000b65b6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b65b6:	2200      	movs	r2, #0
   b65b8:	6840      	ldr	r0, [r0, #4]
   b65ba:	4611      	mov	r1, r2
   b65bc:	f7ff beb8 	b.w	b6330 <network_connecting>

000b65c0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65c0:	6840      	ldr	r0, [r0, #4]
   b65c2:	2200      	movs	r2, #0
   b65c4:	2102      	movs	r1, #2
   b65c6:	f7ff bebb 	b.w	b6340 <network_disconnect>

000b65ca <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b65ca:	2300      	movs	r3, #0
   b65cc:	6840      	ldr	r0, [r0, #4]
   b65ce:	461a      	mov	r2, r3
   b65d0:	f7ff bea6 	b.w	b6320 <network_connect>

000b65d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b65d4:	4b08      	ldr	r3, [pc, #32]	; (b65f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b65d6:	b510      	push	{r4, lr}
   b65d8:	2428      	movs	r4, #40	; 0x28
   b65da:	4622      	mov	r2, r4
   b65dc:	4618      	mov	r0, r3
   b65de:	2100      	movs	r1, #0
   b65e0:	f002 fc86 	bl	b8ef0 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b65e4:	4b05      	ldr	r3, [pc, #20]	; (b65fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b65e6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b65e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b65ec:	6042      	str	r2, [r0, #4]
   b65ee:	2204      	movs	r2, #4
   b65f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b65f2:	4a03      	ldr	r2, [pc, #12]	; (b6600 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b65f4:	601a      	str	r2, [r3, #0]
   b65f6:	bd10      	pop	{r4, pc}
   b65f8:	2003e638 	.word	0x2003e638
   b65fc:	2003e630 	.word	0x2003e630
   b6600:	000bca68 	.word	0x000bca68

000b6604 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6604:	4770      	bx	lr

000b6606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6606:	2000      	movs	r0, #0
   b6608:	4770      	bx	lr

000b660a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b660a:	b510      	push	{r4, lr}
   b660c:	2110      	movs	r1, #16
   b660e:	4604      	mov	r4, r0
   b6610:	f7fe f977 	bl	b4902 <_ZdlPvj>
   b6614:	4620      	mov	r0, r4
   b6616:	bd10      	pop	{r4, pc}

000b6618 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6618:	b508      	push	{r3, lr}
      { delete this; }
   b661a:	f7ff fff6 	bl	b660a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b661e:	bd08      	pop	{r3, pc}

000b6620 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6620:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6622:	2200      	movs	r2, #0
   b6624:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6628:	6002      	str	r2, [r0, #0]
   b662a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b662c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b662e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6630:	680c      	ldr	r4, [r1, #0]
   b6632:	8085      	strh	r5, [r0, #4]
   b6634:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6636:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6638:	bd30      	pop	{r4, r5, pc}

000b663a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b663a:	b510      	push	{r4, lr}
   b663c:	4604      	mov	r4, r0
    free((void*)msg_);
   b663e:	6800      	ldr	r0, [r0, #0]
   b6640:	f7ff fed6 	bl	b63f0 <free>
}
   b6644:	4620      	mov	r0, r4
   b6646:	bd10      	pop	{r4, pc}

000b6648 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6648:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b664a:	68c4      	ldr	r4, [r0, #12]
   b664c:	b1f4      	cbz	r4, b668c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b664e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6650:	2b02      	cmp	r3, #2
   b6652:	d103      	bne.n	b665c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6654:	f104 000c 	add.w	r0, r4, #12
   b6658:	f7ff ffef 	bl	b663a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b665c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b665e:	b135      	cbz	r5, b666e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6660:	4628      	mov	r0, r5
   b6662:	f7ff ff3a 	bl	b64da <_ZNSt14_Function_baseD1Ev>
   b6666:	2110      	movs	r1, #16
   b6668:	4628      	mov	r0, r5
   b666a:	f7fe f94a 	bl	b4902 <_ZdlPvj>
   b666e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6670:	b135      	cbz	r5, b6680 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6672:	4628      	mov	r0, r5
   b6674:	f7ff ff31 	bl	b64da <_ZNSt14_Function_baseD1Ev>
   b6678:	2110      	movs	r1, #16
   b667a:	4628      	mov	r0, r5
   b667c:	f7fe f941 	bl	b4902 <_ZdlPvj>
   b6680:	4620      	mov	r0, r4
   b6682:	2114      	movs	r1, #20
   b6684:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6688:	f7fe b93b 	b.w	b4902 <_ZdlPvj>
   b668c:	bd38      	pop	{r3, r4, r5, pc}

000b668e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b668e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b6690:	230c      	movs	r3, #12
   b6692:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b6696:	6803      	ldr	r3, [r0, #0]
   b6698:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b669c:	7a03      	ldrb	r3, [r0, #8]
   b669e:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b66a2:	6843      	ldr	r3, [r0, #4]
   b66a4:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b66a6:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b66a8:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b66aa:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b66ae:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b66b0:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b66b4:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b66b8:	f7ff fe2a 	bl	b6310 <spark_cloud_disconnect>
}
   b66bc:	b005      	add	sp, #20
   b66be:	f85d fb04 	ldr.w	pc, [sp], #4

000b66c2 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b66c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b66c4:	220c      	movs	r2, #12
   b66c6:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b66ca:	6802      	ldr	r2, [r0, #0]
   b66cc:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b66d0:	7a02      	ldrb	r2, [r0, #8]
   b66d2:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b66d6:	6842      	ldr	r2, [r0, #4]
   b66d8:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b66da:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b66dc:	7a42      	ldrb	r2, [r0, #9]
   b66de:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b66e2:	4619      	mov	r1, r3
   b66e4:	aa01      	add	r2, sp, #4
   b66e6:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b66e8:	f8ad 300d 	strh.w	r3, [sp, #13]
   b66ec:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b66f0:	f7ff fdfe 	bl	b62f0 <spark_set_connection_property>
}
   b66f4:	b005      	add	sp, #20
   b66f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b66fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b66fa:	680b      	ldr	r3, [r1, #0]
   b66fc:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b66fe:	684b      	ldr	r3, [r1, #4]
   b6700:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b6702:	b113      	cbz	r3, b670a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6704:	685a      	ldr	r2, [r3, #4]
   b6706:	3201      	adds	r2, #1
   b6708:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b670a:	4770      	bx	lr

000b670c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b670c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b670e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6710:	4668      	mov	r0, sp
   b6712:	460d      	mov	r5, r1
   b6714:	f7ff fff1 	bl	b66fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6718:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b671a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b671c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b671e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6720:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6722:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6724:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6726:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6728:	f7ff fead 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b672c:	b135      	cbz	r5, b673c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b672e:	1d28      	adds	r0, r5, #4
   b6730:	f7ff fea9 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6734:	2108      	movs	r1, #8
   b6736:	4628      	mov	r0, r5
   b6738:	f7fe f8e3 	bl	b4902 <_ZdlPvj>
        return p;
    }
   b673c:	4620      	mov	r0, r4
   b673e:	b003      	add	sp, #12
   b6740:	bd30      	pop	{r4, r5, pc}

000b6742 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6742:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6744:	b510      	push	{r4, lr}
      if (_M_empty())
   b6746:	b90a      	cbnz	r2, b674c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6748:	f002 fb94 	bl	b8e74 <_ZSt25__throw_bad_function_callv>
    }
   b674c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6750:	68c3      	ldr	r3, [r0, #12]
   b6752:	4718      	bx	r3

000b6754 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6754:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6756:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6758:	f100 0110 	add.w	r1, r0, #16
   b675c:	f7ff fff1 	bl	b6742 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6760:	bd08      	pop	{r3, pc}

000b6762 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6762:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6764:	b510      	push	{r4, lr}
      if (_M_empty())
   b6766:	b90a      	cbnz	r2, b676c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6768:	f002 fb84 	bl	b8e74 <_ZSt25__throw_bad_function_callv>
    }
   b676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6770:	68c3      	ldr	r3, [r0, #12]
   b6772:	4718      	bx	r3

000b6774 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6774:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6776:	6800      	ldr	r0, [r0, #0]
   b6778:	f100 0110 	add.w	r1, r0, #16
   b677c:	f7ff fff1 	bl	b6762 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6780:	bd08      	pop	{r3, pc}
	...

000b6784 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6784:	b538      	push	{r3, r4, r5, lr}
   b6786:	2300      	movs	r3, #0
   b6788:	4604      	mov	r4, r0
   b678a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b678c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b678e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6790:	f7fe f8b3 	bl	b48fa <_Znwj>
   b6794:	b128      	cbz	r0, b67a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6796:	2301      	movs	r3, #1
   b6798:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b679c:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b679e:	6003      	str	r3, [r0, #0]
   b67a0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b67a2:	6020      	str	r0, [r4, #0]
	}
   b67a4:	4620      	mov	r0, r4
   b67a6:	bd38      	pop	{r3, r4, r5, pc}
   b67a8:	000bcaa4 	.word	0x000bcaa4

000b67ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b67ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b67ae:	2300      	movs	r3, #0
   b67b0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b67b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b67b4:	4604      	mov	r4, r0
   b67b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b67b8:	b12b      	cbz	r3, b67c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b67ba:	2202      	movs	r2, #2
   b67bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b67be:	68eb      	ldr	r3, [r5, #12]
   b67c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b67c2:	68ab      	ldr	r3, [r5, #8]
   b67c4:	60a3      	str	r3, [r4, #8]
    }
   b67c6:	4620      	mov	r0, r4
   b67c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b67cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b67cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b67ce:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b67d0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b67d2:	4668      	mov	r0, sp
   b67d4:	f7ff ff24 	bl	b6620 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b67d8:	f04f 0302 	mov.w	r3, #2
   b67dc:	e8d4 2f4f 	ldrexb	r2, [r4]
   b67e0:	2a00      	cmp	r2, #0
   b67e2:	d103      	bne.n	b67ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b67e4:	e8c4 3f41 	strexb	r1, r3, [r4]
   b67e8:	2900      	cmp	r1, #0
   b67ea:	d1f7      	bne.n	b67dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b67ec:	d125      	bne.n	b683a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b67ee:	f104 050c 	add.w	r5, r4, #12
   b67f2:	4669      	mov	r1, sp
   b67f4:	4628      	mov	r0, r5
   b67f6:	f7ff ff13 	bl	b6620 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b67fa:	f3bf 8f5b 	dmb	ish
   b67fe:	2301      	movs	r3, #1
   b6800:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6802:	2000      	movs	r0, #0
   b6804:	f104 0308 	add.w	r3, r4, #8
   b6808:	f3bf 8f5b 	dmb	ish
   b680c:	e853 6f00 	ldrex	r6, [r3]
   b6810:	e843 0200 	strex	r2, r0, [r3]
   b6814:	2a00      	cmp	r2, #0
   b6816:	d1f9      	bne.n	b680c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6818:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b681c:	b16e      	cbz	r6, b683a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b681e:	f7ff fd0b 	bl	b6238 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6822:	b178      	cbz	r0, b6844 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6824:	4629      	mov	r1, r5
   b6826:	4630      	mov	r0, r6
   b6828:	f7ff ff8b 	bl	b6742 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b682c:	4630      	mov	r0, r6
   b682e:	f7ff fe54 	bl	b64da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6832:	2110      	movs	r1, #16
   b6834:	4630      	mov	r0, r6
   b6836:	f7fe f864 	bl	b4902 <_ZdlPvj>
        p_->setError(std::move(error));
   b683a:	4668      	mov	r0, sp
   b683c:	f7ff fefd 	bl	b663a <_ZN8particle5ErrorD1Ev>
    }
   b6840:	b009      	add	sp, #36	; 0x24
   b6842:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6844:	4631      	mov	r1, r6
   b6846:	a802      	add	r0, sp, #8
   b6848:	f7ff ffb0 	bl	b67ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b684c:	68e0      	ldr	r0, [r4, #12]
   b684e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6852:	b108      	cbz	r0, b6858 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6854:	f002 fba2 	bl	b8f9c <strdup>
        type_(type) {
   b6858:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b685a:	2010      	movs	r0, #16
   b685c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6860:	f7fe f84b 	bl	b48fa <_Znwj>
   b6864:	4605      	mov	r5, r0
   b6866:	b1e8      	cbz	r0, b68a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6868:	2700      	movs	r7, #0
   b686a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b686c:	2018      	movs	r0, #24
   b686e:	f7fe f844 	bl	b48fa <_Znwj>
   b6872:	4604      	mov	r4, r0
   b6874:	b188      	cbz	r0, b689a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6876:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6878:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b687a:	a802      	add	r0, sp, #8
   b687c:	f7ff fe5c 	bl	b6538 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6880:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6882:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6884:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6886:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6888:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b688a:	a906      	add	r1, sp, #24
   b688c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b688e:	60e3      	str	r3, [r4, #12]
   b6890:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6894:	9205      	str	r2, [sp, #20]
   b6896:	f7ff fec3 	bl	b6620 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b689a:	4b08      	ldr	r3, [pc, #32]	; (b68bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b689c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b689e:	4b08      	ldr	r3, [pc, #32]	; (b68c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b68a0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b68a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b68a4:	a806      	add	r0, sp, #24
   b68a6:	f7ff fec8 	bl	b663a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b68aa:	a802      	add	r0, sp, #8
   b68ac:	f7ff fe15 	bl	b64da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b68b0:	2200      	movs	r2, #0
   b68b2:	4629      	mov	r1, r5
   b68b4:	4803      	ldr	r0, [pc, #12]	; (b68c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b68b6:	f7ff fcc7 	bl	b6248 <application_thread_invoke>
   b68ba:	e7b7      	b.n	b682c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b68bc:	000b6755 	.word	0x000b6755
   b68c0:	000b69d9 	.word	0x000b69d9
   b68c4:	000b64b3 	.word	0x000b64b3

000b68c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b68c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68cc:	b08b      	sub	sp, #44	; 0x2c
   b68ce:	4605      	mov	r5, r0
   b68d0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b68d4:	460f      	mov	r7, r1
   b68d6:	4690      	mov	r8, r2
   b68d8:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b68da:	f7ff fce9 	bl	b62b0 <spark_cloud_flag_connected>
   b68de:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b68e0:	4683      	mov	fp, r0
   b68e2:	bb38      	cbnz	r0, b6934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b68e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b68e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b68ea:	a905      	add	r1, sp, #20
   b68ec:	4630      	mov	r0, r6
   b68ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   b68f2:	f7ff fe95 	bl	b6620 <_ZN8particle5ErrorC1EOS0_>
   b68f6:	2014      	movs	r0, #20
   b68f8:	f7fd ffff 	bl	b48fa <_Znwj>
   b68fc:	4604      	mov	r4, r0
   b68fe:	b148      	cbz	r0, b6914 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6900:	2302      	movs	r3, #2
   b6902:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6904:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6906:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b690a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b690c:	4631      	mov	r1, r6
   b690e:	300c      	adds	r0, #12
   b6910:	f7ff fe86 	bl	b6620 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6914:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6916:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6918:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b691c:	f7ff ff32 	bl	b6784 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6920:	4630      	mov	r0, r6
   b6922:	f7ff fe8a 	bl	b663a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6926:	a805      	add	r0, sp, #20
   b6928:	f7ff fe87 	bl	b663a <_ZN8particle5ErrorD1Ev>
}
   b692c:	4628      	mov	r0, r5
   b692e:	b00b      	add	sp, #44	; 0x2c
   b6930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6934:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6936:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6938:	2014      	movs	r0, #20
   b693a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b693e:	9307      	str	r3, [sp, #28]
   b6940:	f7fd ffdb 	bl	b48fa <_Znwj>
   b6944:	4601      	mov	r1, r0
   b6946:	b118      	cbz	r0, b6950 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6948:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b694c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b694e:	7044      	strb	r4, [r0, #1]
   b6950:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6952:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6954:	f7ff ff16 	bl	b6784 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6958:	4b1e      	ldr	r3, [pc, #120]	; (b69d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b695a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b695c:	2008      	movs	r0, #8
   b695e:	f7fd ffcc 	bl	b48fa <_Znwj>
   b6962:	4604      	mov	r4, r0
   b6964:	b110      	cbz	r0, b696c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6966:	a903      	add	r1, sp, #12
   b6968:	f7ff fec7 	bl	b66fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b696c:	9600      	str	r6, [sp, #0]
   b696e:	fa5f f38a 	uxtb.w	r3, sl
   b6972:	464a      	mov	r2, r9
   b6974:	4641      	mov	r1, r8
   b6976:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6978:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b697a:	f7ff fca1 	bl	b62c0 <spark_send_event>
   b697e:	b9b8      	cbnz	r0, b69b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6980:	9b03      	ldr	r3, [sp, #12]
   b6982:	785b      	ldrb	r3, [r3, #1]
   b6984:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6988:	b993      	cbnz	r3, b69b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b698a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b698e:	a905      	add	r1, sp, #20
   b6990:	a803      	add	r0, sp, #12
   b6992:	9205      	str	r2, [sp, #20]
   b6994:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6998:	f7ff ff18 	bl	b67cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b699c:	a805      	add	r0, sp, #20
   b699e:	f7ff fe4c 	bl	b663a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b69a2:	a805      	add	r0, sp, #20
   b69a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b69a6:	f7ff feb1 	bl	b670c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b69aa:	a806      	add	r0, sp, #24
   b69ac:	f7ff fd6b 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69b0:	a903      	add	r1, sp, #12
   b69b2:	a805      	add	r0, sp, #20
   b69b4:	f7ff fea1 	bl	b66fa <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b69b8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b69ba:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b69bc:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b69be:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b69c0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b69c2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b69c4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b69c6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b69c8:	f7ff fd5d 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b69cc:	a804      	add	r0, sp, #16
   b69ce:	f7ff fd5a 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b69d2:	e7ab      	b.n	b692c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b69d4:	000b6a55 	.word	0x000b6a55

000b69d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b69d8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b69da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b69dc:	4605      	mov	r5, r0
	switch (__op)
   b69de:	d103      	bne.n	b69e8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b69e0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b69e2:	6003      	str	r3, [r0, #0]
      }
   b69e4:	2000      	movs	r0, #0
   b69e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b69e8:	2a02      	cmp	r2, #2
   b69ea:	d010      	beq.n	b6a0e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b69ec:	2a03      	cmp	r2, #3
   b69ee:	d1f9      	bne.n	b69e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b69f0:	6804      	ldr	r4, [r0, #0]
   b69f2:	2c00      	cmp	r4, #0
   b69f4:	d0f6      	beq.n	b69e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b69f6:	f104 0010 	add.w	r0, r4, #16
   b69fa:	f7ff fe1e 	bl	b663a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b69fe:	4620      	mov	r0, r4
   b6a00:	f7ff fd6b 	bl	b64da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6a04:	2118      	movs	r1, #24
   b6a06:	4620      	mov	r0, r4
   b6a08:	f7fd ff7b 	bl	b4902 <_ZdlPvj>
   b6a0c:	e7ea      	b.n	b69e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6a0e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6a10:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6a12:	f7fd ff72 	bl	b48fa <_Znwj>
   b6a16:	4604      	mov	r4, r0
   b6a18:	b150      	cbz	r0, b6a30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6a1a:	4631      	mov	r1, r6
   b6a1c:	f7ff fec6 	bl	b67ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6a20:	6930      	ldr	r0, [r6, #16]
   b6a22:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a26:	b108      	cbz	r0, b6a2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6a28:	f002 fab8 	bl	b8f9c <strdup>
        type_(type) {
   b6a2c:	6120      	str	r0, [r4, #16]
   b6a2e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6a30:	602c      	str	r4, [r5, #0]
	}
   b6a32:	e7d7      	b.n	b69e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6a34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6a34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6a36:	2300      	movs	r3, #0
   b6a38:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6a3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6a3c:	4604      	mov	r4, r0
   b6a3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6a40:	b12b      	cbz	r3, b6a4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6a42:	2202      	movs	r2, #2
   b6a44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6a46:	68eb      	ldr	r3, [r5, #12]
   b6a48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6a4a:	68ab      	ldr	r3, [r5, #8]
   b6a4c:	60a3      	str	r3, [r4, #8]
    }
   b6a4e:	4620      	mov	r0, r4
   b6a50:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6a54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6a56:	b089      	sub	sp, #36	; 0x24
   b6a58:	4604      	mov	r4, r0
   b6a5a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6a5c:	a801      	add	r0, sp, #4
   b6a5e:	4611      	mov	r1, r2
   b6a60:	f7ff fe54 	bl	b670c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6a64:	b1a4      	cbz	r4, b6a90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6a66:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6a68:	b11d      	cbz	r5, b6a72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6a6a:	4628      	mov	r0, r5
   b6a6c:	f002 fa96 	bl	b8f9c <strdup>
   b6a70:	4605      	mov	r5, r0
   b6a72:	a801      	add	r0, sp, #4
   b6a74:	a903      	add	r1, sp, #12
        type_(type) {
   b6a76:	9503      	str	r5, [sp, #12]
   b6a78:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6a7c:	f7ff fea6 	bl	b67cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6a80:	a803      	add	r0, sp, #12
   b6a82:	f7ff fdda 	bl	b663a <_ZN8particle5ErrorD1Ev>
   b6a86:	a802      	add	r0, sp, #8
   b6a88:	f7ff fcfd 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6a8c:	b009      	add	sp, #36	; 0x24
   b6a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6a90:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6a92:	2301      	movs	r3, #1
   b6a94:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6a98:	2a00      	cmp	r2, #0
   b6a9a:	d103      	bne.n	b6aa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6a9c:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6aa0:	2900      	cmp	r1, #0
   b6aa2:	d1f7      	bne.n	b6a94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6aa4:	d1ef      	bne.n	b6a86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6aa6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6aa8:	f3bf 8f5b 	dmb	ish
   b6aac:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6aae:	1d2b      	adds	r3, r5, #4
   b6ab0:	f3bf 8f5b 	dmb	ish
   b6ab4:	e853 6f00 	ldrex	r6, [r3]
   b6ab8:	e843 4200 	strex	r2, r4, [r3]
   b6abc:	2a00      	cmp	r2, #0
   b6abe:	d1f9      	bne.n	b6ab4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6ac0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6ac4:	2e00      	cmp	r6, #0
   b6ac6:	d0de      	beq.n	b6a86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6ac8:	4620      	mov	r0, r4
   b6aca:	f7ff fbb5 	bl	b6238 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6ace:	4607      	mov	r7, r0
   b6ad0:	b160      	cbz	r0, b6aec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6ad2:	f105 010c 	add.w	r1, r5, #12
   b6ad6:	4630      	mov	r0, r6
   b6ad8:	f7ff fe43 	bl	b6762 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6adc:	4630      	mov	r0, r6
   b6ade:	f7ff fcfc 	bl	b64da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6ae2:	2110      	movs	r1, #16
   b6ae4:	4630      	mov	r0, r6
   b6ae6:	f7fd ff0c 	bl	b4902 <_ZdlPvj>
   b6aea:	e7cc      	b.n	b6a86 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6aec:	4631      	mov	r1, r6
   b6aee:	a803      	add	r0, sp, #12
   b6af0:	f7ff ffa0 	bl	b6a34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6af4:	7b2b      	ldrb	r3, [r5, #12]
   b6af6:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6afa:	2010      	movs	r0, #16
   b6afc:	f7fd fefd 	bl	b48fa <_Znwj>
   b6b00:	4605      	mov	r5, r0
   b6b02:	b1d0      	cbz	r0, b6b3a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6b04:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b06:	2014      	movs	r0, #20
   b6b08:	f7fd fef7 	bl	b48fa <_Znwj>
   b6b0c:	4604      	mov	r4, r0
   b6b0e:	b178      	cbz	r0, b6b30 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6b10:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6b12:	4601      	mov	r1, r0
   b6b14:	a803      	add	r0, sp, #12
   b6b16:	f7ff fd0f 	bl	b6538 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b1a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6b1c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b1e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b20:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6b22:	9205      	str	r2, [sp, #20]
   b6b24:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b26:	60e3      	str	r3, [r4, #12]
   b6b28:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6b2c:	9206      	str	r2, [sp, #24]
   b6b2e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6b30:	4b06      	ldr	r3, [pc, #24]	; (b6b4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6b32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b34:	4b06      	ldr	r3, [pc, #24]	; (b6b50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b36:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b38:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6b3a:	a803      	add	r0, sp, #12
   b6b3c:	f7ff fccd 	bl	b64da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6b40:	2200      	movs	r2, #0
   b6b42:	4629      	mov	r1, r5
   b6b44:	4803      	ldr	r0, [pc, #12]	; (b6b54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6b46:	f7ff fb7f 	bl	b6248 <application_thread_invoke>
   b6b4a:	e7c7      	b.n	b6adc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6b4c:	000b6775 	.word	0x000b6775
   b6b50:	000b6b59 	.word	0x000b6b59
   b6b54:	000b64b3 	.word	0x000b64b3

000b6b58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6b58:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6b5a:	b570      	push	{r4, r5, r6, lr}
   b6b5c:	4604      	mov	r4, r0
	switch (__op)
   b6b5e:	d103      	bne.n	b6b68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6b60:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6b62:	6003      	str	r3, [r0, #0]
      }
   b6b64:	2000      	movs	r0, #0
   b6b66:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6b68:	2a02      	cmp	r2, #2
   b6b6a:	d00c      	beq.n	b6b86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6b6c:	2a03      	cmp	r2, #3
   b6b6e:	d1f9      	bne.n	b6b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6b70:	6804      	ldr	r4, [r0, #0]
   b6b72:	2c00      	cmp	r4, #0
   b6b74:	d0f6      	beq.n	b6b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6b76:	4620      	mov	r0, r4
   b6b78:	f7ff fcaf 	bl	b64da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6b7c:	2114      	movs	r1, #20
   b6b7e:	4620      	mov	r0, r4
   b6b80:	f7fd febf 	bl	b4902 <_ZdlPvj>
   b6b84:	e7ee      	b.n	b6b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b86:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6b88:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6b8a:	f7fd feb6 	bl	b48fa <_Znwj>
   b6b8e:	4605      	mov	r5, r0
   b6b90:	b120      	cbz	r0, b6b9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6b92:	4631      	mov	r1, r6
   b6b94:	f7ff ff4e 	bl	b6a34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6b98:	7c33      	ldrb	r3, [r6, #16]
   b6b9a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6b9c:	6025      	str	r5, [r4, #0]
	}
   b6b9e:	e7e1      	b.n	b6b64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6ba0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6ba0:	2200      	movs	r2, #0
   b6ba2:	6840      	ldr	r0, [r0, #4]
   b6ba4:	4611      	mov	r1, r2
   b6ba6:	f7ff bbf3 	b.w	b6390 <network_listening>

000b6baa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6baa:	2200      	movs	r2, #0
   b6bac:	6840      	ldr	r0, [r0, #4]
   b6bae:	4611      	mov	r1, r2
   b6bb0:	f7ff bbfe 	b.w	b63b0 <network_get_listen_timeout>

000b6bb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6bb4:	6840      	ldr	r0, [r0, #4]
   b6bb6:	2200      	movs	r2, #0
   b6bb8:	f7ff bbf2 	b.w	b63a0 <network_set_listen_timeout>

000b6bbc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6bbc:	6840      	ldr	r0, [r0, #4]
   b6bbe:	2200      	movs	r2, #0
   b6bc0:	f081 0101 	eor.w	r1, r1, #1
   b6bc4:	f7ff bbdc 	b.w	b6380 <network_listen>

000b6bc8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6bc8:	2300      	movs	r3, #0
   b6bca:	6840      	ldr	r0, [r0, #4]
   b6bcc:	461a      	mov	r2, r3
   b6bce:	4619      	mov	r1, r3
   b6bd0:	f7ff bbce 	b.w	b6370 <network_off>

000b6bd4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6bd4:	2300      	movs	r3, #0
   b6bd6:	6840      	ldr	r0, [r0, #4]
   b6bd8:	461a      	mov	r2, r3
   b6bda:	4619      	mov	r1, r3
   b6bdc:	f7ff bbc0 	b.w	b6360 <network_on>

000b6be0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6be0:	2200      	movs	r2, #0
   b6be2:	6840      	ldr	r0, [r0, #4]
   b6be4:	4611      	mov	r1, r2
   b6be6:	f7ff bbb3 	b.w	b6350 <network_ready>

000b6bea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6bea:	2200      	movs	r2, #0
   b6bec:	6840      	ldr	r0, [r0, #4]
   b6bee:	4611      	mov	r1, r2
   b6bf0:	f7ff bb9e 	b.w	b6330 <network_connecting>

000b6bf4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6bf4:	6840      	ldr	r0, [r0, #4]
   b6bf6:	2200      	movs	r2, #0
   b6bf8:	2102      	movs	r1, #2
   b6bfa:	f7ff bba1 	b.w	b6340 <network_disconnect>

000b6bfe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6bfe:	2300      	movs	r3, #0
   b6c00:	6840      	ldr	r0, [r0, #4]
   b6c02:	461a      	mov	r2, r3
   b6c04:	f7ff bb8c 	b.w	b6320 <network_connect>

000b6c08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6c08:	4b02      	ldr	r3, [pc, #8]	; (b6c14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6c0a:	2203      	movs	r2, #3
   b6c0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6c0e:	4a02      	ldr	r2, [pc, #8]	; (b6c18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6c10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6c12:	4770      	bx	lr
   b6c14:	2003e660 	.word	0x2003e660
   b6c18:	000bcac0 	.word	0x000bcac0

000b6c1c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6c1c:	4770      	bx	lr

000b6c1e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c20:	4606      	mov	r6, r0
   b6c22:	4615      	mov	r5, r2
   b6c24:	460c      	mov	r4, r1
   b6c26:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6c28:	42bc      	cmp	r4, r7
   b6c2a:	d006      	beq.n	b6c3a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6c2c:	6833      	ldr	r3, [r6, #0]
   b6c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6c32:	689b      	ldr	r3, [r3, #8]
   b6c34:	4630      	mov	r0, r6
   b6c36:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6c38:	e7f6      	b.n	b6c28 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6c3a:	4628      	mov	r0, r5
   b6c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c3e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6c3e:	7c00      	ldrb	r0, [r0, #16]
   b6c40:	2200      	movs	r2, #0
   b6c42:	f7ff b999 	b.w	b5f78 <hal_i2c_write>

000b6c46 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6c46:	7c00      	ldrb	r0, [r0, #16]
   b6c48:	2100      	movs	r1, #0
   b6c4a:	f7ff b99d 	b.w	b5f88 <hal_i2c_available>

000b6c4e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6c4e:	7c00      	ldrb	r0, [r0, #16]
   b6c50:	2100      	movs	r1, #0
   b6c52:	f7ff b9a1 	b.w	b5f98 <hal_i2c_read>

000b6c56 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6c56:	7c00      	ldrb	r0, [r0, #16]
   b6c58:	2100      	movs	r1, #0
   b6c5a:	f7ff b9a5 	b.w	b5fa8 <hal_i2c_peek>

000b6c5e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6c5e:	7c00      	ldrb	r0, [r0, #16]
   b6c60:	2100      	movs	r1, #0
   b6c62:	f7ff b9a9 	b.w	b5fb8 <hal_i2c_flush>

000b6c66 <_ZN7TwoWireD0Ev>:
   b6c66:	b510      	push	{r4, lr}
   b6c68:	2114      	movs	r1, #20
   b6c6a:	4604      	mov	r4, r0
   b6c6c:	f7fd fe49 	bl	b4902 <_ZdlPvj>
   b6c70:	4620      	mov	r0, r4
   b6c72:	bd10      	pop	{r4, pc}

000b6c74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c74:	b538      	push	{r3, r4, r5, lr}
   b6c76:	4604      	mov	r4, r0
   b6c78:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c7e:	2200      	movs	r2, #0
   b6c80:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6c84:	4b09      	ldr	r3, [pc, #36]	; (b6cac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6c86:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6c88:	4608      	mov	r0, r1
   b6c8a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6c8c:	4629      	mov	r1, r5
   b6c8e:	f7ff f9a3 	bl	b5fd8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6c92:	30bf      	adds	r0, #191	; 0xbf
   b6c94:	d108      	bne.n	b6ca8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6c96:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6c98:	07db      	lsls	r3, r3, #31
   b6c9a:	d505      	bpl.n	b6ca8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6c9c:	6868      	ldr	r0, [r5, #4]
   b6c9e:	f7ff fba7 	bl	b63f0 <free>
    free(conf.tx_buffer);
   b6ca2:	68e8      	ldr	r0, [r5, #12]
   b6ca4:	f7ff fba4 	bl	b63f0 <free>
}
   b6ca8:	4620      	mov	r0, r4
   b6caa:	bd38      	pop	{r3, r4, r5, pc}
   b6cac:	000bcafc 	.word	0x000bcafc

000b6cb0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6cb0:	2300      	movs	r3, #0
   b6cb2:	7c00      	ldrb	r0, [r0, #16]
   b6cb4:	461a      	mov	r2, r3
   b6cb6:	4619      	mov	r1, r3
   b6cb8:	f7ff b946 	b.w	b5f48 <hal_i2c_begin>

000b6cbc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6cbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6cbe:	2200      	movs	r2, #0
   b6cc0:	2314      	movs	r3, #20
   b6cc2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6cc6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6cca:	780b      	ldrb	r3, [r1, #0]
   b6ccc:	f88d 3008 	strb.w	r3, [sp, #8]
   b6cd0:	684b      	ldr	r3, [r1, #4]
   b6cd2:	9303      	str	r3, [sp, #12]
   b6cd4:	68cb      	ldr	r3, [r1, #12]
   b6cd6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6cd8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6cda:	7a0b      	ldrb	r3, [r1, #8]
   b6cdc:	9305      	str	r3, [sp, #20]
   b6cde:	a901      	add	r1, sp, #4
   b6ce0:	f7ff f982 	bl	b5fe8 <hal_i2c_request_ex>
}
   b6ce4:	b007      	add	sp, #28
   b6ce6:	f85d fb04 	ldr.w	pc, [sp], #4

000b6cea <_ZN7TwoWire11requestFromEhjh>:
{
   b6cea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6cec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6cee:	f88d 1000 	strb.w	r1, [sp]
   b6cf2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6cf6:	9103      	str	r1, [sp, #12]
   b6cf8:	bf18      	it	ne
   b6cfa:	2301      	movne	r3, #1
   b6cfc:	4669      	mov	r1, sp
    size_ = size;
   b6cfe:	9201      	str	r2, [sp, #4]
   b6d00:	f88d 3008 	strb.w	r3, [sp, #8]
   b6d04:	f7ff ffda 	bl	b6cbc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6d08:	b005      	add	sp, #20
   b6d0a:	f85d fb04 	ldr.w	pc, [sp], #4

000b6d0e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b6d0e:	2301      	movs	r3, #1
   b6d10:	f7ff bfeb 	b.w	b6cea <_ZN7TwoWire11requestFromEhjh>

000b6d14 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6d14:	7c00      	ldrb	r0, [r0, #16]
   b6d16:	2200      	movs	r2, #0
   b6d18:	f7ff b91e 	b.w	b5f58 <hal_i2c_begin_transmission>

000b6d1c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6d1c:	b2c9      	uxtb	r1, r1
   b6d1e:	f7ff bff9 	b.w	b6d14 <_ZN7TwoWire17beginTransmissionEh>

000b6d22 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6d22:	7c00      	ldrb	r0, [r0, #16]
   b6d24:	2200      	movs	r2, #0
   b6d26:	f7ff b91f 	b.w	b5f68 <hal_i2c_end_transmission>

000b6d2a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6d2a:	2101      	movs	r1, #1
   b6d2c:	f7ff bff9 	b.w	b6d22 <_ZN7TwoWire15endTransmissionEh>

000b6d30 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6d30:	4770      	bx	lr

000b6d32 <_ZN9IPAddressD0Ev>:
   b6d32:	b510      	push	{r4, lr}
   b6d34:	2118      	movs	r1, #24
   b6d36:	4604      	mov	r4, r0
   b6d38:	f7fd fde3 	bl	b4902 <_ZdlPvj>
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	bd10      	pop	{r4, pc}

000b6d40 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6d40:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6d42:	7d03      	ldrb	r3, [r0, #20]
   b6d44:	2b06      	cmp	r3, #6
{
   b6d46:	b08d      	sub	sp, #52	; 0x34
   b6d48:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d4a:	f100 0704 	add.w	r7, r0, #4
   b6d4e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6d52:	d012      	beq.n	b6d7a <_ZNK9IPAddress7printToER5Print+0x3a>
   b6d54:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6d58:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6d5c:	220a      	movs	r2, #10
   b6d5e:	4630      	mov	r0, r6
   b6d60:	f001 fae7 	bl	b8332 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6d64:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6d66:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6d68:	d019      	beq.n	b6d9e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6d6a:	2c00      	cmp	r4, #0
   b6d6c:	d0f4      	beq.n	b6d58 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6d6e:	212e      	movs	r1, #46	; 0x2e
   b6d70:	4630      	mov	r0, r6
   b6d72:	f001 fac5 	bl	b8300 <_ZN5Print5printEc>
   b6d76:	4404      	add	r4, r0
   b6d78:	e7ee      	b.n	b6d58 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d7a:	232f      	movs	r3, #47	; 0x2f
   b6d7c:	466a      	mov	r2, sp
   b6d7e:	4639      	mov	r1, r7
   b6d80:	200a      	movs	r0, #10
		buf[0] = 0;
   b6d82:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6d86:	f7ff f937 	bl	b5ff8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6d8a:	4668      	mov	r0, sp
   b6d8c:	f7fd fd72 	bl	b4874 <strlen>
   b6d90:	6833      	ldr	r3, [r6, #0]
   b6d92:	4602      	mov	r2, r0
   b6d94:	68db      	ldr	r3, [r3, #12]
   b6d96:	4669      	mov	r1, sp
   b6d98:	4630      	mov	r0, r6
   b6d9a:	4798      	blx	r3
   b6d9c:	4604      	mov	r4, r0
    }
    return n;
}
   b6d9e:	4620      	mov	r0, r4
   b6da0:	b00d      	add	sp, #52	; 0x34
   b6da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6da4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6da4:	b510      	push	{r4, lr}
   b6da6:	4b05      	ldr	r3, [pc, #20]	; (b6dbc <_ZN9IPAddressC1Ev+0x18>)
   b6da8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6daa:	2211      	movs	r2, #17
   b6dac:	f840 3b04 	str.w	r3, [r0], #4
   b6db0:	2100      	movs	r1, #0
   b6db2:	f002 f89d 	bl	b8ef0 <memset>
}
   b6db6:	4620      	mov	r0, r4
   b6db8:	bd10      	pop	{r4, pc}
   b6dba:	bf00      	nop
   b6dbc:	000bcb24 	.word	0x000bcb24

000b6dc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6dc0:	4603      	mov	r3, r0
   b6dc2:	4a07      	ldr	r2, [pc, #28]	; (b6de0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6dc4:	b510      	push	{r4, lr}
   b6dc6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6dca:	f101 0210 	add.w	r2, r1, #16
   b6dce:	f851 4b04 	ldr.w	r4, [r1], #4
   b6dd2:	f843 4b04 	str.w	r4, [r3], #4
   b6dd6:	4291      	cmp	r1, r2
   b6dd8:	d1f9      	bne.n	b6dce <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6dda:	780a      	ldrb	r2, [r1, #0]
   b6ddc:	701a      	strb	r2, [r3, #0]
}
   b6dde:	bd10      	pop	{r4, pc}
   b6de0:	000bcb24 	.word	0x000bcb24

000b6de4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6de4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6de6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6dea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6dee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6df2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6df6:	2304      	movs	r3, #4
   b6df8:	6041      	str	r1, [r0, #4]
   b6dfa:	7503      	strb	r3, [r0, #20]
}
   b6dfc:	bd10      	pop	{r4, pc}
	...

000b6e00 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6e00:	b507      	push	{r0, r1, r2, lr}
   b6e02:	4b06      	ldr	r3, [pc, #24]	; (b6e1c <_ZN9IPAddressC1EPKh+0x1c>)
   b6e04:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6e06:	78cb      	ldrb	r3, [r1, #3]
   b6e08:	9300      	str	r3, [sp, #0]
   b6e0a:	788b      	ldrb	r3, [r1, #2]
   b6e0c:	784a      	ldrb	r2, [r1, #1]
   b6e0e:	7809      	ldrb	r1, [r1, #0]
   b6e10:	f7ff ffe8 	bl	b6de4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6e14:	b003      	add	sp, #12
   b6e16:	f85d fb04 	ldr.w	pc, [sp], #4
   b6e1a:	bf00      	nop
   b6e1c:	000bcb24 	.word	0x000bcb24

000b6e20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b6e20:	f100 0310 	add.w	r3, r0, #16
   b6e24:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b6e26:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6e2a:	2901      	cmp	r1, #1
   b6e2c:	4618      	mov	r0, r3
   b6e2e:	d108      	bne.n	b6e42 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6e30:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b6e34:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6e38:	3a01      	subs	r2, #1
   b6e3a:	f103 0310 	add.w	r3, r3, #16
   b6e3e:	d1f2      	bne.n	b6e26 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6e40:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b6e42:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b6e44:	bf04      	itt	eq
   b6e46:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6e4a:	1852      	addeq	r2, r2, r1
   b6e4c:	e7f4      	b.n	b6e38 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6e4e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b6e4e:	b40e      	push	{r1, r2, r3}
   b6e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6e52:	b088      	sub	sp, #32
   b6e54:	af00      	add	r7, sp, #0
   b6e56:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e5a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6e5c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e60:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b6e62:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e64:	462b      	mov	r3, r5
   b6e66:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b6e68:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e6a:	f7ff fad1 	bl	b6410 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b6e6e:	280f      	cmp	r0, #15
   b6e70:	687a      	ldr	r2, [r7, #4]
   b6e72:	d91a      	bls.n	b6eaa <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b6e74:	f100 0308 	add.w	r3, r0, #8
   b6e78:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b6e7c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b6e7e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e82:	1c41      	adds	r1, r0, #1
   b6e84:	462b      	mov	r3, r5
   b6e86:	4668      	mov	r0, sp
        va_start(args, fmt);
   b6e88:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b6e8a:	f7ff fac1 	bl	b6410 <vsnprintf>
        if (n > 0) {
   b6e8e:	1e02      	subs	r2, r0, #0
   b6e90:	dd04      	ble.n	b6e9c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b6e92:	6823      	ldr	r3, [r4, #0]
   b6e94:	4669      	mov	r1, sp
   b6e96:	689b      	ldr	r3, [r3, #8]
   b6e98:	4620      	mov	r0, r4
   b6e9a:	4798      	blx	r3
   b6e9c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b6e9e:	3720      	adds	r7, #32
   b6ea0:	46bd      	mov	sp, r7
   b6ea2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6ea6:	b003      	add	sp, #12
   b6ea8:	4770      	bx	lr
    } else if (n > 0) {
   b6eaa:	2800      	cmp	r0, #0
   b6eac:	d0f7      	beq.n	b6e9e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b6eae:	6823      	ldr	r3, [r4, #0]
   b6eb0:	4602      	mov	r2, r0
   b6eb2:	689b      	ldr	r3, [r3, #8]
   b6eb4:	f107 0110 	add.w	r1, r7, #16
   b6eb8:	4620      	mov	r0, r4
   b6eba:	4798      	blx	r3
}
   b6ebc:	e7ef      	b.n	b6e9e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b6ebe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6ebe:	b538      	push	{r3, r4, r5, lr}
   b6ec0:	680b      	ldr	r3, [r1, #0]
   b6ec2:	6003      	str	r3, [r0, #0]
   b6ec4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6ec6:	6843      	ldr	r3, [r0, #4]
   b6ec8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6eca:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6ecc:	d008      	beq.n	b6ee0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b6ece:	b115      	cbz	r5, b6ed6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b6ed0:	686b      	ldr	r3, [r5, #4]
   b6ed2:	3301      	adds	r3, #1
   b6ed4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6ed6:	6860      	ldr	r0, [r4, #4]
   b6ed8:	b108      	cbz	r0, b6ede <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6eda:	f7ff fb07 	bl	b64ec <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b6ede:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6ee0:	bd38      	pop	{r3, r4, r5, pc}

000b6ee2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b6ee2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b6ee4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b6ee6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b6eea:	689b      	ldr	r3, [r3, #8]
   b6eec:	2201      	movs	r2, #1
   b6eee:	f10d 0107 	add.w	r1, sp, #7
   b6ef2:	4798      	blx	r3
}
   b6ef4:	b003      	add	sp, #12
   b6ef6:	f85d fb04 	ldr.w	pc, [sp], #4

000b6efa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6efa:	460b      	mov	r3, r1
   b6efc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6efe:	2200      	movs	r2, #0
   b6f00:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6f02:	e9c0 2200 	strd	r2, r2, [r0]
   b6f06:	4604      	mov	r4, r0
        t_ = t;
   b6f08:	6083      	str	r3, [r0, #8]
    if (t) {
   b6f0a:	b90b      	cbnz	r3, b6f10 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b6f0c:	4620      	mov	r0, r4
   b6f0e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b6f10:	f7ff ffd5 	bl	b6ebe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b6f14:	e7fa      	b.n	b6f0c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b6f16 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b6f16:	6883      	ldr	r3, [r0, #8]
   b6f18:	b1eb      	cbz	r3, b6f56 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b6f1a:	781a      	ldrb	r2, [r3, #0]
   b6f1c:	2a03      	cmp	r2, #3
   b6f1e:	d81a      	bhi.n	b6f56 <_ZNK5spark9JSONValue4typeEv+0x40>
   b6f20:	e8df f002 	tbb	[pc, r2]
   b6f24:	1b021704 	.word	0x1b021704
   b6f28:	2005      	movs	r0, #5
   b6f2a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b6f2c:	6802      	ldr	r2, [r0, #0]
   b6f2e:	685b      	ldr	r3, [r3, #4]
   b6f30:	6852      	ldr	r2, [r2, #4]
   b6f32:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b6f34:	282d      	cmp	r0, #45	; 0x2d
   b6f36:	d012      	beq.n	b6f5e <_ZNK5spark9JSONValue4typeEv+0x48>
   b6f38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6f3c:	2b09      	cmp	r3, #9
   b6f3e:	d90e      	bls.n	b6f5e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b6f40:	2874      	cmp	r0, #116	; 0x74
   b6f42:	d00e      	beq.n	b6f62 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b6f44:	2866      	cmp	r0, #102	; 0x66
   b6f46:	d00c      	beq.n	b6f62 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b6f48:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b6f4c:	4258      	negs	r0, r3
   b6f4e:	4158      	adcs	r0, r3
   b6f50:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b6f52:	2006      	movs	r0, #6
   b6f54:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b6f56:	2000      	movs	r0, #0
   b6f58:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b6f5a:	2004      	movs	r0, #4
   b6f5c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b6f5e:	2003      	movs	r0, #3
   b6f60:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b6f62:	2002      	movs	r0, #2
}
   b6f64:	4770      	bx	lr

000b6f66 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b6f66:	b510      	push	{r4, lr}
   b6f68:	4604      	mov	r4, r0
    switch (type()) {
   b6f6a:	f7ff ffd4 	bl	b6f16 <_ZNK5spark9JSONValue4typeEv>
   b6f6e:	2802      	cmp	r0, #2
   b6f70:	d00e      	beq.n	b6f90 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b6f72:	1ec3      	subs	r3, r0, #3
   b6f74:	b2db      	uxtb	r3, r3
   b6f76:	2b01      	cmp	r3, #1
   b6f78:	d814      	bhi.n	b6fa4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b6f7a:	6822      	ldr	r2, [r4, #0]
   b6f7c:	68a3      	ldr	r3, [r4, #8]
   b6f7e:	6850      	ldr	r0, [r2, #4]
   b6f80:	685b      	ldr	r3, [r3, #4]
}
   b6f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b6f86:	220a      	movs	r2, #10
   b6f88:	2100      	movs	r1, #0
   b6f8a:	4418      	add	r0, r3
   b6f8c:	f002 b92a 	b.w	b91e4 <strtol>
        const char* const s = d_->json + t_->start;
   b6f90:	6822      	ldr	r2, [r4, #0]
   b6f92:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b6f94:	6852      	ldr	r2, [r2, #4]
   b6f96:	685b      	ldr	r3, [r3, #4]
   b6f98:	5cd0      	ldrb	r0, [r2, r3]
   b6f9a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b6f9e:	4258      	negs	r0, r3
   b6fa0:	4158      	adcs	r0, r3
}
   b6fa2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b6fa4:	2000      	movs	r0, #0
   b6fa6:	e7fc      	b.n	b6fa2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b6fa8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6fa8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6faa:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b6fac:	e9c0 3300 	strd	r3, r3, [r0]
   b6fb0:	4604      	mov	r4, r0
        n_(0) {
   b6fb2:	480e      	ldr	r0, [pc, #56]	; (b6fec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6fb4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6fb8:	b1a9      	cbz	r1, b6fe6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b6fba:	780b      	ldrb	r3, [r1, #0]
   b6fbc:	2b03      	cmp	r3, #3
   b6fbe:	d006      	beq.n	b6fce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6fc0:	b98b      	cbnz	r3, b6fe6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6fc2:	6813      	ldr	r3, [r2, #0]
   b6fc4:	6858      	ldr	r0, [r3, #4]
   b6fc6:	684b      	ldr	r3, [r1, #4]
   b6fc8:	5cc3      	ldrb	r3, [r0, r3]
   b6fca:	2b6e      	cmp	r3, #110	; 0x6e
   b6fcc:	d007      	beq.n	b6fde <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b6fce:	6813      	ldr	r3, [r2, #0]
   b6fd0:	684d      	ldr	r5, [r1, #4]
   b6fd2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b6fd4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b6fd6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b6fd8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b6fda:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b6fdc:	60e3      	str	r3, [r4, #12]
   b6fde:	4611      	mov	r1, r2
   b6fe0:	4620      	mov	r0, r4
   b6fe2:	f7ff ff6c 	bl	b6ebe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b6fe6:	4620      	mov	r0, r4
   b6fe8:	bd38      	pop	{r3, r4, r5, pc}
   b6fea:	bf00      	nop
   b6fec:	000bcb96 	.word	0x000bcb96

000b6ff0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6ff0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b6ff2:	2500      	movs	r5, #0
   b6ff4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b6ff6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b6ffa:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b6ffe:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b7002:	4604      	mov	r4, r0
   b7004:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b7006:	b14b      	cbz	r3, b701c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b7008:	781a      	ldrb	r2, [r3, #0]
   b700a:	2a01      	cmp	r2, #1
   b700c:	d106      	bne.n	b701c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b700e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b7012:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b7014:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b7016:	6143      	str	r3, [r0, #20]
   b7018:	f7ff ff51 	bl	b6ebe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b701c:	4620      	mov	r0, r4
   b701e:	bd38      	pop	{r3, r4, r5, pc}

000b7020 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b7020:	b510      	push	{r4, lr}
    if (!n_) {
   b7022:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b7024:	4604      	mov	r4, r0
    if (!n_) {
   b7026:	b163      	cbz	r3, b7042 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b7028:	6880      	ldr	r0, [r0, #8]
   b702a:	60e0      	str	r0, [r4, #12]
    --n_;
   b702c:	3b01      	subs	r3, #1
    ++t_;
   b702e:	3010      	adds	r0, #16
   b7030:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b7032:	6120      	str	r0, [r4, #16]
    --n_;
   b7034:	6163      	str	r3, [r4, #20]
    if (n_) {
   b7036:	b113      	cbz	r3, b703e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b7038:	f7ff fef2 	bl	b6e20 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b703c:	60a0      	str	r0, [r4, #8]
    return true;
   b703e:	2001      	movs	r0, #1
   b7040:	e000      	b.n	b7044 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b7042:	4618      	mov	r0, r3
}
   b7044:	bd10      	pop	{r4, pc}

000b7046 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b7046:	b510      	push	{r4, lr}
    write('}');
   b7048:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b704a:	4604      	mov	r4, r0
    write('}');
   b704c:	f7ff ff49 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b7050:	2301      	movs	r3, #1
   b7052:	7123      	strb	r3, [r4, #4]
}
   b7054:	4620      	mov	r0, r4
   b7056:	bd10      	pop	{r4, pc}

000b7058 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b7058:	b508      	push	{r3, lr}
    switch (state_) {
   b705a:	7903      	ldrb	r3, [r0, #4]
   b705c:	2b01      	cmp	r3, #1
   b705e:	d002      	beq.n	b7066 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b7060:	2b02      	cmp	r3, #2
   b7062:	d004      	beq.n	b706e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b7064:	bd08      	pop	{r3, pc}
        write(',');
   b7066:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b7068:	f7ff ff3b 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
}
   b706c:	e7fa      	b.n	b7064 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b706e:	213a      	movs	r1, #58	; 0x3a
   b7070:	e7fa      	b.n	b7068 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b7072 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b7072:	b510      	push	{r4, lr}
   b7074:	4604      	mov	r4, r0
    writeSeparator();
   b7076:	f7ff ffef 	bl	b7058 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b707a:	4620      	mov	r0, r4
   b707c:	217b      	movs	r1, #123	; 0x7b
   b707e:	f7ff ff30 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b7082:	2300      	movs	r3, #0
   b7084:	7123      	strb	r3, [r4, #4]
}
   b7086:	4620      	mov	r0, r4
   b7088:	bd10      	pop	{r4, pc}
	...

000b708c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b708c:	b513      	push	{r0, r1, r4, lr}
   b708e:	4604      	mov	r4, r0
   b7090:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b7092:	f7ff ffe1 	bl	b7058 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b7096:	6823      	ldr	r3, [r4, #0]
   b7098:	9a01      	ldr	r2, [sp, #4]
   b709a:	68db      	ldr	r3, [r3, #12]
   b709c:	4903      	ldr	r1, [pc, #12]	; (b70ac <_ZN5spark10JSONWriter5valueEi+0x20>)
   b709e:	4620      	mov	r0, r4
   b70a0:	4798      	blx	r3
    state_ = NEXT;
   b70a2:	2301      	movs	r3, #1
}
   b70a4:	4620      	mov	r0, r4
    state_ = NEXT;
   b70a6:	7123      	strb	r3, [r4, #4]
}
   b70a8:	b002      	add	sp, #8
   b70aa:	bd10      	pop	{r4, pc}
   b70ac:	000bcb30 	.word	0x000bcb30

000b70b0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b70b0:	b513      	push	{r0, r1, r4, lr}
   b70b2:	4604      	mov	r4, r0
   b70b4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b70b6:	f7ff ffcf 	bl	b7058 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b70ba:	6823      	ldr	r3, [r4, #0]
   b70bc:	9a01      	ldr	r2, [sp, #4]
   b70be:	68db      	ldr	r3, [r3, #12]
   b70c0:	4903      	ldr	r1, [pc, #12]	; (b70d0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b70c2:	4620      	mov	r0, r4
   b70c4:	4798      	blx	r3
    state_ = NEXT;
   b70c6:	2301      	movs	r3, #1
}
   b70c8:	4620      	mov	r0, r4
    state_ = NEXT;
   b70ca:	7123      	strb	r3, [r4, #4]
}
   b70cc:	b002      	add	sp, #8
   b70ce:	bd10      	pop	{r4, pc}
   b70d0:	000bcb33 	.word	0x000bcb33

000b70d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b70d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b70d8:	460d      	mov	r5, r1
    write('"');
   b70da:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b70dc:	4690      	mov	r8, r2
   b70de:	4604      	mov	r4, r0
    write('"');
   b70e0:	f7ff feff 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b70e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b718c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b70e8:	44a8      	add	r8, r5
    const char *s = str;
   b70ea:	462f      	mov	r7, r5
    while (s != end) {
   b70ec:	4547      	cmp	r7, r8
   b70ee:	46ba      	mov	sl, r7
   b70f0:	d03d      	beq.n	b716e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b70f2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b70f6:	2e22      	cmp	r6, #34	; 0x22
   b70f8:	d006      	beq.n	b7108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b70fa:	2e5c      	cmp	r6, #92	; 0x5c
   b70fc:	d004      	beq.n	b7108 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b70fe:	4630      	mov	r0, r6
   b7100:	f001 fec6 	bl	b8e90 <isprint>
   b7104:	2800      	cmp	r0, #0
   b7106:	d1f1      	bne.n	b70ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b7108:	6823      	ldr	r3, [r4, #0]
   b710a:	ebaa 0205 	sub.w	r2, sl, r5
   b710e:	689b      	ldr	r3, [r3, #8]
   b7110:	4629      	mov	r1, r5
   b7112:	4620      	mov	r0, r4
   b7114:	4798      	blx	r3
            write('\\');
   b7116:	215c      	movs	r1, #92	; 0x5c
   b7118:	4620      	mov	r0, r4
   b711a:	f7ff fee2 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b711e:	2e0d      	cmp	r6, #13
   b7120:	d80a      	bhi.n	b7138 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b7122:	2e07      	cmp	r6, #7
   b7124:	d91c      	bls.n	b7160 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b7126:	f1a6 0308 	sub.w	r3, r6, #8
   b712a:	2b05      	cmp	r3, #5
   b712c:	d818      	bhi.n	b7160 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b712e:	e8df f003 	tbb	[pc, r3]
   b7132:	0f0d      	.short	0x0f0d
   b7134:	15131711 	.word	0x15131711
   b7138:	2e22      	cmp	r6, #34	; 0x22
   b713a:	d001      	beq.n	b7140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b713c:	2e5c      	cmp	r6, #92	; 0x5c
   b713e:	d10f      	bne.n	b7160 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b7140:	4631      	mov	r1, r6
                write('b');
   b7142:	4620      	mov	r0, r4
   b7144:	f7ff fecd 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b7148:	463d      	mov	r5, r7
    while (s != end) {
   b714a:	e7cf      	b.n	b70ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b714c:	2162      	movs	r1, #98	; 0x62
   b714e:	e7f8      	b.n	b7142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b7150:	2174      	movs	r1, #116	; 0x74
   b7152:	e7f6      	b.n	b7142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b7154:	216e      	movs	r1, #110	; 0x6e
   b7156:	e7f4      	b.n	b7142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b7158:	2166      	movs	r1, #102	; 0x66
   b715a:	e7f2      	b.n	b7142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b715c:	2172      	movs	r1, #114	; 0x72
   b715e:	e7f0      	b.n	b7142 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b7160:	6823      	ldr	r3, [r4, #0]
   b7162:	4632      	mov	r2, r6
   b7164:	68db      	ldr	r3, [r3, #12]
   b7166:	4649      	mov	r1, r9
   b7168:	4620      	mov	r0, r4
   b716a:	4798      	blx	r3
                break;
   b716c:	e7ec      	b.n	b7148 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b716e:	42bd      	cmp	r5, r7
   b7170:	d005      	beq.n	b717e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b7172:	6823      	ldr	r3, [r4, #0]
   b7174:	1b7a      	subs	r2, r7, r5
   b7176:	689b      	ldr	r3, [r3, #8]
   b7178:	4629      	mov	r1, r5
   b717a:	4620      	mov	r0, r4
   b717c:	4798      	blx	r3
    }
    write('"');
   b717e:	2122      	movs	r1, #34	; 0x22
   b7180:	4620      	mov	r0, r4
   b7182:	f7ff feae 	bl	b6ee2 <_ZN5spark10JSONWriter5writeEc>
}
   b7186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b718a:	bf00      	nop
   b718c:	000bcb36 	.word	0x000bcb36

000b7190 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b7190:	b513      	push	{r0, r1, r4, lr}
   b7192:	4604      	mov	r4, r0
   b7194:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b7198:	f7ff ff5e 	bl	b7058 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b719c:	4620      	mov	r0, r4
   b719e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b71a2:	f7ff ff97 	bl	b70d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b71a6:	2302      	movs	r3, #2
}
   b71a8:	4620      	mov	r0, r4
    state_ = VALUE;
   b71aa:	7123      	strb	r3, [r4, #4]
}
   b71ac:	b002      	add	sp, #8
   b71ae:	bd10      	pop	{r4, pc}

000b71b0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b71b0:	b513      	push	{r0, r1, r4, lr}
   b71b2:	4604      	mov	r4, r0
   b71b4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b71b8:	f7ff ff4e 	bl	b7058 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b71bc:	4620      	mov	r0, r4
   b71be:	e9dd 2100 	ldrd	r2, r1, [sp]
   b71c2:	f7ff ff87 	bl	b70d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b71c6:	2301      	movs	r3, #1
}
   b71c8:	4620      	mov	r0, r4
    state_ = NEXT;
   b71ca:	7123      	strb	r3, [r4, #4]
}
   b71cc:	b002      	add	sp, #8
   b71ce:	bd10      	pop	{r4, pc}

000b71d0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b71d0:	6880      	ldr	r0, [r0, #8]
   b71d2:	6803      	ldr	r3, [r0, #0]
   b71d4:	68db      	ldr	r3, [r3, #12]
   b71d6:	4718      	bx	r3

000b71d8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b71d8:	4770      	bx	lr

000b71da <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b71da:	4608      	mov	r0, r1
   b71dc:	b111      	cbz	r1, b71e4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b71de:	680b      	ldr	r3, [r1, #0]
   b71e0:	685b      	ldr	r3, [r3, #4]
   b71e2:	4718      	bx	r3
}
   b71e4:	4770      	bx	lr

000b71e6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b71e6:	4770      	bx	lr

000b71e8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b71e8:	4770      	bx	lr

000b71ea <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b71ea:	4770      	bx	lr

000b71ec <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b71ec:	4770      	bx	lr

000b71ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b71ee:	b538      	push	{r3, r4, r5, lr}
   b71f0:	4604      	mov	r4, r0
   b71f2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b71f4:	6800      	ldr	r0, [r0, #0]
   b71f6:	212e      	movs	r1, #46	; 0x2e
   b71f8:	f001 febd 	bl	b8f76 <strchrnul>
    size = s - category;
   b71fc:	6823      	ldr	r3, [r4, #0]
   b71fe:	1ac3      	subs	r3, r0, r3
   b7200:	602b      	str	r3, [r5, #0]
    if (size) {
   b7202:	b123      	cbz	r3, b720e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b7204:	7803      	ldrb	r3, [r0, #0]
   b7206:	b103      	cbz	r3, b720a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b7208:	3001      	adds	r0, #1
   b720a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b720c:	6020      	str	r0, [r4, #0]
}
   b720e:	4618      	mov	r0, r3
   b7210:	bd38      	pop	{r3, r4, r5, pc}

000b7212 <_ZN5spark16JSONStreamWriterD0Ev>:
   b7212:	b510      	push	{r4, lr}
   b7214:	210c      	movs	r1, #12
   b7216:	4604      	mov	r4, r0
   b7218:	f7fd fb73 	bl	b4902 <_ZdlPvj>
   b721c:	4620      	mov	r0, r4
   b721e:	bd10      	pop	{r4, pc}

000b7220 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b7220:	b510      	push	{r4, lr}
   b7222:	2104      	movs	r1, #4
   b7224:	4604      	mov	r4, r0
   b7226:	f7fd fb6c 	bl	b4902 <_ZdlPvj>
   b722a:	4620      	mov	r0, r4
   b722c:	bd10      	pop	{r4, pc}

000b722e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b722e:	b510      	push	{r4, lr}
   b7230:	2104      	movs	r1, #4
   b7232:	4604      	mov	r4, r0
   b7234:	f7fd fb65 	bl	b4902 <_ZdlPvj>
   b7238:	4620      	mov	r0, r4
   b723a:	bd10      	pop	{r4, pc}

000b723c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b723c:	f7fe be2c 	b.w	b5e98 <os_mutex_recursive_lock>

000b7240 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b7240:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b7242:	f7fd fb0d 	bl	b4860 <strcmp>
}
   b7246:	fab0 f080 	clz	r0, r0
   b724a:	0940      	lsrs	r0, r0, #5
   b724c:	bd08      	pop	{r3, pc}

000b724e <__tcf_1>:
   b724e:	4770      	bx	lr

000b7250 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b7250:	b510      	push	{r4, lr}
   b7252:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b7254:	f001 fc02 	bl	b8a5c <_Z16_fetch_usbserialv>
   b7258:	4284      	cmp	r4, r0
   b725a:	d010      	beq.n	b727e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b725c:	f001 fde2 	bl	b8e24 <_Z22__fetch_global_Serial1v>
   b7260:	4284      	cmp	r4, r0
   b7262:	d105      	bne.n	b7270 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b7264:	f001 fdde 	bl	b8e24 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b7268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b726c:	f001 bb91 	b.w	b8992 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b7270:	b12c      	cbz	r4, b727e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b7272:	6823      	ldr	r3, [r4, #0]
   b7274:	4620      	mov	r0, r4
   b7276:	685b      	ldr	r3, [r3, #4]
}
   b7278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b727c:	4718      	bx	r3
   b727e:	bd10      	pop	{r4, pc}

000b7280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7280:	680b      	ldr	r3, [r1, #0]
   b7282:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b7284:	684b      	ldr	r3, [r1, #4]
   b7286:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b7288:	b113      	cbz	r3, b7290 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b728a:	685a      	ldr	r2, [r3, #4]
   b728c:	3201      	adds	r2, #1
   b728e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b7290:	4770      	bx	lr

000b7292 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b7292:	b513      	push	{r0, r1, r4, lr}
   b7294:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b7296:	4608      	mov	r0, r1
   b7298:	9101      	str	r1, [sp, #4]
   b729a:	f7fd faeb 	bl	b4874 <strlen>
   b729e:	9901      	ldr	r1, [sp, #4]
   b72a0:	4602      	mov	r2, r0
   b72a2:	4620      	mov	r0, r4
}
   b72a4:	b002      	add	sp, #8
   b72a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b72aa:	f7ff bf81 	b.w	b71b0 <_ZN5spark10JSONWriter5valueEPKcj>

000b72ae <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b72ae:	b513      	push	{r0, r1, r4, lr}
   b72b0:	4604      	mov	r4, r0
    write(str, strlen(str));
   b72b2:	4608      	mov	r0, r1
   b72b4:	9101      	str	r1, [sp, #4]
   b72b6:	f7fd fadd 	bl	b4874 <strlen>
   b72ba:	6823      	ldr	r3, [r4, #0]
   b72bc:	9901      	ldr	r1, [sp, #4]
   b72be:	68db      	ldr	r3, [r3, #12]
   b72c0:	4602      	mov	r2, r0
   b72c2:	4620      	mov	r0, r4
}
   b72c4:	b002      	add	sp, #8
   b72c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b72ca:	4718      	bx	r3

000b72cc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b72cc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b72ce:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b72d0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b72d4:	68db      	ldr	r3, [r3, #12]
   b72d6:	2201      	movs	r2, #1
   b72d8:	f10d 0107 	add.w	r1, sp, #7
   b72dc:	4798      	blx	r3
}
   b72de:	b003      	add	sp, #12
   b72e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b72e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b72e4:	680a      	ldr	r2, [r1, #0]
   b72e6:	6002      	str	r2, [r0, #0]
   b72e8:	684a      	ldr	r2, [r1, #4]
   b72ea:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b72ec:	2200      	movs	r2, #0
   b72ee:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b72f2:	b510      	push	{r4, lr}
   b72f4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b72f6:	688c      	ldr	r4, [r1, #8]
   b72f8:	6084      	str	r4, [r0, #8]
   b72fa:	68cc      	ldr	r4, [r1, #12]
   b72fc:	60c4      	str	r4, [r0, #12]
   b72fe:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b7300:	608a      	str	r2, [r1, #8]
   b7302:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7304:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b7306:	610a      	str	r2, [r1, #16]
   b7308:	bd10      	pop	{r4, pc}
	...

000b730c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b730c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b7310:	e9d0 8400 	ldrd	r8, r4, [r0]
   b7314:	f04f 0a14 	mov.w	sl, #20
   b7318:	9300      	str	r3, [sp, #0]
   b731a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b731e:	4b18      	ldr	r3, [pc, #96]	; (b7380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7320:	10a4      	asrs	r4, r4, #2
   b7322:	4617      	mov	r7, r2
   b7324:	435c      	muls	r4, r3
   b7326:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b7328:	2c00      	cmp	r4, #0
   b732a:	dd21      	ble.n	b7370 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b732c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b732e:	fb0a f006 	mul.w	r0, sl, r6
   b7332:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b7336:	463a      	mov	r2, r7
   b7338:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b733c:	5828      	ldr	r0, [r5, r0]
   b733e:	9101      	str	r1, [sp, #4]
   b7340:	455f      	cmp	r7, fp
   b7342:	bf28      	it	cs
   b7344:	465a      	movcs	r2, fp
   b7346:	f001 fe46 	bl	b8fd6 <strncmp>
                if (cmp == 0) {
   b734a:	2800      	cmp	r0, #0
   b734c:	9901      	ldr	r1, [sp, #4]
   b734e:	f04f 0301 	mov.w	r3, #1
   b7352:	d10b      	bne.n	b736c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b7354:	455f      	cmp	r7, fp
   b7356:	d103      	bne.n	b7360 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b7358:	9a00      	ldr	r2, [sp, #0]
   b735a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b735c:	4634      	mov	r4, r6
   b735e:	e7e3      	b.n	b7328 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b7360:	d9fc      	bls.n	b735c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b7362:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b7364:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b7368:	3e01      	subs	r6, #1
   b736a:	e7f7      	b.n	b735c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b736c:	dbf9      	blt.n	b7362 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b736e:	e7f5      	b.n	b735c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b7370:	eba5 0508 	sub.w	r5, r5, r8
}
   b7374:	4802      	ldr	r0, [pc, #8]	; (b7380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b7376:	10ad      	asrs	r5, r5, #2
   b7378:	4368      	muls	r0, r5
   b737a:	b003      	add	sp, #12
   b737c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7380:	cccccccd 	.word	0xcccccccd

000b7384 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b7384:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b7386:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b7388:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b738a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b738c:	b303      	cbz	r3, b73d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b738e:	b1f9      	cbz	r1, b73d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b7390:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b7392:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b7396:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b7398:	a903      	add	r1, sp, #12
   b739a:	a801      	add	r0, sp, #4
   b739c:	f7ff ff27 	bl	b71ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b73a0:	4601      	mov	r1, r0
   b73a2:	b1a8      	cbz	r0, b73d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b73a4:	f10d 030b 	add.w	r3, sp, #11
   b73a8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b73aa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b73ae:	4620      	mov	r0, r4
   b73b0:	f7ff ffac 	bl	b730c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b73b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b73b8:	b153      	cbz	r3, b73d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b73ba:	6823      	ldr	r3, [r4, #0]
   b73bc:	2414      	movs	r4, #20
   b73be:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b73c2:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b73c4:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b73c8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b73ca:	bfa8      	it	ge
   b73cc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b73ce:	e7e3      	b.n	b7398 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b73d0:	4628      	mov	r0, r5
   b73d2:	b004      	add	sp, #16
   b73d4:	bd70      	pop	{r4, r5, r6, pc}

000b73d6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b73d6:	b40e      	push	{r1, r2, r3}
   b73d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b73da:	b08c      	sub	sp, #48	; 0x30
   b73dc:	af00      	add	r7, sp, #0
   b73de:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b73e2:	4604      	mov	r4, r0
   b73e4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b73e8:	607a      	str	r2, [r7, #4]
   b73ea:	462b      	mov	r3, r5
   b73ec:	2120      	movs	r1, #32
   b73ee:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b73f2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b73f4:	f7ff f80c 	bl	b6410 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b73f8:	281f      	cmp	r0, #31
   b73fa:	687a      	ldr	r2, [r7, #4]
   b73fc:	d91a      	bls.n	b7434 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b73fe:	f100 0308 	add.w	r3, r0, #8
   b7402:	f023 0307 	bic.w	r3, r3, #7
        }
   b7406:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b7408:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b740c:	1c41      	adds	r1, r0, #1
   b740e:	462b      	mov	r3, r5
   b7410:	4668      	mov	r0, sp
        va_start(args, fmt);
   b7412:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b7414:	f7fe fffc 	bl	b6410 <vsnprintf>
        if (n > 0) {
   b7418:	1e02      	subs	r2, r0, #0
   b741a:	dd04      	ble.n	b7426 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b741c:	6823      	ldr	r3, [r4, #0]
   b741e:	4669      	mov	r1, sp
   b7420:	68db      	ldr	r3, [r3, #12]
   b7422:	4620      	mov	r0, r4
   b7424:	4798      	blx	r3
   b7426:	46b5      	mov	sp, r6
}
   b7428:	3730      	adds	r7, #48	; 0x30
   b742a:	46bd      	mov	sp, r7
   b742c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7430:	b003      	add	sp, #12
   b7432:	4770      	bx	lr
    } else if (n > 0) {
   b7434:	2800      	cmp	r0, #0
   b7436:	d0f7      	beq.n	b7428 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b7438:	6823      	ldr	r3, [r4, #0]
   b743a:	4602      	mov	r2, r0
   b743c:	68db      	ldr	r3, [r3, #12]
   b743e:	f107 0110 	add.w	r1, r7, #16
   b7442:	4620      	mov	r0, r4
   b7444:	4798      	blx	r3
}
   b7446:	e7ef      	b.n	b7428 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b7448 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b7448:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b744a:	4c09      	ldr	r4, [pc, #36]	; (b7470 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b744c:	7823      	ldrb	r3, [r4, #0]
   b744e:	f3bf 8f5b 	dmb	ish
   b7452:	07db      	lsls	r3, r3, #31
   b7454:	d409      	bmi.n	b746a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b7456:	4620      	mov	r0, r4
   b7458:	f7fd fa62 	bl	b4920 <__cxa_guard_acquire>
   b745c:	b128      	cbz	r0, b746a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b745e:	4620      	mov	r0, r4
   b7460:	f7fd fa63 	bl	b492a <__cxa_guard_release>
   b7464:	4803      	ldr	r0, [pc, #12]	; (b7474 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b7466:	f001 fd08 	bl	b8e7a <atexit>
}
   b746a:	4803      	ldr	r0, [pc, #12]	; (b7478 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b746c:	bd10      	pop	{r4, pc}
   b746e:	bf00      	nop
   b7470:	2003e66c 	.word	0x2003e66c
   b7474:	000b71e7 	.word	0x000b71e7
   b7478:	2003de6c 	.word	0x2003de6c

000b747c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b747c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b747e:	4c09      	ldr	r4, [pc, #36]	; (b74a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b7480:	7823      	ldrb	r3, [r4, #0]
   b7482:	f3bf 8f5b 	dmb	ish
   b7486:	07db      	lsls	r3, r3, #31
   b7488:	d409      	bmi.n	b749e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b748a:	4620      	mov	r0, r4
   b748c:	f7fd fa48 	bl	b4920 <__cxa_guard_acquire>
   b7490:	b128      	cbz	r0, b749e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b7492:	4620      	mov	r0, r4
   b7494:	f7fd fa49 	bl	b492a <__cxa_guard_release>
   b7498:	4803      	ldr	r0, [pc, #12]	; (b74a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b749a:	f001 fcee 	bl	b8e7a <atexit>
    return &factory;
}
   b749e:	4803      	ldr	r0, [pc, #12]	; (b74ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b74a0:	bd10      	pop	{r4, pc}
   b74a2:	bf00      	nop
   b74a4:	2003e670 	.word	0x2003e670
   b74a8:	000b724f 	.word	0x000b724f
   b74ac:	2003de70 	.word	0x2003de70

000b74b0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b74b0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b74b2:	2500      	movs	r5, #0
   b74b4:	4604      	mov	r4, r0
   b74b6:	e9c0 5500 	strd	r5, r5, [r0]
   b74ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b74be:	6085      	str	r5, [r0, #8]
   b74c0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b74c2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b74c6:	f7fe fcd7 	bl	b5e78 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b74ca:	f7ff ffbd 	bl	b7448 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b74ce:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b74d0:	f7ff ffd4 	bl	b747c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b74d4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b74d6:	6220      	str	r0, [r4, #32]
}
   b74d8:	4620      	mov	r0, r4
   b74da:	bd38      	pop	{r3, r4, r5, pc}

000b74dc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b74dc:	b510      	push	{r4, lr}
    static LogManager mgr;
   b74de:	4c0a      	ldr	r4, [pc, #40]	; (b7508 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b74e0:	7823      	ldrb	r3, [r4, #0]
   b74e2:	f3bf 8f5b 	dmb	ish
   b74e6:	07db      	lsls	r3, r3, #31
   b74e8:	d40c      	bmi.n	b7504 <_ZN5spark10LogManager8instanceEv+0x28>
   b74ea:	4620      	mov	r0, r4
   b74ec:	f7fd fa18 	bl	b4920 <__cxa_guard_acquire>
   b74f0:	b140      	cbz	r0, b7504 <_ZN5spark10LogManager8instanceEv+0x28>
   b74f2:	4806      	ldr	r0, [pc, #24]	; (b750c <_ZN5spark10LogManager8instanceEv+0x30>)
   b74f4:	f7ff ffdc 	bl	b74b0 <_ZN5spark10LogManagerC1Ev>
   b74f8:	4620      	mov	r0, r4
   b74fa:	f7fd fa16 	bl	b492a <__cxa_guard_release>
   b74fe:	4804      	ldr	r0, [pc, #16]	; (b7510 <_ZN5spark10LogManager8instanceEv+0x34>)
   b7500:	f001 fcbb 	bl	b8e7a <atexit>
    return &mgr;
}
   b7504:	4801      	ldr	r0, [pc, #4]	; (b750c <_ZN5spark10LogManager8instanceEv+0x30>)
   b7506:	bd10      	pop	{r4, pc}
   b7508:	2003e668 	.word	0x2003e668
   b750c:	2003e678 	.word	0x2003e678
   b7510:	000b7a31 	.word	0x000b7a31

000b7514 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b7514:	4a02      	ldr	r2, [pc, #8]	; (b7520 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b7516:	4903      	ldr	r1, [pc, #12]	; (b7524 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b7518:	4803      	ldr	r0, [pc, #12]	; (b7528 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b751a:	2300      	movs	r3, #0
   b751c:	f7fe be64 	b.w	b61e8 <log_set_callbacks>
   b7520:	000b7815 	.word	0x000b7815
   b7524:	000b77a1 	.word	0x000b77a1
   b7528:	000b7721 	.word	0x000b7721

000b752c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b752c:	2300      	movs	r3, #0
   b752e:	461a      	mov	r2, r3
   b7530:	4619      	mov	r1, r3
   b7532:	4618      	mov	r0, r3
   b7534:	f7fe be58 	b.w	b61e8 <log_set_callbacks>

000b7538 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b7538:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b753a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b753c:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b753e:	4668      	mov	r0, sp
   b7540:	f7ff fe9e 	bl	b7280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b7544:	466a      	mov	r2, sp
   b7546:	4629      	mov	r1, r5
   b7548:	4620      	mov	r0, r4
   b754a:	f7ff fd51 	bl	b6ff0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b754e:	a801      	add	r0, sp, #4
   b7550:	f7fe ff99 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7554:	4620      	mov	r0, r4
   b7556:	b003      	add	sp, #12
   b7558:	bd30      	pop	{r4, r5, pc}

000b755a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b755a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b755c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b755e:	4604      	mov	r4, r0
   b7560:	4668      	mov	r0, sp
   b7562:	f7ff fe8d 	bl	b7280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b7566:	466a      	mov	r2, sp
   b7568:	4629      	mov	r1, r5
   b756a:	4620      	mov	r0, r4
   b756c:	f7ff fd1c 	bl	b6fa8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7570:	a801      	add	r0, sp, #4
   b7572:	f7fe ff88 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7576:	4620      	mov	r0, r4
   b7578:	b003      	add	sp, #12
   b757a:	bd30      	pop	{r4, r5, pc}

000b757c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b757c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b757e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b7580:	4604      	mov	r4, r0
   b7582:	4668      	mov	r0, sp
   b7584:	f7ff fe7c 	bl	b7280 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b7588:	466a      	mov	r2, sp
   b758a:	4629      	mov	r1, r5
   b758c:	4620      	mov	r0, r4
   b758e:	f7ff fcb4 	bl	b6efa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b7592:	a801      	add	r0, sp, #4
   b7594:	f7fe ff77 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7598:	4620      	mov	r0, r4
   b759a:	b003      	add	sp, #12
   b759c:	bd30      	pop	{r4, r5, pc}
	...

000b75a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b75a0:	b570      	push	{r4, r5, r6, lr}
   b75a2:	b08a      	sub	sp, #40	; 0x28
   b75a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b75a6:	4601      	mov	r1, r0
   b75a8:	a804      	add	r0, sp, #16
   b75aa:	f7ff ffc5 	bl	b7538 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b75ae:	4e14      	ldr	r6, [pc, #80]	; (b7600 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b75b0:	a804      	add	r0, sp, #16
   b75b2:	f7ff fd35 	bl	b7020 <_ZN5spark18JSONObjectIterator4nextEv>
   b75b6:	b1e8      	cbz	r0, b75f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b75b8:	a904      	add	r1, sp, #16
   b75ba:	4668      	mov	r0, sp
   b75bc:	f7ff ffcd 	bl	b755a <_ZNK5spark18JSONObjectIterator4nameEv>
   b75c0:	9802      	ldr	r0, [sp, #8]
   b75c2:	4631      	mov	r1, r6
   b75c4:	f7ff fe3c 	bl	b7240 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b75c8:	4604      	mov	r4, r0
   b75ca:	b110      	cbz	r0, b75d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b75cc:	1e2c      	subs	r4, r5, #0
   b75ce:	bf18      	it	ne
   b75d0:	2401      	movne	r4, #1
   b75d2:	a801      	add	r0, sp, #4
   b75d4:	f7fe ff57 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75d8:	2c00      	cmp	r4, #0
   b75da:	d0e9      	beq.n	b75b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b75dc:	a904      	add	r1, sp, #16
   b75de:	4668      	mov	r0, sp
   b75e0:	f7ff ffcc 	bl	b757c <_ZNK5spark18JSONObjectIterator5valueEv>
   b75e4:	4668      	mov	r0, sp
   b75e6:	f7ff fcbe 	bl	b6f66 <_ZNK5spark9JSONValue5toIntEv>
   b75ea:	6028      	str	r0, [r5, #0]
   b75ec:	a801      	add	r0, sp, #4
   b75ee:	f7fe ff4a 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b75f2:	e7dd      	b.n	b75b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b75f4:	a805      	add	r0, sp, #20
   b75f6:	f7fe ff46 	bl	b6486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b75fa:	b00a      	add	sp, #40	; 0x28
   b75fc:	bd70      	pop	{r4, r5, r6, pc}
   b75fe:	bf00      	nop
   b7600:	000bcb3c 	.word	0x000bcb3c

000b7604 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b7604:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7606:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b7608:	4620      	mov	r0, r4
   b760a:	4913      	ldr	r1, [pc, #76]	; (b7658 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b760c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b760e:	f7fd f927 	bl	b4860 <strcmp>
   b7612:	b950      	cbnz	r0, b762a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b7614:	f001 fa22 	bl	b8a5c <_Z16_fetch_usbserialv>
   b7618:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b761c:	f001 fa0e 	bl	b8a3c <_ZN9USBSerial5beginEl>
}
   b7620:	b003      	add	sp, #12
   b7622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b7626:	f001 ba19 	b.w	b8a5c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b762a:	490c      	ldr	r1, [pc, #48]	; (b765c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b762c:	4620      	mov	r0, r4
   b762e:	f7fd f917 	bl	b4860 <strcmp>
   b7632:	b978      	cbnz	r0, b7654 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b7634:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b7638:	a901      	add	r1, sp, #4
   b763a:	4628      	mov	r0, r5
        int baud = 9600;
   b763c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b763e:	f7ff ffaf 	bl	b75a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b7642:	f001 fbef 	bl	b8e24 <_Z22__fetch_global_Serial1v>
   b7646:	9901      	ldr	r1, [sp, #4]
   b7648:	f001 f9a0 	bl	b898c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b764c:	f001 fbea 	bl	b8e24 <_Z22__fetch_global_Serial1v>
}
   b7650:	b003      	add	sp, #12
   b7652:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b7654:	2000      	movs	r0, #0
   b7656:	e7fb      	b.n	b7650 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b7658:	000bcb41 	.word	0x000bcb41
   b765c:	000bcb48 	.word	0x000bcb48

000b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7660:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7662:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7666:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7668:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b766a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b766e:	42ae      	cmp	r6, r5
   b7670:	d005      	beq.n	b767e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b7672:	f105 0008 	add.w	r0, r5, #8
   b7676:	f7ff fff3 	bl	b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b767a:	3514      	adds	r5, #20
   b767c:	e7f7      	b.n	b766e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b767e:	6820      	ldr	r0, [r4, #0]
   b7680:	f7fe feb6 	bl	b63f0 <free>
}
   b7684:	4620      	mov	r0, r4
   b7686:	bd70      	pop	{r4, r5, r6, pc}

000b7688 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b7688:	b510      	push	{r4, lr}
   b768a:	4604      	mov	r4, r0
   b768c:	300c      	adds	r0, #12
   b768e:	f7ff ffe7 	bl	b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7692:	4620      	mov	r0, r4
   b7694:	f7fe ff3e 	bl	b6514 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7698:	4620      	mov	r0, r4
   b769a:	bd10      	pop	{r4, pc}

000b769c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b769c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b769e:	4b04      	ldr	r3, [pc, #16]	; (b76b0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b76a0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b76a2:	f840 3b04 	str.w	r3, [r0], #4
   b76a6:	f7ff ffef 	bl	b7688 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b76aa:	4620      	mov	r0, r4
   b76ac:	bd10      	pop	{r4, pc}
   b76ae:	bf00      	nop
   b76b0:	000b9460 	.word	0x000b9460

000b76b4 <_ZN5spark16StreamLogHandlerD0Ev>:
   b76b4:	b510      	push	{r4, lr}
   b76b6:	4604      	mov	r4, r0
   b76b8:	f7ff fff0 	bl	b769c <_ZN5spark16StreamLogHandlerD1Ev>
   b76bc:	4620      	mov	r0, r4
   b76be:	2124      	movs	r1, #36	; 0x24
   b76c0:	f7fd f91f 	bl	b4902 <_ZdlPvj>
   b76c4:	4620      	mov	r0, r4
   b76c6:	bd10      	pop	{r4, pc}

000b76c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b76c8:	b510      	push	{r4, lr}
   b76ca:	4b03      	ldr	r3, [pc, #12]	; (b76d8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b76cc:	6003      	str	r3, [r0, #0]
   b76ce:	4604      	mov	r4, r0
   b76d0:	f7ff ffe4 	bl	b769c <_ZN5spark16StreamLogHandlerD1Ev>
   b76d4:	4620      	mov	r0, r4
   b76d6:	bd10      	pop	{r4, pc}
   b76d8:	000bcbe4 	.word	0x000bcbe4

000b76dc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b76dc:	b510      	push	{r4, lr}
   b76de:	4604      	mov	r4, r0
   b76e0:	f7ff fff2 	bl	b76c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b76e4:	4620      	mov	r0, r4
   b76e6:	2124      	movs	r1, #36	; 0x24
   b76e8:	f7fd f90b 	bl	b4902 <_ZdlPvj>
   b76ec:	4620      	mov	r0, r4
   b76ee:	bd10      	pop	{r4, pc}

000b76f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b76f0:	2200      	movs	r2, #0
   b76f2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b76f6:	b510      	push	{r4, lr}
        capacity_(0) {
   b76f8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b76fa:	680c      	ldr	r4, [r1, #0]
   b76fc:	6004      	str	r4, [r0, #0]
   b76fe:	684c      	ldr	r4, [r1, #4]
   b7700:	6044      	str	r4, [r0, #4]
   b7702:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7704:	600a      	str	r2, [r1, #0]
   b7706:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7708:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b770a:	608a      	str	r2, [r1, #8]
}
   b770c:	bd10      	pop	{r4, pc}

000b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b770e:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7710:	6803      	ldr	r3, [r0, #0]
   b7712:	4604      	mov	r4, r0
   b7714:	6818      	ldr	r0, [r3, #0]
   b7716:	f7fe fbc7 	bl	b5ea8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b771a:	4620      	mov	r0, r4
   b771c:	bd10      	pop	{r4, pc}
	...

000b7720 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b7720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7724:	b087      	sub	sp, #28
   b7726:	4680      	mov	r8, r0
   b7728:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b772a:	4b1c      	ldr	r3, [pc, #112]	; (b779c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b772c:	685b      	ldr	r3, [r3, #4]
   b772e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7732:	4689      	mov	r9, r1
   b7734:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b7736:	b96b      	cbnz	r3, b7754 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b7738:	f7ff fed0 	bl	b74dc <_ZN5spark10LogManager8instanceEv>
   b773c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b773e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b7742:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7744:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b7746:	f7ff fd79 	bl	b723c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b774a:	7b23      	ldrb	r3, [r4, #12]
   b774c:	b12b      	cbz	r3, b775a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b774e:	a805      	add	r0, sp, #20
   b7750:	f7ff ffdd 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b7754:	b007      	add	sp, #28
   b7756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b775a:	2301      	movs	r3, #1
   b775c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b775e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b7762:	fa5f f989 	uxtb.w	r9, r9
   b7766:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b776a:	45aa      	cmp	sl, r5
   b776c:	d012      	beq.n	b7794 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b776e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b7772:	4631      	mov	r1, r6
   b7774:	1d38      	adds	r0, r7, #4
   b7776:	f7ff fe05 	bl	b7384 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b777a:	4581      	cmp	r9, r0
   b777c:	d3f5      	bcc.n	b776a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b777e:	683b      	ldr	r3, [r7, #0]
   b7780:	9a03      	ldr	r2, [sp, #12]
   b7782:	9200      	str	r2, [sp, #0]
   b7784:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b7788:	464a      	mov	r2, r9
   b778a:	4633      	mov	r3, r6
   b778c:	4641      	mov	r1, r8
   b778e:	4638      	mov	r0, r7
   b7790:	47d8      	blx	fp
   b7792:	e7ea      	b.n	b776a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b7794:	2300      	movs	r3, #0
   b7796:	7323      	strb	r3, [r4, #12]
   b7798:	e7d9      	b.n	b774e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b779a:	bf00      	nop
   b779c:	e000ed00 	.word	0xe000ed00

000b77a0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b77a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b77a4:	469b      	mov	fp, r3
   b77a6:	4b1a      	ldr	r3, [pc, #104]	; (b7810 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b77a8:	685b      	ldr	r3, [r3, #4]
   b77aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b77ae:	4680      	mov	r8, r0
   b77b0:	4689      	mov	r9, r1
   b77b2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b77b4:	b96b      	cbnz	r3, b77d2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b77b6:	f7ff fe91 	bl	b74dc <_ZN5spark10LogManager8instanceEv>
   b77ba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b77bc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b77c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b77c2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b77c4:	f7ff fd3a 	bl	b723c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b77c8:	7b23      	ldrb	r3, [r4, #12]
   b77ca:	b12b      	cbz	r3, b77d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b77cc:	a801      	add	r0, sp, #4
   b77ce:	f7ff ff9e 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b77d2:	b003      	add	sp, #12
   b77d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b77d8:	2301      	movs	r3, #1
   b77da:	7323      	strb	r3, [r4, #12]
   b77dc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b77e0:	b2f6      	uxtb	r6, r6
   b77e2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b77e6:	4555      	cmp	r5, sl
   b77e8:	d00e      	beq.n	b7808 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b77ea:	f855 7b04 	ldr.w	r7, [r5], #4
   b77ee:	4659      	mov	r1, fp
   b77f0:	1d38      	adds	r0, r7, #4
   b77f2:	f7ff fdc7 	bl	b7384 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b77f6:	4286      	cmp	r6, r0
   b77f8:	d3f5      	bcc.n	b77e6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b77fa:	683b      	ldr	r3, [r7, #0]
   b77fc:	464a      	mov	r2, r9
   b77fe:	68db      	ldr	r3, [r3, #12]
   b7800:	4641      	mov	r1, r8
   b7802:	4638      	mov	r0, r7
   b7804:	4798      	blx	r3
   b7806:	e7ee      	b.n	b77e6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b7808:	2300      	movs	r3, #0
   b780a:	7323      	strb	r3, [r4, #12]
   b780c:	e7de      	b.n	b77cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b780e:	bf00      	nop
   b7810:	e000ed00 	.word	0xe000ed00

000b7814 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b7814:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b7818:	4b16      	ldr	r3, [pc, #88]	; (b7874 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b781a:	685b      	ldr	r3, [r3, #4]
   b781c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b7820:	4605      	mov	r5, r0
   b7822:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b7824:	bb1b      	cbnz	r3, b786e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b7826:	f7ff fe59 	bl	b74dc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b782a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b782e:	4604      	mov	r4, r0
   b7830:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b7832:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b7834:	f7ff fd02 	bl	b723c <_ZN14RecursiveMutex4lockEv.isra.0>
   b7838:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b783c:	2446      	movs	r4, #70	; 0x46
   b783e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b7842:	45b0      	cmp	r8, r6
   b7844:	d109      	bne.n	b785a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b7846:	a801      	add	r0, sp, #4
   b7848:	f7ff ff61 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b784c:	42a5      	cmp	r5, r4
   b784e:	bfb4      	ite	lt
   b7850:	2000      	movlt	r0, #0
   b7852:	2001      	movge	r0, #1
}
   b7854:	b002      	add	sp, #8
   b7856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b785a:	f856 0b04 	ldr.w	r0, [r6], #4
   b785e:	4639      	mov	r1, r7
   b7860:	3004      	adds	r0, #4
   b7862:	f7ff fd8f 	bl	b7384 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b7866:	4284      	cmp	r4, r0
   b7868:	bfa8      	it	ge
   b786a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b786c:	e7e9      	b.n	b7842 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b786e:	2000      	movs	r0, #0
   b7870:	e7f0      	b.n	b7854 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b7872:	bf00      	nop
   b7874:	e000ed00 	.word	0xe000ed00

000b7878 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b787a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b787e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7880:	4604      	mov	r4, r0
   b7882:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7884:	db0d      	blt.n	b78a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b7886:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b7888:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b788a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b788c:	dd04      	ble.n	b7898 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b788e:	00b9      	lsls	r1, r7, #2
   b7890:	f7fe fdb6 	bl	b6400 <realloc>
            if (!d) {
   b7894:	b918      	cbnz	r0, b789e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b7896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b7898:	f7fe fdaa 	bl	b63f0 <free>
        T* d = nullptr;
   b789c:	2000      	movs	r0, #0
        data_ = d;
   b789e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b78a0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b78a2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b78a4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b78a6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b78aa:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b78ac:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b78b0:	1d08      	adds	r0, r1, #4
   b78b2:	f001 fb03 	bl	b8ebc <memmove>
    new(p) T(std::move(value));
   b78b6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b78ba:	6863      	ldr	r3, [r4, #4]
   b78bc:	3301      	adds	r3, #1
   b78be:	6063      	str	r3, [r4, #4]
    return true;
   b78c0:	2001      	movs	r0, #1
   b78c2:	e7e8      	b.n	b7896 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b78c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b78c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b78c6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b78ca:	4604      	mov	r4, r0
   b78cc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b78ce:	9301      	str	r3, [sp, #4]
   b78d0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b78d2:	f7ff fcb3 	bl	b723c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b78d6:	e9d4 3200 	ldrd	r3, r2, [r4]
   b78da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b78de:	4293      	cmp	r3, r2
   b78e0:	4619      	mov	r1, r3
   b78e2:	d00b      	beq.n	b78fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b78e4:	6809      	ldr	r1, [r1, #0]
   b78e6:	42a9      	cmp	r1, r5
   b78e8:	f103 0304 	add.w	r3, r3, #4
   b78ec:	d1f7      	bne.n	b78de <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b78ee:	a801      	add	r0, sp, #4
   b78f0:	f7ff ff0d 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b78f4:	2500      	movs	r5, #0
}
   b78f6:	4628      	mov	r0, r5
   b78f8:	b003      	add	sp, #12
   b78fa:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b78fc:	4629      	mov	r1, r5
   b78fe:	4620      	mov	r0, r4
   b7900:	f7ff ffba 	bl	b7878 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b7904:	4605      	mov	r5, r0
   b7906:	2800      	cmp	r0, #0
   b7908:	d0f1      	beq.n	b78ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b790a:	6863      	ldr	r3, [r4, #4]
   b790c:	2b01      	cmp	r3, #1
   b790e:	d101      	bne.n	b7914 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b7910:	f7ff fe00 	bl	b7514 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7914:	a801      	add	r0, sp, #4
   b7916:	f7ff fefa 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b791a:	e7ec      	b.n	b78f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b791c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b791c:	b570      	push	{r4, r5, r6, lr}
   b791e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b7920:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7924:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b7926:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b792a:	4282      	cmp	r2, r0
   b792c:	d00f      	beq.n	b794e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b792e:	4601      	mov	r1, r0
            if (*p == value) {
   b7930:	681d      	ldr	r5, [r3, #0]
   b7932:	f851 6b04 	ldr.w	r6, [r1], #4
   b7936:	42ae      	cmp	r6, r5
   b7938:	d107      	bne.n	b794a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b793a:	1a52      	subs	r2, r2, r1
   b793c:	f001 fabe 	bl	b8ebc <memmove>
    --size_;
   b7940:	6863      	ldr	r3, [r4, #4]
   b7942:	3b01      	subs	r3, #1
   b7944:	6063      	str	r3, [r4, #4]
    return true;
   b7946:	2001      	movs	r0, #1
}
   b7948:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b794a:	4608      	mov	r0, r1
   b794c:	e7ed      	b.n	b792a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b794e:	2000      	movs	r0, #0
   b7950:	e7fa      	b.n	b7948 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b7952 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7952:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b7954:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b7958:	4604      	mov	r4, r0
   b795a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b795c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b795e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b7960:	f7ff fc6c 	bl	b723c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b7964:	a901      	add	r1, sp, #4
   b7966:	4620      	mov	r0, r4
   b7968:	f7ff ffd8 	bl	b791c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b796c:	b118      	cbz	r0, b7976 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b796e:	6863      	ldr	r3, [r4, #4]
   b7970:	b90b      	cbnz	r3, b7976 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b7972:	f7ff fddb 	bl	b752c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b7976:	a803      	add	r0, sp, #12
   b7978:	f7ff fec9 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b797c:	b004      	add	sp, #16
   b797e:	bd10      	pop	{r4, pc}

000b7980 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b7980:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b7982:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b7986:	2318      	movs	r3, #24
   b7988:	4604      	mov	r4, r0
   b798a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b798e:	42ae      	cmp	r6, r5
   b7990:	d015      	beq.n	b79be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b7992:	f105 0110 	add.w	r1, r5, #16
   b7996:	4620      	mov	r0, r4
   b7998:	f7ff ffc0 	bl	b791c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b799c:	6863      	ldr	r3, [r4, #4]
   b799e:	b90b      	cbnz	r3, b79a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b79a0:	f7ff fdc4 	bl	b752c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b79a4:	69e0      	ldr	r0, [r4, #28]
   b79a6:	6929      	ldr	r1, [r5, #16]
   b79a8:	6803      	ldr	r3, [r0, #0]
   b79aa:	68db      	ldr	r3, [r3, #12]
   b79ac:	4798      	blx	r3
        if (h.stream) {
   b79ae:	6969      	ldr	r1, [r5, #20]
   b79b0:	b119      	cbz	r1, b79ba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b79b2:	6a20      	ldr	r0, [r4, #32]
   b79b4:	6803      	ldr	r3, [r0, #0]
   b79b6:	68db      	ldr	r3, [r3, #12]
   b79b8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b79ba:	3518      	adds	r5, #24
   b79bc:	e7e7      	b.n	b798e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b79be:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b79c2:	2618      	movs	r6, #24
   b79c4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b79c8:	42ae      	cmp	r6, r5
   b79ca:	d004      	beq.n	b79d6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b79cc:	4628      	mov	r0, r5
   b79ce:	f000 fdb3 	bl	b8538 <_ZN6StringD1Ev>
   b79d2:	3518      	adds	r5, #24
   b79d4:	e7f8      	b.n	b79c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b79d6:	2300      	movs	r3, #0
   b79d8:	6163      	str	r3, [r4, #20]
}
   b79da:	bd70      	pop	{r4, r5, r6, pc}

000b79dc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b79dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b79de:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b79e0:	f7ff fda4 	bl	b752c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b79e4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b79e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b79ea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b79ec:	f7ff fc26 	bl	b723c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b79f0:	4620      	mov	r0, r4
   b79f2:	f7ff ffc5 	bl	b7980 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b79f6:	a801      	add	r0, sp, #4
   b79f8:	f7ff fe89 	bl	b770e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b79fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b79fe:	b108      	cbz	r0, b7a04 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b7a00:	f7fe fa42 	bl	b5e88 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b7a04:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b7a08:	2618      	movs	r6, #24
   b7a0a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b7a0e:	42ae      	cmp	r6, r5
   b7a10:	d004      	beq.n	b7a1c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b7a12:	4628      	mov	r0, r5
   b7a14:	f000 fd90 	bl	b8538 <_ZN6StringD1Ev>
   b7a18:	3518      	adds	r5, #24
   b7a1a:	e7f8      	b.n	b7a0e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b7a1c:	6920      	ldr	r0, [r4, #16]
   b7a1e:	f7fe fce7 	bl	b63f0 <free>
   b7a22:	6820      	ldr	r0, [r4, #0]
   b7a24:	f7fe fce4 	bl	b63f0 <free>
}
   b7a28:	4620      	mov	r0, r4
   b7a2a:	b002      	add	sp, #8
   b7a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7a30 <__tcf_2>:
    static LogManager mgr;
   b7a30:	4801      	ldr	r0, [pc, #4]	; (b7a38 <__tcf_2+0x8>)
   b7a32:	f7ff bfd3 	b.w	b79dc <_ZN5spark10LogManagerD1Ev>
   b7a36:	bf00      	nop
   b7a38:	2003e678 	.word	0x2003e678

000b7a3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b7a3c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a40:	4604      	mov	r4, r0
   b7a42:	460d      	mov	r5, r1
   b7a44:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a46:	d915      	bls.n	b7a74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b7a48:	4290      	cmp	r0, r2
   b7a4a:	d214      	bcs.n	b7a76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b7a4c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b7a50:	1a75      	subs	r5, r6, r1
   b7a52:	f1a1 0714 	sub.w	r7, r1, #20
   b7a56:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7a58:	42b7      	cmp	r7, r6
   b7a5a:	d01a      	beq.n	b7a92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b7a5c:	b11c      	cbz	r4, b7a66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b7a5e:	4631      	mov	r1, r6
   b7a60:	4620      	mov	r0, r4
   b7a62:	f7ff fc3f 	bl	b72e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b7a66:	f106 0008 	add.w	r0, r6, #8
   b7a6a:	f7ff fdf9 	bl	b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b7a6e:	3e14      	subs	r6, #20
   b7a70:	3c14      	subs	r4, #20
   b7a72:	e7f1      	b.n	b7a58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b7a74:	d00d      	beq.n	b7a92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b7a76:	42b5      	cmp	r5, r6
   b7a78:	d00b      	beq.n	b7a92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b7a7a:	b11c      	cbz	r4, b7a84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b7a7c:	4629      	mov	r1, r5
   b7a7e:	4620      	mov	r0, r4
   b7a80:	f7ff fc30 	bl	b72e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b7a84:	f105 0008 	add.w	r0, r5, #8
   b7a88:	f7ff fdea 	bl	b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b7a8c:	3514      	adds	r5, #20
   b7a8e:	3414      	adds	r4, #20
   b7a90:	e7f1      	b.n	b7a76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b7a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b7a94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7a98:	4604      	mov	r4, r0
   b7a9a:	460d      	mov	r5, r1
   b7a9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7a9e:	d914      	bls.n	b7aca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b7aa0:	4290      	cmp	r0, r2
   b7aa2:	d213      	bcs.n	b7acc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b7aa4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b7aa8:	1a75      	subs	r5, r6, r1
   b7aaa:	f1a1 0710 	sub.w	r7, r1, #16
   b7aae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7ab0:	42b7      	cmp	r7, r6
   b7ab2:	d018      	beq.n	b7ae6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b7ab4:	b11c      	cbz	r4, b7abe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b7ab6:	4631      	mov	r1, r6
   b7ab8:	4620      	mov	r0, r4
   b7aba:	f000 fdba 	bl	b8632 <_ZN6StringC1EOS_>
                end->~T();
   b7abe:	4630      	mov	r0, r6
   b7ac0:	f000 fd3a 	bl	b8538 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b7ac4:	3e10      	subs	r6, #16
   b7ac6:	3c10      	subs	r4, #16
   b7ac8:	e7f2      	b.n	b7ab0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b7aca:	d00c      	beq.n	b7ae6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b7acc:	42b5      	cmp	r5, r6
   b7ace:	d00a      	beq.n	b7ae6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b7ad0:	b11c      	cbz	r4, b7ada <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b7ad2:	4629      	mov	r1, r5
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	f000 fdac 	bl	b8632 <_ZN6StringC1EOS_>
                p->~T();
   b7ada:	4628      	mov	r0, r5
   b7adc:	f000 fd2c 	bl	b8538 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b7ae0:	3510      	adds	r5, #16
   b7ae2:	3410      	adds	r4, #16
   b7ae4:	e7f2      	b.n	b7acc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b7ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7ae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b7ae8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b7aea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b7aec:	4605      	mov	r5, r0
        if (n > 0) {
   b7aee:	dd11      	ble.n	b7b14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b7af0:	0130      	lsls	r0, r6, #4
   b7af2:	f7fe fc75 	bl	b63e0 <malloc>
            if (!d) {
   b7af6:	4604      	mov	r4, r0
   b7af8:	b158      	cbz	r0, b7b12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b7afa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7afe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b7b02:	f7ff ffc7 	bl	b7a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7b06:	6828      	ldr	r0, [r5, #0]
   b7b08:	f7fe fc72 	bl	b63f0 <free>
        data_ = d;
   b7b0c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b7b0e:	60ae      	str	r6, [r5, #8]
        return true;
   b7b10:	2001      	movs	r0, #1
    }
   b7b12:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b7b14:	2400      	movs	r4, #0
   b7b16:	e7f6      	b.n	b7b06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b7b18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7b1c:	4690      	mov	r8, r2
   b7b1e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b7b20:	2300      	movs	r3, #0
   b7b22:	9103      	str	r1, [sp, #12]
    return size_;
   b7b24:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b7b28:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7b2a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b7b2c:	4299      	cmp	r1, r3
        capacity_(0) {
   b7b2e:	e9c0 3300 	strd	r3, r3, [r0]
   b7b32:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7b3a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b7b3e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b7b40:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b7b42:	dc23      	bgt.n	b7b8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b7b44:	e9d8 5700 	ldrd	r5, r7, [r8]
   b7b48:	2314      	movs	r3, #20
   b7b4a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b7b4e:	42af      	cmp	r7, r5
   b7b50:	d03b      	beq.n	b7bca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b7b52:	4629      	mov	r1, r5
   b7b54:	a80b      	add	r0, sp, #44	; 0x2c
   b7b56:	f000 fd6c 	bl	b8632 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b7b5a:	a90b      	add	r1, sp, #44	; 0x2c
   b7b5c:	a80f      	add	r0, sp, #60	; 0x3c
   b7b5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b7b60:	f000 fd67 	bl	b8632 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b64:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b7b68:	4299      	cmp	r1, r3
   b7b6a:	da1b      	bge.n	b7ba4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b7b6c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b7b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b7b70:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b7b74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b7b78:	4631      	mov	r1, r6
   b7b7a:	f106 0010 	add.w	r0, r6, #16
   b7b7e:	f7ff ff89 	bl	b7a94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b7b82:	b9ee      	cbnz	r6, b7bc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b7b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7b86:	3301      	adds	r3, #1
   b7b88:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b7b8a:	e011      	b.n	b7bb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b7b8c:	a808      	add	r0, sp, #32
   b7b8e:	f7ff ffab 	bl	b7ae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7b92:	2800      	cmp	r0, #0
   b7b94:	d1d6      	bne.n	b7b44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b7b96:	a808      	add	r0, sp, #32
   b7b98:	f7fe fcbc 	bl	b6514 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	b015      	add	sp, #84	; 0x54
   b7ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7ba4:	3101      	adds	r1, #1
   b7ba6:	a808      	add	r0, sp, #32
   b7ba8:	f7ff ff9e 	bl	b7ae8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b7bac:	2800      	cmp	r0, #0
   b7bae:	d1dd      	bne.n	b7b6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b7bb0:	a80f      	add	r0, sp, #60	; 0x3c
   b7bb2:	f000 fcc1 	bl	b8538 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b7bb6:	a80b      	add	r0, sp, #44	; 0x2c
   b7bb8:	f000 fcbe 	bl	b8538 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b7bbc:	3514      	adds	r5, #20
   b7bbe:	e7c6      	b.n	b7b4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b7bc0:	a90f      	add	r1, sp, #60	; 0x3c
   b7bc2:	4630      	mov	r0, r6
   b7bc4:	f000 fd35 	bl	b8632 <_ZN6StringC1EOS_>
   b7bc8:	e7dc      	b.n	b7b84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b7bca:	2600      	movs	r6, #0
   b7bcc:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b7bd0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b7bd2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b7bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b7bda:	429e      	cmp	r6, r3
   b7bdc:	da7c      	bge.n	b7cd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b7bde:	0133      	lsls	r3, r6, #4
   b7be0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b7be2:	9306      	str	r3, [sp, #24]
        if (!category) {
   b7be4:	b90b      	cbnz	r3, b7bea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b7be6:	3601      	adds	r6, #1
   b7be8:	e7f5      	b.n	b7bd6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b7bea:	2300      	movs	r3, #0
   b7bec:	9307      	str	r3, [sp, #28]
   b7bee:	fb09 f306 	mul.w	r3, r9, r6
   b7bf2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b7bf4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b7bf6:	a907      	add	r1, sp, #28
   b7bf8:	a806      	add	r0, sp, #24
   b7bfa:	f7ff faf8 	bl	b71ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b7bfe:	4682      	mov	sl, r0
   b7c00:	2800      	cmp	r0, #0
   b7c02:	d0f0      	beq.n	b7be6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b7c04:	f04f 0300 	mov.w	r3, #0
   b7c08:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7c0c:	4601      	mov	r1, r0
   b7c0e:	9a07      	ldr	r2, [sp, #28]
   b7c10:	f10d 0317 	add.w	r3, sp, #23
   b7c14:	4628      	mov	r0, r5
   b7c16:	f7ff fb79 	bl	b730c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7c1a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b7c1e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7c20:	2f00      	cmp	r7, #0
   b7c22:	d14a      	bne.n	b7cba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b7c24:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b7c28:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b7c2c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b7c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7c34:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b7c38:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b7c3c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7c3e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b7c42:	4293      	cmp	r3, r2
   b7c44:	db17      	blt.n	b7c76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b7c46:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b7c4a:	f1ba 0f00 	cmp.w	sl, #0
   b7c4e:	dd30      	ble.n	b7cb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b7c50:	fb09 f00a 	mul.w	r0, r9, sl
   b7c54:	f7fe fbc4 	bl	b63e0 <malloc>
            if (!d) {
   b7c58:	4683      	mov	fp, r0
   b7c5a:	b360      	cbz	r0, b7cb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b7c5c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b7c60:	fb09 1202 	mla	r2, r9, r2, r1
   b7c64:	f7ff feea 	bl	b7a3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b7c68:	6828      	ldr	r0, [r5, #0]
   b7c6a:	f7fe fbc1 	bl	b63f0 <free>
        data_ = d;
   b7c6e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b7c72:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b7c76:	682b      	ldr	r3, [r5, #0]
   b7c78:	9a01      	ldr	r2, [sp, #4]
   b7c7a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b7c7e:	686a      	ldr	r2, [r5, #4]
   b7c80:	4651      	mov	r1, sl
   b7c82:	fb09 3202 	mla	r2, r9, r2, r3
   b7c86:	f10a 0014 	add.w	r0, sl, #20
   b7c8a:	f7ff fed7 	bl	b7a3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b7c8e:	f1ba 0f00 	cmp.w	sl, #0
   b7c92:	d003      	beq.n	b7c9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b7c94:	a90f      	add	r1, sp, #60	; 0x3c
   b7c96:	4650      	mov	r0, sl
   b7c98:	f7ff fb24 	bl	b72e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b7c9c:	686b      	ldr	r3, [r5, #4]
   b7c9e:	3301      	adds	r3, #1
   b7ca0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b7ca2:	a811      	add	r0, sp, #68	; 0x44
   b7ca4:	f7ff fcdc 	bl	b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7ca8:	b13f      	cbz	r7, b7cba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b7caa:	a80b      	add	r0, sp, #44	; 0x2c
   b7cac:	f7ff fcd8 	bl	b7660 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b7cb0:	e771      	b.n	b7b96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b7cb2:	46bb      	mov	fp, r7
   b7cb4:	e7d8      	b.n	b7c68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b7cb6:	2701      	movs	r7, #1
   b7cb8:	e7f3      	b.n	b7ca2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b7cba:	9b01      	ldr	r3, [sp, #4]
   b7cbc:	682d      	ldr	r5, [r5, #0]
   b7cbe:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b7cc2:	9b06      	ldr	r3, [sp, #24]
   b7cc4:	781b      	ldrb	r3, [r3, #0]
   b7cc6:	b92b      	cbnz	r3, b7cd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b7cc8:	f8d8 3000 	ldr.w	r3, [r8]
   b7ccc:	9a02      	ldr	r2, [sp, #8]
   b7cce:	4413      	add	r3, r2
   b7cd0:	7c1b      	ldrb	r3, [r3, #16]
   b7cd2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b7cd4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b7cd6:	e78e      	b.n	b7bf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cd8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b7cda:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cdc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b7cde:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ce0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7ce2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b7ce4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b7ce6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7ce8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7cea:	60a2      	str	r2, [r4, #8]
   b7cec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b7cee:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cf0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b7cf2:	60e2      	str	r2, [r4, #12]
   b7cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b7cf6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7cf8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b7cfa:	6122      	str	r2, [r4, #16]
   b7cfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b7cfe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b7d00:	9b03      	ldr	r3, [sp, #12]
   b7d02:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b7d04:	6162      	str	r2, [r4, #20]
   b7d06:	7623      	strb	r3, [r4, #24]
   b7d08:	e7cf      	b.n	b7caa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b7d0c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7d0e:	4604      	mov	r4, r0
   b7d10:	b087      	sub	sp, #28
   b7d12:	460d      	mov	r5, r1
        filter_(level, filters) {
   b7d14:	4626      	mov	r6, r4
        stream_(&stream) {
   b7d16:	4619      	mov	r1, r3
   b7d18:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b7d1a:	4617      	mov	r7, r2
        stream_(&stream) {
   b7d1c:	f7fd fab9 	bl	b5292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b7d20:	4b0b      	ldr	r3, [pc, #44]	; (b7d50 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b7d22:	f846 3b04 	str.w	r3, [r6], #4
   b7d26:	4669      	mov	r1, sp
   b7d28:	a803      	add	r0, sp, #12
   b7d2a:	f7fd fab2 	bl	b5292 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b7d2e:	aa03      	add	r2, sp, #12
   b7d30:	4639      	mov	r1, r7
   b7d32:	4630      	mov	r0, r6
   b7d34:	f7ff fef0 	bl	b7b18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7d38:	a803      	add	r0, sp, #12
   b7d3a:	f7fd fa69 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b7d3e:	4668      	mov	r0, sp
   b7d40:	f7fd fa66 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7d44:	4b03      	ldr	r3, [pc, #12]	; (b7d54 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b7d46:	6023      	str	r3, [r4, #0]
}
   b7d48:	4620      	mov	r0, r4
        stream_(&stream) {
   b7d4a:	6225      	str	r5, [r4, #32]
}
   b7d4c:	b007      	add	sp, #28
   b7d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7d50:	000b9460 	.word	0x000b9460
   b7d54:	000bcbcc 	.word	0x000bcbcc

000b7d58 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b7d58:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7d5a:	460f      	mov	r7, r1
   b7d5c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7d5e:	491d      	ldr	r1, [pc, #116]	; (b7dd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b7d60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7d62:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b7d64:	4616      	mov	r6, r2
   b7d66:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b7d68:	f7fc fd7a 	bl	b4860 <strcmp>
   b7d6c:	b9c0      	cbnz	r0, b7da0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b7d6e:	b1a4      	cbz	r4, b7d9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b7d70:	4629      	mov	r1, r5
   b7d72:	a801      	add	r0, sp, #4
   b7d74:	f7ff fcbc 	bl	b76f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7d78:	4917      	ldr	r1, [pc, #92]	; (b7dd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7d7a:	2024      	movs	r0, #36	; 0x24
   b7d7c:	f001 f876 	bl	b8e6c <_ZnwjRKSt9nothrow_t>
   b7d80:	4605      	mov	r5, r0
   b7d82:	b130      	cbz	r0, b7d92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b7d84:	ab01      	add	r3, sp, #4
   b7d86:	4632      	mov	r2, r6
   b7d88:	4621      	mov	r1, r4
   b7d8a:	f7ff ffbf 	bl	b7d0c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7d8e:	4b13      	ldr	r3, [pc, #76]	; (b7ddc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b7d90:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b7d92:	a801      	add	r0, sp, #4
   b7d94:	f7fd fa3c 	bl	b5210 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7d98:	462c      	mov	r4, r5
}
   b7d9a:	4620      	mov	r0, r4
   b7d9c:	b005      	add	sp, #20
   b7d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b7da0:	490f      	ldr	r1, [pc, #60]	; (b7de0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b7da2:	4638      	mov	r0, r7
   b7da4:	f7fc fd5c 	bl	b4860 <strcmp>
   b7da8:	b990      	cbnz	r0, b7dd0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b7daa:	2c00      	cmp	r4, #0
   b7dac:	d0f5      	beq.n	b7d9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b7dae:	4629      	mov	r1, r5
   b7db0:	a801      	add	r0, sp, #4
   b7db2:	f7ff fc9d 	bl	b76f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b7db6:	4908      	ldr	r1, [pc, #32]	; (b7dd8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b7db8:	2024      	movs	r0, #36	; 0x24
   b7dba:	f001 f857 	bl	b8e6c <_ZnwjRKSt9nothrow_t>
   b7dbe:	4605      	mov	r5, r0
   b7dc0:	2800      	cmp	r0, #0
   b7dc2:	d0e6      	beq.n	b7d92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b7dc4:	ab01      	add	r3, sp, #4
   b7dc6:	4632      	mov	r2, r6
   b7dc8:	4621      	mov	r1, r4
   b7dca:	f7ff ff9f 	bl	b7d0c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b7dce:	e7e0      	b.n	b7d92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b7dd0:	2400      	movs	r4, #0
   b7dd2:	e7e2      	b.n	b7d9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b7dd4:	000bcb50 	.word	0x000bcb50
   b7dd8:	000bcce4 	.word	0x000bcce4
   b7ddc:	000bcbe4 	.word	0x000bcbe4
   b7de0:	000bcb54 	.word	0x000bcb54

000b7de4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b7de4:	4b01      	ldr	r3, [pc, #4]	; (b7dec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7de6:	4a02      	ldr	r2, [pc, #8]	; (b7df0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7de8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7dea:	4770      	bx	lr
   b7dec:	2003e674 	.word	0x2003e674
   b7df0:	000bcb65 	.word	0x000bcb65

000b7df4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7df8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b7dfa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7dfe:	4604      	mov	r4, r0
   b7e00:	460e      	mov	r6, r1
   b7e02:	4617      	mov	r7, r2
   b7e04:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b7e06:	f000 fe29 	bl	b8a5c <_Z16_fetch_usbserialv>
   b7e0a:	4581      	cmp	r9, r0
   b7e0c:	d04c      	beq.n	b7ea8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b7e0e:	792b      	ldrb	r3, [r5, #4]
   b7e10:	0719      	lsls	r1, r3, #28
   b7e12:	d504      	bpl.n	b7e1e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b7e14:	696a      	ldr	r2, [r5, #20]
   b7e16:	4954      	ldr	r1, [pc, #336]	; (b7f68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b7e18:	4620      	mov	r0, r4
   b7e1a:	f7ff fadc 	bl	b73d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b7e1e:	f1b8 0f00 	cmp.w	r8, #0
   b7e22:	d00d      	beq.n	b7e40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b7e24:	215b      	movs	r1, #91	; 0x5b
   b7e26:	4620      	mov	r0, r4
   b7e28:	f7ff fa50 	bl	b72cc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b7e2c:	4641      	mov	r1, r8
   b7e2e:	4620      	mov	r0, r4
   b7e30:	f7ff fa3d 	bl	b72ae <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b7e34:	6823      	ldr	r3, [r4, #0]
   b7e36:	494d      	ldr	r1, [pc, #308]	; (b7f6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b7e38:	68db      	ldr	r3, [r3, #12]
   b7e3a:	2202      	movs	r2, #2
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	4798      	blx	r3
    if (attr.has_file) {
   b7e40:	792b      	ldrb	r3, [r5, #4]
   b7e42:	07da      	lsls	r2, r3, #31
   b7e44:	d523      	bpl.n	b7e8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b7e46:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b7e4a:	212f      	movs	r1, #47	; 0x2f
   b7e4c:	4640      	mov	r0, r8
   b7e4e:	f001 f8d6 	bl	b8ffe <strrchr>
    if (s1) {
   b7e52:	b108      	cbz	r0, b7e58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b7e54:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b7e58:	4641      	mov	r1, r8
   b7e5a:	4620      	mov	r0, r4
   b7e5c:	f7ff fa27 	bl	b72ae <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b7e60:	792b      	ldrb	r3, [r5, #4]
   b7e62:	079b      	lsls	r3, r3, #30
   b7e64:	d508      	bpl.n	b7e78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b7e66:	213a      	movs	r1, #58	; 0x3a
   b7e68:	4620      	mov	r0, r4
   b7e6a:	f7ff fa2f 	bl	b72cc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b7e6e:	68ea      	ldr	r2, [r5, #12]
   b7e70:	493f      	ldr	r1, [pc, #252]	; (b7f70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b7e72:	4620      	mov	r0, r4
   b7e74:	f7ff faaf 	bl	b73d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b7e78:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b7e7a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b7e7c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b7e80:	68db      	ldr	r3, [r3, #12]
   b7e82:	bf14      	ite	ne
   b7e84:	493b      	ldrne	r1, [pc, #236]	; (b7f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b7e86:	493c      	ldreq	r1, [pc, #240]	; (b7f78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b7e88:	2202      	movs	r2, #2
            write(": ", 2);
   b7e8a:	4620      	mov	r0, r4
   b7e8c:	4798      	blx	r3
    if (attr.has_function) {
   b7e8e:	792b      	ldrb	r3, [r5, #4]
   b7e90:	0758      	lsls	r0, r3, #29
   b7e92:	d51d      	bpl.n	b7ed0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b7e94:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b7e96:	460b      	mov	r3, r1
   b7e98:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b7e9a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7e9e:	b160      	cbz	r0, b7eba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b7ea0:	2820      	cmp	r0, #32
   b7ea2:	d108      	bne.n	b7eb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b7ea4:	4619      	mov	r1, r3
   b7ea6:	e7f7      	b.n	b7e98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b7ea8:	4834      	ldr	r0, [pc, #208]	; (b7f7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b7eaa:	f000 f982 	bl	b81b2 <_ZN5spark12NetworkClass9listeningEv>
   b7eae:	2800      	cmp	r0, #0
   b7eb0:	d0ad      	beq.n	b7e0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b7eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b7eb6:	2828      	cmp	r0, #40	; 0x28
   b7eb8:	d1ee      	bne.n	b7e98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b7eba:	6823      	ldr	r3, [r4, #0]
   b7ebc:	1a52      	subs	r2, r2, r1
   b7ebe:	68db      	ldr	r3, [r3, #12]
   b7ec0:	4620      	mov	r0, r4
   b7ec2:	4798      	blx	r3
        write("(): ", 4);
   b7ec4:	6823      	ldr	r3, [r4, #0]
   b7ec6:	492e      	ldr	r1, [pc, #184]	; (b7f80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b7ec8:	68db      	ldr	r3, [r3, #12]
   b7eca:	2204      	movs	r2, #4
   b7ecc:	4620      	mov	r0, r4
   b7ece:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b7ed0:	2100      	movs	r1, #0
   b7ed2:	4638      	mov	r0, r7
   b7ed4:	f7fe f980 	bl	b61d8 <log_level_name>
   b7ed8:	4601      	mov	r1, r0
    write(s);
   b7eda:	4620      	mov	r0, r4
   b7edc:	f7ff f9e7 	bl	b72ae <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b7ee0:	6823      	ldr	r3, [r4, #0]
   b7ee2:	4925      	ldr	r1, [pc, #148]	; (b7f78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b7ee4:	68db      	ldr	r3, [r3, #12]
   b7ee6:	2202      	movs	r2, #2
   b7ee8:	4620      	mov	r0, r4
   b7eea:	4798      	blx	r3
    if (msg) {
   b7eec:	b11e      	cbz	r6, b7ef6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b7eee:	4631      	mov	r1, r6
   b7ef0:	4620      	mov	r0, r4
   b7ef2:	f7ff f9dc 	bl	b72ae <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b7ef6:	792b      	ldrb	r3, [r5, #4]
   b7ef8:	f013 0f30 	tst.w	r3, #48	; 0x30
   b7efc:	d02c      	beq.n	b7f58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b7efe:	6823      	ldr	r3, [r4, #0]
   b7f00:	4920      	ldr	r1, [pc, #128]	; (b7f84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b7f02:	68db      	ldr	r3, [r3, #12]
   b7f04:	2202      	movs	r2, #2
   b7f06:	4620      	mov	r0, r4
   b7f08:	4798      	blx	r3
        if (attr.has_code) {
   b7f0a:	792b      	ldrb	r3, [r5, #4]
   b7f0c:	06d9      	lsls	r1, r3, #27
   b7f0e:	d50a      	bpl.n	b7f26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b7f10:	6823      	ldr	r3, [r4, #0]
   b7f12:	491d      	ldr	r1, [pc, #116]	; (b7f88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b7f14:	68db      	ldr	r3, [r3, #12]
   b7f16:	2207      	movs	r2, #7
   b7f18:	4620      	mov	r0, r4
   b7f1a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b7f1c:	69aa      	ldr	r2, [r5, #24]
   b7f1e:	491b      	ldr	r1, [pc, #108]	; (b7f8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b7f20:	4620      	mov	r0, r4
   b7f22:	f7ff fa58 	bl	b73d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b7f26:	792b      	ldrb	r3, [r5, #4]
   b7f28:	069a      	lsls	r2, r3, #26
   b7f2a:	d511      	bpl.n	b7f50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b7f2c:	06db      	lsls	r3, r3, #27
   b7f2e:	d505      	bpl.n	b7f3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b7f30:	6823      	ldr	r3, [r4, #0]
   b7f32:	4910      	ldr	r1, [pc, #64]	; (b7f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b7f34:	68db      	ldr	r3, [r3, #12]
   b7f36:	2202      	movs	r2, #2
   b7f38:	4620      	mov	r0, r4
   b7f3a:	4798      	blx	r3
            write("details = ", 10);
   b7f3c:	6823      	ldr	r3, [r4, #0]
   b7f3e:	4914      	ldr	r1, [pc, #80]	; (b7f90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b7f40:	68db      	ldr	r3, [r3, #12]
   b7f42:	4620      	mov	r0, r4
   b7f44:	220a      	movs	r2, #10
   b7f46:	4798      	blx	r3
            write(attr.details);
   b7f48:	69e9      	ldr	r1, [r5, #28]
   b7f4a:	4620      	mov	r0, r4
   b7f4c:	f7ff f9af 	bl	b72ae <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b7f50:	215d      	movs	r1, #93	; 0x5d
   b7f52:	4620      	mov	r0, r4
   b7f54:	f7ff f9ba 	bl	b72cc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b7f58:	6823      	ldr	r3, [r4, #0]
   b7f5a:	490e      	ldr	r1, [pc, #56]	; (b7f94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b7f5c:	68db      	ldr	r3, [r3, #12]
   b7f5e:	4620      	mov	r0, r4
   b7f60:	2202      	movs	r2, #2
}
   b7f62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b7f66:	4718      	bx	r3
   b7f68:	000bcb69 	.word	0x000bcb69
   b7f6c:	000bcb70 	.word	0x000bcb70
   b7f70:	000bcb30 	.word	0x000bcb30
   b7f74:	000bcb73 	.word	0x000bcb73
   b7f78:	000bcb78 	.word	0x000bcb78
   b7f7c:	2003e6a0 	.word	0x2003e6a0
   b7f80:	000bcb76 	.word	0x000bcb76
   b7f84:	000bcb7b 	.word	0x000bcb7b
   b7f88:	000bcb7e 	.word	0x000bcb7e
   b7f8c:	000bcb86 	.word	0x000bcb86
   b7f90:	000bcb89 	.word	0x000bcb89
   b7f94:	000bcb94 	.word	0x000bcb94

000b7f98 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7f9c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b7f9e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b7fa0:	460d      	mov	r5, r1
   b7fa2:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b7fa4:	f000 fd5a 	bl	b8a5c <_Z16_fetch_usbserialv>
   b7fa8:	4287      	cmp	r7, r0
   b7faa:	d007      	beq.n	b7fbc <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b7fac:	6a20      	ldr	r0, [r4, #32]
   b7fae:	6803      	ldr	r3, [r0, #0]
   b7fb0:	4632      	mov	r2, r6
   b7fb2:	4629      	mov	r1, r5
   b7fb4:	68db      	ldr	r3, [r3, #12]
}
   b7fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b7fba:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b7fbc:	4803      	ldr	r0, [pc, #12]	; (b7fcc <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b7fbe:	f000 f8f8 	bl	b81b2 <_ZN5spark12NetworkClass9listeningEv>
   b7fc2:	2800      	cmp	r0, #0
   b7fc4:	d0f2      	beq.n	b7fac <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b7fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7fca:	bf00      	nop
   b7fcc:	2003e6a0 	.word	0x2003e6a0

000b7fd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b7fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7fd4:	b085      	sub	sp, #20
    return stream_;
   b7fd6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b7fda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b7fdc:	4605      	mov	r5, r0
   b7fde:	460f      	mov	r7, r1
   b7fe0:	4690      	mov	r8, r2
   b7fe2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b7fe4:	f000 fd3a 	bl	b8a5c <_Z16_fetch_usbserialv>
   b7fe8:	4581      	cmp	r9, r0
   b7fea:	d105      	bne.n	b7ff8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b7fec:	4849      	ldr	r0, [pc, #292]	; (b8114 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b7fee:	f000 f8e0 	bl	b81b2 <_ZN5spark12NetworkClass9listeningEv>
   b7ff2:	2800      	cmp	r0, #0
   b7ff4:	f040 808a 	bne.w	b810c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b7ff8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b7ffa:	4a47      	ldr	r2, [pc, #284]	; (b8118 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b7ffc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b7ffe:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b8002:	a801      	add	r0, sp, #4
        strm_(stream) {
   b8004:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b8006:	f88d 9008 	strb.w	r9, [sp, #8]
   b800a:	f7ff f832 	bl	b7072 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b800e:	4649      	mov	r1, r9
   b8010:	4640      	mov	r0, r8
   b8012:	f7fe f8e1 	bl	b61d8 <log_level_name>
    json.name("l", 1).value(s);
   b8016:	4941      	ldr	r1, [pc, #260]	; (b811c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b8018:	4680      	mov	r8, r0
   b801a:	2201      	movs	r2, #1
   b801c:	a801      	add	r0, sp, #4
   b801e:	f7ff f8b7 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b8022:	4641      	mov	r1, r8
   b8024:	f7ff f935 	bl	b7292 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b8028:	b13f      	cbz	r7, b803a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b802a:	493d      	ldr	r1, [pc, #244]	; (b8120 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b802c:	2201      	movs	r2, #1
   b802e:	a801      	add	r0, sp, #4
   b8030:	f7ff f8ae 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b8034:	4639      	mov	r1, r7
   b8036:	f7ff f92c 	bl	b7292 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b803a:	b13e      	cbz	r6, b804c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b803c:	4939      	ldr	r1, [pc, #228]	; (b8124 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b803e:	2201      	movs	r2, #1
   b8040:	a801      	add	r0, sp, #4
   b8042:	f7ff f8a5 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b8046:	4631      	mov	r1, r6
   b8048:	f7ff f923 	bl	b7292 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b804c:	7923      	ldrb	r3, [r4, #4]
   b804e:	07df      	lsls	r7, r3, #31
   b8050:	d50e      	bpl.n	b8070 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b8052:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b8054:	212f      	movs	r1, #47	; 0x2f
   b8056:	4630      	mov	r0, r6
   b8058:	f000 ffd1 	bl	b8ffe <strrchr>
    if (s1) {
   b805c:	b100      	cbz	r0, b8060 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b805e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b8060:	4931      	ldr	r1, [pc, #196]	; (b8128 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b8062:	2201      	movs	r2, #1
   b8064:	a801      	add	r0, sp, #4
   b8066:	f7ff f893 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b806a:	4631      	mov	r1, r6
   b806c:	f7ff f911 	bl	b7292 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b8070:	7923      	ldrb	r3, [r4, #4]
   b8072:	079e      	lsls	r6, r3, #30
   b8074:	d507      	bpl.n	b8086 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b8076:	492d      	ldr	r1, [pc, #180]	; (b812c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b8078:	2202      	movs	r2, #2
   b807a:	a801      	add	r0, sp, #4
   b807c:	f7ff f888 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b8080:	68e1      	ldr	r1, [r4, #12]
   b8082:	f7ff f803 	bl	b708c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b8086:	7923      	ldrb	r3, [r4, #4]
   b8088:	0758      	lsls	r0, r3, #29
   b808a:	d514      	bpl.n	b80b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b808c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b808e:	4633      	mov	r3, r6
   b8090:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b8092:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8096:	b12a      	cbz	r2, b80a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b8098:	2a20      	cmp	r2, #32
   b809a:	d101      	bne.n	b80a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b809c:	461e      	mov	r6, r3
   b809e:	e7f7      	b.n	b8090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b80a0:	2a28      	cmp	r2, #40	; 0x28
   b80a2:	d1f5      	bne.n	b8090 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b80a4:	4922      	ldr	r1, [pc, #136]	; (b8130 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b80a6:	2202      	movs	r2, #2
   b80a8:	a801      	add	r0, sp, #4
   b80aa:	f7ff f871 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b80ae:	1bba      	subs	r2, r7, r6
   b80b0:	4631      	mov	r1, r6
   b80b2:	f7ff f87d 	bl	b71b0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b80b6:	7923      	ldrb	r3, [r4, #4]
   b80b8:	0719      	lsls	r1, r3, #28
   b80ba:	d507      	bpl.n	b80cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b80bc:	491d      	ldr	r1, [pc, #116]	; (b8134 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b80be:	2201      	movs	r2, #1
   b80c0:	a801      	add	r0, sp, #4
   b80c2:	f7ff f865 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b80c6:	6961      	ldr	r1, [r4, #20]
   b80c8:	f7fe fff2 	bl	b70b0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b80cc:	7923      	ldrb	r3, [r4, #4]
   b80ce:	06da      	lsls	r2, r3, #27
   b80d0:	d508      	bpl.n	b80e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b80d2:	2204      	movs	r2, #4
   b80d4:	4918      	ldr	r1, [pc, #96]	; (b8138 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b80d6:	eb0d 0002 	add.w	r0, sp, r2
   b80da:	f7ff f859 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b80de:	69a1      	ldr	r1, [r4, #24]
   b80e0:	f7fe ffd4 	bl	b708c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b80e4:	7923      	ldrb	r3, [r4, #4]
   b80e6:	069b      	lsls	r3, r3, #26
   b80e8:	d507      	bpl.n	b80fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b80ea:	4914      	ldr	r1, [pc, #80]	; (b813c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b80ec:	2206      	movs	r2, #6
   b80ee:	a801      	add	r0, sp, #4
   b80f0:	f7ff f84e 	bl	b7190 <_ZN5spark10JSONWriter4nameEPKcj>
   b80f4:	69e1      	ldr	r1, [r4, #28]
   b80f6:	f7ff f8cc 	bl	b7292 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b80fa:	a801      	add	r0, sp, #4
   b80fc:	f7fe ffa3 	bl	b7046 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b8100:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b8102:	490f      	ldr	r1, [pc, #60]	; (b8140 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b8104:	6803      	ldr	r3, [r0, #0]
   b8106:	2202      	movs	r2, #2
   b8108:	68db      	ldr	r3, [r3, #12]
   b810a:	4798      	blx	r3
}
   b810c:	b005      	add	sp, #20
   b810e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8112:	bf00      	nop
   b8114:	2003e6a0 	.word	0x2003e6a0
   b8118:	000bcbb4 	.word	0x000bcbb4
   b811c:	000bcb46 	.word	0x000bcb46
   b8120:	000bcb97 	.word	0x000bcb97
   b8124:	000bcd53 	.word	0x000bcd53
   b8128:	000b9382 	.word	0x000b9382
   b812c:	000bcb99 	.word	0x000bcb99
   b8130:	000bcb9c 	.word	0x000bcb9c
   b8134:	000b9360 	.word	0x000b9360
   b8138:	000bcb9f 	.word	0x000bcb9f
   b813c:	000bcba4 	.word	0x000bcba4
   b8140:	000bcb94 	.word	0x000bcb94

000b8144 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b8144:	2300      	movs	r3, #0
   b8146:	6840      	ldr	r0, [r0, #4]
   b8148:	461a      	mov	r2, r3
   b814a:	f7fe b8e9 	b.w	b6320 <network_connect>

000b814e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b814e:	6840      	ldr	r0, [r0, #4]
   b8150:	2200      	movs	r2, #0
   b8152:	2102      	movs	r1, #2
   b8154:	f7fe b8f4 	b.w	b6340 <network_disconnect>

000b8158 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b8158:	2200      	movs	r2, #0
   b815a:	6840      	ldr	r0, [r0, #4]
   b815c:	4611      	mov	r1, r2
   b815e:	f7fe b8e7 	b.w	b6330 <network_connecting>

000b8162 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b8162:	2200      	movs	r2, #0
   b8164:	6840      	ldr	r0, [r0, #4]
   b8166:	4611      	mov	r1, r2
   b8168:	f7fe b8f2 	b.w	b6350 <network_ready>

000b816c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b816c:	2300      	movs	r3, #0
   b816e:	6840      	ldr	r0, [r0, #4]
   b8170:	461a      	mov	r2, r3
   b8172:	4619      	mov	r1, r3
   b8174:	f7fe b8f4 	b.w	b6360 <network_on>

000b8178 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b8178:	2300      	movs	r3, #0
   b817a:	6840      	ldr	r0, [r0, #4]
   b817c:	461a      	mov	r2, r3
   b817e:	4619      	mov	r1, r3
   b8180:	f7fe b8f6 	b.w	b6370 <network_off>

000b8184 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b8184:	6840      	ldr	r0, [r0, #4]
   b8186:	2100      	movs	r1, #0
   b8188:	f7fe b91a 	b.w	b63c0 <network_is_on>

000b818c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b818c:	6840      	ldr	r0, [r0, #4]
   b818e:	2100      	movs	r1, #0
   b8190:	f7fe b91e 	b.w	b63d0 <network_is_off>

000b8194 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b8194:	6840      	ldr	r0, [r0, #4]
   b8196:	2200      	movs	r2, #0
   b8198:	f081 0101 	eor.w	r1, r1, #1
   b819c:	f7fe b8f0 	b.w	b6380 <network_listen>

000b81a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b81a0:	6840      	ldr	r0, [r0, #4]
   b81a2:	2200      	movs	r2, #0
   b81a4:	f7fe b8fc 	b.w	b63a0 <network_set_listen_timeout>

000b81a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b81a8:	2200      	movs	r2, #0
   b81aa:	6840      	ldr	r0, [r0, #4]
   b81ac:	4611      	mov	r1, r2
   b81ae:	f7fe b8ff 	b.w	b63b0 <network_get_listen_timeout>

000b81b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b81b2:	2200      	movs	r2, #0
   b81b4:	6840      	ldr	r0, [r0, #4]
   b81b6:	4611      	mov	r1, r2
   b81b8:	f7fe b8ea 	b.w	b6390 <network_listening>

000b81bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b81bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b81c0:	b095      	sub	sp, #84	; 0x54
   b81c2:	4614      	mov	r4, r2
   b81c4:	460d      	mov	r5, r1
   b81c6:	4607      	mov	r7, r0
    IPAddress addr;
   b81c8:	f7fe fdec 	bl	b6da4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b81cc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b81ce:	221c      	movs	r2, #28
   b81d0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b81d2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b81d4:	f000 fe8c 	bl	b8ef0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b81d8:	2340      	movs	r3, #64	; 0x40
   b81da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b81dc:	4620      	mov	r0, r4
   b81de:	466b      	mov	r3, sp
   b81e0:	aa0c      	add	r2, sp, #48	; 0x30
   b81e2:	2100      	movs	r1, #0
   b81e4:	f7fd ff18 	bl	b6018 <netdb_getaddrinfo>
    if (!r) {
   b81e8:	4604      	mov	r4, r0
   b81ea:	2800      	cmp	r0, #0
   b81ec:	d14b      	bne.n	b8286 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b81ee:	4602      	mov	r2, r0
   b81f0:	2101      	movs	r1, #1
   b81f2:	6868      	ldr	r0, [r5, #4]
   b81f4:	f7fe f8ac 	bl	b6350 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b81f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b81fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b81fc:	4622      	mov	r2, r4
   b81fe:	6868      	ldr	r0, [r5, #4]
   b8200:	f7fe f8a6 	bl	b6350 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b8204:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b8206:	4681      	mov	r9, r0
        bool ok = false;
   b8208:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b820a:	2e00      	cmp	r6, #0
   b820c:	d03b      	beq.n	b8286 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b820e:	2900      	cmp	r1, #0
   b8210:	d139      	bne.n	b8286 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b8212:	6873      	ldr	r3, [r6, #4]
   b8214:	2b02      	cmp	r3, #2
   b8216:	d003      	beq.n	b8220 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b8218:	2b0a      	cmp	r3, #10
   b821a:	d011      	beq.n	b8240 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b821c:	69f6      	ldr	r6, [r6, #28]
   b821e:	e7f4      	b.n	b820a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b8220:	f1b8 0f00 	cmp.w	r8, #0
   b8224:	d0fa      	beq.n	b821c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b8226:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b8228:	a806      	add	r0, sp, #24
   b822a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b822c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b822e:	f7fe fde7 	bl	b6e00 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b8232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8234:	1d3c      	adds	r4, r7, #4
   b8236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8238:	682b      	ldr	r3, [r5, #0]
   b823a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b823c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b823e:	e7ed      	b.n	b821c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b8240:	f1b9 0f00 	cmp.w	r9, #0
   b8244:	d0ea      	beq.n	b821c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b8246:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b8248:	2210      	movs	r2, #16
   b824a:	a801      	add	r0, sp, #4
   b824c:	f000 fe50 	bl	b8ef0 <memset>
                    a.v = 6;
   b8250:	2306      	movs	r3, #6
   b8252:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b8256:	ad01      	add	r5, sp, #4
   b8258:	f104 0308 	add.w	r3, r4, #8
   b825c:	3418      	adds	r4, #24
   b825e:	6818      	ldr	r0, [r3, #0]
   b8260:	6859      	ldr	r1, [r3, #4]
   b8262:	462a      	mov	r2, r5
   b8264:	c203      	stmia	r2!, {r0, r1}
   b8266:	3308      	adds	r3, #8
   b8268:	42a3      	cmp	r3, r4
   b826a:	4615      	mov	r5, r2
   b826c:	d1f7      	bne.n	b825e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b826e:	a901      	add	r1, sp, #4
   b8270:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b8272:	ad07      	add	r5, sp, #28
   b8274:	f7fe fda4 	bl	b6dc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b8278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b827a:	1d3c      	adds	r4, r7, #4
   b827c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b827e:	682b      	ldr	r3, [r5, #0]
   b8280:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b8282:	4649      	mov	r1, r9
   b8284:	e7ca      	b.n	b821c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b8286:	9800      	ldr	r0, [sp, #0]
   b8288:	f7fd febe 	bl	b6008 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b828c:	4638      	mov	r0, r7
   b828e:	b015      	add	sp, #84	; 0x54
   b8290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8294 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b8294:	4b02      	ldr	r3, [pc, #8]	; (b82a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b8296:	4a03      	ldr	r2, [pc, #12]	; (b82a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b8298:	601a      	str	r2, [r3, #0]
   b829a:	2200      	movs	r2, #0
   b829c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b829e:	4770      	bx	lr
   b82a0:	2003e6a0 	.word	0x2003e6a0
   b82a4:	000bcc2c 	.word	0x000bcc2c

000b82a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b82a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b82aa:	4606      	mov	r6, r0
   b82ac:	460d      	mov	r5, r1
  size_t n = 0;
   b82ae:	188f      	adds	r7, r1, r2
   b82b0:	2400      	movs	r4, #0
  while (size--) {
   b82b2:	42bd      	cmp	r5, r7
   b82b4:	d00c      	beq.n	b82d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b82b6:	6833      	ldr	r3, [r6, #0]
   b82b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b82bc:	689b      	ldr	r3, [r3, #8]
   b82be:	4630      	mov	r0, r6
   b82c0:	4798      	blx	r3
     if (chunk>=0)
   b82c2:	1e03      	subs	r3, r0, #0
   b82c4:	db01      	blt.n	b82ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b82c6:	441c      	add	r4, r3
  while (size--) {
   b82c8:	e7f3      	b.n	b82b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b82ca:	2c00      	cmp	r4, #0
   b82cc:	bf08      	it	eq
   b82ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b82d0:	4620      	mov	r0, r4
   b82d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b82d4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b82d4:	b513      	push	{r0, r1, r4, lr}
   b82d6:	4604      	mov	r4, r0
    }
   b82d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b82da:	b159      	cbz	r1, b82f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b82dc:	9101      	str	r1, [sp, #4]
   b82de:	f7fc fac9 	bl	b4874 <strlen>
   b82e2:	6823      	ldr	r3, [r4, #0]
   b82e4:	9901      	ldr	r1, [sp, #4]
   b82e6:	68db      	ldr	r3, [r3, #12]
   b82e8:	4602      	mov	r2, r0
   b82ea:	4620      	mov	r0, r4
    }
   b82ec:	b002      	add	sp, #8
   b82ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b82f2:	4718      	bx	r3
    }
   b82f4:	b002      	add	sp, #8
   b82f6:	bd10      	pop	{r4, pc}

000b82f8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b82f8:	b508      	push	{r3, lr}
  return write(str);
   b82fa:	f7ff ffeb 	bl	b82d4 <_ZN5Print5writeEPKc>
}
   b82fe:	bd08      	pop	{r3, pc}

000b8300 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b8300:	6803      	ldr	r3, [r0, #0]
   b8302:	689b      	ldr	r3, [r3, #8]
   b8304:	4718      	bx	r3

000b8306 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b8306:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b8308:	210d      	movs	r1, #13
{
   b830a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b830c:	f7ff fff8 	bl	b8300 <_ZN5Print5printEc>
  n += print('\n');
   b8310:	210a      	movs	r1, #10
  size_t n = print('\r');
   b8312:	4604      	mov	r4, r0
  n += print('\n');
   b8314:	4628      	mov	r0, r5
   b8316:	f7ff fff3 	bl	b8300 <_ZN5Print5printEc>
  return n;
}
   b831a:	4420      	add	r0, r4
   b831c:	bd38      	pop	{r3, r4, r5, pc}

000b831e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b831e:	b538      	push	{r3, r4, r5, lr}
   b8320:	4605      	mov	r5, r0
  return write(str);
   b8322:	f7ff ffd7 	bl	b82d4 <_ZN5Print5writeEPKc>
   b8326:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b8328:	4628      	mov	r0, r5
   b832a:	f7ff ffec 	bl	b8306 <_ZN5Print7printlnEv>
  return n;
}
   b832e:	4420      	add	r0, r4
   b8330:	bd38      	pop	{r3, r4, r5, pc}

000b8332 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b8332:	b530      	push	{r4, r5, lr}
   b8334:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b8336:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b8338:	2a01      	cmp	r2, #1
  *str = '\0';
   b833a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b833e:	bf98      	it	ls
   b8340:	220a      	movls	r2, #10
   b8342:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b8344:	460d      	mov	r5, r1
   b8346:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b834a:	fb01 5312 	mls	r3, r1, r2, r5
   b834e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b8352:	2b09      	cmp	r3, #9
   b8354:	bf94      	ite	ls
   b8356:	3330      	addls	r3, #48	; 0x30
   b8358:	3337      	addhi	r3, #55	; 0x37
   b835a:	b2db      	uxtb	r3, r3
  } while(n);
   b835c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b835e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b8362:	d9ef      	bls.n	b8344 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b8364:	4621      	mov	r1, r4
   b8366:	f7ff ffb5 	bl	b82d4 <_ZN5Print5writeEPKc>
}
   b836a:	b00b      	add	sp, #44	; 0x2c
   b836c:	bd30      	pop	{r4, r5, pc}

000b836e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b836e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8372:	b086      	sub	sp, #24
   b8374:	af00      	add	r7, sp, #0
   b8376:	4605      	mov	r5, r0
   b8378:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b837a:	1d38      	adds	r0, r7, #4
   b837c:	2114      	movs	r1, #20
{
   b837e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b8380:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b8382:	f7fe f845 	bl	b6410 <vsnprintf>

    if (n<bufsize)
   b8386:	2813      	cmp	r0, #19
   b8388:	d80e      	bhi.n	b83a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b838a:	1d39      	adds	r1, r7, #4
   b838c:	4628      	mov	r0, r5
   b838e:	f7ff ffa1 	bl	b82d4 <_ZN5Print5writeEPKc>
   b8392:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b8394:	b11e      	cbz	r6, b839e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b8396:	4628      	mov	r0, r5
   b8398:	f7ff ffb5 	bl	b8306 <_ZN5Print7printlnEv>
   b839c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b839e:	4620      	mov	r0, r4
   b83a0:	3718      	adds	r7, #24
   b83a2:	46bd      	mov	sp, r7
   b83a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b83a8:	f100 0308 	add.w	r3, r0, #8
   b83ac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b83b0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b83b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b83b6:	4622      	mov	r2, r4
   b83b8:	1c41      	adds	r1, r0, #1
   b83ba:	683b      	ldr	r3, [r7, #0]
   b83bc:	4668      	mov	r0, sp
   b83be:	f7fe f827 	bl	b6410 <vsnprintf>
  return write(str);
   b83c2:	4669      	mov	r1, sp
   b83c4:	4628      	mov	r0, r5
   b83c6:	f7ff ff85 	bl	b82d4 <_ZN5Print5writeEPKc>
   b83ca:	4604      	mov	r4, r0
   b83cc:	46c5      	mov	sp, r8
   b83ce:	e7e1      	b.n	b8394 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b83d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b83d0:	4b01      	ldr	r3, [pc, #4]	; (b83d8 <_GLOBAL__sub_I_RGB+0x8>)
   b83d2:	2200      	movs	r2, #0
   b83d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b83d6:	4770      	bx	lr
   b83d8:	2003e6a8 	.word	0x2003e6a8

000b83dc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b83dc:	2100      	movs	r1, #0
   b83de:	f7fd be5b 	b.w	b6098 <hal_spi_release>

000b83e2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b83e2:	2100      	movs	r1, #0
   b83e4:	f7fd be50 	b.w	b6088 <hal_spi_acquire>

000b83e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b83e8:	b510      	push	{r4, lr}
   b83ea:	4604      	mov	r4, r0
   b83ec:	4608      	mov	r0, r1
{
    _spi = spi;
   b83ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b83f0:	f7fd fe2a 	bl	b6048 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b83f4:	2300      	movs	r3, #0
   b83f6:	6063      	str	r3, [r4, #4]
}
   b83f8:	4620      	mov	r0, r4
   b83fa:	bd10      	pop	{r4, pc}

000b83fc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b83fc:	b513      	push	{r0, r1, r4, lr}
   b83fe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b8400:	7800      	ldrb	r0, [r0, #0]
   b8402:	f7ff ffee 	bl	b83e2 <_ZN8SPIClass4lockEv.isra.0>
   b8406:	b958      	cbnz	r0, b8420 <_ZN8SPIClass5beginEv+0x24>
   b8408:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b840a:	9001      	str	r0, [sp, #4]
   b840c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b8410:	f7fd fe0a 	bl	b6028 <hal_spi_begin>
        unlock();
   b8414:	9801      	ldr	r0, [sp, #4]
    }
}
   b8416:	b002      	add	sp, #8
   b8418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b841c:	f7ff bfde 	b.w	b83dc <_ZN8SPIClass6unlockEv.isra.0>
   b8420:	b002      	add	sp, #8
   b8422:	bd10      	pop	{r4, pc}

000b8424 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b8424:	0840      	lsrs	r0, r0, #1
{
   b8426:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b8428:	6018      	str	r0, [r3, #0]
   b842a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b842c:	6818      	ldr	r0, [r3, #0]
   b842e:	4288      	cmp	r0, r1
   b8430:	b2e5      	uxtb	r5, r4
   b8432:	d906      	bls.n	b8442 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b8434:	3401      	adds	r4, #1
   b8436:	2c08      	cmp	r4, #8
   b8438:	d002      	beq.n	b8440 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b843a:	0840      	lsrs	r0, r0, #1
   b843c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b843e:	e7f5      	b.n	b842c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b8440:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b8442:	4b02      	ldr	r3, [pc, #8]	; (b844c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b8444:	5d5b      	ldrb	r3, [r3, r5]
   b8446:	7013      	strb	r3, [r2, #0]
}
   b8448:	bd30      	pop	{r4, r5, pc}
   b844a:	bf00      	nop
   b844c:	000bcc60 	.word	0x000bcc60

000b8450 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b8450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8454:	4606      	mov	r6, r0
   b8456:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b8458:	7800      	ldrb	r0, [r0, #0]
{
   b845a:	460c      	mov	r4, r1
    CHECK(lock());
   b845c:	f7ff ffc1 	bl	b83e2 <_ZN8SPIClass4lockEv.isra.0>
   b8460:	2800      	cmp	r0, #0
   b8462:	db1b      	blt.n	b849c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b8464:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b8466:	2214      	movs	r2, #20
   b8468:	2100      	movs	r1, #0
   b846a:	a809      	add	r0, sp, #36	; 0x24
   b846c:	f000 fd40 	bl	b8ef0 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b8470:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b8472:	2200      	movs	r2, #0
   b8474:	a909      	add	r1, sp, #36	; 0x24
   b8476:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b8478:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b847c:	f7fd fdf4 	bl	b6068 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b8480:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b8484:	b113      	cbz	r3, b848c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b8486:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b848a:	b155      	cbz	r5, b84a2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b848c:	2700      	movs	r7, #0
   b848e:	46b9      	mov	r9, r7
   b8490:	46b8      	mov	r8, r7
   b8492:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b8494:	7923      	ldrb	r3, [r4, #4]
   b8496:	b15d      	cbz	r5, b84b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b8498:	b1c3      	cbz	r3, b84cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b849a:	2000      	movs	r0, #0
}
   b849c:	b00f      	add	sp, #60	; 0x3c
   b849e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b84a2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b84a6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b84aa:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b84ae:	e7f1      	b.n	b8494 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b84b0:	2b00      	cmp	r3, #0
   b84b2:	d135      	bne.n	b8520 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b84b4:	68a3      	ldr	r3, [r4, #8]
   b84b6:	4543      	cmp	r3, r8
   b84b8:	d108      	bne.n	b84cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b84ba:	f88d 9020 	strb.w	r9, [sp, #32]
   b84be:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b84c2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b84c6:	89a3      	ldrh	r3, [r4, #12]
   b84c8:	429a      	cmp	r2, r3
   b84ca:	d0e6      	beq.n	b849a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b84cc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b84ce:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b84d0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b84d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b84d6:	ab04      	add	r3, sp, #16
   b84d8:	f10d 020f 	add.w	r2, sp, #15
   b84dc:	f7ff ffa2 	bl	b8424 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b84e0:	7921      	ldrb	r1, [r4, #4]
   b84e2:	b985      	cbnz	r5, b8506 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b84e4:	b989      	cbnz	r1, b850a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b84e6:	68a3      	ldr	r3, [r4, #8]
   b84e8:	4543      	cmp	r3, r8
   b84ea:	d30e      	bcc.n	b850a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b84ec:	f88d 9020 	strb.w	r9, [sp, #32]
   b84f0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b84f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b84f8:	89a3      	ldrh	r3, [r4, #12]
   b84fa:	429a      	cmp	r2, r3
   b84fc:	d105      	bne.n	b850a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b84fe:	9b04      	ldr	r3, [sp, #16]
   b8500:	4543      	cmp	r3, r8
   b8502:	d102      	bne.n	b850a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b8504:	e7c9      	b.n	b849a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b8506:	2900      	cmp	r1, #0
   b8508:	d1f9      	bne.n	b84fe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b850a:	2300      	movs	r3, #0
   b850c:	9301      	str	r3, [sp, #4]
   b850e:	7b63      	ldrb	r3, [r4, #13]
   b8510:	9300      	str	r3, [sp, #0]
   b8512:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b8516:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b8518:	7830      	ldrb	r0, [r6, #0]
   b851a:	f7fd fdad 	bl	b6078 <hal_spi_set_settings>
   b851e:	e7bc      	b.n	b849a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b8520:	e9cd 5500 	strd	r5, r5, [sp]
   b8524:	462b      	mov	r3, r5
   b8526:	462a      	mov	r2, r5
   b8528:	2101      	movs	r1, #1
   b852a:	e7f5      	b.n	b8518 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b852c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b852c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b852e:	7800      	ldrb	r0, [r0, #0]
   b8530:	f7fd fd82 	bl	b6038 <hal_spi_transfer>
}
   b8534:	b2c0      	uxtb	r0, r0
   b8536:	bd08      	pop	{r3, pc}

000b8538 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b8538:	b510      	push	{r4, lr}
   b853a:	4604      	mov	r4, r0
{
	free(buffer);
   b853c:	6800      	ldr	r0, [r0, #0]
   b853e:	f7fd ff57 	bl	b63f0 <free>
}
   b8542:	4620      	mov	r0, r4
   b8544:	bd10      	pop	{r4, pc}

000b8546 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b8546:	b510      	push	{r4, lr}
   b8548:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b854a:	6800      	ldr	r0, [r0, #0]
   b854c:	b108      	cbz	r0, b8552 <_ZN6String10invalidateEv+0xc>
   b854e:	f7fd ff4f 	bl	b63f0 <free>
	buffer = NULL;
   b8552:	2300      	movs	r3, #0
	capacity = len = 0;
   b8554:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b8558:	6023      	str	r3, [r4, #0]
}
   b855a:	bd10      	pop	{r4, pc}

000b855c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b855c:	b538      	push	{r3, r4, r5, lr}
   b855e:	4604      	mov	r4, r0
   b8560:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b8562:	6800      	ldr	r0, [r0, #0]
   b8564:	3101      	adds	r1, #1
   b8566:	f7fd ff4b 	bl	b6400 <realloc>
	if (newbuffer) {
   b856a:	b110      	cbz	r0, b8572 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b856c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b8570:	2001      	movs	r0, #1
	}
	return 0;
}
   b8572:	bd38      	pop	{r3, r4, r5, pc}

000b8574 <_ZN6String7reserveEj>:
{
   b8574:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b8576:	6803      	ldr	r3, [r0, #0]
{
   b8578:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b857a:	b123      	cbz	r3, b8586 <_ZN6String7reserveEj+0x12>
   b857c:	6843      	ldr	r3, [r0, #4]
   b857e:	428b      	cmp	r3, r1
   b8580:	d301      	bcc.n	b8586 <_ZN6String7reserveEj+0x12>
   b8582:	2001      	movs	r0, #1
}
   b8584:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b8586:	4620      	mov	r0, r4
   b8588:	f7ff ffe8 	bl	b855c <_ZN6String12changeBufferEj>
   b858c:	2800      	cmp	r0, #0
   b858e:	d0f9      	beq.n	b8584 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b8590:	68a3      	ldr	r3, [r4, #8]
   b8592:	2b00      	cmp	r3, #0
   b8594:	d1f5      	bne.n	b8582 <_ZN6String7reserveEj+0xe>
   b8596:	6822      	ldr	r2, [r4, #0]
   b8598:	7013      	strb	r3, [r2, #0]
   b859a:	e7f2      	b.n	b8582 <_ZN6String7reserveEj+0xe>

000b859c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b859c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b859e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b85a0:	4611      	mov	r1, r2
   b85a2:	9201      	str	r2, [sp, #4]
{
   b85a4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b85a6:	f7ff ffe5 	bl	b8574 <_ZN6String7reserveEj>
   b85aa:	9a01      	ldr	r2, [sp, #4]
   b85ac:	b928      	cbnz	r0, b85ba <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b85ae:	4620      	mov	r0, r4
   b85b0:	f7ff ffc9 	bl	b8546 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b85b4:	4620      	mov	r0, r4
   b85b6:	b003      	add	sp, #12
   b85b8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b85ba:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b85bc:	4629      	mov	r1, r5
   b85be:	6820      	ldr	r0, [r4, #0]
   b85c0:	f000 fc6e 	bl	b8ea0 <memcpy>
	buffer[len] = 0;
   b85c4:	6822      	ldr	r2, [r4, #0]
   b85c6:	68a3      	ldr	r3, [r4, #8]
   b85c8:	2100      	movs	r1, #0
   b85ca:	54d1      	strb	r1, [r2, r3]
	return *this;
   b85cc:	e7f2      	b.n	b85b4 <_ZN6String4copyEPKcj+0x18>

000b85ce <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b85ce:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b85d0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b85d2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b85d6:	4604      	mov	r4, r0
	len = 0;
   b85d8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b85da:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b85dc:	b141      	cbz	r1, b85f0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b85de:	4608      	mov	r0, r1
   b85e0:	9101      	str	r1, [sp, #4]
   b85e2:	f7fc f947 	bl	b4874 <strlen>
   b85e6:	9901      	ldr	r1, [sp, #4]
   b85e8:	4602      	mov	r2, r0
   b85ea:	4620      	mov	r0, r4
   b85ec:	f7ff ffd6 	bl	b859c <_ZN6String4copyEPKcj>
}
   b85f0:	4620      	mov	r0, r4
   b85f2:	b002      	add	sp, #8
   b85f4:	bd10      	pop	{r4, pc}

000b85f6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b85f6:	b538      	push	{r3, r4, r5, lr}
   b85f8:	4605      	mov	r5, r0
	if (buffer) {
   b85fa:	6800      	ldr	r0, [r0, #0]
{
   b85fc:	460c      	mov	r4, r1
	if (buffer) {
   b85fe:	b170      	cbz	r0, b861e <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
   b8600:	686a      	ldr	r2, [r5, #4]
   b8602:	688b      	ldr	r3, [r1, #8]
   b8604:	429a      	cmp	r2, r3
   b8606:	d308      	bcc.n	b861a <_ZN6String4moveERS_+0x24>
   b8608:	6809      	ldr	r1, [r1, #0]
   b860a:	b131      	cbz	r1, b861a <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
   b860c:	f000 fcbd 	bl	b8f8a <strcpy>
			len = rhs.len;
   b8610:	68a3      	ldr	r3, [r4, #8]
   b8612:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b8614:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b8616:	60a3      	str	r3, [r4, #8]
}
   b8618:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b861a:	f7fd fee9 	bl	b63f0 <free>
	buffer = rhs.buffer;
   b861e:	6823      	ldr	r3, [r4, #0]
   b8620:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b8622:	6863      	ldr	r3, [r4, #4]
   b8624:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b8626:	68a3      	ldr	r3, [r4, #8]
   b8628:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b862a:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b862c:	e9c4 3300 	strd	r3, r3, [r4]
   b8630:	e7f1      	b.n	b8616 <_ZN6String4moveERS_+0x20>

000b8632 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b8632:	b510      	push	{r4, lr}
	buffer = NULL;
   b8634:	2300      	movs	r3, #0
	capacity = 0;
   b8636:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b863a:	4604      	mov	r4, r0
	len = 0;
   b863c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b863e:	7303      	strb	r3, [r0, #12]
	move(rval);
   b8640:	f7ff ffd9 	bl	b85f6 <_ZN6String4moveERS_>
}
   b8644:	4620      	mov	r0, r4
   b8646:	bd10      	pop	{r4, pc}

000b8648 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b8648:	4288      	cmp	r0, r1
{
   b864a:	b510      	push	{r4, lr}
   b864c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b864e:	d005      	beq.n	b865c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b8650:	680b      	ldr	r3, [r1, #0]
   b8652:	b12b      	cbz	r3, b8660 <_ZN6StringaSERKS_+0x18>
   b8654:	688a      	ldr	r2, [r1, #8]
   b8656:	4619      	mov	r1, r3
   b8658:	f7ff ffa0 	bl	b859c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b865c:	4620      	mov	r0, r4
   b865e:	bd10      	pop	{r4, pc}
	else invalidate();
   b8660:	f7ff ff71 	bl	b8546 <_ZN6String10invalidateEv>
   b8664:	e7fa      	b.n	b865c <_ZN6StringaSERKS_+0x14>

000b8666 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b8666:	b510      	push	{r4, lr}
	buffer = NULL;
   b8668:	2300      	movs	r3, #0
String::String(const String &value)
   b866a:	4604      	mov	r4, r0
	capacity = 0;
   b866c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b8670:	6083      	str	r3, [r0, #8]
	flags = 0;
   b8672:	7303      	strb	r3, [r0, #12]
	*this = value;
   b8674:	f7ff ffe8 	bl	b8648 <_ZN6StringaSERKS_>
}
   b8678:	4620      	mov	r0, r4
   b867a:	bd10      	pop	{r4, pc}

000b867c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b867c:	b513      	push	{r0, r1, r4, lr}
   b867e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b8680:	b159      	cbz	r1, b869a <_ZN6StringaSEPKc+0x1e>
   b8682:	4608      	mov	r0, r1
   b8684:	9101      	str	r1, [sp, #4]
   b8686:	f7fc f8f5 	bl	b4874 <strlen>
   b868a:	9901      	ldr	r1, [sp, #4]
   b868c:	4602      	mov	r2, r0
   b868e:	4620      	mov	r0, r4
   b8690:	f7ff ff84 	bl	b859c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b8694:	4620      	mov	r0, r4
   b8696:	b002      	add	sp, #8
   b8698:	bd10      	pop	{r4, pc}
	else invalidate();
   b869a:	f7ff ff54 	bl	b8546 <_ZN6String10invalidateEv>
   b869e:	e7f9      	b.n	b8694 <_ZN6StringaSEPKc+0x18>

000b86a0 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b86a0:	b510      	push	{r4, lr}
   b86a2:	4604      	mov	r4, r0
   b86a4:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b86a6:	2300      	movs	r3, #0
	capacity = 0;
   b86a8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b86ac:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b86ae:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b86b0:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b86b2:	a901      	add	r1, sp, #4
   b86b4:	f000 fa2e 	bl	b8b14 <itoa>
	*this = buf;
   b86b8:	a901      	add	r1, sp, #4
   b86ba:	4620      	mov	r0, r4
   b86bc:	f7ff ffde 	bl	b867c <_ZN6StringaSEPKc>
}
   b86c0:	4620      	mov	r0, r4
   b86c2:	b00a      	add	sp, #40	; 0x28
   b86c4:	bd10      	pop	{r4, pc}

000b86c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b86c6:	b570      	push	{r4, r5, r6, lr}
   b86c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b86ca:	460e      	mov	r6, r1
   b86cc:	b909      	cbnz	r1, b86d2 <_ZN6String6concatEPKcj+0xc>
   b86ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b86d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b86d2:	b16a      	cbz	r2, b86f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b86d4:	6884      	ldr	r4, [r0, #8]
   b86d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b86d8:	4621      	mov	r1, r4
   b86da:	f7ff ff4b 	bl	b8574 <_ZN6String7reserveEj>
   b86de:	2800      	cmp	r0, #0
   b86e0:	d0f5      	beq.n	b86ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b86e2:	6828      	ldr	r0, [r5, #0]
   b86e4:	68ab      	ldr	r3, [r5, #8]
   b86e6:	4631      	mov	r1, r6
   b86e8:	4418      	add	r0, r3
   b86ea:	f000 fc4e 	bl	b8f8a <strcpy>
	len = newlen;
   b86ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b86f0:	2001      	movs	r0, #1
   b86f2:	e7ed      	b.n	b86d0 <_ZN6String6concatEPKcj+0xa>

000b86f4 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b86f4:	b513      	push	{r0, r1, r4, lr}
   b86f6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b86f8:	b929      	cbnz	r1, b8706 <_ZplRK15StringSumHelperPKc+0x12>
   b86fa:	4620      	mov	r0, r4
   b86fc:	f7ff ff23 	bl	b8546 <_ZN6String10invalidateEv>
	return a;
}
   b8700:	4620      	mov	r0, r4
   b8702:	b002      	add	sp, #8
   b8704:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b8706:	4608      	mov	r0, r1
   b8708:	9101      	str	r1, [sp, #4]
   b870a:	f7fc f8b3 	bl	b4874 <strlen>
   b870e:	9901      	ldr	r1, [sp, #4]
   b8710:	4602      	mov	r2, r0
   b8712:	4620      	mov	r0, r4
   b8714:	f7ff ffd7 	bl	b86c6 <_ZN6String6concatEPKcj>
   b8718:	2800      	cmp	r0, #0
   b871a:	d0ee      	beq.n	b86fa <_ZplRK15StringSumHelperPKc+0x6>
   b871c:	e7f0      	b.n	b8700 <_ZplRK15StringSumHelperPKc+0xc>
	...

000b8720 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b8720:	4b05      	ldr	r3, [pc, #20]	; (b8738 <_GLOBAL__sub_I_System+0x18>)
   b8722:	2202      	movs	r2, #2
   b8724:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b8726:	4b05      	ldr	r3, [pc, #20]	; (b873c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b8728:	4a05      	ldr	r2, [pc, #20]	; (b8740 <_GLOBAL__sub_I_System+0x20>)
   b872a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b872c:	2000      	movs	r0, #0
   b872e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b8732:	f7fd bd69 	b.w	b6208 <set_system_mode>
   b8736:	bf00      	nop
   b8738:	2003e6c4 	.word	0x2003e6c4
   b873c:	2003e6b8 	.word	0x2003e6b8
   b8740:	ffff0000 	.word	0xffff0000

000b8744 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b8744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b8748:	4a15      	ldr	r2, [pc, #84]	; (b87a0 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b874a:	f8df 8060 	ldr.w	r8, [pc, #96]	; b87ac <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b874e:	e9d2 6300 	ldrd	r6, r3, [r2]
   b8752:	1980      	adds	r0, r0, r6
   b8754:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b8758:	4b12      	ldr	r3, [pc, #72]	; (b87a4 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b875a:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b875e:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b8762:	1986      	adds	r6, r0, r6
   b8764:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b8768:	42bb      	cmp	r3, r7
   b876a:	bf08      	it	eq
   b876c:	42b2      	cmpeq	r2, r6
{
   b876e:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b8770:	d013      	beq.n	b879a <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b8772:	a903      	add	r1, sp, #12
   b8774:	4668      	mov	r0, sp
   b8776:	e9cd 6700 	strd	r6, r7, [sp]
   b877a:	f7fd fe79 	bl	b6470 <localtime_r>
	calendar_time.tm_year += 1900;
   b877e:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8780:	4d09      	ldr	r5, [pc, #36]	; (b87a8 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b8782:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8786:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b8788:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b878a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b878c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b878e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b8790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b8792:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b8796:	6823      	ldr	r3, [r4, #0]
   b8798:	602b      	str	r3, [r5, #0]
    }
}
   b879a:	b00c      	add	sp, #48	; 0x30
   b879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b87a0:	2003e6f8 	.word	0x2003e6f8
   b87a4:	2003e6f0 	.word	0x2003e6f0
   b87a8:	2003e6cc 	.word	0x2003e6cc
   b87ac:	2003e700 	.word	0x2003e700

000b87b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b87b0:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b87b2:	2000      	movs	r0, #0
   b87b4:	f7fd fd94 	bl	b62e0 <spark_sync_time_pending>
   b87b8:	b128      	cbz	r0, b87c6 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b87ba:	f7fd fd79 	bl	b62b0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b87be:	f080 0001 	eor.w	r0, r0, #1
   b87c2:	b2c0      	uxtb	r0, r0
    }
   b87c4:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b87c6:	2001      	movs	r0, #1
   b87c8:	e7fc      	b.n	b87c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b87cc <_ZN9TimeClass12hourFormat12Ex>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   b87cc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b87ce:	f7ff ffb9 	bl	b8744 <_ZL22Refresh_UnixTime_Cachex>
	if(calendar_time_cache.tm_hour == 0)
   b87d2:	4b04      	ldr	r3, [pc, #16]	; (b87e4 <_ZN9TimeClass12hourFormat12Ex+0x18>)
   b87d4:	6898      	ldr	r0, [r3, #8]
   b87d6:	b118      	cbz	r0, b87e0 <_ZN9TimeClass12hourFormat12Ex+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   b87d8:	280c      	cmp	r0, #12
   b87da:	dd00      	ble.n	b87de <_ZN9TimeClass12hourFormat12Ex+0x12>
		return calendar_time_cache.tm_hour - 12 ;
   b87dc:	380c      	subs	r0, #12
	else
		return calendar_time_cache.tm_hour ;
}
   b87de:	bd08      	pop	{r3, pc}
		return 12;	//midnight
   b87e0:	200c      	movs	r0, #12
   b87e2:	e7fc      	b.n	b87de <_ZN9TimeClass12hourFormat12Ex+0x12>
   b87e4:	2003e6cc 	.word	0x2003e6cc

000b87e8 <_ZN9TimeClass4isPMEx>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
   b87e8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b87ea:	f7ff ffab 	bl	b8744 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
   b87ee:	4b03      	ldr	r3, [pc, #12]	; (b87fc <_ZN9TimeClass4isPMEx+0x14>)
	return (hour(t) >= 12);
   b87f0:	6898      	ldr	r0, [r3, #8]
}
   b87f2:	280b      	cmp	r0, #11
   b87f4:	bfd4      	ite	le
   b87f6:	2000      	movle	r0, #0
   b87f8:	2001      	movgt	r0, #1
   b87fa:	bd08      	pop	{r3, pc}
   b87fc:	2003e6cc 	.word	0x2003e6cc

000b8800 <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   b8800:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b8802:	f7ff ff9f 	bl	b8744 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
   b8806:	4b01      	ldr	r3, [pc, #4]	; (b880c <_ZN9TimeClass6minuteEx+0xc>)
   b8808:	6858      	ldr	r0, [r3, #4]
   b880a:	bd08      	pop	{r3, pc}
   b880c:	2003e6cc 	.word	0x2003e6cc

000b8810 <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   b8810:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b8812:	f7ff ff97 	bl	b8744 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
   b8816:	4b01      	ldr	r3, [pc, #4]	; (b881c <_ZN9TimeClass6secondEx+0xc>)
   b8818:	6818      	ldr	r0, [r3, #0]
   b881a:	bd08      	pop	{r3, pc}
   b881c:	2003e6cc 	.word	0x2003e6cc

000b8820 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b8820:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b8824:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b882c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b882e:	d411      	bmi.n	b8854 <_ZN9TimeClass4zoneEf+0x34>
   b8830:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b8834:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b8838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b883c:	dc0a      	bgt.n	b8854 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b883e:	eddf 7a06 	vldr	s15, [pc, #24]	; b8858 <_ZN9TimeClass4zoneEf+0x38>
   b8842:	ee60 7a27 	vmul.f32	s15, s0, s15
   b8846:	ee17 0a90 	vmov	r0, s15
   b884a:	f7fb ffd5 	bl	b47f8 <__aeabi_f2lz>
   b884e:	4b03      	ldr	r3, [pc, #12]	; (b885c <_ZN9TimeClass4zoneEf+0x3c>)
   b8850:	e9c3 0100 	strd	r0, r1, [r3]
}
   b8854:	bd08      	pop	{r3, pc}
   b8856:	bf00      	nop
   b8858:	45610000 	.word	0x45610000
   b885c:	2003e6f8 	.word	0x2003e6f8

000b8860 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b8860:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b8862:	2000      	movs	r0, #0
   b8864:	f7fd fb40 	bl	b5ee8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b8868:	4604      	mov	r4, r0
   b886a:	b9a0      	cbnz	r0, b8896 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b886c:	f7fd fcc4 	bl	b61f8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b8870:	2801      	cmp	r0, #1
   b8872:	d110      	bne.n	b8896 <_ZN9TimeClass7isValidEv+0x36>
   b8874:	4620      	mov	r0, r4
   b8876:	f7fd fcef 	bl	b6258 <system_thread_get_state>
   b887a:	b960      	cbnz	r0, b8896 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b887c:	f7ff ff98 	bl	b87b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b8880:	b910      	cbnz	r0, b8888 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b8882:	f7fd fd05 	bl	b6290 <spark_process>
        while (_while() && !_condition()) {
   b8886:	e7f9      	b.n	b887c <_ZN9TimeClass7isValidEv+0x1c>
   b8888:	f7ff ff92 	bl	b87b0 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b8890:	2000      	movs	r0, #0
   b8892:	f7fd bb29 	b.w	b5ee8 <hal_rtc_time_is_valid>
}
   b8896:	4620      	mov	r0, r4
   b8898:	bd10      	pop	{r4, pc}

000b889a <_ZN9TimeClass3nowEv>:
{
   b889a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b889c:	f7ff ffe0 	bl	b8860 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b88a0:	2210      	movs	r2, #16
   b88a2:	2100      	movs	r1, #0
   b88a4:	4668      	mov	r0, sp
   b88a6:	f000 fb23 	bl	b8ef0 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b88aa:	2100      	movs	r1, #0
   b88ac:	4668      	mov	r0, sp
   b88ae:	f7fd fb23 	bl	b5ef8 <hal_rtc_get_time>
}
   b88b2:	9800      	ldr	r0, [sp, #0]
   b88b4:	b005      	add	sp, #20
   b88b6:	f85d fb04 	ldr.w	pc, [sp], #4

000b88ba <_ZN9TimeClass4isPMEv>:
{
   b88ba:	b508      	push	{r3, lr}
	return isPM(now());
   b88bc:	f7ff ffed 	bl	b889a <_ZN9TimeClass3nowEv>
}
   b88c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return isPM(now());
   b88c4:	17c1      	asrs	r1, r0, #31
   b88c6:	f7ff bf8f 	b.w	b87e8 <_ZN9TimeClass4isPMEx>
	...

000b88cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b88cc:	4b02      	ldr	r3, [pc, #8]	; (b88d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b88ce:	681a      	ldr	r2, [r3, #0]
   b88d0:	4b02      	ldr	r3, [pc, #8]	; (b88dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b88d2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b88d4:	4770      	bx	lr
   b88d6:	bf00      	nop
   b88d8:	2003de74 	.word	0x2003de74
   b88dc:	2003e6c8 	.word	0x2003e6c8

000b88e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b88e0:	4770      	bx	lr

000b88e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b88e2:	7441      	strb	r1, [r0, #17]
}
   b88e4:	4770      	bx	lr

000b88e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b88e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b88e8:	7c00      	ldrb	r0, [r0, #16]
   b88ea:	f7fd fc15 	bl	b6118 <hal_usart_available_data_for_write>
}
   b88ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b88f2:	bd08      	pop	{r3, pc}

000b88f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b88f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b88f6:	7c00      	ldrb	r0, [r0, #16]
   b88f8:	f7fd fbe6 	bl	b60c8 <hal_usart_available>
}
   b88fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8900:	bd08      	pop	{r3, pc}

000b8902 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b8902:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8904:	7c00      	ldrb	r0, [r0, #16]
   b8906:	f7fd fbef 	bl	b60e8 <hal_usart_peek>
}
   b890a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b890e:	bd08      	pop	{r3, pc}

000b8910 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b8910:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b8912:	7c00      	ldrb	r0, [r0, #16]
   b8914:	f7fd fbe0 	bl	b60d8 <hal_usart_read>
}
   b8918:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b891c:	bd08      	pop	{r3, pc}

000b891e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b891e:	7c00      	ldrb	r0, [r0, #16]
   b8920:	f7fd bbea 	b.w	b60f8 <hal_usart_flush>

000b8924 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8924:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8926:	7c45      	ldrb	r5, [r0, #17]
{
   b8928:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b892a:	b12d      	cbz	r5, b8938 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b892c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b892e:	b003      	add	sp, #12
   b8930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8934:	f7fd bbc0 	b.w	b60b8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8938:	7c00      	ldrb	r0, [r0, #16]
   b893a:	9101      	str	r1, [sp, #4]
   b893c:	f7fd fbec 	bl	b6118 <hal_usart_available_data_for_write>
   b8940:	2800      	cmp	r0, #0
   b8942:	9901      	ldr	r1, [sp, #4]
   b8944:	dcf2      	bgt.n	b892c <_ZN11USARTSerial5writeEh+0x8>
}
   b8946:	4628      	mov	r0, r5
   b8948:	b003      	add	sp, #12
   b894a:	bd30      	pop	{r4, r5, pc}

000b894c <_ZN11USARTSerialD0Ev>:
   b894c:	b510      	push	{r4, lr}
   b894e:	2114      	movs	r1, #20
   b8950:	4604      	mov	r4, r0
   b8952:	f7fb ffd6 	bl	b4902 <_ZdlPvj>
   b8956:	4620      	mov	r0, r4
   b8958:	bd10      	pop	{r4, pc}
	...

000b895c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b895c:	b510      	push	{r4, lr}
   b895e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8962:	4604      	mov	r4, r0
   b8964:	4608      	mov	r0, r1
   b8966:	4611      	mov	r1, r2
   b8968:	2200      	movs	r2, #0
   b896a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b896e:	4b04      	ldr	r3, [pc, #16]	; (b8980 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b8970:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8972:	2301      	movs	r3, #1
  _serial = serial;
   b8974:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8976:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8978:	f7fd fbde 	bl	b6138 <hal_usart_init_ex>
}
   b897c:	4620      	mov	r0, r4
   b897e:	bd10      	pop	{r4, pc}
   b8980:	000bcc8c 	.word	0x000bcc8c

000b8984 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b8984:	7c00      	ldrb	r0, [r0, #16]
   b8986:	2300      	movs	r3, #0
   b8988:	f7fd bbce 	b.w	b6128 <hal_usart_begin_config>

000b898c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b898c:	2200      	movs	r2, #0
   b898e:	f7ff bff9 	b.w	b8984 <_ZN11USARTSerial5beginEmm>

000b8992 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b8992:	7c00      	ldrb	r0, [r0, #16]
   b8994:	f7fd bb88 	b.w	b60a8 <hal_usart_end>

000b8998 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8998:	7441      	strb	r1, [r0, #17]
}
   b899a:	4770      	bx	lr

000b899c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b899c:	4770      	bx	lr

000b899e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b899e:	4770      	bx	lr

000b89a0 <_ZN9USBSerial4readEv>:
{
   b89a0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b89a2:	2100      	movs	r1, #0
   b89a4:	7c00      	ldrb	r0, [r0, #16]
   b89a6:	f7fd fbf7 	bl	b6198 <HAL_USB_USART_Receive_Data>
}
   b89aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b89ae:	bd08      	pop	{r3, pc}

000b89b0 <_ZN9USBSerial4peekEv>:
{
   b89b0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b89b2:	2101      	movs	r1, #1
   b89b4:	7c00      	ldrb	r0, [r0, #16]
   b89b6:	f7fd fbef 	bl	b6198 <HAL_USB_USART_Receive_Data>
}
   b89ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b89be:	bd08      	pop	{r3, pc}

000b89c0 <_ZN9USBSerial17availableForWriteEv>:
{
   b89c0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b89c2:	7c00      	ldrb	r0, [r0, #16]
   b89c4:	f7fd fbe0 	bl	b6188 <HAL_USB_USART_Available_Data_For_Write>
}
   b89c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89cc:	bd08      	pop	{r3, pc}

000b89ce <_ZN9USBSerial9availableEv>:
{
   b89ce:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b89d0:	7c00      	ldrb	r0, [r0, #16]
   b89d2:	f7fd fbd1 	bl	b6178 <HAL_USB_USART_Available_Data>
}
   b89d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b89da:	bd08      	pop	{r3, pc}

000b89dc <_ZN9USBSerial5writeEh>:
{
   b89dc:	b513      	push	{r0, r1, r4, lr}
   b89de:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b89e0:	7c00      	ldrb	r0, [r0, #16]
{
   b89e2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b89e4:	f7fd fbd0 	bl	b6188 <HAL_USB_USART_Available_Data_For_Write>
   b89e8:	2800      	cmp	r0, #0
   b89ea:	9901      	ldr	r1, [sp, #4]
   b89ec:	dc01      	bgt.n	b89f2 <_ZN9USBSerial5writeEh+0x16>
   b89ee:	7c60      	ldrb	r0, [r4, #17]
   b89f0:	b120      	cbz	r0, b89fc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b89f2:	7c20      	ldrb	r0, [r4, #16]
   b89f4:	f7fd fbd8 	bl	b61a8 <HAL_USB_USART_Send_Data>
   b89f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b89fc:	b002      	add	sp, #8
   b89fe:	bd10      	pop	{r4, pc}

000b8a00 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8a00:	7c00      	ldrb	r0, [r0, #16]
   b8a02:	f7fd bbd9 	b.w	b61b8 <HAL_USB_USART_Flush_Data>

000b8a06 <_ZN9USBSerialD0Ev>:
   b8a06:	b510      	push	{r4, lr}
   b8a08:	2114      	movs	r1, #20
   b8a0a:	4604      	mov	r4, r0
   b8a0c:	f7fb ff79 	bl	b4902 <_ZdlPvj>
   b8a10:	4620      	mov	r0, r4
   b8a12:	bd10      	pop	{r4, pc}

000b8a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b8a14:	b510      	push	{r4, lr}
   b8a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8a1a:	4604      	mov	r4, r0
   b8a1c:	4608      	mov	r0, r1
   b8a1e:	2100      	movs	r1, #0
   b8a20:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b8a24:	4b04      	ldr	r3, [pc, #16]	; (b8a38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b8a26:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8a28:	2301      	movs	r3, #1
  _serial = serial;
   b8a2a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8a2c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8a2e:	4611      	mov	r1, r2
   b8a30:	f7fd fb8a 	bl	b6148 <HAL_USB_USART_Init>
}
   b8a34:	4620      	mov	r0, r4
   b8a36:	bd10      	pop	{r4, pc}
   b8a38:	000bccbc 	.word	0x000bccbc

000b8a3c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b8a3c:	7c00      	ldrb	r0, [r0, #16]
   b8a3e:	2200      	movs	r2, #0
   b8a40:	f7fd bb8a 	b.w	b6158 <HAL_USB_USART_Begin>

000b8a44 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b8a44:	7c00      	ldrb	r0, [r0, #16]
   b8a46:	f7fd bb8f 	b.w	b6168 <HAL_USB_USART_End>

000b8a4a <_Z19acquireSerialBufferv>:
{
   b8a4a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8a4c:	2214      	movs	r2, #20
{
   b8a4e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b8a50:	2100      	movs	r1, #0
   b8a52:	f000 fa4d 	bl	b8ef0 <memset>
}
   b8a56:	4620      	mov	r0, r4
   b8a58:	bd10      	pop	{r4, pc}
	...

000b8a5c <_Z16_fetch_usbserialv>:
{
   b8a5c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a5e:	4c0f      	ldr	r4, [pc, #60]	; (b8a9c <_Z16_fetch_usbserialv+0x40>)
{
   b8a60:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b8a62:	a803      	add	r0, sp, #12
   b8a64:	f7ff fff1 	bl	b8a4a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8a68:	7821      	ldrb	r1, [r4, #0]
   b8a6a:	f3bf 8f5b 	dmb	ish
   b8a6e:	f011 0101 	ands.w	r1, r1, #1
   b8a72:	d10f      	bne.n	b8a94 <_Z16_fetch_usbserialv+0x38>
   b8a74:	4620      	mov	r0, r4
   b8a76:	9101      	str	r1, [sp, #4]
   b8a78:	f7fb ff52 	bl	b4920 <__cxa_guard_acquire>
   b8a7c:	9901      	ldr	r1, [sp, #4]
   b8a7e:	b148      	cbz	r0, b8a94 <_Z16_fetch_usbserialv+0x38>
   b8a80:	aa03      	add	r2, sp, #12
   b8a82:	4807      	ldr	r0, [pc, #28]	; (b8aa0 <_Z16_fetch_usbserialv+0x44>)
   b8a84:	f7ff ffc6 	bl	b8a14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8a88:	4620      	mov	r0, r4
   b8a8a:	f7fb ff4e 	bl	b492a <__cxa_guard_release>
   b8a8e:	4805      	ldr	r0, [pc, #20]	; (b8aa4 <_Z16_fetch_usbserialv+0x48>)
   b8a90:	f000 f9f3 	bl	b8e7a <atexit>
	return _usbserial;
}
   b8a94:	4802      	ldr	r0, [pc, #8]	; (b8aa0 <_Z16_fetch_usbserialv+0x44>)
   b8a96:	b008      	add	sp, #32
   b8a98:	bd10      	pop	{r4, pc}
   b8a9a:	bf00      	nop
   b8a9c:	2003e708 	.word	0x2003e708
   b8aa0:	2003e70c 	.word	0x2003e70c
   b8aa4:	000b899d 	.word	0x000b899d

000b8aa8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b8aa8:	b510      	push	{r4, lr}
   b8aaa:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8aac:	f7fb fee2 	bl	b4874 <strlen>
   b8ab0:	3801      	subs	r0, #1
   b8ab2:	1823      	adds	r3, r4, r0
   b8ab4:	4620      	mov	r0, r4
	while(i<j){
   b8ab6:	4283      	cmp	r3, r0
   b8ab8:	d906      	bls.n	b8ac8 <_Z11str_reversePc+0x20>
		c = *i;
   b8aba:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8abc:	7819      	ldrb	r1, [r3, #0]
   b8abe:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8ac2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b8ac6:	e7f6      	b.n	b8ab6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b8ac8:	bd10      	pop	{r4, pc}

000b8aca <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b8aca:	b570      	push	{r4, r5, r6, lr}
   b8acc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8ace:	1e91      	subs	r1, r2, #2
   b8ad0:	2922      	cmp	r1, #34	; 0x22
   b8ad2:	d81d      	bhi.n	b8b10 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8ad4:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b8ad6:	b930      	cbnz	r0, b8ae6 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b8ad8:	4423      	add	r3, r4
            *ptr++ = '0';
   b8ada:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8adc:	429d      	cmp	r5, r3
   b8ade:	d210      	bcs.n	b8b02 <ultoa+0x38>
            *ptr++ = '0';
   b8ae0:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8ae4:	e7fa      	b.n	b8adc <ultoa+0x12>
            result.quot = a/radix;
   b8ae6:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b8aea:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8aee:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8af0:	2809      	cmp	r0, #9
                *ptr += '0';
   b8af2:	bf94      	ite	ls
   b8af4:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b8af6:	3157      	addhi	r1, #87	; 0x57
   b8af8:	b2c9      	uxtb	r1, r1
   b8afa:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8afe:	4630      	mov	r0, r6
	while(a){
   b8b00:	e7e9      	b.n	b8ad6 <ultoa+0xc>

	*ptr = '\0';
   b8b02:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8b04:	4620      	mov	r0, r4
	*ptr = '\0';
   b8b06:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b8b08:	f7ff ffce 	bl	b8aa8 <_Z11str_reversePc>
	return buffer;
   b8b0c:	4620      	mov	r0, r4
}
   b8b0e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8b10:	2000      	movs	r0, #0
   b8b12:	e7fc      	b.n	b8b0e <ultoa+0x44>

000b8b14 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8b14:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b8b16:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b8b18:	460c      	mov	r4, r1
   b8b1a:	4615      	mov	r5, r2
	if(a<0){
   b8b1c:	da0e      	bge.n	b8b3c <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b8b22:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b8b26:	bf14      	ite	ne
   b8b28:	4258      	negne	r0, r3
   b8b2a:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b8b2c:	2301      	movs	r3, #1
		*buffer = '-';
   b8b2e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b8b30:	462a      	mov	r2, r5
   b8b32:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b8b34:	f7ff ffc9 	bl	b8aca <ultoa>
	}
	return buffer;
}
   b8b38:	4620      	mov	r0, r4
   b8b3a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b8b3c:	2301      	movs	r3, #1
   b8b3e:	e7f9      	b.n	b8b34 <itoa+0x20>

000b8b40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8b40:	4b01      	ldr	r3, [pc, #4]	; (b8b48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8b42:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8b44:	4770      	bx	lr
   b8b46:	bf00      	nop
   b8b48:	2003de78 	.word	0x2003de78

000b8b4c <serialEventRun>:
{
   b8b4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8b4e:	4b0b      	ldr	r3, [pc, #44]	; (b8b7c <serialEventRun+0x30>)
   b8b50:	b143      	cbz	r3, b8b64 <serialEventRun+0x18>
   b8b52:	f7ff ff83 	bl	b8a5c <_Z16_fetch_usbserialv>
   b8b56:	6803      	ldr	r3, [r0, #0]
   b8b58:	691b      	ldr	r3, [r3, #16]
   b8b5a:	4798      	blx	r3
   b8b5c:	2800      	cmp	r0, #0
   b8b5e:	dd01      	ble.n	b8b64 <serialEventRun+0x18>
        serialEvent();
   b8b60:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b8b64:	4b06      	ldr	r3, [pc, #24]	; (b8b80 <serialEventRun+0x34>)
   b8b66:	b143      	cbz	r3, b8b7a <serialEventRun+0x2e>
   b8b68:	f000 f95c 	bl	b8e24 <_Z22__fetch_global_Serial1v>
   b8b6c:	6803      	ldr	r3, [r0, #0]
   b8b6e:	691b      	ldr	r3, [r3, #16]
   b8b70:	4798      	blx	r3
   b8b72:	2800      	cmp	r0, #0
   b8b74:	dd01      	ble.n	b8b7a <serialEventRun+0x2e>
        serialEvent1();
   b8b76:	f3af 8000 	nop.w
}
   b8b7a:	bd08      	pop	{r3, pc}
	...

000b8b84 <_post_loop>:
{
   b8b84:	b508      	push	{r3, lr}
	serialEventRun();
   b8b86:	f7ff ffe1 	bl	b8b4c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8b8a:	f7fd f9a5 	bl	b5ed8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8b8e:	4b01      	ldr	r3, [pc, #4]	; (b8b94 <_post_loop+0x10>)
   b8b90:	6018      	str	r0, [r3, #0]
}
   b8b92:	bd08      	pop	{r3, pc}
   b8b94:	2003e728 	.word	0x2003e728

000b8b98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8b98:	4805      	ldr	r0, [pc, #20]	; (b8bb0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8b9a:	4a06      	ldr	r2, [pc, #24]	; (b8bb4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8b9c:	4906      	ldr	r1, [pc, #24]	; (b8bb8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8b9e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8ba0:	1a12      	subs	r2, r2, r0
   b8ba2:	f000 f97d 	bl	b8ea0 <memcpy>
    __backup_sram_signature = signature;
   b8ba6:	4b05      	ldr	r3, [pc, #20]	; (b8bbc <_Z33system_initialize_user_backup_ramv+0x24>)
   b8ba8:	4a05      	ldr	r2, [pc, #20]	; (b8bc0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8baa:	601a      	str	r2, [r3, #0]
}
   b8bac:	bd08      	pop	{r3, pc}
   b8bae:	bf00      	nop
   b8bb0:	2003f400 	.word	0x2003f400
   b8bb4:	2003f404 	.word	0x2003f404
   b8bb8:	000bcf98 	.word	0x000bcf98
   b8bbc:	2003f400 	.word	0x2003f400
   b8bc0:	9a271c1e 	.word	0x9a271c1e

000b8bc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8bc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8bc6:	2300      	movs	r3, #0
   b8bc8:	9300      	str	r3, [sp, #0]
   b8bca:	461a      	mov	r2, r3
   b8bcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8bd0:	f7fd fb54 	bl	b627c <system_ctrl_set_result>
}
   b8bd4:	b003      	add	sp, #12
   b8bd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8bdc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8bdc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8bde:	8843      	ldrh	r3, [r0, #2]
   b8be0:	2b0a      	cmp	r3, #10
   b8be2:	d008      	beq.n	b8bf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8be4:	2b50      	cmp	r3, #80	; 0x50
   b8be6:	d10b      	bne.n	b8c00 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8be8:	4b09      	ldr	r3, [pc, #36]	; (b8c10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8bea:	681b      	ldr	r3, [r3, #0]
   b8bec:	b14b      	cbz	r3, b8c02 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8bee:	b003      	add	sp, #12
   b8bf0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8bf4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8bf6:	f7ff ffe5 	bl	b8bc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8bfa:	b003      	add	sp, #12
   b8bfc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8c00:	2300      	movs	r3, #0
   b8c02:	9300      	str	r3, [sp, #0]
   b8c04:	461a      	mov	r2, r3
   b8c06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8c0a:	f7fd fb37 	bl	b627c <system_ctrl_set_result>
}
   b8c0e:	e7f4      	b.n	b8bfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8c10:	2003e724 	.word	0x2003e724

000b8c14 <module_user_init_hook>:
{
   b8c14:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8c16:	4812      	ldr	r0, [pc, #72]	; (b8c60 <module_user_init_hook+0x4c>)
   b8c18:	2100      	movs	r1, #0
   b8c1a:	f7fd fc21 	bl	b6460 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8c1e:	4b11      	ldr	r3, [pc, #68]	; (b8c64 <module_user_init_hook+0x50>)
   b8c20:	681a      	ldr	r2, [r3, #0]
   b8c22:	4b11      	ldr	r3, [pc, #68]	; (b8c68 <module_user_init_hook+0x54>)
   b8c24:	429a      	cmp	r2, r3
   b8c26:	4b11      	ldr	r3, [pc, #68]	; (b8c6c <module_user_init_hook+0x58>)
   b8c28:	bf0c      	ite	eq
   b8c2a:	2201      	moveq	r2, #1
   b8c2c:	2200      	movne	r2, #0
   b8c2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8c30:	d001      	beq.n	b8c36 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8c32:	f7ff ffb1 	bl	b8b98 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8c36:	f7fd f93f 	bl	b5eb8 <HAL_RNG_GetRandomNumber>
   b8c3a:	4604      	mov	r4, r0
    srand(seed);
   b8c3c:	f000 f960 	bl	b8f00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8c40:	4b0b      	ldr	r3, [pc, #44]	; (b8c70 <module_user_init_hook+0x5c>)
   b8c42:	b113      	cbz	r3, b8c4a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8c44:	4620      	mov	r0, r4
   b8c46:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8c4a:	2100      	movs	r1, #0
   b8c4c:	4808      	ldr	r0, [pc, #32]	; (b8c70 <module_user_init_hook+0x5c>)
   b8c4e:	f7fd fb57 	bl	b6300 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8c56:	4807      	ldr	r0, [pc, #28]	; (b8c74 <module_user_init_hook+0x60>)
   b8c58:	2100      	movs	r1, #0
   b8c5a:	f7fd bb05 	b.w	b6268 <system_ctrl_set_app_request_handler>
   b8c5e:	bf00      	nop
   b8c60:	000b8b41 	.word	0x000b8b41
   b8c64:	2003f400 	.word	0x2003f400
   b8c68:	9a271c1e 	.word	0x9a271c1e
   b8c6c:	2003e720 	.word	0x2003e720
   b8c70:	00000000 	.word	0x00000000
   b8c74:	000b8bdd 	.word	0x000b8bdd

000b8c78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8c78:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b8c7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8c7c:	d902      	bls.n	b8c84 <pinAvailable+0xc>
    return false;
   b8c7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8c80:	b002      	add	sp, #8
   b8c82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b8c84:	f1a0 030b 	sub.w	r3, r0, #11
   b8c88:	2b02      	cmp	r3, #2
   b8c8a:	d81a      	bhi.n	b8cc2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8c8c:	4c17      	ldr	r4, [pc, #92]	; (b8cec <pinAvailable+0x74>)
   b8c8e:	7821      	ldrb	r1, [r4, #0]
   b8c90:	f3bf 8f5b 	dmb	ish
   b8c94:	f011 0101 	ands.w	r1, r1, #1
   b8c98:	d10b      	bne.n	b8cb2 <pinAvailable+0x3a>
   b8c9a:	4620      	mov	r0, r4
   b8c9c:	9101      	str	r1, [sp, #4]
   b8c9e:	f7fb fe3f 	bl	b4920 <__cxa_guard_acquire>
   b8ca2:	9901      	ldr	r1, [sp, #4]
   b8ca4:	b128      	cbz	r0, b8cb2 <pinAvailable+0x3a>
   b8ca6:	4812      	ldr	r0, [pc, #72]	; (b8cf0 <pinAvailable+0x78>)
   b8ca8:	f7ff fb9e 	bl	b83e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8cac:	4620      	mov	r0, r4
   b8cae:	f7fb fe3c 	bl	b492a <__cxa_guard_release>
   b8cb2:	4b0f      	ldr	r3, [pc, #60]	; (b8cf0 <pinAvailable+0x78>)
   b8cb4:	7818      	ldrb	r0, [r3, #0]
   b8cb6:	f7fd f9cf 	bl	b6058 <hal_spi_is_enabled>
   b8cba:	2800      	cmp	r0, #0
   b8cbc:	d1df      	bne.n	b8c7e <pinAvailable+0x6>
  return true; // 'pin' is available
   b8cbe:	2001      	movs	r0, #1
   b8cc0:	e7de      	b.n	b8c80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8cc2:	2801      	cmp	r0, #1
   b8cc4:	d809      	bhi.n	b8cda <pinAvailable+0x62>
   b8cc6:	f000 f86d 	bl	b8da4 <_Z19__fetch_global_Wirev>
   b8cca:	2100      	movs	r1, #0
   b8ccc:	7c00      	ldrb	r0, [r0, #16]
   b8cce:	f7fd f97b 	bl	b5fc8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8cd2:	f080 0001 	eor.w	r0, r0, #1
   b8cd6:	b2c0      	uxtb	r0, r0
   b8cd8:	e7d2      	b.n	b8c80 <pinAvailable+0x8>
   b8cda:	3809      	subs	r0, #9
   b8cdc:	2801      	cmp	r0, #1
   b8cde:	d8ee      	bhi.n	b8cbe <pinAvailable+0x46>
   b8ce0:	f000 f8a0 	bl	b8e24 <_Z22__fetch_global_Serial1v>
   b8ce4:	7c00      	ldrb	r0, [r0, #16]
   b8ce6:	f7fd fa0f 	bl	b6108 <hal_usart_is_enabled>
   b8cea:	e7f2      	b.n	b8cd2 <pinAvailable+0x5a>
   b8cec:	2003e620 	.word	0x2003e620
   b8cf0:	2003e624 	.word	0x2003e624

000b8cf4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8cf4:	2825      	cmp	r0, #37	; 0x25
{
   b8cf6:	b538      	push	{r3, r4, r5, lr}
   b8cf8:	4604      	mov	r4, r0
   b8cfa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8cfc:	d80a      	bhi.n	b8d14 <pinMode+0x20>
   b8cfe:	29ff      	cmp	r1, #255	; 0xff
   b8d00:	d008      	beq.n	b8d14 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8d02:	f7ff ffb9 	bl	b8c78 <pinAvailable>
   b8d06:	b128      	cbz	r0, b8d14 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8d08:	4629      	mov	r1, r5
   b8d0a:	4620      	mov	r0, r4
}
   b8d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8d10:	f7fd b8fa 	b.w	b5f08 <hal_gpio_mode>
}
   b8d14:	bd38      	pop	{r3, r4, r5, pc}

000b8d16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b8d16:	b538      	push	{r3, r4, r5, lr}
   b8d18:	4604      	mov	r4, r0
   b8d1a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8d1c:	f7fd f8fc 	bl	b5f18 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8d20:	28ff      	cmp	r0, #255	; 0xff
   b8d22:	d010      	beq.n	b8d46 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8d24:	2806      	cmp	r0, #6
   b8d26:	d804      	bhi.n	b8d32 <digitalWrite+0x1c>
   b8d28:	234d      	movs	r3, #77	; 0x4d
   b8d2a:	fa23 f000 	lsr.w	r0, r3, r0
   b8d2e:	07c3      	lsls	r3, r0, #31
   b8d30:	d409      	bmi.n	b8d46 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8d32:	4620      	mov	r0, r4
   b8d34:	f7ff ffa0 	bl	b8c78 <pinAvailable>
   b8d38:	b128      	cbz	r0, b8d46 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8d3a:	4629      	mov	r1, r5
   b8d3c:	4620      	mov	r0, r4
}
   b8d3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b8d42:	f7fd b8f1 	b.w	b5f28 <hal_gpio_write>
}
   b8d46:	bd38      	pop	{r3, r4, r5, pc}

000b8d48 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8d48:	b510      	push	{r4, lr}
   b8d4a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8d4c:	f7fd f8e4 	bl	b5f18 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8d50:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b8d52:	b2db      	uxtb	r3, r3
   b8d54:	2b01      	cmp	r3, #1
   b8d56:	d908      	bls.n	b8d6a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8d58:	4620      	mov	r0, r4
   b8d5a:	f7ff ff8d 	bl	b8c78 <pinAvailable>
   b8d5e:	b120      	cbz	r0, b8d6a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8d60:	4620      	mov	r0, r4
}
   b8d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b8d66:	f7fd b8e7 	b.w	b5f38 <hal_gpio_read>
}
   b8d6a:	2000      	movs	r0, #0
   b8d6c:	bd10      	pop	{r4, pc}

000b8d6e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8d6e:	4770      	bx	lr

000b8d70 <_Z17acquireWireBufferv>:
{
   b8d70:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8d72:	4b0a      	ldr	r3, [pc, #40]	; (b8d9c <_Z17acquireWireBufferv+0x2c>)
   b8d74:	6003      	str	r3, [r0, #0]
   b8d76:	2301      	movs	r3, #1
{
   b8d78:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8d7a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8d7c:	4908      	ldr	r1, [pc, #32]	; (b8da0 <_Z17acquireWireBufferv+0x30>)
   b8d7e:	2020      	movs	r0, #32
   b8d80:	f000 f876 	bl	b8e70 <_ZnajRKSt9nothrow_t>
	};
   b8d84:	2520      	movs	r5, #32
   b8d86:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8d88:	4905      	ldr	r1, [pc, #20]	; (b8da0 <_Z17acquireWireBufferv+0x30>)
	};
   b8d8a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8d8c:	4628      	mov	r0, r5
   b8d8e:	f000 f86f 	bl	b8e70 <_ZnajRKSt9nothrow_t>
	};
   b8d92:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b8d96:	4620      	mov	r0, r4
   b8d98:	bd38      	pop	{r3, r4, r5, pc}
   b8d9a:	bf00      	nop
   b8d9c:	00010018 	.word	0x00010018
   b8da0:	000bcce4 	.word	0x000bcce4

000b8da4 <_Z19__fetch_global_Wirev>:
{
   b8da4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8da6:	4d0e      	ldr	r5, [pc, #56]	; (b8de0 <_Z19__fetch_global_Wirev+0x3c>)
   b8da8:	7829      	ldrb	r1, [r5, #0]
   b8daa:	f3bf 8f5b 	dmb	ish
   b8dae:	f011 0401 	ands.w	r4, r1, #1
{
   b8db2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8db4:	d111      	bne.n	b8dda <_Z19__fetch_global_Wirev+0x36>
   b8db6:	4628      	mov	r0, r5
   b8db8:	f7fb fdb2 	bl	b4920 <__cxa_guard_acquire>
   b8dbc:	b168      	cbz	r0, b8dda <_Z19__fetch_global_Wirev+0x36>
   b8dbe:	4668      	mov	r0, sp
   b8dc0:	f7ff ffd6 	bl	b8d70 <_Z17acquireWireBufferv>
   b8dc4:	466a      	mov	r2, sp
   b8dc6:	4621      	mov	r1, r4
   b8dc8:	4806      	ldr	r0, [pc, #24]	; (b8de4 <_Z19__fetch_global_Wirev+0x40>)
   b8dca:	f7fd ff53 	bl	b6c74 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8dce:	4628      	mov	r0, r5
   b8dd0:	f7fb fdab 	bl	b492a <__cxa_guard_release>
   b8dd4:	4804      	ldr	r0, [pc, #16]	; (b8de8 <_Z19__fetch_global_Wirev+0x44>)
   b8dd6:	f000 f850 	bl	b8e7a <atexit>
	return wire;
}
   b8dda:	4802      	ldr	r0, [pc, #8]	; (b8de4 <_Z19__fetch_global_Wirev+0x40>)
   b8ddc:	b007      	add	sp, #28
   b8dde:	bd30      	pop	{r4, r5, pc}
   b8de0:	2003e72c 	.word	0x2003e72c
   b8de4:	2003e730 	.word	0x2003e730
   b8de8:	000b8d6f 	.word	0x000b8d6f

000b8dec <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8dec:	4770      	bx	lr
	...

000b8df0 <_Z20acquireSerial1Bufferv>:
{
   b8df0:	b538      	push	{r3, r4, r5, lr}
   b8df2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8df4:	2514      	movs	r5, #20
   b8df6:	462a      	mov	r2, r5
   b8df8:	2100      	movs	r1, #0
   b8dfa:	f000 f879 	bl	b8ef0 <memset>
   b8dfe:	8025      	strh	r5, [r4, #0]
   b8e00:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e02:	4907      	ldr	r1, [pc, #28]	; (b8e20 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8e04:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e06:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8e08:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e0a:	f000 f831 	bl	b8e70 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e0e:	4904      	ldr	r1, [pc, #16]	; (b8e20 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8e10:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8e12:	4628      	mov	r0, r5
   b8e14:	f000 f82c 	bl	b8e70 <_ZnajRKSt9nothrow_t>
    };
   b8e18:	60e0      	str	r0, [r4, #12]
}
   b8e1a:	4620      	mov	r0, r4
   b8e1c:	bd38      	pop	{r3, r4, r5, pc}
   b8e1e:	bf00      	nop
   b8e20:	000bcce4 	.word	0x000bcce4

000b8e24 <_Z22__fetch_global_Serial1v>:
{
   b8e24:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8e26:	4d0e      	ldr	r5, [pc, #56]	; (b8e60 <_Z22__fetch_global_Serial1v+0x3c>)
   b8e28:	7829      	ldrb	r1, [r5, #0]
   b8e2a:	f3bf 8f5b 	dmb	ish
   b8e2e:	f011 0401 	ands.w	r4, r1, #1
{
   b8e32:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8e34:	d111      	bne.n	b8e5a <_Z22__fetch_global_Serial1v+0x36>
   b8e36:	4628      	mov	r0, r5
   b8e38:	f7fb fd72 	bl	b4920 <__cxa_guard_acquire>
   b8e3c:	b168      	cbz	r0, b8e5a <_Z22__fetch_global_Serial1v+0x36>
   b8e3e:	a801      	add	r0, sp, #4
   b8e40:	f7ff ffd6 	bl	b8df0 <_Z20acquireSerial1Bufferv>
   b8e44:	aa01      	add	r2, sp, #4
   b8e46:	4621      	mov	r1, r4
   b8e48:	4806      	ldr	r0, [pc, #24]	; (b8e64 <_Z22__fetch_global_Serial1v+0x40>)
   b8e4a:	f7ff fd87 	bl	b895c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8e4e:	4628      	mov	r0, r5
   b8e50:	f7fb fd6b 	bl	b492a <__cxa_guard_release>
   b8e54:	4804      	ldr	r0, [pc, #16]	; (b8e68 <_Z22__fetch_global_Serial1v+0x44>)
   b8e56:	f000 f810 	bl	b8e7a <atexit>
    return serial1;
}
   b8e5a:	4802      	ldr	r0, [pc, #8]	; (b8e64 <_Z22__fetch_global_Serial1v+0x40>)
   b8e5c:	b007      	add	sp, #28
   b8e5e:	bd30      	pop	{r4, r5, pc}
   b8e60:	2003e744 	.word	0x2003e744
   b8e64:	2003e748 	.word	0x2003e748
   b8e68:	000b8ded 	.word	0x000b8ded

000b8e6c <_ZnwjRKSt9nothrow_t>:
   b8e6c:	f7fb bd45 	b.w	b48fa <_Znwj>

000b8e70 <_ZnajRKSt9nothrow_t>:
   b8e70:	f7fb bd45 	b.w	b48fe <_Znaj>

000b8e74 <_ZSt25__throw_bad_function_callv>:
   b8e74:	b508      	push	{r3, lr}
   b8e76:	f7fd fad3 	bl	b6420 <abort>

000b8e7a <atexit>:
   b8e7a:	2300      	movs	r3, #0
   b8e7c:	4601      	mov	r1, r0
   b8e7e:	461a      	mov	r2, r3
   b8e80:	4618      	mov	r0, r3
   b8e82:	f000 b9b9 	b.w	b91f8 <__register_exitproc>

000b8e86 <atoi>:
   b8e86:	220a      	movs	r2, #10
   b8e88:	2100      	movs	r1, #0
   b8e8a:	f000 b9ab 	b.w	b91e4 <strtol>
	...

000b8e90 <isprint>:
   b8e90:	4b02      	ldr	r3, [pc, #8]	; (b8e9c <isprint+0xc>)
   b8e92:	4418      	add	r0, r3
   b8e94:	7840      	ldrb	r0, [r0, #1]
   b8e96:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b8e9a:	4770      	bx	lr
   b8e9c:	000bcdb0 	.word	0x000bcdb0

000b8ea0 <memcpy>:
   b8ea0:	440a      	add	r2, r1
   b8ea2:	4291      	cmp	r1, r2
   b8ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8ea8:	d100      	bne.n	b8eac <memcpy+0xc>
   b8eaa:	4770      	bx	lr
   b8eac:	b510      	push	{r4, lr}
   b8eae:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8eb6:	4291      	cmp	r1, r2
   b8eb8:	d1f9      	bne.n	b8eae <memcpy+0xe>
   b8eba:	bd10      	pop	{r4, pc}

000b8ebc <memmove>:
   b8ebc:	4288      	cmp	r0, r1
   b8ebe:	b510      	push	{r4, lr}
   b8ec0:	eb01 0402 	add.w	r4, r1, r2
   b8ec4:	d902      	bls.n	b8ecc <memmove+0x10>
   b8ec6:	4284      	cmp	r4, r0
   b8ec8:	4623      	mov	r3, r4
   b8eca:	d807      	bhi.n	b8edc <memmove+0x20>
   b8ecc:	1e43      	subs	r3, r0, #1
   b8ece:	42a1      	cmp	r1, r4
   b8ed0:	d008      	beq.n	b8ee4 <memmove+0x28>
   b8ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
   b8eda:	e7f8      	b.n	b8ece <memmove+0x12>
   b8edc:	4402      	add	r2, r0
   b8ede:	4601      	mov	r1, r0
   b8ee0:	428a      	cmp	r2, r1
   b8ee2:	d100      	bne.n	b8ee6 <memmove+0x2a>
   b8ee4:	bd10      	pop	{r4, pc}
   b8ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b8eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b8eee:	e7f7      	b.n	b8ee0 <memmove+0x24>

000b8ef0 <memset>:
   b8ef0:	4402      	add	r2, r0
   b8ef2:	4603      	mov	r3, r0
   b8ef4:	4293      	cmp	r3, r2
   b8ef6:	d100      	bne.n	b8efa <memset+0xa>
   b8ef8:	4770      	bx	lr
   b8efa:	f803 1b01 	strb.w	r1, [r3], #1
   b8efe:	e7f9      	b.n	b8ef4 <memset+0x4>

000b8f00 <srand>:
   b8f00:	b538      	push	{r3, r4, r5, lr}
   b8f02:	4b10      	ldr	r3, [pc, #64]	; (b8f44 <srand+0x44>)
   b8f04:	681d      	ldr	r5, [r3, #0]
   b8f06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f08:	4604      	mov	r4, r0
   b8f0a:	b9b3      	cbnz	r3, b8f3a <srand+0x3a>
   b8f0c:	2018      	movs	r0, #24
   b8f0e:	f7fd fa67 	bl	b63e0 <malloc>
   b8f12:	4602      	mov	r2, r0
   b8f14:	63a8      	str	r0, [r5, #56]	; 0x38
   b8f16:	b920      	cbnz	r0, b8f22 <srand+0x22>
   b8f18:	4b0b      	ldr	r3, [pc, #44]	; (b8f48 <srand+0x48>)
   b8f1a:	480c      	ldr	r0, [pc, #48]	; (b8f4c <srand+0x4c>)
   b8f1c:	2142      	movs	r1, #66	; 0x42
   b8f1e:	f7fd fa97 	bl	b6450 <__assert_func>
   b8f22:	490b      	ldr	r1, [pc, #44]	; (b8f50 <srand+0x50>)
   b8f24:	4b0b      	ldr	r3, [pc, #44]	; (b8f54 <srand+0x54>)
   b8f26:	e9c0 1300 	strd	r1, r3, [r0]
   b8f2a:	4b0b      	ldr	r3, [pc, #44]	; (b8f58 <srand+0x58>)
   b8f2c:	6083      	str	r3, [r0, #8]
   b8f2e:	230b      	movs	r3, #11
   b8f30:	8183      	strh	r3, [r0, #12]
   b8f32:	2100      	movs	r1, #0
   b8f34:	2001      	movs	r0, #1
   b8f36:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8f3a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8f3c:	2200      	movs	r2, #0
   b8f3e:	611c      	str	r4, [r3, #16]
   b8f40:	615a      	str	r2, [r3, #20]
   b8f42:	bd38      	pop	{r3, r4, r5, pc}
   b8f44:	2003de78 	.word	0x2003de78
   b8f48:	000bcce5 	.word	0x000bcce5
   b8f4c:	000bccfc 	.word	0x000bccfc
   b8f50:	abcd330e 	.word	0xabcd330e
   b8f54:	e66d1234 	.word	0xe66d1234
   b8f58:	0005deec 	.word	0x0005deec

000b8f5c <strchr>:
   b8f5c:	b2c9      	uxtb	r1, r1
   b8f5e:	4603      	mov	r3, r0
   b8f60:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8f64:	b11a      	cbz	r2, b8f6e <strchr+0x12>
   b8f66:	428a      	cmp	r2, r1
   b8f68:	d1f9      	bne.n	b8f5e <strchr+0x2>
   b8f6a:	4618      	mov	r0, r3
   b8f6c:	4770      	bx	lr
   b8f6e:	2900      	cmp	r1, #0
   b8f70:	bf18      	it	ne
   b8f72:	2300      	movne	r3, #0
   b8f74:	e7f9      	b.n	b8f6a <strchr+0xe>

000b8f76 <strchrnul>:
   b8f76:	b510      	push	{r4, lr}
   b8f78:	4604      	mov	r4, r0
   b8f7a:	f7ff ffef 	bl	b8f5c <strchr>
   b8f7e:	b918      	cbnz	r0, b8f88 <strchrnul+0x12>
   b8f80:	4620      	mov	r0, r4
   b8f82:	f7fb fc77 	bl	b4874 <strlen>
   b8f86:	4420      	add	r0, r4
   b8f88:	bd10      	pop	{r4, pc}

000b8f8a <strcpy>:
   b8f8a:	4603      	mov	r3, r0
   b8f8c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8f90:	f803 2b01 	strb.w	r2, [r3], #1
   b8f94:	2a00      	cmp	r2, #0
   b8f96:	d1f9      	bne.n	b8f8c <strcpy+0x2>
   b8f98:	4770      	bx	lr
	...

000b8f9c <strdup>:
   b8f9c:	4b02      	ldr	r3, [pc, #8]	; (b8fa8 <strdup+0xc>)
   b8f9e:	4601      	mov	r1, r0
   b8fa0:	6818      	ldr	r0, [r3, #0]
   b8fa2:	f000 b803 	b.w	b8fac <_strdup_r>
   b8fa6:	bf00      	nop
   b8fa8:	2003de78 	.word	0x2003de78

000b8fac <_strdup_r>:
   b8fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8fae:	4604      	mov	r4, r0
   b8fb0:	4608      	mov	r0, r1
   b8fb2:	460d      	mov	r5, r1
   b8fb4:	f7fb fc5e 	bl	b4874 <strlen>
   b8fb8:	1c42      	adds	r2, r0, #1
   b8fba:	4611      	mov	r1, r2
   b8fbc:	4620      	mov	r0, r4
   b8fbe:	9201      	str	r2, [sp, #4]
   b8fc0:	f7fd fa36 	bl	b6430 <_malloc_r>
   b8fc4:	4604      	mov	r4, r0
   b8fc6:	b118      	cbz	r0, b8fd0 <_strdup_r+0x24>
   b8fc8:	9a01      	ldr	r2, [sp, #4]
   b8fca:	4629      	mov	r1, r5
   b8fcc:	f7ff ff68 	bl	b8ea0 <memcpy>
   b8fd0:	4620      	mov	r0, r4
   b8fd2:	b003      	add	sp, #12
   b8fd4:	bd30      	pop	{r4, r5, pc}

000b8fd6 <strncmp>:
   b8fd6:	b510      	push	{r4, lr}
   b8fd8:	b17a      	cbz	r2, b8ffa <strncmp+0x24>
   b8fda:	4603      	mov	r3, r0
   b8fdc:	3901      	subs	r1, #1
   b8fde:	1884      	adds	r4, r0, r2
   b8fe0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8fe4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8fe8:	4290      	cmp	r0, r2
   b8fea:	d101      	bne.n	b8ff0 <strncmp+0x1a>
   b8fec:	42a3      	cmp	r3, r4
   b8fee:	d101      	bne.n	b8ff4 <strncmp+0x1e>
   b8ff0:	1a80      	subs	r0, r0, r2
   b8ff2:	bd10      	pop	{r4, pc}
   b8ff4:	2800      	cmp	r0, #0
   b8ff6:	d1f3      	bne.n	b8fe0 <strncmp+0xa>
   b8ff8:	e7fa      	b.n	b8ff0 <strncmp+0x1a>
   b8ffa:	4610      	mov	r0, r2
   b8ffc:	e7f9      	b.n	b8ff2 <strncmp+0x1c>

000b8ffe <strrchr>:
   b8ffe:	b538      	push	{r3, r4, r5, lr}
   b9000:	4603      	mov	r3, r0
   b9002:	460c      	mov	r4, r1
   b9004:	b969      	cbnz	r1, b9022 <strrchr+0x24>
   b9006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b900a:	f7ff bfa7 	b.w	b8f5c <strchr>
   b900e:	1c43      	adds	r3, r0, #1
   b9010:	4605      	mov	r5, r0
   b9012:	4621      	mov	r1, r4
   b9014:	4618      	mov	r0, r3
   b9016:	f7ff ffa1 	bl	b8f5c <strchr>
   b901a:	2800      	cmp	r0, #0
   b901c:	d1f7      	bne.n	b900e <strrchr+0x10>
   b901e:	4628      	mov	r0, r5
   b9020:	bd38      	pop	{r3, r4, r5, pc}
   b9022:	2500      	movs	r5, #0
   b9024:	e7f5      	b.n	b9012 <strrchr+0x14>
	...

000b9028 <strtok>:
   b9028:	4b16      	ldr	r3, [pc, #88]	; (b9084 <strtok+0x5c>)
   b902a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b902c:	681e      	ldr	r6, [r3, #0]
   b902e:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b9030:	4605      	mov	r5, r0
   b9032:	b9fc      	cbnz	r4, b9074 <strtok+0x4c>
   b9034:	2050      	movs	r0, #80	; 0x50
   b9036:	9101      	str	r1, [sp, #4]
   b9038:	f7fd f9d2 	bl	b63e0 <malloc>
   b903c:	9901      	ldr	r1, [sp, #4]
   b903e:	65b0      	str	r0, [r6, #88]	; 0x58
   b9040:	4602      	mov	r2, r0
   b9042:	b920      	cbnz	r0, b904e <strtok+0x26>
   b9044:	4b10      	ldr	r3, [pc, #64]	; (b9088 <strtok+0x60>)
   b9046:	4811      	ldr	r0, [pc, #68]	; (b908c <strtok+0x64>)
   b9048:	2157      	movs	r1, #87	; 0x57
   b904a:	f7fd fa01 	bl	b6450 <__assert_func>
   b904e:	e9c0 4400 	strd	r4, r4, [r0]
   b9052:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b9056:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b905a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b905e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b9062:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b9066:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b906a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b906e:	6184      	str	r4, [r0, #24]
   b9070:	7704      	strb	r4, [r0, #28]
   b9072:	6244      	str	r4, [r0, #36]	; 0x24
   b9074:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b9076:	2301      	movs	r3, #1
   b9078:	4628      	mov	r0, r5
   b907a:	b002      	add	sp, #8
   b907c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b9080:	f000 b806 	b.w	b9090 <__strtok_r>
   b9084:	2003de78 	.word	0x2003de78
   b9088:	000bcce5 	.word	0x000bcce5
   b908c:	000bcd55 	.word	0x000bcd55

000b9090 <__strtok_r>:
   b9090:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9092:	b908      	cbnz	r0, b9098 <__strtok_r+0x8>
   b9094:	6810      	ldr	r0, [r2, #0]
   b9096:	b188      	cbz	r0, b90bc <__strtok_r+0x2c>
   b9098:	4604      	mov	r4, r0
   b909a:	4620      	mov	r0, r4
   b909c:	f814 5b01 	ldrb.w	r5, [r4], #1
   b90a0:	460f      	mov	r7, r1
   b90a2:	f817 6b01 	ldrb.w	r6, [r7], #1
   b90a6:	b91e      	cbnz	r6, b90b0 <__strtok_r+0x20>
   b90a8:	b965      	cbnz	r5, b90c4 <__strtok_r+0x34>
   b90aa:	6015      	str	r5, [r2, #0]
   b90ac:	4628      	mov	r0, r5
   b90ae:	e005      	b.n	b90bc <__strtok_r+0x2c>
   b90b0:	42b5      	cmp	r5, r6
   b90b2:	d1f6      	bne.n	b90a2 <__strtok_r+0x12>
   b90b4:	2b00      	cmp	r3, #0
   b90b6:	d1f0      	bne.n	b909a <__strtok_r+0xa>
   b90b8:	6014      	str	r4, [r2, #0]
   b90ba:	7003      	strb	r3, [r0, #0]
   b90bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b90be:	461c      	mov	r4, r3
   b90c0:	e00c      	b.n	b90dc <__strtok_r+0x4c>
   b90c2:	b915      	cbnz	r5, b90ca <__strtok_r+0x3a>
   b90c4:	f814 3b01 	ldrb.w	r3, [r4], #1
   b90c8:	460e      	mov	r6, r1
   b90ca:	f816 5b01 	ldrb.w	r5, [r6], #1
   b90ce:	42ab      	cmp	r3, r5
   b90d0:	d1f7      	bne.n	b90c2 <__strtok_r+0x32>
   b90d2:	2b00      	cmp	r3, #0
   b90d4:	d0f3      	beq.n	b90be <__strtok_r+0x2e>
   b90d6:	2300      	movs	r3, #0
   b90d8:	f804 3c01 	strb.w	r3, [r4, #-1]
   b90dc:	6014      	str	r4, [r2, #0]
   b90de:	e7ed      	b.n	b90bc <__strtok_r+0x2c>

000b90e0 <_strtol_l.constprop.0>:
   b90e0:	2b01      	cmp	r3, #1
   b90e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b90e6:	d001      	beq.n	b90ec <_strtol_l.constprop.0+0xc>
   b90e8:	2b24      	cmp	r3, #36	; 0x24
   b90ea:	d906      	bls.n	b90fa <_strtol_l.constprop.0+0x1a>
   b90ec:	f7fd f9a8 	bl	b6440 <__errno>
   b90f0:	2316      	movs	r3, #22
   b90f2:	6003      	str	r3, [r0, #0]
   b90f4:	2000      	movs	r0, #0
   b90f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b90fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b91e0 <_strtol_l.constprop.0+0x100>
   b90fe:	460d      	mov	r5, r1
   b9100:	462e      	mov	r6, r5
   b9102:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9106:	f814 700c 	ldrb.w	r7, [r4, ip]
   b910a:	f017 0708 	ands.w	r7, r7, #8
   b910e:	d1f7      	bne.n	b9100 <_strtol_l.constprop.0+0x20>
   b9110:	2c2d      	cmp	r4, #45	; 0x2d
   b9112:	d132      	bne.n	b917a <_strtol_l.constprop.0+0x9a>
   b9114:	782c      	ldrb	r4, [r5, #0]
   b9116:	2701      	movs	r7, #1
   b9118:	1cb5      	adds	r5, r6, #2
   b911a:	2b00      	cmp	r3, #0
   b911c:	d05b      	beq.n	b91d6 <_strtol_l.constprop.0+0xf6>
   b911e:	2b10      	cmp	r3, #16
   b9120:	d109      	bne.n	b9136 <_strtol_l.constprop.0+0x56>
   b9122:	2c30      	cmp	r4, #48	; 0x30
   b9124:	d107      	bne.n	b9136 <_strtol_l.constprop.0+0x56>
   b9126:	782c      	ldrb	r4, [r5, #0]
   b9128:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b912c:	2c58      	cmp	r4, #88	; 0x58
   b912e:	d14d      	bne.n	b91cc <_strtol_l.constprop.0+0xec>
   b9130:	786c      	ldrb	r4, [r5, #1]
   b9132:	2310      	movs	r3, #16
   b9134:	3502      	adds	r5, #2
   b9136:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b913a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b913e:	f04f 0c00 	mov.w	ip, #0
   b9142:	fbb8 f9f3 	udiv	r9, r8, r3
   b9146:	4666      	mov	r6, ip
   b9148:	fb03 8a19 	mls	sl, r3, r9, r8
   b914c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b9150:	f1be 0f09 	cmp.w	lr, #9
   b9154:	d816      	bhi.n	b9184 <_strtol_l.constprop.0+0xa4>
   b9156:	4674      	mov	r4, lr
   b9158:	42a3      	cmp	r3, r4
   b915a:	dd24      	ble.n	b91a6 <_strtol_l.constprop.0+0xc6>
   b915c:	f1bc 0f00 	cmp.w	ip, #0
   b9160:	db1e      	blt.n	b91a0 <_strtol_l.constprop.0+0xc0>
   b9162:	45b1      	cmp	r9, r6
   b9164:	d31c      	bcc.n	b91a0 <_strtol_l.constprop.0+0xc0>
   b9166:	d101      	bne.n	b916c <_strtol_l.constprop.0+0x8c>
   b9168:	45a2      	cmp	sl, r4
   b916a:	db19      	blt.n	b91a0 <_strtol_l.constprop.0+0xc0>
   b916c:	fb06 4603 	mla	r6, r6, r3, r4
   b9170:	f04f 0c01 	mov.w	ip, #1
   b9174:	f815 4b01 	ldrb.w	r4, [r5], #1
   b9178:	e7e8      	b.n	b914c <_strtol_l.constprop.0+0x6c>
   b917a:	2c2b      	cmp	r4, #43	; 0x2b
   b917c:	bf04      	itt	eq
   b917e:	782c      	ldrbeq	r4, [r5, #0]
   b9180:	1cb5      	addeq	r5, r6, #2
   b9182:	e7ca      	b.n	b911a <_strtol_l.constprop.0+0x3a>
   b9184:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b9188:	f1be 0f19 	cmp.w	lr, #25
   b918c:	d801      	bhi.n	b9192 <_strtol_l.constprop.0+0xb2>
   b918e:	3c37      	subs	r4, #55	; 0x37
   b9190:	e7e2      	b.n	b9158 <_strtol_l.constprop.0+0x78>
   b9192:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b9196:	f1be 0f19 	cmp.w	lr, #25
   b919a:	d804      	bhi.n	b91a6 <_strtol_l.constprop.0+0xc6>
   b919c:	3c57      	subs	r4, #87	; 0x57
   b919e:	e7db      	b.n	b9158 <_strtol_l.constprop.0+0x78>
   b91a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b91a4:	e7e6      	b.n	b9174 <_strtol_l.constprop.0+0x94>
   b91a6:	f1bc 0f00 	cmp.w	ip, #0
   b91aa:	da05      	bge.n	b91b8 <_strtol_l.constprop.0+0xd8>
   b91ac:	2322      	movs	r3, #34	; 0x22
   b91ae:	6003      	str	r3, [r0, #0]
   b91b0:	4646      	mov	r6, r8
   b91b2:	b942      	cbnz	r2, b91c6 <_strtol_l.constprop.0+0xe6>
   b91b4:	4630      	mov	r0, r6
   b91b6:	e79e      	b.n	b90f6 <_strtol_l.constprop.0+0x16>
   b91b8:	b107      	cbz	r7, b91bc <_strtol_l.constprop.0+0xdc>
   b91ba:	4276      	negs	r6, r6
   b91bc:	2a00      	cmp	r2, #0
   b91be:	d0f9      	beq.n	b91b4 <_strtol_l.constprop.0+0xd4>
   b91c0:	f1bc 0f00 	cmp.w	ip, #0
   b91c4:	d000      	beq.n	b91c8 <_strtol_l.constprop.0+0xe8>
   b91c6:	1e69      	subs	r1, r5, #1
   b91c8:	6011      	str	r1, [r2, #0]
   b91ca:	e7f3      	b.n	b91b4 <_strtol_l.constprop.0+0xd4>
   b91cc:	2430      	movs	r4, #48	; 0x30
   b91ce:	2b00      	cmp	r3, #0
   b91d0:	d1b1      	bne.n	b9136 <_strtol_l.constprop.0+0x56>
   b91d2:	2308      	movs	r3, #8
   b91d4:	e7af      	b.n	b9136 <_strtol_l.constprop.0+0x56>
   b91d6:	2c30      	cmp	r4, #48	; 0x30
   b91d8:	d0a5      	beq.n	b9126 <_strtol_l.constprop.0+0x46>
   b91da:	230a      	movs	r3, #10
   b91dc:	e7ab      	b.n	b9136 <_strtol_l.constprop.0+0x56>
   b91de:	bf00      	nop
   b91e0:	000bcdb1 	.word	0x000bcdb1

000b91e4 <strtol>:
   b91e4:	4613      	mov	r3, r2
   b91e6:	460a      	mov	r2, r1
   b91e8:	4601      	mov	r1, r0
   b91ea:	4802      	ldr	r0, [pc, #8]	; (b91f4 <strtol+0x10>)
   b91ec:	6800      	ldr	r0, [r0, #0]
   b91ee:	f7ff bf77 	b.w	b90e0 <_strtol_l.constprop.0>
   b91f2:	bf00      	nop
   b91f4:	2003de78 	.word	0x2003de78

000b91f8 <__register_exitproc>:
   b91f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b91fc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b92b8 <__register_exitproc+0xc0>
   b9200:	4606      	mov	r6, r0
   b9202:	f8d8 0000 	ldr.w	r0, [r8]
   b9206:	461f      	mov	r7, r3
   b9208:	460d      	mov	r5, r1
   b920a:	4691      	mov	r9, r2
   b920c:	f000 f856 	bl	b92bc <__retarget_lock_acquire_recursive>
   b9210:	4b25      	ldr	r3, [pc, #148]	; (b92a8 <__register_exitproc+0xb0>)
   b9212:	681c      	ldr	r4, [r3, #0]
   b9214:	b934      	cbnz	r4, b9224 <__register_exitproc+0x2c>
   b9216:	4c25      	ldr	r4, [pc, #148]	; (b92ac <__register_exitproc+0xb4>)
   b9218:	601c      	str	r4, [r3, #0]
   b921a:	4b25      	ldr	r3, [pc, #148]	; (b92b0 <__register_exitproc+0xb8>)
   b921c:	b113      	cbz	r3, b9224 <__register_exitproc+0x2c>
   b921e:	681b      	ldr	r3, [r3, #0]
   b9220:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b9224:	6863      	ldr	r3, [r4, #4]
   b9226:	2b1f      	cmp	r3, #31
   b9228:	dd07      	ble.n	b923a <__register_exitproc+0x42>
   b922a:	f8d8 0000 	ldr.w	r0, [r8]
   b922e:	f000 f847 	bl	b92c0 <__retarget_lock_release_recursive>
   b9232:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b923a:	b34e      	cbz	r6, b9290 <__register_exitproc+0x98>
   b923c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b9240:	b988      	cbnz	r0, b9266 <__register_exitproc+0x6e>
   b9242:	4b1c      	ldr	r3, [pc, #112]	; (b92b4 <__register_exitproc+0xbc>)
   b9244:	b923      	cbnz	r3, b9250 <__register_exitproc+0x58>
   b9246:	f8d8 0000 	ldr.w	r0, [r8]
   b924a:	f000 f838 	bl	b92be <__retarget_lock_release>
   b924e:	e7f0      	b.n	b9232 <__register_exitproc+0x3a>
   b9250:	f44f 7084 	mov.w	r0, #264	; 0x108
   b9254:	f7fd f8c4 	bl	b63e0 <malloc>
   b9258:	2800      	cmp	r0, #0
   b925a:	d0f4      	beq.n	b9246 <__register_exitproc+0x4e>
   b925c:	2300      	movs	r3, #0
   b925e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b9262:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b9266:	6863      	ldr	r3, [r4, #4]
   b9268:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b926c:	2201      	movs	r2, #1
   b926e:	409a      	lsls	r2, r3
   b9270:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b9274:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b9278:	4313      	orrs	r3, r2
   b927a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b927e:	2e02      	cmp	r6, #2
   b9280:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b9284:	bf02      	ittt	eq
   b9286:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b928a:	4313      	orreq	r3, r2
   b928c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b9290:	6863      	ldr	r3, [r4, #4]
   b9292:	f8d8 0000 	ldr.w	r0, [r8]
   b9296:	1c5a      	adds	r2, r3, #1
   b9298:	3302      	adds	r3, #2
   b929a:	6062      	str	r2, [r4, #4]
   b929c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b92a0:	f000 f80e 	bl	b92c0 <__retarget_lock_release_recursive>
   b92a4:	2000      	movs	r0, #0
   b92a6:	e7c6      	b.n	b9236 <__register_exitproc+0x3e>
   b92a8:	2003e7e8 	.word	0x2003e7e8
   b92ac:	2003e75c 	.word	0x2003e75c
   b92b0:	00000000 	.word	0x00000000
   b92b4:	000b63e1 	.word	0x000b63e1
   b92b8:	2003dedc 	.word	0x2003dedc

000b92bc <__retarget_lock_acquire_recursive>:
   b92bc:	4770      	bx	lr

000b92be <__retarget_lock_release>:
   b92be:	4770      	bx	lr

000b92c0 <__retarget_lock_release_recursive>:
   b92c0:	4770      	bx	lr

000b92c2 <link_code_end>:
	...

000b92c4 <dynalib_user>:
   b92c4:	4885 000b 48c1 000b 48e9 000b 48ed 000b     .H...H...H...H..
   b92d4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b92e4:	7620 7269 7574 6c61 5400 5449 454c 5300      virtual.TITLE.S
   b92f4:	6174 7472 0020 6954 656d 4500 646e 2020     tart .Time.End  
   b9304:	0020 4142 5454 5245 2059 0025 6954 656d      .BATTERY %.Time
   b9314:	5a20 6e6f 0065 4e49 5453 5552 5443 524f      Zone.INSTRUCTOR
   b9324:	003a 7453 7261 6873 7069 4920 5446 2033     :.Starship IFT3 
   b9334:	202d 5700 6168 2074 6f74 6520 7078 6365     - .What to expec
   b9344:	2074 6600 6f72 206d 6874 2065 656e 7478     t .from the next
   b9354:	0020 6c66 6769 7468 7420 7365 0074 6f68      .flight test.ho
   b9364:	6b6f 722d 7365 6f70 736e 2f65 6567 5f74     ok-response/get_
   b9374:	6164 6174 4200 7a75 657a 2072 666f 0066     data.Buzzer off.
   b9384:	6e49 7469 6169 696c 697a 676e 6520 502d     Initializing e-P
   b9394:	7061 7265 6420 7369 6c70 7961 4600 6961     aper display.Fai
   b93a4:	656c 2064 6f74 6920 696e 6974 6c61 7a69     led to initializ
   b93b4:	2065 6964 7073 616c 0079 6e49 7469 6169     e display.Initia
   b93c4:	696c 697a 676e 5020 354e 3233 5700 6961     lizing PN532.Wai
   b93d4:	6974 676e 6620 726f 6120 6320 7261 2e64     ting for a card.
   b93e4:	2e2e 2e2e 002e 6143 6c6c 6e69 2067 6e45     ......Calling En
   b93f4:	2064 6f50 6e69 2074 7566 636e 6974 6e6f     d Point function
   b9404:	2e2e 002e 4649 5320 6174 6574 656d 746e     ....IF Statement
   b9414:	6520 6578 7563 6974 676e 5500 6470 7461      executing.Updat
   b9424:	6e69 2067 2d45 6150 6570 2072 6944 7073     ing E-Paper Disp
   b9434:	616c 0d79 200a 2000 4d41 2000 4d50 7c00     lay.. . AM. PM.|
   b9444:	4c00 4f44 4420 7369 6f63 6e6e 6365 6574     .LDO Disconnecte
   b9454:	0064 0000                                   d...

000b9458 <_ZTVN5spark10LogHandlerE>:
	...
   b9468:	4909 000b 4931 000b                         .I..1I..

000b9470 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9478:	4d45 000b 4d79 000b 7df5 000b 7f99 000b     EM..yM...}......
   b9488:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   b9498:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   b94a8:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   b94b8:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   b94c8:	7525 003e                                   %u>.

000b94cc <_ZTVN8particle11SPISettingsE>:
	...
   b94d4:	57e9 000b 57bb 000b 57bd 000b               .W...W...W..

000b94e0 <_ZL12Font16_Table>:
	...
   b9500:	0000 000c 000c 000c 000c 000c 000c 000c     ................
   b9510:	000c 0000 000c 0000 0000 0000 0000 0000     ................
   b9520:	0000 0000 c01d c01d 8008 8008 8008 0000     ................
	...
   b9540:	0000 800d 800d 800d 800d c03f 001b c03f     ..........?...?.
   b9550:	001b 001b 001b 001b 0000 0000 0000 0000     ................
   b9560:	0004 801f 8031 8031 0038 001e 000f 8003     ....1.1.8.......
   b9570:	8031 8031 003f 0004 0004 0000 0000 0000     1.1.?...........
   b9580:	0000 0018 0024 0024 c018 8007 001e 8031     ....$.$.......1.
   b9590:	4002 4002 8001 0000 0000 0000 0000 0000     .@.@............
   b95a0:	0000 0000 000f 0018 0018 0018 000c 801d     ................
   b95b0:	0037 0033 801d 0000 0000 0000 0000 0000     7.3.............
   b95c0:	0000 0000 0007 0007 0002 0002 0002 0000     ................
	...
   b95e0:	0000 0003 0003 0006 000e 000c 000c 000c     ................
   b95f0:	000c 000e 0006 0003 0003 0000 0000 0000     ................
   b9600:	0000 0018 0018 000c 0006 0006 0006 0006     ................
   b9610:	0006 0006 000c 001c 0018 0000 0000 0000     ................
   b9620:	0000 0006 0006 c03f c03f 000f 801f 8019     ......?.?.......
	...
   b9644:	0000 0004 0004 0004 803f 0004 0004 0004     ........?.......
	...
   b9670:	0000 0006 0004 000c 0008 0008 0000 0000     ................
	...
   b968c:	803f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   b96b0:	0000 000c 000c 0000 0000 0000 0000 0000     ................
   b96c0:	c000 c000 8001 8001 0003 0003 0006 000c     ................
   b96d0:	000c 0018 0018 0030 0030 0000 0000 0000     ......0.0.......
   b96e0:	0000 000e 001b 8031 8031 8031 8031 8031     ......1.1.1.1.1.
   b96f0:	8031 001b 000e 0000 0000 0000 0000 0000     1...............
   b9700:	0000 0006 003e 0006 0006 0006 0006 0006     ....>...........
   b9710:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
   b9720:	0000 000f 8019 8031 8031 0003 0006 000c     ......1.1.......
   b9730:	0018 0030 803f 0000 0000 0000 0000 0000     ..0.?...........
   b9740:	0000 003f 8061 8001 0003 001f 8003 8001     ..?.a...........
   b9750:	8001 8061 003f 0000 0000 0000 0000 0000     ..a.?...........
   b9760:	0000 0007 0007 000f 000b 001b 0013 0033     ..............3.
   b9770:	803f 0003 800f 0000 0000 0000 0000 0000     ?...............
   b9780:	0000 801f 0018 0018 0018 001f 8011 8001     ................
   b9790:	8001 8021 001f 0000 0000 0000 0000 0000     ..!.............
   b97a0:	0000 8007 001c 0018 0030 0037 8039 8031     ........0.7.9.1.
   b97b0:	8031 8019 000f 0000 0000 0000 0000 0000     1...............
   b97c0:	0000 007f 0043 0003 0006 0006 0006 0006     ....C...........
   b97d0:	000c 000c 000c 0000 0000 0000 0000 0000     ................
   b97e0:	0000 001f 8031 8031 8031 001f 8031 8031     ....1.1.1...1.1.
   b97f0:	8031 8031 001f 0000 0000 0000 0000 0000     1.1.............
   b9800:	0000 001e 0033 8031 8031 8033 801d 8001     ....3.1.1.3.....
   b9810:	0003 0007 003c 0000 0000 0000 0000 0000     ....<...........
	...
   b9828:	000c 000c 0000 0000 0000 000c 000c 0000     ................
	...
   b9848:	0003 0003 0000 0000 0000 0006 0004 0008     ................
   b9858:	0008 0000 0000 0000 0000 0000 c000 0003     ................
   b9868:	0004 0018 0060 0018 0004 0003 c000 0000     ....`...........
	...
   b9888:	0000 c07f 0000 c07f 0000 0000 0000 0000     ................
	...
   b98a4:	0060 0018 0004 0003 c000 0003 0004 0018     `...............
   b98b4:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
   b98c4:	001f 8031 8031 8001 0007 000c 000c 0000     ..1.1...........
   b98d4:	000c 0000 0000 0000 0000 0000 0000 000e     ................
   b98e4:	0011 0021 0021 0027 0029 0029 0027 0020     ..!.!.'.).).'. .
   b98f4:	0011 000e 0000 0000 0000 0000 0000 0000     ................
   b9904:	003f 000f 0009 8019 8019 801f c030 c030     ?...........0.0.
   b9914:	e079 0000 0000 0000 0000 0000 0000 0000     y...............
   b9924:	007f 8031 8031 8031 003f 8031 8031 8031     ..1.1.1.?.1.1.1.
   b9934:	007f 0000 0000 0000 0000 0000 0000 0000     ................
   b9944:	401f c030 4060 0060 0060 0060 4060 8030     .@0.`@`.`.`.`@0.
   b9954:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b9964:	007f 8031 c030 c030 c030 c030 c030 8031     ..1.0.0.0.0.0.1.
   b9974:	007f 0000 0000 0000 0000 0000 0000 0000     ................
   b9984:	807f 8030 8030 0032 003e 0032 8030 8030     ..0.0.2.>.2.0.0.
   b9994:	807f 0000 0000 0000 0000 0000 0000 0000     ................
   b99a4:	c07f 4030 4030 0032 003e 0032 0030 0030     ..0@0@2.>.2.0.0.
   b99b4:	007c 0000 0000 0000 0000 0000 0000 0000     |...............
   b99c4:	801e 8031 8060 0060 0060 c067 8061 8031     ..1.`.`.`.g.a.1.
   b99d4:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b99e4:	c07b 8031 8031 8031 803f 8031 8031 8031     {.1.1.1.?.1.1.1.
   b99f4:	c07b 0000 0000 0000 0000 0000 0000 0000     {...............
   b9a04:	c03f 0006 0006 0006 0006 0006 0006 0006     ?...............
   b9a14:	c03f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b9a24:	c01f 0003 0003 0003 0003 0063 0063 0063     ..........c.c.c.
   b9a34:	003e 0000 0000 0000 0000 0000 0000 0000     >...............
   b9a44:	c07b 8031 0033 0036 003c 003e 0033 8031     {.1.3.6.<.>.3.1.
   b9a54:	c079 0000 0000 0000 0000 0000 0000 0000     y...............
   b9a64:	007e 0018 0018 0018 0018 4018 4018 4018     ~..........@.@.@
   b9a74:	c07f 0000 0000 0000 0000 0000 0000 0000     ................
   b9a84:	e0e0 c060 c071 c07b c06a c06e c064 c060     ..`.q.{.j.n.d.`.
   b9a94:	e0fb 0000 0000 0000 0000 0000 0000 0000     ................
   b9aa4:	c073 8031 8039 803d 8035 8037 8033 8031     s.1.9.=.5.7.3.1.
   b9ab4:	8079 0000 0000 0000 0000 0000 0000 0000     y...............
   b9ac4:	001f 8031 c060 c060 c060 c060 c060 8031     ..1.`.`.`.`.`.1.
   b9ad4:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b9ae4:	007f 8031 8031 8031 8031 003f 0030 0030     ..1.1.1.1.?.0.0.
   b9af4:	007e 0000 0000 0000 0000 0000 0000 0000     ~...............
   b9b04:	001f 8031 c060 c060 c060 c060 c060 8031     ..1.`.`.`.`.`.1.
   b9b14:	001f c00c 801f 0000 0000 0000 0000 0000     ................
   b9b24:	007f 8031 8031 8031 003e 0033 8031 8031     ..1.1.1.>.3.1.1.
   b9b34:	e07c 0000 0000 0000 0000 0000 0000 0000     |...............
   b9b44:	801f 8031 8031 0038 001f 8003 8031 8031     ..1.1.8.....1.1.
   b9b54:	003f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b9b64:	807f 804c 804c 804c 000c 000c 000c 000c     ..L.L.L.........
   b9b74:	003f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b9b84:	c07b 8031 8031 8031 8031 8031 8031 8031     {.1.1.1.1.1.1.1.
   b9b94:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b9ba4:	c07b 8031 8031 001b 001b 001b 000a 000e     {.1.1...........
   b9bb4:	000e 0000 0000 0000 0000 0000 0000 0000     ................
   b9bc4:	e0fb c060 c064 c06e c06e 802a 803b 803b     ..`.d.n.n.*.;.;.
   b9bd4:	8031 0000 0000 0000 0000 0000 0000 0000     1...............
   b9be4:	c07b 8031 001b 000e 000e 000e 001b 8031     {.1...........1.
   b9bf4:	c07b 0000 0000 0000 0000 0000 0000 0000     {...............
   b9c04:	e079 c030 8019 000f 0006 0006 0006 0006     y.0.............
   b9c14:	801f 0000 0000 0000 0000 0000 0000 0000     ................
   b9c24:	803f 8021 0023 0006 0004 000c 8018 8030     ?.!.#.........0.
   b9c34:	803f 0000 0000 0000 0000 0000 0000 8007     ?...............
   b9c44:	0006 0006 0006 0006 0006 0006 0006 0006     ................
   b9c54:	0006 0006 8007 0000 0000 0000 0030 0030     ............0.0.
   b9c64:	0018 0018 000c 000c 0006 0003 0003 8001     ................
   b9c74:	8001 c000 c000 0000 0000 0000 0000 001e     ................
   b9c84:	0006 0006 0006 0006 0006 0006 0006 0006     ................
   b9c94:	0006 0006 001e 0000 0000 0000 0004 000a     ................
   b9ca4:	000a 0011 8020 8020 0000 0000 0000 0000     .... . .........
	...
   b9cdc:	0000 e0ff 0008 0004 0002 0000 0000 0000     ................
	...
   b9d08:	001f 8001 8001 801f 8031 8033 c01d 0000     ........1.3.....
	...
   b9d20:	0000 0070 0030 0030 0037 8039 c030 c030     ..p.0.0.7.9.0.0.
   b9d30:	c030 8039 0077 0000 0000 0000 0000 0000     0.9.w...........
	...
   b9d48:	801e 8031 8060 0060 8060 8031 001f 0000     ..1.`.`.`.1.....
	...
   b9d60:	0000 8003 8001 8001 801d 8033 8061 8061     ..........3.a.a.
   b9d70:	8061 8033 c01d 0000 0000 0000 0000 0000     a.3.............
	...
   b9d88:	001f 8031 c060 c07f 0060 c030 801f 0000     ..1.`...`.0.....
	...
   b9da0:	0000 e007 000c 000c 803f 000c 000c 000c     ........?.......
   b9db0:	000c 000c 803f 0000 0000 0000 0000 0000     ....?...........
	...
   b9dc8:	c01d 8033 8061 8061 8061 8033 801d 8001     ..3.a.a.a.3.....
   b9dd8:	8001 001f 0000 0000 0000 0070 0030 0030     ..........p.0.0.
   b9de8:	0037 8039 8031 8031 8031 8031 c07b 0000     7.9.1.1.1.1.{...
	...
   b9e00:	0000 0006 0006 0000 001e 0006 0006 0006     ................
   b9e10:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
   b9e20:	0000 0006 0006 0000 003f 0003 0003 0003     ........?.......
   b9e30:	0003 0003 0003 0003 0003 003e 0000 0000     ..........>.....
   b9e40:	0000 0070 0030 0030 8037 0036 003c 003c     ..p.0.0.7.6.<.<.
   b9e50:	0036 0033 c077 0000 0000 0000 0000 0000     6.3.w...........
   b9e60:	0000 001e 0006 0006 0006 0006 0006 0006     ................
   b9e70:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
	...
   b9e88:	807f c036 c036 c036 c036 c036 e076 0000     ..6.6.6.6.6.v...
	...
   b9ea8:	0077 8039 8031 8031 8031 8031 c07b 0000     w.9.1.1.1.1.{...
	...
   b9ec8:	001f 8031 c060 c060 c060 8031 001f 0000     ..1.`.`.`.1.....
	...
   b9ee8:	0077 8039 c030 c030 c030 8039 0037 0030     w.9.0.0.0.9.7.0.
   b9ef8:	0030 007c 0000 0000 0000 0000 0000 0000     0.|.............
   b9f08:	c01d 8033 8061 8061 8061 8033 801d 8001     ..3.a.a.a.3.....
   b9f18:	8001 c007 0000 0000 0000 0000 0000 0000     ................
   b9f28:	807b c01c 0018 0018 0018 0018 007f 0000     {...............
	...
   b9f48:	801f 8031 003c 001f 8003 8031 003f 0000     ..1.<.....1.?...
	...
   b9f60:	0000 0018 0018 0018 007f 0018 0018 0018     ................
   b9f70:	0018 8018 000f 0000 0000 0000 0000 0000     ................
	...
   b9f88:	8073 8031 8031 8031 8031 8033 c01d 0000     s.1.1.1.1.3.....
	...
   b9fa8:	c07b 8031 8031 001b 001b 000e 000e 0000     {.1.1...........
	...
   b9fc8:	e0f1 c060 c064 c06e 803b 803b 8031 0000     ..`.d.n.;.;.1...
	...
   b9fe8:	c07b 001b 000e 000e 000e 001b c07b 0000     {...........{...
	...
   ba008:	e079 c030 8019 8019 000b 000f 0006 0006     y.0.............
   ba018:	000c 003e 0000 0000 0000 0000 0000 0000     ..>.............
   ba028:	803f 8021 0003 000e 0018 8030 803f 0000     ?.!.......0.?...
	...
   ba040:	0000 0006 000c 000c 000c 000c 000c 0018     ................
   ba050:	000c 000c 000c 000c 0006 0000 0000 0000     ................
   ba060:	0000 0006 0006 0006 0006 0006 0006 0006     ................
   ba070:	0006 0006 0006 0006 0006 0000 0000 0000     ................
   ba080:	0000 000c 0006 0006 0006 0006 0006 0003     ................
   ba090:	0006 0006 0006 0006 000c 0000 0000 0000     ................
	...
   ba0a8:	0000 0018 8024 0003 0000 0000 0000 0000     ....$...........
	...

000ba0c0 <_ZL12Font20_Table>:
	...
   ba0e8:	0000 0007 0007 0007 0007 0007 0007 0007     ................
   ba0f8:	0002 0002 0000 0000 0007 0007 0000 0000     ................
	...
   ba114:	e01c e01c e01c 4008 4008 4008 0000 0000     .......@.@.@....
	...
   ba138:	c00c c00c c00c c00c c00c f03f f03f c00c     ..........?.?...
   ba148:	c00c f03f f03f c00c c00c c00c c00c c00c     ..?.?...........
	...
   ba160:	0003 0003 e007 e00f 6018 0018 001f c00f     .........`......
   ba170:	e000 6018 6018 c01f 801f 0003 0003 0003     ...`.`..........
	...
   ba188:	0000 001c 0022 0022 0022 601c e001 800f     ...."."."..`....
   ba198:	003c c031 2002 2002 2002 c001 0000 0000     <.1.. . . ......
	...
   ba1b4:	0000 e003 e00f 000c 000c 0006 300f f01f     .............0..
   ba1c4:	e019 c018 f01f b007 0000 0000 0000 0000     ................
	...
   ba1dc:	8003 8003 8003 0001 0001 0001 0000 0000     ................
	...
   ba200:	0000 c000 c000 8001 8001 8001 0003 0003     ................
   ba210:	0003 0003 0003 0003 8001 8001 8001 c000     ................
   ba220:	c000 0000 0000 0000 0000 000c 000c 0006     ................
   ba230:	0006 0006 0003 0003 0003 0003 0003 0003     ................
   ba240:	0006 0006 0006 000c 000c 0000 0000 0000     ................
   ba250:	0000 0003 0003 0003 601b e01f 8007 8007     .........`......
   ba260:	c00f c00c 0000 0000 0000 0000 0000 0000     ................
	...
   ba27c:	0000 0003 0003 0003 0003 f03f f03f 0003     ..........?.?...
   ba28c:	0003 0003 0003 0000 0000 0000 0000 0000     ................
	...
   ba2b4:	0000 8003 0003 0003 0006 0006 0004 0000     ................
	...
   ba2d4:	0000 e03f e03f 0000 0000 0000 0000 0000     ..?.?...........
	...
   ba304:	0000 8003 8003 8003 0000 0000 0000 0000     ................
   ba314:	0000 0000 6000 6000 c000 c000 c000 8001     .....`.`........
   ba324:	8001 0003 0003 0006 0006 000c 000c 000c     ................
   ba334:	0018 0018 0000 0000 0000 0000 0000 800f     ................
   ba344:	c01f c018 6030 6030 6030 6030 6030 6030     ....0`0`0`0`0`0`
   ba354:	6030 c018 c01f 800f 0000 0000 0000 0000     0`..............
   ba364:	0000 0000 0000 0003 001f 001f 0003 0003     ................
   ba374:	0003 0003 0003 0003 0003 0003 e01f e01f     ................
	...
   ba390:	0000 800f c01f e038 6030 6000 c000 8001     ......8.0`.`....
   ba3a0:	0003 0006 000c 0018 e03f e03f 0000 0000     ........?.?.....
	...
   ba3b8:	0000 800f c03f e030 6000 e000 c007 c007     ....?.0..`......
   ba3c8:	e000 6000 6000 e060 c07f 803f 0000 0000     ...`.``...?.....
	...
   ba3e0:	0000 c001 c003 c003 c006 c00c c00c c018     ................
   ba3f0:	c030 e03f e03f c000 e003 e003 0000 0000     0.?.?...........
	...
   ba408:	0000 c01f c01f 0018 0018 801f c01f e018     ................
   ba418:	6000 6000 6000 e030 c03f 801f 0000 0000     .`.`.`0.?.......
	...
   ba430:	0000 e003 e00f 001e 0018 0038 8037 c03f     ..........8.7.?.
   ba440:	e038 6030 6030 e018 c01f 8007 0000 0000     8.0`0`..........
	...
   ba458:	0000 e03f e03f 6030 6000 c000 c000 c000     ..?.?.0`.`......
   ba468:	8001 8001 8001 0003 0003 0003 0000 0000     ................
	...
   ba480:	0000 800f c01f e038 6030 e038 c01f c01f     ......8.0`8.....
   ba490:	e038 6030 6030 e038 c01f 800f 0000 0000     8.0`0`8.........
	...
   ba4a8:	0000 000f c01f c038 6030 6030 e038 e01f     ......8.0`0`8...
   ba4b8:	600f e000 c000 c003 803f 003e 0000 0000     .`......?.>.....
	...
   ba4d8:	0000 8003 8003 8003 0000 0000 0000 8003     ................
   ba4e8:	8003 8003 0000 0000 0000 0000 0000 0000     ................
	...
   ba500:	0000 c001 c001 c001 0000 0000 0000 8003     ................
   ba510:	0003 0006 0006 0004 0000 0000 0000 0000     ................
   ba520:	0000 0000 0000 3000 f000 c003 0007 001c     .......0........
   ba530:	0078 001c 0007 c003 f000 3000 0000 0000     x..........0....
	...
   ba550:	0000 f07f f07f 0000 0000 f07f f07f 0000     ................
	...
   ba574:	0000 0030 003c 000f 8003 e000 7800 e000     ..0.<........x..
   ba584:	8003 000f 003c 0030 0000 0000 0000 0000     ....<.0.........
	...
   ba59c:	800f c01f 6018 6018 6000 c001 8003 0003     .....`.`.`......
   ba5ac:	0000 0000 0007 0007 0000 0000 0000 0000     ................
   ba5bc:	0000 0000 0000 8003 800c 4008 4010 4010     ...........@.@.@
   ba5cc:	c011 4012 4012 4012 c011 0010 0008 4008     ...@.@.@.......@
   ba5dc:	8007 0000 0000 0000 0000 0000 0000 0000     ................
   ba5ec:	801f 801f 8003 c006 c006 c00c 600c e01f     .............`..
   ba5fc:	e01f 3030 7878 7878 0000 0000 0000 0000     ..00xxxx........
	...
   ba614:	803f c03f 6018 6018 e018 c01f e01f 7018     ?.?..`.`.......p
   ba624:	3018 3018 f03f e03f 0000 0000 0000 0000     .0.0?.?.........
	...
   ba63c:	b007 f00f 701c 3038 0030 0030 0030 0030     .....p800.0.0.0.
   ba64c:	3038 701c e00f c007 0000 0000 0000 0000     80.p............
	...
   ba664:	807f c07f e030 7030 3030 3030 3030 3030     ....0.0p00000000
   ba674:	7030 e030 c07f 807f 0000 0000 0000 0000     0p0.............
	...
   ba68c:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   ba69c:	3018 3018 f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   ba6b4:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   ba6c4:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   ba6dc:	b007 f01f 7018 3030 0030 0030 f831 f831     .....p000.0.1.1.
   ba6ec:	3030 3018 f01f c007 0000 0000 0000 0000     00.0............
	...
   ba704:	f03c f03c 6018 6018 6018 e01f e01f 6018     <.<..`.`.`.....`
   ba714:	6018 6018 f03c f03c 0000 0000 0000 0000     .`.`<.<.........
	...
   ba72c:	e01f e01f 0003 0003 0003 0003 0003 0003     ................
   ba73c:	0003 0003 e01f e01f 0000 0000 0000 0000     ................
	...
   ba754:	f803 f803 6000 6000 6000 6000 6030 6030     .....`.`.`.`0`0`
   ba764:	6030 e030 c03f 800f 0000 0000 0000 0000     0`0.?...........
	...
   ba77c:	f83e f83e e018 8019 001b 001f 801d c018     >.>.............
   ba78c:	c018 6018 783e 383e 0000 0000 0000 0000     ...`>x>8........
	...
   ba7a4:	003f 003f 000c 000c 000c 000c 000c 300c     ?.?............0
   ba7b4:	300c 300c f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   ba7cc:	7878 7878 7038 f03c b034 b037 b037 3033     xxxx8p<.4.7.7.30
   ba7dc:	3033 3030 f87c f87c 0000 0000 0000 0000     3000|.|.........
	...
   ba7f4:	f039 f03d 601c 601e 601e 601b 601b e019     9.=..`.`.`.`.`..
   ba804:	e019 e018 e03e 603e 0000 0000 0000 0000     ....>.>`........
	...
   ba81c:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   ba82c:	7038 e01c c00f 8007 0000 0000 0000 0000     8p..............
	...
   ba844:	c03f e03f 7018 3018 3018 7018 e01f c01f     ?.?..p.0.0.p....
   ba854:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   ba86c:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   ba87c:	7038 e01c c00f 8007 b007 f00f e00c 0000     8p..............
	...
   ba894:	c03f e03f 7018 3018 7018 e01f c01f e018     ?.?..p.0.p......
   ba8a4:	6018 7018 383e 183e 0000 0000 0000 0000     .`.p>8>.........
	...
   ba8bc:	b00f f01f 7038 3030 0038 801f e007 7000     ....8p008......p
   ba8cc:	3030 7038 e03f c037 0000 0000 0000 0000     008p?.7.........
	...
   ba8e4:	f03f f03f 3033 3033 3033 0003 0003 0003     ?.?.303030......
   ba8f4:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   ba90c:	f03c f03c 6018 6018 6018 6018 6018 6018     <.<..`.`.`.`.`.`
   ba91c:	6018 e01c c00f 8007 0000 0000 0000 0000     .`..............
	...
   ba934:	f078 f078 6030 6030 c018 c018 800d 800d     x.x.0`0`........
   ba944:	800d 0007 0007 0007 0000 0000 0000 0000     ................
	...
   ba95c:	7c7c 7c7c 1830 9833 9833 9833 d836 d016     ||||0.3.3.3.6...
   ba96c:	701c 701c 701c 3018 0000 0000 0000 0000     .p.p.p.0........
	...
   ba984:	f078 f078 6030 c018 800d 0007 0007 800d     x.x.0`..........
   ba994:	c018 6030 f078 f078 0000 0000 0000 0000     ..0`x.x.........
	...
   ba9ac:	f03c f03c 6018 c00c 8007 8007 0003 0003     <.<..`..........
   ba9bc:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   ba9d4:	e01f e01f 6018 c018 8001 0003 0003 0006     .....`..........
   ba9e4:	600c 6018 e01f e01f 0000 0000 0000 0000     .`.`............
   ba9f4:	0000 0000 0000 c003 c003 0003 0003 0003     ................
   baa04:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   baa14:	0003 c003 c003 0000 0000 0000 0018 0018     ................
   baa24:	000c 000c 000c 0006 0006 0003 0003 8001     ................
   baa34:	8001 c000 c000 c000 6000 6000 0000 0000     .........`.`....
   baa44:	0000 0000 0000 000f 000f 0003 0003 0003     ................
   baa54:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   baa64:	0003 000f 000f 0000 0000 0000 0000 0002     ................
   baa74:	0007 800d c018 6030 2020 0000 0000 0000     ......0`  ......
	...
   baabc:	fcff fcff 0000 0004 0003 8000 0000 0000     ................
	...
   baaf0:	0000 c00f e01f 6000 e00f e01f 6038 e030     .......`....8`0.
   bab00:	f03f 701f 0000 0000 0000 0000 0000 0000     ?..p............
   bab10:	0000 0070 0070 0030 0030 8037 e03f 6038     ..p.p.0.0.7.?.8`
   bab20:	3030 3030 3030 6038 e07f 8077 0000 0000     0000008`..w.....
	...
   bab40:	0000 b007 f01f 3018 3030 0030 0030 3038     .......0000.0.80
   bab50:	f01f c00f 0000 0000 0000 0000 0000 0000     ................
   bab60:	0000 7000 7000 3000 3000 b007 f01f 7018     ...p.p.0.0.....p
   bab70:	3030 3030 3030 7038 f81f b807 0000 0000     0000008p........
	...
   bab90:	0000 8007 e01f 6018 f03f f03f 0030 3018     .......`?.?.0..0
   baba0:	f01f c007 0000 0000 0000 0000 0000 0000     ................
   babb0:	0000 f003 f007 0006 0006 e01f e01f 0006     ................
   babc0:	0006 0006 0006 0006 e01f e01f 0000 0000     ................
	...
   babe0:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   babf0:	f01f b007 3000 7000 e00f c00f 0000 0000     .....0.p........
   bac00:	0000 0038 0038 0018 0018 c01b e01f 601c     ..8.8..........`
   bac10:	6018 6018 6018 6018 f03c f03c 0000 0000     .`.`.`.`<.<.....
	...
   bac28:	0000 0003 0003 0000 0000 001f 001f 0003     ................
   bac38:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   bac50:	0000 0003 0003 0000 0000 c01f c01f c000     ................
   bac60:	c000 c000 c000 c000 c000 c000 c000 c001     ................
   bac70:	803f 003f 0000 0000 0000 0038 0038 0018     ?.?.......8.8...
   bac80:	0018 e01b e01b 001b 001e 001e 001b 8019     ................
   bac90:	f039 f039 0000 0000 0000 0000 0000 0000     9.9.............
   baca0:	0000 001f 001f 0003 0003 0003 0003 0003     ................
   bacb0:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   bacd0:	0000 e07e f07f 3033 3033 3033 3033 3033     ..~...3030303030
   bace0:	b87b b87b 0000 0000 0000 0000 0000 0000     {.{.............
	...
   bacf8:	0000 c03b e03f 601c 6018 6018 6018 6018     ..;.?..`.`.`.`.`
   bad08:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   bad20:	0000 8007 e01f 6018 3030 3030 3030 6018     .......`000000.`
   bad30:	e01f 8007 0000 0000 0000 0000 0000 0000     ................
	...
   bad48:	0000 8077 e07f 6038 3030 3030 3030 6038     ..w...8`0000008`
   bad58:	e03f 8037 0030 0030 007c 007c 0000 0000     ?.7.0.0.|.|.....
	...
   bad70:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   bad80:	f01f b007 3000 3000 f800 f800 0000 0000     .....0.0........
	...
   bad98:	0000 e03c f03d 300f 000e 000c 000c 000c     ..<.=..0........
   bada8:	c03f c03f 0000 0000 0000 0000 0000 0000     ?.?.............
	...
   badc0:	0000 e007 e01f 6018 001e c00f e001 6018     .......`.......`
   badd0:	e01f 801f 0000 0000 0000 0000 0000 0000     ................
   bade0:	0000 0000 000c 000c 000c e03f e03f 000c     ..........?.?...
   badf0:	000c 000c 000c 300c f00f c007 0000 0000     .......0........
	...
   bae10:	0000 e038 e038 6018 6018 6018 6018 e018     ..8.8..`.`.`.`..
   bae20:	f01f 700f 0000 0000 0000 0000 0000 0000     ...p............
	...
   bae38:	0000 f078 f078 6030 c018 c018 800d 800d     ..x.x.0`........
   bae48:	0007 0007 0000 0000 0000 0000 0000 0000     ................
	...
   bae60:	0000 f078 f078 6032 6032 e037 c01d c01d     ..x.x.2`2`7.....
   bae70:	c018 c018 0000 0000 0000 0000 0000 0000     ................
	...
   bae88:	0000 f03c f03c c00c 8007 0003 8007 c00c     ..<.<...........
   bae98:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   baeb0:	0000 f078 f078 6030 c018 c018 800d 800f     ..x.x.0`........
   baec0:	0007 0006 0006 000c 007f 007f 0000 0000     ................
	...
   baed8:	0000 e01f e01f c018 8001 0003 0006 600c     ...............`
   baee8:	e01f e01f 0000 0000 0000 0000 0000 0000     ................
   baef8:	0000 c001 c003 0003 0003 0003 0003 0003     ................
   baf08:	0007 000e 0007 0003 0003 0003 0003 c003     ................
   baf18:	c001 0000 0000 0000 0000 0003 0003 0003     ................
   baf28:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   baf38:	0003 0003 0003 0003 0003 0000 0000 0000     ................
   baf48:	0000 001c 001e 0006 0006 0006 0006 0006     ................
   baf58:	0007 8003 0007 0006 0006 0006 0006 001e     ................
   baf68:	001c 0000 0000 0000 0000 0000 0000 0000     ................
   baf78:	0000 0000 000e 303f f033 e001 0000 0000     ......?03.......
	...

000baf98 <_ZL12Font24_Table>:
	...
   bafe4:	0000 8003 0300 0080 8003 0300 0080 8003     ................
   baff4:	0300 0080 8003 0300 0080 8003 0100 0000     ................
   bb004:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
   bb030:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
   bb040:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
   bb074:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
   bb084:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
   bb094:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
   bb0a4:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
   bb0b4:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
   bb0c4:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
   bb0d4:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
   bb0e4:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
   bb104:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
   bb114:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
   bb124:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
   bb154:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
   bb164:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
   bb174:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
   bb198:	0300 0080 8003 0300 0080 0001 0100 0000     ................
   bb1a8:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
   bb1dc:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
   bb1ec:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
   bb1fc:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
   bb20c:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
   bb224:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
   bb234:	0700 0000 8003 0300 0080 8003 0300 0080     ................
   bb244:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
   bb254:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
   bb26c:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
   bb27c:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
   bb2bc:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
   bb2cc:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
   bb2dc:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
   bb320:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
   bb330:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
   bb358:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
   bb3b0:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   bb3d0:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
   bb3e0:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
   bb3f0:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
   bb400:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
   bb41c:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
   bb42c:	1800 0018 1818 1800 0018 1818 1800 0018     ................
   bb43c:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
   bb464:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
   bb474:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb484:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
   bb4ac:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
   bb4bc:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
   bb4cc:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
   bb4f4:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
   bb504:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
   bb514:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
   bb53c:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
   bb54c:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
   bb55c:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
   bb584:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
   bb594:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
   bb5a4:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
   bb5cc:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
   bb5dc:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
   bb5ec:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
   bb614:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
   bb624:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
   bb634:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
   bb65c:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
   bb66c:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
   bb67c:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
   bb6a4:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
   bb6b4:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
   bb6c4:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
   bb6f8:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   bb710:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   bb740:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
   bb758:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
   bb784:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
   bb794:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
   bb7a4:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
   bb7d4:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
   bb7e4:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb814:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
   bb824:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
   bb834:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
   bb858:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
   bb868:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
   bb878:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
   bb89c:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
   bb8ac:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
   bb8bc:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
   bb8cc:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
   bb8e8:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
   bb8f8:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
   bb908:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
   bb930:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   bb940:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
   bb950:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
   bb978:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   bb988:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
   bb998:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
   bb9c0:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
   bb9d0:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
   bb9e0:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
   bba08:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
   bba18:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
   bba28:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
   bba50:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
   bba60:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
   bba70:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   bba98:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   bbaa8:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
   bbab8:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
   bbae0:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   bbaf0:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
   bbb00:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   bbb28:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
   bbb38:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bbb48:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
   bbb70:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
   bbb80:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
   bbb90:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
   bbbb8:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
   bbbc8:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
   bbbd8:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
   bbc00:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
   bbc10:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
   bbc20:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
   bbc48:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
   bbc58:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
   bbc68:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
   bbc90:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
   bbca0:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
   bbcb0:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
   bbcd8:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   bbce8:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   bbcf8:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
   bbd20:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
   bbd30:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
   bbd40:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   bbd68:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   bbd78:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   bbd88:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
   bbd98:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
   bbdb0:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   bbdc0:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
   bbdd0:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
   bbdf8:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
   bbe08:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
   bbe18:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
   bbe40:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
   bbe50:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
   bbe60:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   bbe88:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   bbe98:	1818 1800 0018 1818 1800 0018 1818 1800     ................
   bbea8:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
   bbed0:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
   bbee0:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
   bbef0:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
   bbf18:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
   bbf28:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
   bbf38:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
   bbf60:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
   bbf70:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
   bbf80:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
   bbfa8:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
   bbfb8:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
   bbfc8:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   bbff0:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
   bc000:	c018 0100 0080 0003 0600 0018 180c 1800     ................
   bc010:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
   bc034:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
   bc044:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bc054:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bc064:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
   bc074:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
   bc084:	000e 0600 0000 0006 0300 0000 0003 0100     ................
   bc094:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
   bc0a4:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
   bc0c4:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
   bc0d4:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bc0e4:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bc0f4:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
   bc10c:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
   bc11c:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
   bc190:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
   bc1a0:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
   bc1f0:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
   bc200:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
   bc210:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc22c:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
   bc23c:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
   bc24c:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
   bc280:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
   bc290:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
   bc2a0:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc2bc:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
   bc2cc:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
   bc2dc:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
   bc310:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
   bc320:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
   bc330:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc34c:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
   bc35c:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
   bc36c:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
   bc3a0:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   bc3b0:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   bc3c0:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
   bc3d0:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
   bc3e0:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
   bc3f0:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
   bc400:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   bc424:	0000 8001 0100 0080 0000 0000 0000 801f     ................
   bc434:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
   bc444:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   bc46c:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
   bc47c:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
   bc48c:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
   bc49c:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
   bc4b4:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
   bc4c4:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
   bc4d4:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
   bc4fc:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
   bc50c:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bc51c:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   bc550:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
   bc560:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
   bc570:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc598:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
   bc5a8:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
   bc5b8:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
   bc5e0:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
   bc5f0:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
   bc600:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc628:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
   bc638:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
   bc648:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
   bc670:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   bc680:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   bc690:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
   bc6a0:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc6b8:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
   bc6c8:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
   bc6d8:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   bc700:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
   bc710:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
   bc720:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc73c:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
   bc74c:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
   bc75c:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
   bc790:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
   bc7a0:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
   bc7b0:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc7d8:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
   bc7e8:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
   bc7f8:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc820:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
   bc830:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
   bc840:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
   bc868:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
   bc878:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
   bc888:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
   bc8b0:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
   bc8c0:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
   bc8d0:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
   bc8e0:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc8f8:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
   bc908:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
   bc918:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bc934:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
   bc944:	0100 0080 8001 0100 0080 8003 0700 0000     ................
   bc954:	8003 0100 0080 8001 0100 0080 8001 0100     ................
   bc964:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
   bc97c:	0000 8001 0100 0080 8001 0100 0080 8001     ................
   bc98c:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bc99c:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bc9ac:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
   bc9c4:	0000 0007 0700 0080 8001 0100 0080 8001     ................
   bc9d4:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
   bc9e4:	c001 0100 0080 8001 0100 0080 8001 0100     ................
   bc9f4:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
   bca20:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...

000bca50 <_ZTV17DFRobot_PN532_IIC>:
	...
   bca58:	5be5 000b 5cd3 000b                         .[...\..

000bca60 <_ZTVN5spark13CellularClassE>:
	...
   bca68:	65cb 000b 65c1 000b 65b7 000b 656d 000b     .e...e...e..me..
   bca78:	65ab 000b 659f 000b 8185 000b 818d 000b     .e...e..........
   bca88:	6593 000b 658b 000b 6581 000b 6577 000b     .e...e...e..we..
   bca98:	81bd 000b                                   ....

000bca9c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bcaa4:	6605 000b 660b 000b 6649 000b 6619 000b     .f...f..If...f..
   bcab4:	6607 000b                                   .f..

000bcab8 <_ZTVN5spark13EthernetClassE>:
	...
   bcac0:	6bff 000b 6bf5 000b 6beb 000b 6be1 000b     .k...k...k...k..
   bcad0:	6bd5 000b 6bc9 000b 8185 000b 818d 000b     .k...k..........
   bcae0:	6bbd 000b 6bb5 000b 6bab 000b 6ba1 000b     .k...k...k...k..
   bcaf0:	81bd 000b                                   ....

000bcaf4 <_ZTV7TwoWire>:
	...
   bcafc:	6c1d 000b 6c67 000b 6c3f 000b 6c1f 000b     .l..gl..?l...l..
   bcb0c:	6c47 000b 6c4f 000b 6c57 000b 6c5f 000b     Gl..Ol..Wl.._l..

000bcb1c <_ZTV9IPAddress>:
	...
   bcb24:	6d41 000b 6d31 000b 6d33 000b 6425 2500     Am..1m..3m..%d.%
   bcb34:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   bcb44:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   bcb54:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   bcb64:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   bcb74:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   bcb84:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   bcb94:	0a0d 6d00 6c00 006e 6e66 6300 646f 0065     ...m.ln.fn.code.
   bcba4:	6564 6174 6c69 0000                         detail..

000bcbac <_ZTVN5spark16JSONStreamWriterE>:
	...
   bcbb4:	71ed 000b 7213 000b 71d1 000b 6e4f 000b     .q...r...q..On..

000bcbc4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bcbcc:	769d 000b 76b5 000b 7df5 000b 7f99 000b     .v...v...}......

000bcbdc <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bcbe4:	76c9 000b 76dd 000b 7fd1 000b 71d9 000b     .v...v.......q..

000bcbf4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bcbfc:	71eb 000b 7221 000b 7d59 000b 71db 000b     .q..!r..Y}...q..

000bcc0c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bcc14:	71e9 000b 722f 000b 7605 000b 7251 000b     .q../r...v..Qr..

000bcc24 <_ZTVN5spark12NetworkClassE>:
	...
   bcc2c:	8145 000b 814f 000b 8159 000b 8163 000b     E...O...Y...c...
   bcc3c:	816d 000b 8179 000b 8185 000b 818d 000b     m...y...........
   bcc4c:	8195 000b 81a1 000b 81a9 000b 81b3 000b     ................
   bcc5c:	81bd 000b                                   ....

000bcc60 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bcc60:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   bcc70:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   bcc80:	6d69 0065                                   ime.

000bcc84 <_ZTV11USARTSerial>:
	...
   bcc8c:	88e1 000b 894d 000b 8925 000b 82a9 000b     ....M...%.......
   bcc9c:	88f5 000b 8911 000b 8903 000b 891f 000b     ................
   bccac:	88e3 000b 88e7 000b                         ........

000bccb4 <_ZTV9USBSerial>:
	...
   bccbc:	899f 000b 8a07 000b 89dd 000b 82a9 000b     ................
   bcccc:	89cf 000b 89a1 000b 89b1 000b 8a01 000b     ................
   bccdc:	89c1 000b 8999 000b                         ........

000bcce4 <_ZSt7nothrow>:
   bcce4:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bccf4:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   bcd04:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bcd14:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bcd24:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   bcd34:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bcd44:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bcd54:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   bcd64:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   bcd74:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   bcd84:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   bcd94:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   bcda4:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000bcdb0 <_ctype_>:
   bcdb0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bcdc0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bcdd0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bcde0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bcdf0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bce00:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bce10:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bce20:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bce30:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bceb1 <link_const_data_end>:
   bceb1:	00          	.byte	0x00
	...

000bceb4 <link_constructors_location>:
   bceb4:	000b52f9 	.word	0x000b52f9
   bceb8:	000b655d 	.word	0x000b655d
   bcebc:	000b65d5 	.word	0x000b65d5
   bcec0:	000b6c09 	.word	0x000b6c09
   bcec4:	000b7de5 	.word	0x000b7de5
   bcec8:	000b8295 	.word	0x000b8295
   bcecc:	000b83d1 	.word	0x000b83d1
   bced0:	000b8721 	.word	0x000b8721
   bced4:	000b88cd 	.word	0x000b88cd
