
/Users/friedlbasson/Desktop/VSC/BL_RFID3/target/5.5.0/b5som/BL_RFID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007f68  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbf84  000bbf84  0000bf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000098  2003de20  000bbfa8  0000de20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000938  2003deb8  2003deb8  0001deb8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc040  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc044  000bc044  0001c044  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc04a  000bc04a  0001c04a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc06e  000bc06e  0001c06e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016a553  00000000  00000000  0001c072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017400  00000000  00000000  001865c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000425b6  00000000  00000000  0019d9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003130  00000000  00000000  001dff7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bbd0  00000000  00000000  001e30ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fa85  00000000  00000000  001eec7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004e7f2  00000000  00000000  0022e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014942e  00000000  00000000  0027cef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008ed8  00000000  00000000  003c6320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__aeabi_d2uiz>:
   b47b8:	004a      	lsls	r2, r1, #1
   b47ba:	d211      	bcs.n	b47e0 <__aeabi_d2uiz+0x28>
   b47bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b47c0:	d211      	bcs.n	b47e6 <__aeabi_d2uiz+0x2e>
   b47c2:	d50d      	bpl.n	b47e0 <__aeabi_d2uiz+0x28>
   b47c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b47c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b47cc:	d40e      	bmi.n	b47ec <__aeabi_d2uiz+0x34>
   b47ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b47d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b47d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b47da:	fa23 f002 	lsr.w	r0, r3, r2
   b47de:	4770      	bx	lr
   b47e0:	f04f 0000 	mov.w	r0, #0
   b47e4:	4770      	bx	lr
   b47e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b47ea:	d102      	bne.n	b47f2 <__aeabi_d2uiz+0x3a>
   b47ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b47f0:	4770      	bx	lr
   b47f2:	f04f 0000 	mov.w	r0, #0
   b47f6:	4770      	bx	lr

000b47f8 <__aeabi_f2lz>:
   b47f8:	ee07 0a90 	vmov	s15, r0
   b47fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4804:	d401      	bmi.n	b480a <__aeabi_f2lz+0x12>
   b4806:	f000 b80b 	b.w	b4820 <__aeabi_f2ulz>
   b480a:	eef1 7a67 	vneg.f32	s15, s15
   b480e:	b508      	push	{r3, lr}
   b4810:	ee17 0a90 	vmov	r0, s15
   b4814:	f000 f804 	bl	b4820 <__aeabi_f2ulz>
   b4818:	4240      	negs	r0, r0
   b481a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b481e:	bd08      	pop	{r3, pc}

000b4820 <__aeabi_f2ulz>:
   b4820:	b5d0      	push	{r4, r6, r7, lr}
   b4822:	f7ff fd5f 	bl	b42e4 <__aeabi_f2d>
   b4826:	4b0c      	ldr	r3, [pc, #48]	; (b4858 <__aeabi_f2ulz+0x38>)
   b4828:	2200      	movs	r2, #0
   b482a:	4606      	mov	r6, r0
   b482c:	460f      	mov	r7, r1
   b482e:	f7ff fdb1 	bl	b4394 <__aeabi_dmul>
   b4832:	f7ff ffc1 	bl	b47b8 <__aeabi_d2uiz>
   b4836:	4604      	mov	r4, r0
   b4838:	f7ff fd32 	bl	b42a0 <__aeabi_ui2d>
   b483c:	4b07      	ldr	r3, [pc, #28]	; (b485c <__aeabi_f2ulz+0x3c>)
   b483e:	2200      	movs	r2, #0
   b4840:	f7ff fda8 	bl	b4394 <__aeabi_dmul>
   b4844:	4602      	mov	r2, r0
   b4846:	460b      	mov	r3, r1
   b4848:	4630      	mov	r0, r6
   b484a:	4639      	mov	r1, r7
   b484c:	f7ff fbea 	bl	b4024 <__aeabi_dsub>
   b4850:	f7ff ffb2 	bl	b47b8 <__aeabi_d2uiz>
   b4854:	4621      	mov	r1, r4
   b4856:	bdd0      	pop	{r4, r6, r7, pc}
   b4858:	3df00000 	.word	0x3df00000
   b485c:	41f00000 	.word	0x41f00000

000b4860 <strcmp>:
   b4860:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4864:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4868:	2a01      	cmp	r2, #1
   b486a:	bf28      	it	cs
   b486c:	429a      	cmpcs	r2, r3
   b486e:	d0f7      	beq.n	b4860 <strcmp>
   b4870:	1ad0      	subs	r0, r2, r3
   b4872:	4770      	bx	lr

000b4874 <strlen>:
   b4874:	4603      	mov	r3, r0
   b4876:	f813 2b01 	ldrb.w	r2, [r3], #1
   b487a:	2a00      	cmp	r2, #0
   b487c:	d1fb      	bne.n	b4876 <strlen+0x2>
   b487e:	1a18      	subs	r0, r3, r0
   b4880:	3801      	subs	r0, #1
   b4882:	4770      	bx	lr

000b4884 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4884:	4809      	ldr	r0, [pc, #36]	; (b48ac <module_user_pre_init+0x28>)
   b4886:	490a      	ldr	r1, [pc, #40]	; (b48b0 <module_user_pre_init+0x2c>)
   b4888:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b488a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b488c:	d005      	beq.n	b489a <module_user_pre_init+0x16>
   b488e:	4a09      	ldr	r2, [pc, #36]	; (b48b4 <module_user_pre_init+0x30>)
   b4890:	4282      	cmp	r2, r0
   b4892:	d002      	beq.n	b489a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4894:	1a12      	subs	r2, r2, r0
   b4896:	f003 fb8c 	bl	b7fb2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b489a:	4807      	ldr	r0, [pc, #28]	; (b48b8 <module_user_pre_init+0x34>)
   b489c:	4a07      	ldr	r2, [pc, #28]	; (b48bc <module_user_pre_init+0x38>)
   b489e:	2100      	movs	r1, #0
   b48a0:	1a12      	subs	r2, r2, r0
   b48a2:	f003 fb94 	bl	b7fce <memset>
    return &link_global_data_start;
}
   b48a6:	4801      	ldr	r0, [pc, #4]	; (b48ac <module_user_pre_init+0x28>)
   b48a8:	bd08      	pop	{r3, pc}
   b48aa:	bf00      	nop
   b48ac:	2003de20 	.word	0x2003de20
   b48b0:	000bbfa8 	.word	0x000bbfa8
   b48b4:	2003deb8 	.word	0x2003deb8
   b48b8:	2003deb8 	.word	0x2003deb8
   b48bc:	2003e7f0 	.word	0x2003e7f0

000b48c0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48c0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c2:	4e07      	ldr	r6, [pc, #28]	; (b48e0 <module_user_init+0x20>)
   b48c4:	4c07      	ldr	r4, [pc, #28]	; (b48e4 <module_user_init+0x24>)
    module_user_init_hook();
   b48c6:	f003 fa39 	bl	b7d3c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48ca:	1ba4      	subs	r4, r4, r6
   b48cc:	08a4      	lsrs	r4, r4, #2
   b48ce:	2500      	movs	r5, #0
   b48d0:	42ac      	cmp	r4, r5
   b48d2:	d100      	bne.n	b48d6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48d4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48d6:	f856 3b04 	ldr.w	r3, [r6], #4
   b48da:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48dc:	3501      	adds	r5, #1
   b48de:	e7f7      	b.n	b48d0 <module_user_init+0x10>
   b48e0:	000bbf60 	.word	0x000bbf60
   b48e4:	000bbf84 	.word	0x000bbf84

000b48e8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48e8:	f000 bcb2 	b.w	b5250 <setup>

000b48ec <module_user_loop>:
}

void module_user_loop() {
   b48ec:	b508      	push	{r3, lr}
    loop();
   b48ee:	f000 fe25 	bl	b553c <loop>
    _post_loop();
}
   b48f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48f6:	f003 b9d9 	b.w	b7cac <_post_loop>

000b48fa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b48fa:	f001 bf31 	b.w	b6760 <malloc>

000b48fe <_Znaj>:
   b48fe:	f001 bf2f 	b.w	b6760 <malloc>

000b4902 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4902:	f001 bf35 	b.w	b6770 <free>

000b4906 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4906:	7800      	ldrb	r0, [r0, #0]
   b4908:	fab0 f080 	clz	r0, r0
   b490c:	0940      	lsrs	r0, r0, #5
   b490e:	4770      	bx	lr

000b4910 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4910:	2301      	movs	r3, #1
   b4912:	7003      	strb	r3, [r0, #0]
   b4914:	4770      	bx	lr

000b4916 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b4916:	2300      	movs	r3, #0
   b4918:	6840      	ldr	r0, [r0, #4]
   b491a:	461a      	mov	r2, r3
   b491c:	4619      	mov	r1, r3
   b491e:	f001 bedf 	b.w	b66e0 <network_on>
	...

000b4924 <_ZN11myStructureC1Ev>:
String hhmmss;
String data_time;
int RFID_counter = 0;
char msgRFID[250];

struct myStructure{
   b4924:	b538      	push	{r3, r4, r5, lr}
   b4926:	4d1f      	ldr	r5, [pc, #124]	; (b49a4 <_ZN11myStructureC1Ev+0x80>)
   b4928:	4604      	mov	r4, r0
   b492a:	4629      	mov	r1, r5
   b492c:	f002 fe43 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4930:	4629      	mov	r1, r5
   b4932:	f104 0010 	add.w	r0, r4, #16
   b4936:	f002 fe3e 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b493a:	4629      	mov	r1, r5
   b493c:	f104 0020 	add.w	r0, r4, #32
   b4940:	f002 fe39 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4944:	4629      	mov	r1, r5
   b4946:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b494a:	f002 fe34 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b494e:	4629      	mov	r1, r5
   b4950:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4954:	f002 fe2f 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4958:	4629      	mov	r1, r5
   b495a:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b495e:	f002 fe2a 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4962:	4629      	mov	r1, r5
   b4964:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4968:	f002 fe25 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b496c:	4629      	mov	r1, r5
   b496e:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4972:	f002 fe20 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4976:	4629      	mov	r1, r5
   b4978:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b497c:	f002 fe1b 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4980:	4629      	mov	r1, r5
   b4982:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b4986:	f002 fe16 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b498a:	4629      	mov	r1, r5
   b498c:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b4990:	f002 fe11 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4994:	4629      	mov	r1, r5
   b4996:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b499a:	f002 fe0c 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b499e:	4620      	mov	r0, r4
   b49a0:	bd38      	pop	{r3, r4, r5, pc}
   b49a2:	bf00      	nop
   b49a4:	000b8444 	.word	0x000b8444

000b49a8 <_Z3EPDv>:

    Handler_STATE = 1;
    new_end_point_STATE = 2;
}

void EPD() {
   b49a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49ac:	f5ad 4d43 	sub.w	sp, sp, #49920	; 0xc300
   b49b0:	b0aa      	sub	sp, #168	; 0xa8

  Epd epd;
   b49b2:	a810      	add	r0, sp, #64	; 0x40
   b49b4:	f000 fe4e 	bl	b5654 <_ZN3EpdC1Ev>
  Serial.print("Updating E-Paper Display\r\n ");
   b49b8:	f003 f8de 	bl	b7b78 <_Z16_fetch_usbserialv>
   b49bc:	490a      	ldr	r1, [pc, #40]	; (b49e8 <_Z3EPDv+0x40>)
   b49be:	f002 fc8f 	bl	b72e0 <_ZN5Print5printEPKc>

 if (epd.Init() != 0) { 
   b49c2:	a810      	add	r0, sp, #64	; 0x40
   b49c4:	f000 fe94 	bl	b56f0 <_ZN3Epd4InitEv>
   b49c8:	4604      	mov	r4, r0
   b49ca:	b188      	cbz	r0, b49f0 <_Z3EPDv+0x48>
   Serial.print("Failed to initialize display");
   b49cc:	f003 f8d4 	bl	b7b78 <_Z16_fetch_usbserialv>
   b49d0:	4906      	ldr	r1, [pc, #24]	; (b49ec <_Z3EPDv+0x44>)
   b49d2:	f002 fc85 	bl	b72e0 <_ZN5Print5printEPKc>
  Epd epd;
   b49d6:	a810      	add	r0, sp, #64	; 0x40
   b49d8:	f000 fe36 	bl	b5648 <_ZN3EpdD1Ev>
  previous_EPD_Millis = current_EPD_Millis;         //Reset Timer

  /* This displays an image */
  //epd.DisplayFrame(IMAGE_BLACK, IMAGE_RED);
  //epd.DisplayFrame(QR_BLACK, QR_RED);
}
   b49dc:	f50d 4d43 	add.w	sp, sp, #49920	; 0xc300
   b49e0:	b02a      	add	sp, #168	; 0xa8
   b49e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b49e6:	bf00      	nop
   b49e8:	000b8384 	.word	0x000b8384
   b49ec:	000b83a0 	.word	0x000b83a0
  epd.ClearFrame();
   b49f0:	a810      	add	r0, sp, #64	; 0x40
   b49f2:	f000 ff02 	bl	b57fa <_ZN3Epd10ClearFrameEv>
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b49f6:	f44f 7394 	mov.w	r3, #296	; 0x128
   b49fa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   b49fe:	a916      	add	r1, sp, #88	; 0x58
   b4a00:	a804      	add	r0, sp, #16
   b4a02:	f000 fff8 	bl	b59f6 <_ZN5PaintC1EPhii>
  paint.Clear(UNCOLORED);
   b4a06:	a804      	add	r0, sp, #16
   b4a08:	2101      	movs	r1, #1
   b4a0a:	f001 f825 	bl	b5a58 <_ZN5Paint5ClearEi>
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b4a0e:	f8df 8368 	ldr.w	r8, [pc, #872]	; b4d78 <_Z3EPDv+0x3d0>
    paint.DrawStringAt(10, 145, "Start ", &Font20, COLORED);
   b4a12:	4dc6      	ldr	r5, [pc, #792]	; (b4d2c <_Z3EPDv+0x384>)
    paint.DrawStringAt(110, 165, String(GetHourFromString(12,5, array[5])), &Font20, COLORED);
   b4a14:	4ec6      	ldr	r6, [pc, #792]	; (b4d30 <_Z3EPDv+0x388>)
  paint.SetRotate(2);
   b4a16:	a804      	add	r0, sp, #16
   b4a18:	2102      	movs	r1, #2
   b4a1a:	f001 f838 	bl	b5a8e <_ZN5Paint9SetRotateEi>
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b4a1e:	a804      	add	r0, sp, #16
   b4a20:	4bc4      	ldr	r3, [pc, #784]	; (b4d34 <_Z3EPDv+0x38c>)
   b4a22:	9401      	str	r4, [sp, #4]
   b4a24:	f8cd 8000 	str.w	r8, [sp]
   b4a28:	2205      	movs	r2, #5
   b4a2a:	210a      	movs	r1, #10
   b4a2c:	f001 f8ae 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(10, 145, "Start ", &Font20, COLORED);
   b4a30:	9500      	str	r5, [sp, #0]
   b4a32:	a804      	add	r0, sp, #16
   b4a34:	4bc0      	ldr	r3, [pc, #768]	; (b4d38 <_Z3EPDv+0x390>)
   b4a36:	9401      	str	r4, [sp, #4]
   b4a38:	2291      	movs	r2, #145	; 0x91
   b4a3a:	210a      	movs	r1, #10
   b4a3c:	f001 f8a6 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(10, 165, "Time", &Font20, COLORED);
   b4a40:	e9cd 5400 	strd	r5, r4, [sp]
   b4a44:	4bbd      	ldr	r3, [pc, #756]	; (b4d3c <_Z3EPDv+0x394>)
   b4a46:	a804      	add	r0, sp, #16
   b4a48:	22a5      	movs	r2, #165	; 0xa5
   b4a4a:	210a      	movs	r1, #10
   b4a4c:	f001 f89e 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    strncpy(Hour_min_endpoint,myString+(position-1),length);
   b4a50:	6971      	ldr	r1, [r6, #20]
   b4a52:	2205      	movs	r2, #5
   b4a54:	310b      	adds	r1, #11
   b4a56:	a808      	add	r0, sp, #32
   b4a58:	f003 fb29 	bl	b80ae <strncpy>
    return (String)Hour_min_endpoint;
   b4a5c:	ab0c      	add	r3, sp, #48	; 0x30
   b4a5e:	a908      	add	r1, sp, #32
   b4a60:	4618      	mov	r0, r3
   b4a62:	9303      	str	r3, [sp, #12]
   b4a64:	f002 fda7 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
    paint.DrawStringAt(110, 165, String(GetHourFromString(12,5, array[5])), &Font20, COLORED);
   b4a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4a6a:	e9cd 5400 	strd	r5, r4, [sp]
   b4a6e:	22a5      	movs	r2, #165	; 0xa5
   b4a70:	216e      	movs	r1, #110	; 0x6e
   b4a72:	a804      	add	r0, sp, #16
   b4a74:	f001 f88a 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4a78:	9803      	ldr	r0, [sp, #12]
   b4a7a:	f002 fd51 	bl	b7520 <_ZN6StringD1Ev>
    paint.DrawStringAt(205, 145, "End   ", &Font20, COLORED);
   b4a7e:	e9cd 5400 	strd	r5, r4, [sp]
   b4a82:	a804      	add	r0, sp, #16
   b4a84:	4bae      	ldr	r3, [pc, #696]	; (b4d40 <_Z3EPDv+0x398>)
   b4a86:	2291      	movs	r2, #145	; 0x91
   b4a88:	21cd      	movs	r1, #205	; 0xcd
   b4a8a:	f001 f87f 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(205, 165, "Time", &Font20, COLORED);
   b4a8e:	4bab      	ldr	r3, [pc, #684]	; (b4d3c <_Z3EPDv+0x394>)
   b4a90:	e9cd 5400 	strd	r5, r4, [sp]
   b4a94:	a804      	add	r0, sp, #16
   b4a96:	22a5      	movs	r2, #165	; 0xa5
   b4a98:	21cd      	movs	r1, #205	; 0xcd
   b4a9a:	f001 f877 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    strncpy(Hour_min_endpoint,myString+(position-1),length);
   b4a9e:	69b1      	ldr	r1, [r6, #24]
   b4aa0:	2205      	movs	r2, #5
   b4aa2:	310b      	adds	r1, #11
   b4aa4:	a808      	add	r0, sp, #32
   b4aa6:	f003 fb02 	bl	b80ae <strncpy>
    return (String)Hour_min_endpoint;
   b4aaa:	a908      	add	r1, sp, #32
   b4aac:	9803      	ldr	r0, [sp, #12]
   b4aae:	f002 fd82 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
    paint.DrawStringAt(305, 165, String(GetHourFromString(12,5, array[6])), &Font20, COLORED);
   b4ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4ab4:	e9cd 5400 	strd	r5, r4, [sp]
   b4ab8:	22a5      	movs	r2, #165	; 0xa5
   b4aba:	f240 1131 	movw	r1, #305	; 0x131
   b4abe:	a804      	add	r0, sp, #16
   b4ac0:	f001 f864 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawFilledRectangle(10, 35, 100, 120, COLORED);
   b4ac4:	2678      	movs	r6, #120	; 0x78
    paint.DrawStringAt(305, 165, String(GetHourFromString(12,5, array[6])), &Font20, COLORED);
   b4ac6:	9803      	ldr	r0, [sp, #12]
   b4ac8:	f002 fd2a 	bl	b7520 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(10, 35, 100, 120, COLORED);
   b4acc:	9600      	str	r6, [sp, #0]
   b4ace:	a804      	add	r0, sp, #16
   b4ad0:	9401      	str	r4, [sp, #4]
   b4ad2:	2364      	movs	r3, #100	; 0x64
   b4ad4:	2223      	movs	r2, #35	; 0x23
   b4ad6:	210a      	movs	r1, #10
   b4ad8:	f001 f8cc 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 27, 110, 27, COLORED);
   b4adc:	221b      	movs	r2, #27
   b4ade:	9200      	str	r2, [sp, #0]
   b4ae0:	a804      	add	r0, sp, #16
   b4ae2:	9401      	str	r4, [sp, #4]
   b4ae4:	236e      	movs	r3, #110	; 0x6e
   b4ae6:	210a      	movs	r1, #10
   b4ae8:	f001 f8c4 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(110, 27, 110, 120, COLORED);
   b4aec:	236e      	movs	r3, #110	; 0x6e
   b4aee:	e9cd 6400 	strd	r6, r4, [sp]
   b4af2:	4619      	mov	r1, r3
   b4af4:	a804      	add	r0, sp, #16
   b4af6:	221b      	movs	r2, #27
   b4af8:	f001 f8bc 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 140, 190, 140, COLORED);
   b4afc:	278c      	movs	r7, #140	; 0x8c
    paint.DrawFilledRectangle(110, 120, 395, 120, COLORED);
   b4afe:	e9cd 6400 	strd	r6, r4, [sp]
   b4b02:	4632      	mov	r2, r6
   b4b04:	a804      	add	r0, sp, #16
   b4b06:	f240 138b 	movw	r3, #395	; 0x18b
   b4b0a:	216e      	movs	r1, #110	; 0x6e
   b4b0c:	f001 f8b2 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 185, 190, 185, COLORED);
   b4b10:	26b9      	movs	r6, #185	; 0xb9
    paint.DrawFilledRectangle(10, 140, 190, 140, COLORED);
   b4b12:	9700      	str	r7, [sp, #0]
   b4b14:	463a      	mov	r2, r7
   b4b16:	a804      	add	r0, sp, #16
   b4b18:	9401      	str	r4, [sp, #4]
   b4b1a:	23be      	movs	r3, #190	; 0xbe
   b4b1c:	210a      	movs	r1, #10
   b4b1e:	f001 f8a9 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 185, 190, 185, COLORED);
   b4b22:	9600      	str	r6, [sp, #0]
   b4b24:	4632      	mov	r2, r6
   b4b26:	a804      	add	r0, sp, #16
   b4b28:	9401      	str	r4, [sp, #4]
   b4b2a:	23be      	movs	r3, #190	; 0xbe
   b4b2c:	210a      	movs	r1, #10
   b4b2e:	f001 f8a1 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(190, 140, 190, 185, COLORED);
   b4b32:	23be      	movs	r3, #190	; 0xbe
   b4b34:	e9cd 6400 	strd	r6, r4, [sp]
   b4b38:	463a      	mov	r2, r7
   b4b3a:	4619      	mov	r1, r3
   b4b3c:	a804      	add	r0, sp, #16
   b4b3e:	f001 f899 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 140, 200, 185, COLORED);
   b4b42:	23c8      	movs	r3, #200	; 0xc8
   b4b44:	e9cd 6400 	strd	r6, r4, [sp]
   b4b48:	463a      	mov	r2, r7
   b4b4a:	4619      	mov	r1, r3
   b4b4c:	a804      	add	r0, sp, #16
   b4b4e:	f001 f891 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 185, 390, 185, COLORED);
   b4b52:	e9cd 6400 	strd	r6, r4, [sp]
   b4b56:	4632      	mov	r2, r6
   b4b58:	a804      	add	r0, sp, #16
   b4b5a:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4b5e:	21c8      	movs	r1, #200	; 0xc8
   b4b60:	f001 f888 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 140, 390, 140, COLORED);
   b4b64:	e9cd 7400 	strd	r7, r4, [sp]
   b4b68:	463a      	mov	r2, r7
   b4b6a:	a804      	add	r0, sp, #16
   b4b6c:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4b70:	21c8      	movs	r1, #200	; 0xc8
   b4b72:	f001 f87f 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(205, 185, 390, 185, COLORED);
   b4b76:	e9cd 6400 	strd	r6, r4, [sp]
   b4b7a:	4632      	mov	r2, r6
   b4b7c:	a804      	add	r0, sp, #16
    paint.DrawRectangle(10, 230, 260, 290, COLORED);
   b4b7e:	f44f 7691 	mov.w	r6, #290	; 0x122
    paint.DrawFilledRectangle(205, 185, 390, 185, COLORED);
   b4b82:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4b86:	21cd      	movs	r1, #205	; 0xcd
   b4b88:	f001 f874 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawRectangle(10, 230, 260, 290, COLORED);
   b4b8c:	9600      	str	r6, [sp, #0]
   b4b8e:	a804      	add	r0, sp, #16
   b4b90:	9401      	str	r4, [sp, #4]
   b4b92:	f44f 7382 	mov.w	r3, #260	; 0x104
   b4b96:	22e6      	movs	r2, #230	; 0xe6
   b4b98:	210a      	movs	r1, #10
   b4b9a:	f001 f82f 	bl	b5bfc <_ZN5Paint13DrawRectangleEiiiii>
    paint.DrawRectangle(280, 200, 390, 290, COLORED);
   b4b9e:	e9cd 6400 	strd	r6, r4, [sp]
   b4ba2:	a804      	add	r0, sp, #16
   b4ba4:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4ba8:	22c8      	movs	r2, #200	; 0xc8
   b4baa:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4bae:	f001 f825 	bl	b5bfc <_ZN5Paint13DrawRectangleEiiiii>
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                                   // battery background
   b4bb2:	23de      	movs	r3, #222	; 0xde
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                            // Battery Title
   b4bb4:	4e63      	ldr	r6, [pc, #396]	; (b4d44 <_Z3EPDv+0x39c>)
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                                   // battery background
   b4bb6:	9300      	str	r3, [sp, #0]
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                            // Battery Title
   b4bb8:	2701      	movs	r7, #1
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                                   // battery background
   b4bba:	a804      	add	r0, sp, #16
   b4bbc:	9401      	str	r4, [sp, #4]
   b4bbe:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4bc2:	22c8      	movs	r2, #200	; 0xc8
   b4bc4:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4bc8:	f001 f854 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                            // Battery Title
   b4bcc:	a804      	add	r0, sp, #16
   b4bce:	4b5e      	ldr	r3, [pc, #376]	; (b4d48 <_Z3EPDv+0x3a0>)
   b4bd0:	9701      	str	r7, [sp, #4]
   b4bd2:	9600      	str	r6, [sp, #0]
   b4bd4:	22cd      	movs	r2, #205	; 0xcd
   b4bd6:	f240 111d 	movw	r1, #285	; 0x11d
   b4bda:	f000 ffd7 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(320, 227, String(SOC) + "%", &Font16, COLORED);                        // SOC
   b4bde:	4b5b      	ldr	r3, [pc, #364]	; (b4d4c <_Z3EPDv+0x3a4>)
   b4be0:	220a      	movs	r2, #10
   b4be2:	6819      	ldr	r1, [r3, #0]
   b4be4:	a808      	add	r0, sp, #32
   b4be6:	f002 fd61 	bl	b76ac <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4bea:	a908      	add	r1, sp, #32
   b4bec:	9803      	ldr	r0, [sp, #12]
   b4bee:	f002 fd2e 	bl	b764e <_ZN6StringC1ERKS_>
   b4bf2:	4957      	ldr	r1, [pc, #348]	; (b4d50 <_Z3EPDv+0x3a8>)
   b4bf4:	9803      	ldr	r0, [sp, #12]
   b4bf6:	f002 fda4 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4bfa:	e9cd 6400 	strd	r6, r4, [sp]
   b4bfe:	22e3      	movs	r2, #227	; 0xe3
   b4c00:	6803      	ldr	r3, [r0, #0]
   b4c02:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b4c06:	a804      	add	r0, sp, #16
   b4c08:	f000 ffc0 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
class StringSumHelper : public String
   b4c0c:	9803      	ldr	r0, [sp, #12]
   b4c0e:	f002 fc87 	bl	b7520 <_ZN6StringD1Ev>
   b4c12:	a808      	add	r0, sp, #32
   b4c14:	f002 fc84 	bl	b7520 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(280, 244, 390, 266, COLORED);                                   // Time Zone background
   b4c18:	f44f 7385 	mov.w	r3, #266	; 0x10a
   b4c1c:	9300      	str	r3, [sp, #0]
   b4c1e:	a804      	add	r0, sp, #16
   b4c20:	9401      	str	r4, [sp, #4]
   b4c22:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4c26:	22f4      	movs	r2, #244	; 0xf4
   b4c28:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4c2c:	f001 f822 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(285, 249, "Time Zone", &Font16, UNCOLORED);                            // Time Zone background
   b4c30:	4b48      	ldr	r3, [pc, #288]	; (b4d54 <_Z3EPDv+0x3ac>)
   b4c32:	22f9      	movs	r2, #249	; 0xf9
   b4c34:	a804      	add	r0, sp, #16
   b4c36:	e9cd 6700 	strd	r6, r7, [sp]
   b4c3a:	f240 111d 	movw	r1, #285	; 0x11d
   b4c3e:	f000 ffa5 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(305, 271, String(ApiData1.timezone), &Font16, COLORED);                // GMT
   b4c42:	4945      	ldr	r1, [pc, #276]	; (b4d58 <_Z3EPDv+0x3b0>)
   b4c44:	9803      	ldr	r0, [sp, #12]
   b4c46:	f002 fd02 	bl	b764e <_ZN6StringC1ERKS_>
   b4c4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c4c:	f240 120f 	movw	r2, #271	; 0x10f
   b4c50:	f240 1131 	movw	r1, #305	; 0x131
   b4c54:	a804      	add	r0, sp, #16
   b4c56:	e9cd 6400 	strd	r6, r4, [sp]
   b4c5a:	f000 ff97 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4c5e:	9803      	ldr	r0, [sp, #12]
   b4c60:	f002 fc5e 	bl	b7520 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(10, 230, 260, 200, COLORED);                                    // instructor background
   b4c64:	23c8      	movs	r3, #200	; 0xc8
   b4c66:	9300      	str	r3, [sp, #0]
   b4c68:	a804      	add	r0, sp, #16
   b4c6a:	9401      	str	r4, [sp, #4]
   b4c6c:	f44f 7382 	mov.w	r3, #260	; 0x104
   b4c70:	22e6      	movs	r2, #230	; 0xe6
   b4c72:	210a      	movs	r1, #10
   b4c74:	f000 fffe 	bl	b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(15, 210, "INSTRUCTOR:", &Font20, UNCOLORED);                           // instructor Title
   b4c78:	e9cd 5700 	strd	r5, r7, [sp]
   b4c7c:	4b37      	ldr	r3, [pc, #220]	; (b4d5c <_Z3EPDv+0x3b4>)
   b4c7e:	22d2      	movs	r2, #210	; 0xd2
   b4c80:	a804      	add	r0, sp, #16
   b4c82:	210f      	movs	r1, #15
   b4c84:	f000 ff82 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(15, 240, String(ApiData1.instructorFirstName), &Font20, COLORED);      // instructor Title
   b4c88:	4935      	ldr	r1, [pc, #212]	; (b4d60 <_Z3EPDv+0x3b8>)
   b4c8a:	9803      	ldr	r0, [sp, #12]
   b4c8c:	f002 fcdf 	bl	b764e <_ZN6StringC1ERKS_>
   b4c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c92:	22f0      	movs	r2, #240	; 0xf0
   b4c94:	e9cd 5400 	strd	r5, r4, [sp]
   b4c98:	210f      	movs	r1, #15
   b4c9a:	a804      	add	r0, sp, #16
   b4c9c:	f000 ff76 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4ca0:	9803      	ldr	r0, [sp, #12]
   b4ca2:	f002 fc3d 	bl	b7520 <_ZN6StringD1Ev>
    paint.DrawStringAt(15, 260, String(ApiData1.instructorLastName), &Font20, COLORED);       // instructor Title
   b4ca6:	492f      	ldr	r1, [pc, #188]	; (b4d64 <_Z3EPDv+0x3bc>)
   b4ca8:	9803      	ldr	r0, [sp, #12]
   b4caa:	f002 fcd0 	bl	b764e <_ZN6StringC1ERKS_>
   b4cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4cb0:	e9cd 5400 	strd	r5, r4, [sp]
   b4cb4:	f44f 7282 	mov.w	r2, #260	; 0x104
   b4cb8:	210f      	movs	r1, #15
   b4cba:	a804      	add	r0, sp, #16
   b4cbc:	f000 ff66 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4cc0:	9803      	ldr	r0, [sp, #12]
   b4cc2:	f002 fc2d 	bl	b7520 <_ZN6StringD1Ev>
    paint.DrawStringAt(130, 5, "Starship IFT3 - ", &Font24, COLORED);                           //To Do
   b4cc6:	a804      	add	r0, sp, #16
   b4cc8:	e9cd 8400 	strd	r8, r4, [sp]
   b4ccc:	4b26      	ldr	r3, [pc, #152]	; (b4d68 <_Z3EPDv+0x3c0>)
   b4cce:	2205      	movs	r2, #5
   b4cd0:	2182      	movs	r1, #130	; 0x82
   b4cd2:	f000 ff5b 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 35, "What to expect ", &Font24, COLORED);                           //To Do
   b4cd6:	a804      	add	r0, sp, #16
   b4cd8:	e9cd 8400 	strd	r8, r4, [sp]
   b4cdc:	4b23      	ldr	r3, [pc, #140]	; (b4d6c <_Z3EPDv+0x3c4>)
   b4cde:	2223      	movs	r2, #35	; 0x23
   b4ce0:	2182      	movs	r1, #130	; 0x82
   b4ce2:	f000 ff53 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 65, "from the next ", &Font24, COLORED);                            //To Do
   b4ce6:	a804      	add	r0, sp, #16
   b4ce8:	e9cd 8400 	strd	r8, r4, [sp]
   b4cec:	4b20      	ldr	r3, [pc, #128]	; (b4d70 <_Z3EPDv+0x3c8>)
   b4cee:	2241      	movs	r2, #65	; 0x41
   b4cf0:	2182      	movs	r1, #130	; 0x82
   b4cf2:	f000 ff4b 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 95, "flight test", &Font24, COLORED);                               //To Do
   b4cf6:	4b1f      	ldr	r3, [pc, #124]	; (b4d74 <_Z3EPDv+0x3cc>)
   b4cf8:	225f      	movs	r2, #95	; 0x5f
   b4cfa:	2182      	movs	r1, #130	; 0x82
   b4cfc:	a804      	add	r0, sp, #16
   b4cfe:	e9cd 8400 	strd	r8, r4, [sp]
   b4d02:	f000 ff43 	bl	b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    epd.SetPartialWindowBlack(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());       //To Do
   b4d06:	a804      	add	r0, sp, #16
   b4d08:	f000 febb 	bl	b5a82 <_ZN5Paint8GetImageEv>
   b4d0c:	9003      	str	r0, [sp, #12]
   b4d0e:	a804      	add	r0, sp, #16
   b4d10:	f000 feb9 	bl	b5a86 <_ZN5Paint8GetWidthEv>
   b4d14:	4605      	mov	r5, r0
   b4d16:	a804      	add	r0, sp, #16
   b4d18:	f000 feb7 	bl	b5a8a <_ZN5Paint9GetHeightEv>
   b4d1c:	4623      	mov	r3, r4
   b4d1e:	4622      	mov	r2, r4
   b4d20:	9903      	ldr	r1, [sp, #12]
   b4d22:	e9cd 5000 	strd	r5, r0, [sp]
   b4d26:	a810      	add	r0, sp, #64	; 0x40
   b4d28:	e028      	b.n	b4d7c <_Z3EPDv+0x3d4>
   b4d2a:	bf00      	nop
   b4d2c:	2003de3c 	.word	0x2003de3c
   b4d30:	2003e094 	.word	0x2003e094
   b4d34:	000b83bd 	.word	0x000b83bd
   b4d38:	000b83c3 	.word	0x000b83c3
   b4d3c:	000b83ca 	.word	0x000b83ca
   b4d40:	000b83cf 	.word	0x000b83cf
   b4d44:	2003de34 	.word	0x2003de34
   b4d48:	000b83d6 	.word	0x000b83d6
   b4d4c:	2003e070 	.word	0x2003e070
   b4d50:	000b83de 	.word	0x000b83de
   b4d54:	000b83e0 	.word	0x000b83e0
   b4d58:	2003df28 	.word	0x2003df28
   b4d5c:	000b83ea 	.word	0x000b83ea
   b4d60:	2003df48 	.word	0x2003df48
   b4d64:	2003df58 	.word	0x2003df58
   b4d68:	000b83f6 	.word	0x000b83f6
   b4d6c:	000b8407 	.word	0x000b8407
   b4d70:	000b8417 	.word	0x000b8417
   b4d74:	000b8426 	.word	0x000b8426
   b4d78:	2003de44 	.word	0x2003de44
   b4d7c:	f000 fcd5 	bl	b572a <_ZN3Epd21SetPartialWindowBlackEPKhiiii>
  epd.DisplayFrame();                               /* Displays the data from the SRAM in e-Paper module */
   b4d80:	a810      	add	r0, sp, #64	; 0x40
   b4d82:	f000 fd6b 	bl	b585c <_ZN3Epd12DisplayFrameEv>
  delay(50);
   b4d86:	2032      	movs	r0, #50	; 0x32
   b4d88:	f001 fd3a 	bl	b6800 <delay>
  epd.ClearFrame(); 
   b4d8c:	a810      	add	r0, sp, #64	; 0x40
   b4d8e:	f000 fd34 	bl	b57fa <_ZN3Epd10ClearFrameEv>
  epd.Sleep();                                      /* Deep sleep */
   b4d92:	a810      	add	r0, sp, #64	; 0x40
   b4d94:	f000 fd6f 	bl	b5876 <_ZN3Epd5SleepEv>
  new_end_point_STATE = 0;
   b4d98:	4b04      	ldr	r3, [pc, #16]	; (b4dac <_Z3EPDv+0x404>)
   b4d9a:	601c      	str	r4, [r3, #0]
  previous_EPD_Millis = current_EPD_Millis;         //Reset Timer
   b4d9c:	4b04      	ldr	r3, [pc, #16]	; (b4db0 <_Z3EPDv+0x408>)
   b4d9e:	681a      	ldr	r2, [r3, #0]
   b4da0:	4b04      	ldr	r3, [pc, #16]	; (b4db4 <_Z3EPDv+0x40c>)
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4da2:	a804      	add	r0, sp, #16
  previous_EPD_Millis = current_EPD_Millis;         //Reset Timer
   b4da4:	601a      	str	r2, [r3, #0]
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4da6:	f000 fe39 	bl	b5a1c <_ZN5PaintD1Ev>
   b4daa:	e614      	b.n	b49d6 <_Z3EPDv+0x2e>
   b4dac:	2003e138 	.word	0x2003e138
   b4db0:	2003e0f8 	.word	0x2003e0f8
   b4db4:	2003e188 	.word	0x2003e188

000b4db8 <_Z8RealTimev>:
//         Serial.println(" PM");
//         Serial.println("\n");
//         Serial.println("\n");
}

void RealTime(void){
   b4db8:	b500      	push	{lr}
	const char * c_str() const { return buffer; }
   b4dba:	4b57      	ldr	r3, [pc, #348]	; (b4f18 <_Z8RealTimev+0x160>)
   b4dbc:	b09d      	sub	sp, #116	; 0x74

  Time.zone(atoi(ApiData1.timeZoneOffset));
   b4dbe:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   b4dc2:	f003 f8f2 	bl	b7faa <atoi>
   b4dc6:	ee07 0a90 	vmov	s15, r0
   b4dca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b4dce:	f002 fda3 	bl	b7918 <_ZN9TimeClass4zoneEf>
   b4dd2:	4b52      	ldr	r3, [pc, #328]	; (b4f1c <_Z8RealTimev+0x164>)
  Time.zone(atoi(ApiData2.timeZoneOffset));
   b4dd4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   b4dd8:	f003 f8e7 	bl	b7faa <atoi>
   b4ddc:	ee07 0a90 	vmov	s15, r0
   b4de0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b4de4:	f002 fd98 	bl	b7918 <_ZN9TimeClass4zoneEf>

  String hour = String(Time.hourFormat12(Time.now()));
   b4de8:	f002 fdd3 	bl	b7992 <_ZN9TimeClass3nowEv>
   b4dec:	17c1      	asrs	r1, r0, #31
   b4dee:	f002 fd5f 	bl	b78b0 <_ZN9TimeClass12hourFormat12Ex>
   b4df2:	220a      	movs	r2, #10
   b4df4:	4601      	mov	r1, r0
   b4df6:	4668      	mov	r0, sp
   b4df8:	f002 fc58 	bl	b76ac <_ZN6StringC1Eih>
  String minute = String::format("%02i",Time.minute(Time.now()));
   b4dfc:	f002 fdc9 	bl	b7992 <_ZN9TimeClass3nowEv>
   b4e00:	17c1      	asrs	r1, r0, #31
   b4e02:	f002 fd6f 	bl	b78e4 <_ZN9TimeClass6minuteEx>
   b4e06:	4946      	ldr	r1, [pc, #280]	; (b4f20 <_Z8RealTimev+0x168>)
   b4e08:	4602      	mov	r2, r0
   b4e0a:	a804      	add	r0, sp, #16
   b4e0c:	f002 fcc0 	bl	b7790 <_ZN6String6formatEPKcz>
  String second = String::format("%02i",Time.second(Time.now()));
   b4e10:	f002 fdbf 	bl	b7992 <_ZN9TimeClass3nowEv>
   b4e14:	17c1      	asrs	r1, r0, #31
   b4e16:	f002 fd6d 	bl	b78f4 <_ZN9TimeClass6secondEx>
   b4e1a:	4941      	ldr	r1, [pc, #260]	; (b4f20 <_Z8RealTimev+0x168>)
   b4e1c:	4602      	mov	r2, r0
   b4e1e:	a808      	add	r0, sp, #32
   b4e20:	f002 fcb6 	bl	b7790 <_ZN6String6formatEPKcz>
   
  String day = String(Time.day());
   b4e24:	f002 fdce 	bl	b79c4 <_ZN9TimeClass3dayEv>
   b4e28:	220a      	movs	r2, #10
   b4e2a:	4601      	mov	r1, r0
   b4e2c:	a80c      	add	r0, sp, #48	; 0x30
   b4e2e:	f002 fc3d 	bl	b76ac <_ZN6StringC1Eih>
  String month = String(Time.month());
   b4e32:	f002 fdd3 	bl	b79dc <_ZN9TimeClass5monthEv>
   b4e36:	220a      	movs	r2, #10
   b4e38:	4601      	mov	r1, r0
   b4e3a:	a810      	add	r0, sp, #64	; 0x40
   b4e3c:	f002 fc36 	bl	b76ac <_ZN6StringC1Eih>
  String year = String(Time.year());
   b4e40:	f002 fdd4 	bl	b79ec <_ZN9TimeClass4yearEv>
   b4e44:	220a      	movs	r2, #10
   b4e46:	4601      	mov	r1, r0
   b4e48:	a814      	add	r0, sp, #80	; 0x50
   b4e4a:	f002 fc2f 	bl	b76ac <_ZN6StringC1Eih>

    if(!Time.isPM()){
   b4e4e:	f002 fdb0 	bl	b79b2 <_ZN9TimeClass4isPMEv>
	StringSumHelper(const String &s) : String(s) {}
   b4e52:	4669      	mov	r1, sp
   b4e54:	2800      	cmp	r0, #0
   b4e56:	d14c      	bne.n	b4ef2 <_Z8RealTimev+0x13a>
   b4e58:	a818      	add	r0, sp, #96	; 0x60
   b4e5a:	f002 fbf8 	bl	b764e <_ZN6StringC1ERKS_>
        hhmmss = hour + ":" + minute + ":" + second +"AM";
   b4e5e:	4931      	ldr	r1, [pc, #196]	; (b4f24 <_Z8RealTimev+0x16c>)
   b4e60:	a818      	add	r0, sp, #96	; 0x60
   b4e62:	f002 fc6e 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4e66:	a904      	add	r1, sp, #16
   b4e68:	f002 fc5f 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4e6c:	492d      	ldr	r1, [pc, #180]	; (b4f24 <_Z8RealTimev+0x16c>)
   b4e6e:	f002 fc68 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4e72:	a908      	add	r1, sp, #32
   b4e74:	f002 fc59 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4e78:	492b      	ldr	r1, [pc, #172]	; (b4f28 <_Z8RealTimev+0x170>)
          } else {
            hhmmss = hour + ":" + minute + ":" + second +"PM";
   b4e7a:	f002 fc62 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4e7e:	4601      	mov	r1, r0
   b4e80:	482a      	ldr	r0, [pc, #168]	; (b4f2c <_Z8RealTimev+0x174>)
   b4e82:	f002 fbd5 	bl	b7630 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4e86:	a818      	add	r0, sp, #96	; 0x60
   b4e88:	f002 fb4a 	bl	b7520 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4e8c:	a914      	add	r1, sp, #80	; 0x50
   b4e8e:	a818      	add	r0, sp, #96	; 0x60
   b4e90:	f002 fbdd 	bl	b764e <_ZN6StringC1ERKS_>
          }
            data_time = year + "-" + month + "-" + day + "T" + hhmmss;
   b4e94:	4926      	ldr	r1, [pc, #152]	; (b4f30 <_Z8RealTimev+0x178>)
   b4e96:	a818      	add	r0, sp, #96	; 0x60
   b4e98:	f002 fc53 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4e9c:	a910      	add	r1, sp, #64	; 0x40
   b4e9e:	f002 fc44 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4ea2:	4923      	ldr	r1, [pc, #140]	; (b4f30 <_Z8RealTimev+0x178>)
   b4ea4:	f002 fc4d 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4ea8:	a90c      	add	r1, sp, #48	; 0x30
   b4eaa:	f002 fc3e 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4eae:	4921      	ldr	r1, [pc, #132]	; (b4f34 <_Z8RealTimev+0x17c>)
   b4eb0:	f002 fc47 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4eb4:	491d      	ldr	r1, [pc, #116]	; (b4f2c <_Z8RealTimev+0x174>)
   b4eb6:	f002 fc38 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4eba:	4601      	mov	r1, r0
   b4ebc:	481e      	ldr	r0, [pc, #120]	; (b4f38 <_Z8RealTimev+0x180>)
   b4ebe:	f002 fbb7 	bl	b7630 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4ec2:	a818      	add	r0, sp, #96	; 0x60
   b4ec4:	f002 fb2c 	bl	b7520 <_ZN6StringD1Ev>
  String year = String(Time.year());
   b4ec8:	a814      	add	r0, sp, #80	; 0x50
   b4eca:	f002 fb29 	bl	b7520 <_ZN6StringD1Ev>
  String month = String(Time.month());
   b4ece:	a810      	add	r0, sp, #64	; 0x40
   b4ed0:	f002 fb26 	bl	b7520 <_ZN6StringD1Ev>
  String day = String(Time.day());
   b4ed4:	a80c      	add	r0, sp, #48	; 0x30
   b4ed6:	f002 fb23 	bl	b7520 <_ZN6StringD1Ev>
  String second = String::format("%02i",Time.second(Time.now()));
   b4eda:	a808      	add	r0, sp, #32
   b4edc:	f002 fb20 	bl	b7520 <_ZN6StringD1Ev>
  String minute = String::format("%02i",Time.minute(Time.now()));
   b4ee0:	a804      	add	r0, sp, #16
   b4ee2:	f002 fb1d 	bl	b7520 <_ZN6StringD1Ev>
  String hour = String(Time.hourFormat12(Time.now()));
   b4ee6:	4668      	mov	r0, sp
   b4ee8:	f002 fb1a 	bl	b7520 <_ZN6StringD1Ev>
 }
   b4eec:	b01d      	add	sp, #116	; 0x74
   b4eee:	f85d fb04 	ldr.w	pc, [sp], #4
	StringSumHelper(const String &s) : String(s) {}
   b4ef2:	a818      	add	r0, sp, #96	; 0x60
   b4ef4:	f002 fbab 	bl	b764e <_ZN6StringC1ERKS_>
            hhmmss = hour + ":" + minute + ":" + second +"PM";
   b4ef8:	490a      	ldr	r1, [pc, #40]	; (b4f24 <_Z8RealTimev+0x16c>)
   b4efa:	a818      	add	r0, sp, #96	; 0x60
   b4efc:	f002 fc21 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4f00:	a904      	add	r1, sp, #16
   b4f02:	f002 fc12 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4f06:	4907      	ldr	r1, [pc, #28]	; (b4f24 <_Z8RealTimev+0x16c>)
   b4f08:	f002 fc1b 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b4f0c:	a908      	add	r1, sp, #32
   b4f0e:	f002 fc0c 	bl	b772a <_ZplRK15StringSumHelperRK6String>
   b4f12:	490a      	ldr	r1, [pc, #40]	; (b4f3c <_Z8RealTimev+0x184>)
   b4f14:	e7b1      	b.n	b4e7a <_Z8RealTimev+0xc2>
   b4f16:	bf00      	nop
   b4f18:	2003deb8 	.word	0x2003deb8
   b4f1c:	2003df78 	.word	0x2003df78
   b4f20:	000b8432 	.word	0x000b8432
   b4f24:	000b83f4 	.word	0x000b83f4
   b4f28:	000b8437 	.word	0x000b8437
   b4f2c:	2003e128 	.word	0x2003e128
   b4f30:	000b843d 	.word	0x000b843d
   b4f34:	000b843f 	.word	0x000b843f
   b4f38:	2003e114 	.word	0x2003e114
   b4f3c:	000b843a 	.word	0x000b843a

000b4f40 <_Z16ApiParser_event1v>:

void ApiParser_event1(void){                    //store all sperate data from API into the struct variable
   b4f40:	b538      	push	{r3, r4, r5, lr}

//ApiData.id = array[0];
  ApiData1.readerMode = array[1];
   b4f42:	4d1d      	ldr	r5, [pc, #116]	; (b4fb8 <_Z16ApiParser_event1v+0x78>)
   b4f44:	4c1d      	ldr	r4, [pc, #116]	; (b4fbc <_Z16ApiParser_event1v+0x7c>)
   b4f46:	6869      	ldr	r1, [r5, #4]
   b4f48:	f104 0020 	add.w	r0, r4, #32
   b4f4c:	f002 fb8a 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.roomName = array[2];
   b4f50:	68a9      	ldr	r1, [r5, #8]
   b4f52:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4f56:	f002 fb85 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.id = array[3];
   b4f5a:	68e9      	ldr	r1, [r5, #12]
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	f002 fb81 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.title = array[4];
   b4f62:	6929      	ldr	r1, [r5, #16]
   b4f64:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4f68:	f002 fb7c 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.startTime = array[5];
   b4f6c:	6969      	ldr	r1, [r5, #20]
   b4f6e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b4f72:	f002 fb77 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.endTime = array[6];
   b4f76:	69a9      	ldr	r1, [r5, #24]
   b4f78:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4f7c:	f002 fb72 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.timezone = array[7];
   b4f80:	69e9      	ldr	r1, [r5, #28]
   b4f82:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4f86:	f002 fb6d 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.timeZoneOffset = array[8];
   b4f8a:	6a29      	ldr	r1, [r5, #32]
   b4f8c:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b4f90:	f002 fb68 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.instructorFirstName = array[9];
   b4f94:	6a69      	ldr	r1, [r5, #36]	; 0x24
   b4f96:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b4f9a:	f002 fb63 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.instructorLastName = array[10];
   b4f9e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   b4fa0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b4fa4:	f002 fb5e 	bl	b7664 <_ZN6StringaSEPKc>
  ApiData1.isHybrid = array[11];
   b4fa8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   b4faa:	f104 00b0 	add.w	r0, r4, #176	; 0xb0

}
   b4fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ApiData1.isHybrid = array[11];
   b4fb2:	f002 bb57 	b.w	b7664 <_ZN6StringaSEPKc>
   b4fb6:	bf00      	nop
   b4fb8:	2003e094 	.word	0x2003e094
   b4fbc:	2003deb8 	.word	0x2003deb8

000b4fc0 <_Z16ApiParser_event2v>:

void ApiParser_event2(void){                    //store all sperate data from API into the struct variable
   b4fc0:	b538      	push	{r3, r4, r5, lr}

    //ApiData.id = array[0];
    ApiData2.readerMode = array[10];
   b4fc2:	4d1d      	ldr	r5, [pc, #116]	; (b5038 <_Z16ApiParser_event2v+0x78>)
   b4fc4:	4c1d      	ldr	r4, [pc, #116]	; (b503c <_Z16ApiParser_event2v+0x7c>)
   b4fc6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   b4fc8:	f104 0020 	add.w	r0, r4, #32
   b4fcc:	f002 fb4a 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.roomName = array[2];
   b4fd0:	68a9      	ldr	r1, [r5, #8]
   b4fd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4fd6:	f002 fb45 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.id = array[12];
   b4fda:	6b29      	ldr	r1, [r5, #48]	; 0x30
   b4fdc:	4620      	mov	r0, r4
   b4fde:	f002 fb41 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.title = array[13];
   b4fe2:	6b69      	ldr	r1, [r5, #52]	; 0x34
   b4fe4:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4fe8:	f002 fb3c 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.startTime = array[14];
   b4fec:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   b4fee:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b4ff2:	f002 fb37 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.endTime = array[15];
   b4ff6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b4ff8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4ffc:	f002 fb32 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.timezone = array[16];
   b5000:	6c29      	ldr	r1, [r5, #64]	; 0x40
   b5002:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b5006:	f002 fb2d 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.timeZoneOffset = array[17];
   b500a:	6c69      	ldr	r1, [r5, #68]	; 0x44
   b500c:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b5010:	f002 fb28 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.instructorFirstName = array[18];
   b5014:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   b5016:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b501a:	f002 fb23 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.instructorLastName = array[19];
   b501e:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   b5020:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b5024:	f002 fb1e 	bl	b7664 <_ZN6StringaSEPKc>
    ApiData2.isHybrid = array[20];
   b5028:	6d29      	ldr	r1, [r5, #80]	; 0x50
   b502a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
    
}
   b502e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ApiData2.isHybrid = array[20];
   b5032:	f002 bb17 	b.w	b7664 <_ZN6StringaSEPKc>
   b5036:	bf00      	nop
   b5038:	2003e094 	.word	0x2003e094
   b503c:	2003df78 	.word	0x2003df78

000b5040 <_Z9myHandlerPKcS0_>:
void myHandler(const char *event, const char *data) {
   b5040:	b538      	push	{r3, r4, r5, lr}
    strcpy(testval, (const char *)data);
   b5042:	4814      	ldr	r0, [pc, #80]	; (b5094 <_Z9myHandlerPKcS0_+0x54>)
   b5044:	4c14      	ldr	r4, [pc, #80]	; (b5098 <_Z9myHandlerPKcS0_+0x58>)
            p = strtok (NULL, "|");
   b5046:	4d15      	ldr	r5, [pc, #84]	; (b509c <_Z9myHandlerPKcS0_+0x5c>)
    strcpy(testval, (const char *)data);
   b5048:	f002 fff8 	bl	b803c <strcpy>
    char *p = strtok (( char *)testval, "|");
   b504c:	4913      	ldr	r1, [pc, #76]	; (b509c <_Z9myHandlerPKcS0_+0x5c>)
   b504e:	4811      	ldr	r0, [pc, #68]	; (b5094 <_Z9myHandlerPKcS0_+0x54>)
   b5050:	f003 f840 	bl	b80d4 <strtok>
    while (p != NULL)
   b5054:	b130      	cbz	r0, b5064 <_Z9myHandlerPKcS0_+0x24>
            array[i++] = p;
   b5056:	f844 0b04 	str.w	r0, [r4], #4
            p = strtok (NULL, "|");
   b505a:	4629      	mov	r1, r5
   b505c:	2000      	movs	r0, #0
   b505e:	f003 f839 	bl	b80d4 <strtok>
    while (p != NULL)
   b5062:	e7f7      	b.n	b5054 <_Z9myHandlerPKcS0_+0x14>
    ApiParser_event1();
   b5064:	f7ff ff6c 	bl	b4f40 <_Z16ApiParser_event1v>
    Serial.print("\n"); 
   b5068:	f002 fd86 	bl	b7b78 <_Z16_fetch_usbserialv>
   b506c:	490c      	ldr	r1, [pc, #48]	; (b50a0 <_Z9myHandlerPKcS0_+0x60>)
   b506e:	f002 f937 	bl	b72e0 <_ZN5Print5printEPKc>
    Serial.print("\n"); 
   b5072:	f002 fd81 	bl	b7b78 <_Z16_fetch_usbserialv>
   b5076:	490a      	ldr	r1, [pc, #40]	; (b50a0 <_Z9myHandlerPKcS0_+0x60>)
   b5078:	f002 f932 	bl	b72e0 <_ZN5Print5printEPKc>
    ApiParser_event2();
   b507c:	f7ff ffa0 	bl	b4fc0 <_Z16ApiParser_event2v>
    delay(50);
   b5080:	2032      	movs	r0, #50	; 0x32
   b5082:	f001 fbbd 	bl	b6800 <delay>
    Handler_STATE = 1;
   b5086:	4b07      	ldr	r3, [pc, #28]	; (b50a4 <_Z9myHandlerPKcS0_+0x64>)
   b5088:	2201      	movs	r2, #1
   b508a:	601a      	str	r2, [r3, #0]
    new_end_point_STATE = 2;
   b508c:	4b06      	ldr	r3, [pc, #24]	; (b50a8 <_Z9myHandlerPKcS0_+0x68>)
   b508e:	2202      	movs	r2, #2
   b5090:	601a      	str	r2, [r3, #0]
}
   b5092:	bd38      	pop	{r3, r4, r5, pc}
   b5094:	2003e1a0 	.word	0x2003e1a0
   b5098:	2003e094 	.word	0x2003e094
   b509c:	000b8441 	.word	0x000b8441
   b50a0:	000b8443 	.word	0x000b8443
   b50a4:	2003e048 	.word	0x2003e048
   b50a8:	2003e138 	.word	0x2003e138

000b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b50ac:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b50ae:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b50b0:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b50b2:	b17c      	cbz	r4, b50d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b50b4:	6863      	ldr	r3, [r4, #4]
   b50b6:	3b01      	subs	r3, #1
   b50b8:	6063      	str	r3, [r4, #4]
   b50ba:	b95b      	cbnz	r3, b50d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b50bc:	6823      	ldr	r3, [r4, #0]
   b50be:	4620      	mov	r0, r4
   b50c0:	689b      	ldr	r3, [r3, #8]
   b50c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b50c4:	68a3      	ldr	r3, [r4, #8]
   b50c6:	3b01      	subs	r3, #1
   b50c8:	60a3      	str	r3, [r4, #8]
   b50ca:	b91b      	cbnz	r3, b50d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b50cc:	6823      	ldr	r3, [r4, #0]
   b50ce:	4620      	mov	r0, r4
   b50d0:	68db      	ldr	r3, [r3, #12]
   b50d2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b50d4:	4628      	mov	r0, r5
   b50d6:	bd38      	pop	{r3, r4, r5, pc}

000b50d8 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b50d8:	4b1d      	ldr	r3, [pc, #116]	; (b5150 <_GLOBAL__sub_I_SystemMode+0x78>)
    Serial.println("Clearing String buffer");             //Clear after publish.
    Identifier = ("");    
    TimeStamp = ("");
    RFID_counter = 0;
    previous_Publish_Millis = current_Publish_Millis;
}
   b50da:	b510      	push	{r4, lr}
   b50dc:	2400      	movs	r4, #0
   b50de:	701c      	strb	r4, [r3, #0]
   b50e0:	4b1c      	ldr	r3, [pc, #112]	; (b5154 <_GLOBAL__sub_I_SystemMode+0x7c>)
   b50e2:	2201      	movs	r2, #1
   b50e4:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50e6:	4b1c      	ldr	r3, [pc, #112]	; (b5158 <_GLOBAL__sub_I_SystemMode+0x80>)
    SleepResult() {}
   b50e8:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
              error_(SYSTEM_ERROR_NONE) {
   b50ec:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b50f0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50f2:	2002      	movs	r0, #2
   b50f4:	f001 fa48 	bl	b6588 <set_system_mode>
String EvendId;
   b50f8:	4918      	ldr	r1, [pc, #96]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b50fa:	4819      	ldr	r0, [pc, #100]	; (b5160 <_GLOBAL__sub_I_SystemMode+0x88>)
   b50fc:	f002 fa5b 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
String ReaderMode;
   b5100:	4916      	ldr	r1, [pc, #88]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b5102:	4818      	ldr	r0, [pc, #96]	; (b5164 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b5104:	f002 fa57 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
String TimeStamp;
   b5108:	4914      	ldr	r1, [pc, #80]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b510a:	4817      	ldr	r0, [pc, #92]	; (b5168 <_GLOBAL__sub_I_SystemMode+0x90>)
   b510c:	f002 fa53 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
String Identifier;
   b5110:	4912      	ldr	r1, [pc, #72]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b5112:	4816      	ldr	r0, [pc, #88]	; (b516c <_GLOBAL__sub_I_SystemMode+0x94>)
   b5114:	f002 fa4f 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
String rfid_uid = "";
   b5118:	4910      	ldr	r1, [pc, #64]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b511a:	4815      	ldr	r0, [pc, #84]	; (b5170 <_GLOBAL__sub_I_SystemMode+0x98>)
   b511c:	f002 fa4b 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
String hhmmss;
   b5120:	490e      	ldr	r1, [pc, #56]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b5122:	4814      	ldr	r0, [pc, #80]	; (b5174 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b5124:	f002 fa47 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
String data_time;
   b5128:	490c      	ldr	r1, [pc, #48]	; (b515c <_GLOBAL__sub_I_SystemMode+0x84>)
   b512a:	4813      	ldr	r0, [pc, #76]	; (b5178 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b512c:	f002 fa43 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
}ApiData1, ApiData2;
   b5130:	4812      	ldr	r0, [pc, #72]	; (b517c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5132:	f7ff fbf7 	bl	b4924 <_ZN11myStructureC1Ev>
   b5136:	4812      	ldr	r0, [pc, #72]	; (b5180 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5138:	f7ff fbf4 	bl	b4924 <_ZN11myStructureC1Ev>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b513c:	4622      	mov	r2, r4
   b513e:	4811      	ldr	r0, [pc, #68]	; (b5184 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5140:	2102      	movs	r1, #2
   b5142:	f000 ffa9 	bl	b6098 <_ZN17DFRobot_PN532_IICC1Ehh>
}
   b5146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
max1720x gauge;
   b514a:	480f      	ldr	r0, [pc, #60]	; (b5188 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b514c:	f000 bdbc 	b.w	b5cc8 <_ZN8max1720xC1Ev>
   b5150:	2003e090 	.word	0x2003e090
   b5154:	2003e091 	.word	0x2003e091
   b5158:	2003e074 	.word	0x2003e074
   b515c:	000b8444 	.word	0x000b8444
   b5160:	2003e038 	.word	0x2003e038
   b5164:	2003e060 	.word	0x2003e060
   b5168:	2003e080 	.word	0x2003e080
   b516c:	2003e04c 	.word	0x2003e04c
   b5170:	2003e190 	.word	0x2003e190
   b5174:	2003e128 	.word	0x2003e128
   b5178:	2003e114 	.word	0x2003e114
   b517c:	2003deb8 	.word	0x2003deb8
   b5180:	2003df78 	.word	0x2003df78
   b5184:	2003e13c 	.word	0x2003e13c
   b5188:	2003e124 	.word	0x2003e124

000b518c <_Z9End_Pointv>:
void End_Point() {
   b518c:	b530      	push	{r4, r5, lr}
   b518e:	b085      	sub	sp, #20
  Serial.println("Calling End Point function..."); 
   b5190:	f002 fcf2 	bl	b7b78 <_Z16_fetch_usbserialv>
   b5194:	4926      	ldr	r1, [pc, #152]	; (b5230 <_Z9End_Pointv+0xa4>)
   b5196:	f002 f8b6 	bl	b7306 <_ZN5Print7printlnEPKc>
      uint32_t freemem = System.freeMemory();
   b519a:	f002 fb21 	bl	b77e0 <_ZN11SystemClass10freeMemoryEv>
   b519e:	4605      	mov	r5, r0
      Serial.print("free memory: ");
   b51a0:	f002 fcea 	bl	b7b78 <_Z16_fetch_usbserialv>
   b51a4:	4923      	ldr	r1, [pc, #140]	; (b5234 <_Z9End_Pointv+0xa8>)
   b51a6:	f002 f89b 	bl	b72e0 <_ZN5Print5printEPKc>
      Serial.println(freemem);
   b51aa:	f002 fce5 	bl	b7b78 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b51ae:	220a      	movs	r2, #10
   b51b0:	4604      	mov	r4, r0
   b51b2:	4629      	mov	r1, r5
   b51b4:	f002 f8b1 	bl	b731a <_ZN5Print11printNumberEmh>
        n += println();
   b51b8:	4620      	mov	r0, r4
   b51ba:	f002 f898 	bl	b72ee <_ZN5Print7printlnEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b51be:	f001 fa2f 	bl	b6620 <spark_cloud_flag_connected>
   if (Particle.connected() == false) {
   b51c2:	bb98      	cbnz	r0, b522c <_Z9End_Pointv+0xa0>
      Serial.println("IF Statement executing");
   b51c4:	f002 fcd8 	bl	b7b78 <_Z16_fetch_usbserialv>
   b51c8:	491b      	ldr	r1, [pc, #108]	; (b5238 <_Z9End_Pointv+0xac>)
   b51ca:	f002 f89c 	bl	b7306 <_ZN5Print7printlnEPKc>
      digitalWrite(LDO_EN, HIGH);
   b51ce:	2101      	movs	r1, #1
   b51d0:	2017      	movs	r0, #23
   b51d2:	f002 fe34 	bl	b7e3e <digitalWrite>
      delay(1000);
   b51d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b51da:	f001 fb11 	bl	b6800 <delay>
      Cellular.on();
   b51de:	4817      	ldr	r0, [pc, #92]	; (b523c <_Z9End_Pointv+0xb0>)
   b51e0:	f7ff fb99 	bl	b4916 <_ZN5spark13CellularClass2onEv>
      waitUntil(Cellular.isOn);
   b51e4:	4815      	ldr	r0, [pc, #84]	; (b523c <_Z9End_Pointv+0xb0>)
   b51e6:	f001 ffc1 	bl	b716c <_ZN5spark12NetworkClass4isOnEv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b51ea:	b910      	cbnz	r0, b51f2 <_Z9End_Pointv+0x66>
            spark_process();
   b51ec:	f001 fa08 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b51f0:	e7f8      	b.n	b51e4 <_Z9End_Pointv+0x58>
   b51f2:	4812      	ldr	r0, [pc, #72]	; (b523c <_Z9End_Pointv+0xb0>)
   b51f4:	f001 ffba 	bl	b716c <_ZN5spark12NetworkClass4isOnEv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b51f8:	f001 fa0a 	bl	b6610 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b51fc:	f001 fa10 	bl	b6620 <spark_cloud_flag_connected>
   b5200:	b910      	cbnz	r0, b5208 <_Z9End_Pointv+0x7c>
            spark_process();
   b5202:	f001 f9fd 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b5206:	e7f9      	b.n	b51fc <_Z9End_Pointv+0x70>
   b5208:	f001 fa0a 	bl	b6620 <spark_cloud_flag_connected>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b520c:	4b0c      	ldr	r3, [pc, #48]	; (b5240 <_Z9End_Pointv+0xb4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b520e:	4a0d      	ldr	r2, [pc, #52]	; (b5244 <_Z9End_Pointv+0xb8>)
   b5210:	781b      	ldrb	r3, [r3, #0]
   b5212:	490d      	ldr	r1, [pc, #52]	; (b5248 <_Z9End_Pointv+0xbc>)
   b5214:	f88d 3000 	strb.w	r3, [sp]
   b5218:	a802      	add	r0, sp, #8
   b521a:	233c      	movs	r3, #60	; 0x3c
   b521c:	f001 fcd2 	bl	b6bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5220:	a803      	add	r0, sp, #12
   b5222:	f7ff ff43 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      new_end_point_STATE = 1;  
   b5226:	4b09      	ldr	r3, [pc, #36]	; (b524c <_Z9End_Pointv+0xc0>)
   b5228:	2201      	movs	r2, #1
   b522a:	601a      	str	r2, [r3, #0]
}
   b522c:	b005      	add	sp, #20
   b522e:	bd30      	pop	{r4, r5, pc}
   b5230:	000b8445 	.word	0x000b8445
   b5234:	000b8463 	.word	0x000b8463
   b5238:	000b8471 	.word	0x000b8471
   b523c:	2003e660 	.word	0x2003e660
   b5240:	2003e091 	.word	0x2003e091
   b5244:	2003de28 	.word	0x2003de28
   b5248:	000b8496 	.word	0x000b8496
   b524c:	2003e138 	.word	0x2003e138

000b5250 <setup>:
void setup() {
   b5250:	b530      	push	{r4, r5, lr}
   b5252:	b087      	sub	sp, #28
  Serial.begin(115200);
   b5254:	f002 fc90 	bl	b7b78 <_Z16_fetch_usbserialv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5258:	2500      	movs	r5, #0
   b525a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b525e:	f002 fc7f 	bl	b7b60 <_ZN9USBSerial5beginEl>
   b5262:	4925      	ldr	r1, [pc, #148]	; (b52f8 <setup+0xa8>)
   b5264:	4825      	ldr	r0, [pc, #148]	; (b52fc <setup+0xac>)
   b5266:	462b      	mov	r3, r5
   b5268:	462a      	mov	r2, r5
   b526a:	e9cd 5500 	strd	r5, r5, [sp]
   b526e:	f001 f9e7 	bl	b6640 <spark_subscribe>
inline CloudDisconnectOptions::CloudDisconnectOptions() :
        CloudDisconnectOptions(0, 0, false, false) {
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
   b5272:	2401      	movs	r4, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b5274:	2203      	movs	r2, #3
   b5276:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
   b527a:	a803      	add	r0, sp, #12
   b527c:	e9cd 2303 	strd	r2, r3, [sp, #12]
        bool clearSession) :
   b5280:	f8ad 4014 	strh.w	r4, [sp, #20]
   b5284:	f001 fb9b 	bl	b69be <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  pinMode(BATON, OUTPUT);
   b5288:	4621      	mov	r1, r4
   b528a:	2016      	movs	r0, #22
   b528c:	f002 fdc6 	bl	b7e1c <pinMode>
  digitalWrite(BATON,HIGH);
   b5290:	4621      	mov	r1, r4
   b5292:	2016      	movs	r0, #22
   b5294:	f002 fdd3 	bl	b7e3e <digitalWrite>
  pinMode (BUZZER, OUTPUT);
   b5298:	4621      	mov	r1, r4
   b529a:	2009      	movs	r0, #9
   b529c:	f002 fdbe 	bl	b7e1c <pinMode>
  digitalWrite (BUZZER, LOW);
   b52a0:	4629      	mov	r1, r5
   b52a2:	2009      	movs	r0, #9
   b52a4:	f002 fdcb 	bl	b7e3e <digitalWrite>
  pinMode(LDO_EN, OUTPUT);
   b52a8:	4621      	mov	r1, r4
   b52aa:	2017      	movs	r0, #23
   b52ac:	f002 fdb6 	bl	b7e1c <pinMode>
  digitalWrite(LDO_EN, HIGH);
   b52b0:	4621      	mov	r1, r4
   b52b2:	2017      	movs	r0, #23
   b52b4:	f002 fdc3 	bl	b7e3e <digitalWrite>
  gauge.reset();                                  // Resets MAX1720x
   b52b8:	4811      	ldr	r0, [pc, #68]	; (b5300 <setup+0xb0>)
  while (!nfc.begin()) {
   b52ba:	4d12      	ldr	r5, [pc, #72]	; (b5304 <setup+0xb4>)
    Serial.print(".");
   b52bc:	4c12      	ldr	r4, [pc, #72]	; (b5308 <setup+0xb8>)
  gauge.reset();                                  // Resets MAX1720x
   b52be:	f000 fd0b 	bl	b5cd8 <_ZN8max1720x5resetEv>
  Serial.println();
   b52c2:	f002 fc59 	bl	b7b78 <_Z16_fetch_usbserialv>
   b52c6:	f002 f812 	bl	b72ee <_ZN5Print7printlnEv>
  Serial.print("Initializing PN532");
   b52ca:	f002 fc55 	bl	b7b78 <_Z16_fetch_usbserialv>
   b52ce:	490f      	ldr	r1, [pc, #60]	; (b530c <setup+0xbc>)
   b52d0:	f002 f806 	bl	b72e0 <_ZN5Print5printEPKc>
  while (!nfc.begin()) {
   b52d4:	4628      	mov	r0, r5
   b52d6:	f000 ffa3 	bl	b6220 <_ZN17DFRobot_PN532_IIC5beginEv>
   b52da:	b940      	cbnz	r0, b52ee <setup+0x9e>
    Serial.print(".");
   b52dc:	f002 fc4c 	bl	b7b78 <_Z16_fetch_usbserialv>
   b52e0:	4621      	mov	r1, r4
   b52e2:	f001 fffd 	bl	b72e0 <_ZN5Print5printEPKc>
    delay (100);
   b52e6:	2064      	movs	r0, #100	; 0x64
   b52e8:	f001 fa8a 	bl	b6800 <delay>
  while (!nfc.begin()) {
   b52ec:	e7f2      	b.n	b52d4 <setup+0x84>
}
   b52ee:	b007      	add	sp, #28
   b52f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  End_Point();                                      //Retrieve initial schedule
   b52f4:	f7ff bf4a 	b.w	b518c <_Z9End_Pointv>
   b52f8:	000b5041 	.word	0x000b5041
   b52fc:	000b8488 	.word	0x000b8488
   b5300:	2003e124 	.word	0x2003e124
   b5304:	2003e13c 	.word	0x2003e13c
   b5308:	000b8461 	.word	0x000b8461
   b530c:	000b849f 	.word	0x000b849f

000b5310 <_Z12publish_datav>:
void publish_data(void){                      // this function publish the JSON to particle console
   b5310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5314:	b08e      	sub	sp, #56	; 0x38
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5316:	f001 f983 	bl	b6620 <spark_cloud_flag_connected>
   if (Particle.connected() == false) {
   b531a:	bb18      	cbnz	r0, b5364 <_Z12publish_datav+0x54>
      Serial.println("Sending RFID data");
   b531c:	f002 fc2c 	bl	b7b78 <_Z16_fetch_usbserialv>
   b5320:	4933      	ldr	r1, [pc, #204]	; (b53f0 <_Z12publish_datav+0xe0>)
   b5322:	f001 fff0 	bl	b7306 <_ZN5Print7printlnEPKc>
      digitalWrite(LDO_EN, HIGH);
   b5326:	2101      	movs	r1, #1
   b5328:	2017      	movs	r0, #23
   b532a:	f002 fd88 	bl	b7e3e <digitalWrite>
      delay(1000);
   b532e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5332:	f001 fa65 	bl	b6800 <delay>
      Cellular.on();
   b5336:	482f      	ldr	r0, [pc, #188]	; (b53f4 <_Z12publish_datav+0xe4>)
   b5338:	f7ff faed 	bl	b4916 <_ZN5spark13CellularClass2onEv>
      waitUntil(Cellular.isOn);
   b533c:	482d      	ldr	r0, [pc, #180]	; (b53f4 <_Z12publish_datav+0xe4>)
   b533e:	f001 ff15 	bl	b716c <_ZN5spark12NetworkClass4isOnEv>
   b5342:	b910      	cbnz	r0, b534a <_Z12publish_datav+0x3a>
            spark_process();
   b5344:	f001 f95c 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b5348:	e7f8      	b.n	b533c <_Z12publish_datav+0x2c>
   b534a:	482a      	ldr	r0, [pc, #168]	; (b53f4 <_Z12publish_datav+0xe4>)
   b534c:	f001 ff0e 	bl	b716c <_ZN5spark12NetworkClass4isOnEv>
        spark_cloud_flag_connect();
   b5350:	f001 f95e 	bl	b6610 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5354:	f001 f964 	bl	b6620 <spark_cloud_flag_connected>
   b5358:	b910      	cbnz	r0, b5360 <_Z12publish_datav+0x50>
            spark_process();
   b535a:	f001 f951 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b535e:	e7f9      	b.n	b5354 <_Z12publish_datav+0x44>
   b5360:	f001 f95e 	bl	b6620 <spark_cloud_flag_connected>
	const char * c_str() const { return buffer; }
   b5364:	4e24      	ldr	r6, [pc, #144]	; (b53f8 <_Z12publish_datav+0xe8>)
   b5366:	4c25      	ldr	r4, [pc, #148]	; (b53fc <_Z12publish_datav+0xec>)
    Particle.publish("Device data", String::format("{\"Scans\":[{\"EventId\":%d,\"ReaderMode\":\"%s\",\"TimeStamp\":\"%s\",\"Identifier\":\"%s\"},{\"EventId\":%d,\"ReaderMode\":\"%s\",\"TimeStamp\":\"%s\",\"Identifier\":\"%s\"}]}", atoi(ApiData1.id), ApiData1.readerMode.c_str(),TimeStamp.c_str(),Identifier.c_str(),atoi(ApiData2.id), ApiData1.readerMode.c_str(),TimeStamp.c_str(),Identifier.c_str()));
   b5368:	6830      	ldr	r0, [r6, #0]
   b536a:	4d25      	ldr	r5, [pc, #148]	; (b5400 <_Z12publish_datav+0xf0>)
   b536c:	f002 fe1d 	bl	b7faa <atoi>
   b5370:	4924      	ldr	r1, [pc, #144]	; (b5404 <_Z12publish_datav+0xf4>)
   b5372:	6a33      	ldr	r3, [r6, #32]
   b5374:	9007      	str	r0, [sp, #28]
   b5376:	6808      	ldr	r0, [r1, #0]
   b5378:	6827      	ldr	r7, [r4, #0]
   b537a:	f8d5 8000 	ldr.w	r8, [r5]
   b537e:	9306      	str	r3, [sp, #24]
   b5380:	f002 fe13 	bl	b7faa <atoi>
   b5384:	6829      	ldr	r1, [r5, #0]
   b5386:	9105      	str	r1, [sp, #20]
   b5388:	6821      	ldr	r1, [r4, #0]
   b538a:	9104      	str	r1, [sp, #16]
   b538c:	6a31      	ldr	r1, [r6, #32]
   b538e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b5392:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5396:	e9cd 7800 	strd	r7, r8, [sp]
   b539a:	a80a      	add	r0, sp, #40	; 0x28
   b539c:	491a      	ldr	r1, [pc, #104]	; (b5408 <_Z12publish_datav+0xf8>)
   b539e:	f002 f9f7 	bl	b7790 <_ZN6String6formatEPKcz>
   b53a2:	4b1a      	ldr	r3, [pc, #104]	; (b540c <_Z12publish_datav+0xfc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b53a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b53a6:	781b      	ldrb	r3, [r3, #0]
   b53a8:	4919      	ldr	r1, [pc, #100]	; (b5410 <_Z12publish_datav+0x100>)
   b53aa:	f88d 3000 	strb.w	r3, [sp]
   b53ae:	a808      	add	r0, sp, #32
   b53b0:	233c      	movs	r3, #60	; 0x3c
   b53b2:	f001 fc07 	bl	b6bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b53b6:	a809      	add	r0, sp, #36	; 0x24
   b53b8:	f7ff fe78 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b53bc:	a80a      	add	r0, sp, #40	; 0x28
   b53be:	f002 f8af 	bl	b7520 <_ZN6StringD1Ev>
    Serial.println("Clearing String buffer");             //Clear after publish.
   b53c2:	f002 fbd9 	bl	b7b78 <_Z16_fetch_usbserialv>
   b53c6:	4913      	ldr	r1, [pc, #76]	; (b5414 <_Z12publish_datav+0x104>)
   b53c8:	f001 ff9d 	bl	b7306 <_ZN5Print7printlnEPKc>
    Identifier = ("");    
   b53cc:	4912      	ldr	r1, [pc, #72]	; (b5418 <_Z12publish_datav+0x108>)
   b53ce:	4628      	mov	r0, r5
   b53d0:	f002 f948 	bl	b7664 <_ZN6StringaSEPKc>
    TimeStamp = ("");
   b53d4:	4910      	ldr	r1, [pc, #64]	; (b5418 <_Z12publish_datav+0x108>)
   b53d6:	4620      	mov	r0, r4
   b53d8:	f002 f944 	bl	b7664 <_ZN6StringaSEPKc>
    RFID_counter = 0;
   b53dc:	4b0f      	ldr	r3, [pc, #60]	; (b541c <_Z12publish_datav+0x10c>)
   b53de:	2200      	movs	r2, #0
   b53e0:	601a      	str	r2, [r3, #0]
    previous_Publish_Millis = current_Publish_Millis;
   b53e2:	4b0f      	ldr	r3, [pc, #60]	; (b5420 <_Z12publish_datav+0x110>)
   b53e4:	681a      	ldr	r2, [r3, #0]
   b53e6:	4b0f      	ldr	r3, [pc, #60]	; (b5424 <_Z12publish_datav+0x114>)
   b53e8:	601a      	str	r2, [r3, #0]
}
   b53ea:	b00e      	add	sp, #56	; 0x38
   b53ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b53f0:	000b84b2 	.word	0x000b84b2
   b53f4:	2003e660 	.word	0x2003e660
   b53f8:	2003deb8 	.word	0x2003deb8
   b53fc:	2003e080 	.word	0x2003e080
   b5400:	2003e04c 	.word	0x2003e04c
   b5404:	2003df78 	.word	0x2003df78
   b5408:	000b84c4 	.word	0x000b84c4
   b540c:	2003e090 	.word	0x2003e090
   b5410:	000b8558 	.word	0x000b8558
   b5414:	000b8564 	.word	0x000b8564
   b5418:	000b8444 	.word	0x000b8444
   b541c:	2003e05c 	.word	0x2003e05c
   b5420:	2003e100 	.word	0x2003e100
   b5424:	2003e18c 	.word	0x2003e18c

000b5428 <_Z4RFIDv>:
void RFID () {
   b5428:	b570      	push	{r4, r5, r6, lr}
if (nfc.scan()) {
   b542a:	483a      	ldr	r0, [pc, #232]	; (b5514 <_Z4RFIDv+0xec>)
void RFID () {
   b542c:	b088      	sub	sp, #32
if (nfc.scan()) {
   b542e:	f000 fd2c 	bl	b5e8a <_ZN13DFRobot_PN5324scanEv>
   b5432:	b158      	cbz	r0, b544c <_Z4RFIDv+0x24>
    if (nfc.readData(dataRead, READ_BLOCK_NO) != 1) {
   b5434:	4938      	ldr	r1, [pc, #224]	; (b5518 <_Z4RFIDv+0xf0>)
   b5436:	4837      	ldr	r0, [pc, #220]	; (b5514 <_Z4RFIDv+0xec>)
   b5438:	2202      	movs	r2, #2
   b543a:	f000 fddd 	bl	b5ff8 <_ZN13DFRobot_PN5328readDataEPhh>
   b543e:	2801      	cmp	r0, #1
   b5440:	d00a      	beq.n	b5458 <_Z4RFIDv+0x30>
      Serial.println("FAILED - PLEASE SCAN AGAIN!");
   b5442:	f002 fb99 	bl	b7b78 <_Z16_fetch_usbserialv>
   b5446:	4935      	ldr	r1, [pc, #212]	; (b551c <_Z4RFIDv+0xf4>)
   b5448:	f001 ff5d 	bl	b7306 <_ZN5Print7printlnEPKc>
    delay(50);
   b544c:	2032      	movs	r0, #50	; 0x32
}
   b544e:	b008      	add	sp, #32
   b5450:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(50);
   b5454:	f001 b9d4 	b.w	b6800 <delay>
      String temp_UID;
   b5458:	4931      	ldr	r1, [pc, #196]	; (b5520 <_Z4RFIDv+0xf8>)
   b545a:	4d2f      	ldr	r5, [pc, #188]	; (b5518 <_Z4RFIDv+0xf0>)
   b545c:	4668      	mov	r0, sp
   b545e:	f002 f8aa 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
   b5462:	240a      	movs	r4, #10
        dataRead[i
   b5464:	2600      	movs	r6, #0
        temp_UID += (String(dataRead[i], HEX));          
   b5466:	2210      	movs	r2, #16
   b5468:	7829      	ldrb	r1, [r5, #0]
   b546a:	eb0d 0002 	add.w	r0, sp, r2
   b546e:	f002 f90b 	bl	b7688 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5472:	a904      	add	r1, sp, #16
   b5474:	4668      	mov	r0, sp
   b5476:	f002 f943 	bl	b7700 <_ZN6String6concatERKS_>
   b547a:	a804      	add	r0, sp, #16
   b547c:	f002 f850 	bl	b7520 <_ZN6StringD1Ev>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b5480:	3c01      	subs	r4, #1
        dataRead[i
   b5482:	f805 6b01 	strb.w	r6, [r5], #1
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b5486:	d1ee      	bne.n	b5466 <_Z4RFIDv+0x3e>
        RealTime();
   b5488:	f7ff fc96 	bl	b4db8 <_Z8RealTimev>
	StringSumHelper(const String &s) : String(s) {}
   b548c:	4669      	mov	r1, sp
   b548e:	a804      	add	r0, sp, #16
   b5490:	f002 f8dd 	bl	b764e <_ZN6StringC1ERKS_>
        Identifier += ((temp_UID) + ",");
   b5494:	4923      	ldr	r1, [pc, #140]	; (b5524 <_Z4RFIDv+0xfc>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5496:	4d24      	ldr	r5, [pc, #144]	; (b5528 <_Z4RFIDv+0x100>)
   b5498:	4c24      	ldr	r4, [pc, #144]	; (b552c <_Z4RFIDv+0x104>)
   b549a:	a804      	add	r0, sp, #16
   b549c:	f002 f951 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b54a0:	4601      	mov	r1, r0
   b54a2:	4628      	mov	r0, r5
   b54a4:	f002 f92c 	bl	b7700 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   b54a8:	a804      	add	r0, sp, #16
   b54aa:	f002 f839 	bl	b7520 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b54ae:	4920      	ldr	r1, [pc, #128]	; (b5530 <_Z4RFIDv+0x108>)
   b54b0:	a804      	add	r0, sp, #16
   b54b2:	f002 f8cc 	bl	b764e <_ZN6StringC1ERKS_>
        TimeStamp += (data_time +",");
   b54b6:	491b      	ldr	r1, [pc, #108]	; (b5524 <_Z4RFIDv+0xfc>)
   b54b8:	a804      	add	r0, sp, #16
   b54ba:	f002 f942 	bl	b7742 <_ZplRK15StringSumHelperPKc>
   b54be:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b54c0:	4620      	mov	r0, r4
   b54c2:	f002 f91d 	bl	b7700 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   b54c6:	a804      	add	r0, sp, #16
   b54c8:	f002 f82a 	bl	b7520 <_ZN6StringD1Ev>
        Serial.print(Identifier);             //DEBUG
   b54cc:	f002 fb54 	bl	b7b78 <_Z16_fetch_usbserialv>
   b54d0:	6829      	ldr	r1, [r5, #0]
   b54d2:	f001 ff05 	bl	b72e0 <_ZN5Print5printEPKc>
        Serial.println();                     //DEBUG
   b54d6:	f002 fb4f 	bl	b7b78 <_Z16_fetch_usbserialv>
   b54da:	f001 ff08 	bl	b72ee <_ZN5Print7printlnEv>
        Serial.print(TimeStamp);              //DEBUG
   b54de:	f002 fb4b 	bl	b7b78 <_Z16_fetch_usbserialv>
   b54e2:	6821      	ldr	r1, [r4, #0]
   b54e4:	f001 fefc 	bl	b72e0 <_ZN5Print5printEPKc>
        Serial.println();                     //DEBUG
   b54e8:	f002 fb46 	bl	b7b78 <_Z16_fetch_usbserialv>
   b54ec:	f001 feff 	bl	b72ee <_ZN5Print7printlnEv>
        RFID_counter = RFID_counter + 1;     
   b54f0:	4a10      	ldr	r2, [pc, #64]	; (b5534 <_Z4RFIDv+0x10c>)
   b54f2:	6813      	ldr	r3, [r2, #0]
   b54f4:	3301      	adds	r3, #1
        if (RFID_counter == 5) {
   b54f6:	2b05      	cmp	r3, #5
        RFID_counter = RFID_counter + 1;     
   b54f8:	6013      	str	r3, [r2, #0]
        if (RFID_counter == 5) {
   b54fa:	d106      	bne.n	b550a <_Z4RFIDv+0xe2>
          Serial.println("Publish data on count");             
   b54fc:	f002 fb3c 	bl	b7b78 <_Z16_fetch_usbserialv>
   b5500:	490d      	ldr	r1, [pc, #52]	; (b5538 <_Z4RFIDv+0x110>)
   b5502:	f001 ff00 	bl	b7306 <_ZN5Print7printlnEPKc>
          publish_data();
   b5506:	f7ff ff03 	bl	b5310 <_Z12publish_datav>
      String temp_UID;
   b550a:	4668      	mov	r0, sp
   b550c:	f002 f808 	bl	b7520 <_ZN6StringD1Ev>
   b5510:	e79c      	b.n	b544c <_Z4RFIDv+0x24>
   b5512:	bf00      	nop
   b5514:	2003e13c 	.word	0x2003e13c
   b5518:	2003e104 	.word	0x2003e104
   b551c:	000b857b 	.word	0x000b857b
   b5520:	000b8444 	.word	0x000b8444
   b5524:	000b8597 	.word	0x000b8597
   b5528:	2003e04c 	.word	0x2003e04c
   b552c:	2003e080 	.word	0x2003e080
   b5530:	2003e114 	.word	0x2003e114
   b5534:	2003e05c 	.word	0x2003e05c
   b5538:	000b8599 	.word	0x000b8599

000b553c <loop>:
void loop() {
   b553c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b553e:	f001 f86f 	bl	b6620 <spark_cloud_flag_connected>
        if (!connected()) {
   b5542:	b110      	cbz	r0, b554a <loop+0xe>
        return spark_sync_time(NULL);
   b5544:	2000      	movs	r0, #0
   b5546:	f001 f883 	bl	b6650 <spark_sync_time>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b554a:	f000 feb5 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
current_FG_Millis = millis();
   b554e:	4b32      	ldr	r3, [pc, #200]	; (b5618 <loop+0xdc>)
current_EPD_Millis = millis();
   b5550:	4d32      	ldr	r5, [pc, #200]	; (b561c <loop+0xe0>)
current_FG_Millis = millis();
   b5552:	6018      	str	r0, [r3, #0]
   b5554:	f000 feb0 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
current_EPD_Millis = millis();
   b5558:	6028      	str	r0, [r5, #0]
   b555a:	f000 fead 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
  if ((current_EPD_Millis - previous_EPD_Millis >= EPD_interval) && (new_end_point_STATE == 0)) {
   b555e:	4a30      	ldr	r2, [pc, #192]	; (b5620 <loop+0xe4>)
   b5560:	682b      	ldr	r3, [r5, #0]
   b5562:	6812      	ldr	r2, [r2, #0]
current_Publish_Millis = millis();  
   b5564:	4c2f      	ldr	r4, [pc, #188]	; (b5624 <loop+0xe8>)
  if ((current_EPD_Millis - previous_EPD_Millis >= EPD_interval) && (new_end_point_STATE == 0)) {
   b5566:	1a9b      	subs	r3, r3, r2
   b5568:	4a2f      	ldr	r2, [pc, #188]	; (b5628 <loop+0xec>)
current_Publish_Millis = millis();  
   b556a:	6020      	str	r0, [r4, #0]
  if ((current_EPD_Millis - previous_EPD_Millis >= EPD_interval) && (new_end_point_STATE == 0)) {
   b556c:	6812      	ldr	r2, [r2, #0]
   b556e:	4293      	cmp	r3, r2
   b5570:	d304      	bcc.n	b557c <loop+0x40>
   b5572:	4b2e      	ldr	r3, [pc, #184]	; (b562c <loop+0xf0>)
   b5574:	681b      	ldr	r3, [r3, #0]
   b5576:	b90b      	cbnz	r3, b557c <loop+0x40>
      End_Point();
   b5578:	f7ff fe08 	bl	b518c <_Z9End_Pointv>
  if ((current_Publish_Millis - previous_Publish_Millis >= Publish_interval)) {
   b557c:	4a2c      	ldr	r2, [pc, #176]	; (b5630 <loop+0xf4>)
   b557e:	6823      	ldr	r3, [r4, #0]
   b5580:	6812      	ldr	r2, [r2, #0]
   b5582:	1a9b      	subs	r3, r3, r2
   b5584:	4a2b      	ldr	r2, [pc, #172]	; (b5634 <loop+0xf8>)
   b5586:	6812      	ldr	r2, [r2, #0]
   b5588:	4293      	cmp	r3, r2
   b558a:	d306      	bcc.n	b559a <loop+0x5e>
      Serial.println("Publish data on time"); 
   b558c:	f002 faf4 	bl	b7b78 <_Z16_fetch_usbserialv>
   b5590:	4929      	ldr	r1, [pc, #164]	; (b5638 <loop+0xfc>)
   b5592:	f001 feb8 	bl	b7306 <_ZN5Print7printlnEPKc>
      publish_data(); 
   b5596:	f7ff febb 	bl	b5310 <_Z12publish_datav>
  if (Handler_STATE == 1) {    
   b559a:	4d28      	ldr	r5, [pc, #160]	; (b563c <loop+0x100>)
   b559c:	682b      	ldr	r3, [r5, #0]
   b559e:	2b01      	cmp	r3, #1
   b55a0:	d12f      	bne.n	b5602 <loop+0xc6>
        clearSession_(clearSession) {
   b55a2:	2300      	movs	r3, #0
      Particle.disconnect();                                                 // Use only in SEMI_AUTOMATIC mode
   b55a4:	a801      	add	r0, sp, #4
   b55a6:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b55aa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b55ae:	f001 f9ec 	bl	b698a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b55b2:	f001 f835 	bl	b6620 <spark_cloud_flag_connected>
   b55b6:	4604      	mov	r4, r0
   b55b8:	b110      	cbz	r0, b55c0 <loop+0x84>
            spark_process();
   b55ba:	f001 f821 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b55be:	e7f8      	b.n	b55b2 <loop+0x76>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b55c0:	4e1f      	ldr	r6, [pc, #124]	; (b5640 <loop+0x104>)
   b55c2:	f001 f82d 	bl	b6620 <spark_cloud_flag_connected>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b55c6:	6870      	ldr	r0, [r6, #4]
   b55c8:	4623      	mov	r3, r4
   b55ca:	4622      	mov	r2, r4
   b55cc:	4621      	mov	r1, r4
   b55ce:	f001 f88f 	bl	b66f0 <network_off>
      waitUntil(Cellular.isOff);
   b55d2:	4630      	mov	r0, r6
   b55d4:	f001 fdce 	bl	b7174 <_ZN5spark12NetworkClass5isOffEv>
   b55d8:	b910      	cbnz	r0, b55e0 <loop+0xa4>
            spark_process();
   b55da:	f001 f811 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b55de:	e7f8      	b.n	b55d2 <loop+0x96>
   b55e0:	4817      	ldr	r0, [pc, #92]	; (b5640 <loop+0x104>)
   b55e2:	f001 fdc7 	bl	b7174 <_ZN5spark12NetworkClass5isOffEv>
      delay(10);
   b55e6:	200a      	movs	r0, #10
   b55e8:	f001 f90a 	bl	b6800 <delay>
      digitalWrite(LDO_EN, LOW);
   b55ec:	2100      	movs	r1, #0
   b55ee:	2017      	movs	r0, #23
   b55f0:	f002 fc25 	bl	b7e3e <digitalWrite>
      Serial.println("LDO Disconnected");
   b55f4:	f002 fac0 	bl	b7b78 <_Z16_fetch_usbserialv>
   b55f8:	4912      	ldr	r1, [pc, #72]	; (b5644 <loop+0x108>)
   b55fa:	f001 fe84 	bl	b7306 <_ZN5Print7printlnEPKc>
      Handler_STATE = 0;
   b55fe:	2300      	movs	r3, #0
   b5600:	602b      	str	r3, [r5, #0]
  if (new_end_point_STATE == 2) {
   b5602:	4b0a      	ldr	r3, [pc, #40]	; (b562c <loop+0xf0>)
   b5604:	681b      	ldr	r3, [r3, #0]
   b5606:	2b02      	cmp	r3, #2
   b5608:	d101      	bne.n	b560e <loop+0xd2>
      EPD();
   b560a:	f7ff f9cd 	bl	b49a8 <_Z3EPDv>
}
   b560e:	b004      	add	sp, #16
   b5610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RFID();
   b5614:	f7ff bf08 	b.w	b5428 <_Z4RFIDv>
   b5618:	2003e0fc 	.word	0x2003e0fc
   b561c:	2003e0f8 	.word	0x2003e0f8
   b5620:	2003e188 	.word	0x2003e188
   b5624:	2003e100 	.word	0x2003e100
   b5628:	2003de20 	.word	0x2003de20
   b562c:	2003e138 	.word	0x2003e138
   b5630:	2003e18c 	.word	0x2003e18c
   b5634:	2003de24 	.word	0x2003de24
   b5638:	000b85af 	.word	0x000b85af
   b563c:	2003e048 	.word	0x2003e048
   b5640:	2003e660 	.word	0x2003e660
   b5644:	000b85c4 	.word	0x000b85c4

000b5648 <_ZN3EpdD1Ev>:

#include <stdlib.h>
//#include "epd4in2b_V2.h"
#include "../lib/EPD4_2/src/epd4in2b_V2.h"

Epd::~Epd() {
   b5648:	b510      	push	{r4, lr}
   b564a:	4604      	mov	r4, r0
   b564c:	f000 f96f 	bl	b592e <_ZN5EpdIfD1Ev>
};
   b5650:	4620      	mov	r0, r4
   b5652:	bd10      	pop	{r4, pc}

000b5654 <_ZN3EpdC1Ev>:

Epd::Epd() {
   b5654:	b510      	push	{r4, lr}
   b5656:	4604      	mov	r4, r0
   b5658:	f000 f968 	bl	b592c <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b565c:	2206      	movs	r2, #6
   b565e:	2305      	movs	r3, #5
   b5660:	e9c4 2302 	strd	r2, r3, [r4, #8]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b5664:	2108      	movs	r1, #8
   b5666:	2307      	movs	r3, #7
   b5668:	e9c4 1304 	strd	r1, r3, [r4, #16]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b566c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5670:	f44f 7396 	mov.w	r3, #300	; 0x12c
   b5674:	e9c4 0300 	strd	r0, r3, [r4]
};
   b5678:	4620      	mov	r0, r4
   b567a:	bd10      	pop	{r4, pc}

000b567c <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
   b567c:	b510      	push	{r4, lr}
   b567e:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
   b5680:	68c0      	ldr	r0, [r0, #12]
   b5682:	2100      	movs	r1, #0
   b5684:	f000 f954 	bl	b5930 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
   b5688:	4620      	mov	r0, r4
}
   b568a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
   b568e:	f000 b9a1 	b.w	b59d4 <_ZN5EpdIf11SpiTransferEh>

000b5692 <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
   b5692:	b510      	push	{r4, lr}
   b5694:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
   b5696:	68c0      	ldr	r0, [r0, #12]
   b5698:	2101      	movs	r1, #1
   b569a:	f000 f949 	bl	b5930 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
   b569e:	4620      	mov	r0, r4
}
   b56a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
   b56a4:	f000 b996 	b.w	b59d4 <_ZN5EpdIf11SpiTransferEh>

000b56a8 <_ZN3Epd13WaitUntilIdleEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::WaitUntilIdle(void) {
   b56a8:	b510      	push	{r4, lr}
   b56aa:	4604      	mov	r4, r0
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b56ac:	6960      	ldr	r0, [r4, #20]
   b56ae:	f000 f943 	bl	b5938 <_ZN5EpdIf11DigitalReadEi>
   b56b2:	b918      	cbnz	r0, b56bc <_ZN3Epd13WaitUntilIdleEv+0x14>
        DelayMs(100);
   b56b4:	2064      	movs	r0, #100	; 0x64
   b56b6:	f000 f942 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b56ba:	e7f7      	b.n	b56ac <_ZN3Epd13WaitUntilIdleEv+0x4>
    }      
}
   b56bc:	bd10      	pop	{r4, pc}

000b56be <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset. 
 *          often used to awaken the module in deep sleep, 
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
   b56be:	b510      	push	{r4, lr}
    DigitalWrite(reset_pin, HIGH);
   b56c0:	2101      	movs	r1, #1
void Epd::Reset(void) {
   b56c2:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
   b56c4:	6880      	ldr	r0, [r0, #8]
   b56c6:	f000 f933 	bl	b5930 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
   b56ca:	20c8      	movs	r0, #200	; 0xc8
   b56cc:	f000 f937 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);
   b56d0:	68a0      	ldr	r0, [r4, #8]
   b56d2:	2100      	movs	r1, #0
   b56d4:	f000 f92c 	bl	b5930 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
   b56d8:	2002      	movs	r0, #2
   b56da:	f000 f930 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
   b56de:	68a0      	ldr	r0, [r4, #8]
   b56e0:	2101      	movs	r1, #1
   b56e2:	f000 f925 	bl	b5930 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
}
   b56e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);   
   b56ea:	20c8      	movs	r0, #200	; 0xc8
   b56ec:	f000 b927 	b.w	b593e <_ZN5EpdIf7DelayMsEj>

000b56f0 <_ZN3Epd4InitEv>:
int Epd::Init(void) {
   b56f0:	b538      	push	{r3, r4, r5, lr}
   b56f2:	4604      	mov	r4, r0
    if (IfInit() != 0) {
   b56f4:	f000 f942 	bl	b597c <_ZN5EpdIf6IfInitEv>
   b56f8:	4605      	mov	r5, r0
   b56fa:	b998      	cbnz	r0, b5724 <_ZN3Epd4InitEv+0x34>
    Reset();
   b56fc:	4620      	mov	r0, r4
   b56fe:	f7ff ffde 	bl	b56be <_ZN3Epd5ResetEv>
    SendCommand(POWER_ON);
   b5702:	2104      	movs	r1, #4
   b5704:	4620      	mov	r0, r4
   b5706:	f7ff ffb9 	bl	b567c <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b570a:	4620      	mov	r0, r4
   b570c:	f7ff ffcc 	bl	b56a8 <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(PANEL_SETTING);
   b5710:	4629      	mov	r1, r5
   b5712:	4620      	mov	r0, r4
   b5714:	f7ff ffb2 	bl	b567c <_ZN3Epd11SendCommandEh>
    SendData(0x0F);     // LUT from OTP
   b5718:	210f      	movs	r1, #15
   b571a:	4620      	mov	r0, r4
   b571c:	f7ff ffb9 	bl	b5692 <_ZN3Epd8SendDataEh>
}
   b5720:	4628      	mov	r0, r5
   b5722:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   b5724:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5728:	e7fa      	b.n	b5720 <_ZN3Epd4InitEv+0x30>

000b572a <_ZN3Epd21SetPartialWindowBlackEPKhiiii>:
}

/**
 *  @brief: transmit partial data to the black part of SRAM
 */
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b572a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b572e:	4604      	mov	r4, r0
   b5730:	460f      	mov	r7, r1
    SendCommand(PARTIAL_IN);
   b5732:	2191      	movs	r1, #145	; 0x91
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b5734:	4616      	mov	r6, r2
   b5736:	4699      	mov	r9, r3
   b5738:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    SendCommand(PARTIAL_IN);
   b573c:	f7ff ff9e 	bl	b567c <_ZN3Epd11SendCommandEh>
    SendCommand(PARTIAL_WINDOW);
   b5740:	2190      	movs	r1, #144	; 0x90
   b5742:	4620      	mov	r0, r4
    SendData(x >> 8);
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b5744:	f006 0af8 	and.w	sl, r6, #248	; 0xf8
    SendCommand(PARTIAL_WINDOW);
   b5748:	f7ff ff98 	bl	b567c <_ZN3Epd11SendCommandEh>
    SendData(x >> 8);
   b574c:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ff9e 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b5756:	4651      	mov	r1, sl
   b5758:	4620      	mov	r0, r4
   b575a:	f7ff ff9a 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) >> 8);
   b575e:	4651      	mov	r1, sl
   b5760:	4429      	add	r1, r5
   b5762:	3901      	subs	r1, #1
   b5764:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5768:	4620      	mov	r0, r4
   b576a:	f7ff ff92 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) | 0x07);
   b576e:	1e69      	subs	r1, r5, #1
   b5770:	4451      	add	r1, sl
   b5772:	f041 0107 	orr.w	r1, r1, #7
   b5776:	b2c9      	uxtb	r1, r1
   b5778:	4620      	mov	r0, r4
   b577a:	f7ff ff8a 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData(y >> 8);        
    SendData(y & 0xff);
   b577e:	fa5f f689 	uxtb.w	r6, r9
    SendData(y >> 8);        
   b5782:	f3c9 2107 	ubfx	r1, r9, #8, #8
   b5786:	4620      	mov	r0, r4
   b5788:	f7ff ff83 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData(y & 0xff);
   b578c:	4631      	mov	r1, r6
   b578e:	4620      	mov	r0, r4
   b5790:	f7ff ff7f 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) >> 8);        
   b5794:	eb09 0108 	add.w	r1, r9, r8
   b5798:	3901      	subs	r1, #1
   b579a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b579e:	4620      	mov	r0, r4
   b57a0:	f7ff ff77 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) & 0xff);
   b57a4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   b57a8:	4431      	add	r1, r6
   b57aa:	b2c9      	uxtb	r1, r1
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7ff ff70 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendData(0x01);         // Gates scan both inside and outside of the partial window. (default) 
   b57b2:	2101      	movs	r1, #1
   b57b4:	4620      	mov	r0, r4
   b57b6:	f7ff ff6c 	bl	b5692 <_ZN3Epd8SendDataEh>
    DelayMs(2);
   b57ba:	2002      	movs	r0, #2
   b57bc:	f000 f8bf 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_1);
   b57c0:	2110      	movs	r1, #16
   b57c2:	4620      	mov	r0, r4
   b57c4:	f7ff ff5a 	bl	b567c <_ZN3Epd11SendCommandEh>
    if (buffer_black != NULL) {
   b57c8:	b177      	cbz	r7, b57e8 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
        for(int i = 0; i < w  / 8 * l; i++) {
   b57ca:	2d00      	cmp	r5, #0
   b57cc:	bfb8      	it	lt
   b57ce:	3507      	addlt	r5, #7
   b57d0:	10ed      	asrs	r5, r5, #3
   b57d2:	fb08 f505 	mul.w	r5, r8, r5
   b57d6:	2600      	movs	r6, #0
   b57d8:	42b5      	cmp	r5, r6
   b57da:	dd05      	ble.n	b57e8 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
            SendData(buffer_black[i]);  
   b57dc:	5db9      	ldrb	r1, [r7, r6]
   b57de:	4620      	mov	r0, r4
   b57e0:	f7ff ff57 	bl	b5692 <_ZN3Epd8SendDataEh>
        for(int i = 0; i < w  / 8 * l; i++) {
   b57e4:	3601      	adds	r6, #1
   b57e6:	e7f7      	b.n	b57d8 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xae>
        }  
    }
    DelayMs(2);
   b57e8:	2002      	movs	r0, #2
   b57ea:	f000 f8a8 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    SendCommand(PARTIAL_OUT);  
   b57ee:	4620      	mov	r0, r4
   b57f0:	2192      	movs	r1, #146	; 0x92
}
   b57f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SendCommand(PARTIAL_OUT);  
   b57f6:	f7ff bf41 	b.w	b567c <_ZN3Epd11SendCommandEh>

000b57fa <_ZN3Epd10ClearFrameEv>:
}

/**
 * @brief: clear the frame data from the SRAM, this won't refresh the display
 */
void Epd::ClearFrame(void) {
   b57fa:	b538      	push	{r3, r4, r5, lr}
    SendCommand(DATA_START_TRANSMISSION_1);           
   b57fc:	2110      	movs	r1, #16
void Epd::ClearFrame(void) {
   b57fe:	4604      	mov	r4, r0
    SendCommand(DATA_START_TRANSMISSION_1);           
   b5800:	f7ff ff3c 	bl	b567c <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b5804:	2002      	movs	r0, #2
   b5806:	f000 f89a 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b580a:	2500      	movs	r5, #0
   b580c:	6823      	ldr	r3, [r4, #0]
   b580e:	6862      	ldr	r2, [r4, #4]
   b5810:	08db      	lsrs	r3, r3, #3
   b5812:	4353      	muls	r3, r2
   b5814:	42ab      	cmp	r3, r5
   b5816:	d905      	bls.n	b5824 <_ZN3Epd10ClearFrameEv+0x2a>
        SendData(0xFF);  
   b5818:	21ff      	movs	r1, #255	; 0xff
   b581a:	4620      	mov	r0, r4
   b581c:	f7ff ff39 	bl	b5692 <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b5820:	3501      	adds	r5, #1
   b5822:	e7f3      	b.n	b580c <_ZN3Epd10ClearFrameEv+0x12>
    }  
    DelayMs(2);
   b5824:	2002      	movs	r0, #2
   b5826:	f000 f88a 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_2);           
   b582a:	2113      	movs	r1, #19
   b582c:	4620      	mov	r0, r4
   b582e:	f7ff ff25 	bl	b567c <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b5832:	2002      	movs	r0, #2
   b5834:	f000 f883 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b5838:	2500      	movs	r5, #0
   b583a:	6823      	ldr	r3, [r4, #0]
   b583c:	6862      	ldr	r2, [r4, #4]
   b583e:	08db      	lsrs	r3, r3, #3
   b5840:	4353      	muls	r3, r2
   b5842:	42ab      	cmp	r3, r5
   b5844:	d905      	bls.n	b5852 <_ZN3Epd10ClearFrameEv+0x58>
        SendData(0xFF);  
   b5846:	21ff      	movs	r1, #255	; 0xff
   b5848:	4620      	mov	r0, r4
   b584a:	f7ff ff22 	bl	b5692 <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b584e:	3501      	adds	r5, #1
   b5850:	e7f3      	b.n	b583a <_ZN3Epd10ClearFrameEv+0x40>
    }  
    DelayMs(2);
}
   b5852:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    DelayMs(2);
   b5856:	2002      	movs	r0, #2
   b5858:	f000 b871 	b.w	b593e <_ZN5EpdIf7DelayMsEj>

000b585c <_ZN3Epd12DisplayFrameEv>:

/**
 * @brief: This displays the frame data from SRAM
 */
void Epd::DisplayFrame(void) {
   b585c:	b510      	push	{r4, lr}
    SendCommand(DISPLAY_REFRESH); 
   b585e:	2112      	movs	r1, #18
void Epd::DisplayFrame(void) {
   b5860:	4604      	mov	r4, r0
    SendCommand(DISPLAY_REFRESH); 
   b5862:	f7ff ff0b 	bl	b567c <_ZN3Epd11SendCommandEh>
    DelayMs(100);
   b5866:	2064      	movs	r0, #100	; 0x64
   b5868:	f000 f869 	bl	b593e <_ZN5EpdIf7DelayMsEj>
    WaitUntilIdle();
   b586c:	4620      	mov	r0, r4
}
   b586e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WaitUntilIdle();
   b5872:	f7ff bf19 	b.w	b56a8 <_ZN3Epd13WaitUntilIdleEv>

000b5876 <_ZN3Epd5SleepEv>:
 * @brief: After this command is transmitted, the chip would enter the deep-sleep mode to save power. 
 *         The deep sleep mode would return to standby by hardware reset. The only one parameter is a 
 *         check code, the command would be executed if check code = 0xA5. 
 *         You can use Epd::Reset() to awaken and use Epd::Init() to initialize.
 */
void Epd::Sleep() {
   b5876:	b510      	push	{r4, lr}
    SendCommand(VCOM_AND_DATA_INTERVAL_SETTING);
   b5878:	2150      	movs	r1, #80	; 0x50
void Epd::Sleep() {
   b587a:	4604      	mov	r4, r0
    SendCommand(VCOM_AND_DATA_INTERVAL_SETTING);
   b587c:	f7ff fefe 	bl	b567c <_ZN3Epd11SendCommandEh>
    SendData(0xF7);     // border floating
   b5880:	4620      	mov	r0, r4
   b5882:	21f7      	movs	r1, #247	; 0xf7
   b5884:	f7ff ff05 	bl	b5692 <_ZN3Epd8SendDataEh>
    SendCommand(POWER_OFF);
   b5888:	2102      	movs	r1, #2
   b588a:	4620      	mov	r0, r4
   b588c:	f7ff fef6 	bl	b567c <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b5890:	4620      	mov	r0, r4
   b5892:	f7ff ff09 	bl	b56a8 <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(DEEP_SLEEP);
   b5896:	4620      	mov	r0, r4
   b5898:	2107      	movs	r1, #7
   b589a:	f7ff feef 	bl	b567c <_ZN3Epd11SendCommandEh>
    SendData(0xA5);     // check code
   b589e:	4620      	mov	r0, r4
   b58a0:	21a5      	movs	r1, #165	; 0xa5
}
   b58a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SendData(0xA5);     // check code
   b58a6:	f7ff bef4 	b.w	b5692 <_ZN3Epd8SendDataEh>

000b58aa <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b58aa:	4770      	bx	lr

000b58ac <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b58ac:	b510      	push	{r4, lr}
  }
   b58ae:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b58b0:	4604      	mov	r4, r0
  }
   b58b2:	f7ff f826 	bl	b4902 <_ZdlPvj>
   b58b6:	4620      	mov	r0, r4
   b58b8:	bd10      	pop	{r4, pc}

000b58ba <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58ba:	b40e      	push	{r1, r2, r3}
   b58bc:	b503      	push	{r0, r1, lr}
   b58be:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b58c0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b58c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b58c8:	f001 fd45 	bl	b7356 <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b58cc:	b002      	add	sp, #8
   b58ce:	f85d eb04 	ldr.w	lr, [sp], #4
   b58d2:	b003      	add	sp, #12
   b58d4:	4770      	bx	lr
	...

000b58d8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b58d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b58da:	4604      	mov	r4, r0
   b58dc:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b58de:	7922      	ldrb	r2, [r4, #4]
   b58e0:	68a3      	ldr	r3, [r4, #8]
   b58e2:	b132      	cbz	r2, b58f2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b58e4:	b9a3      	cbnz	r3, b5910 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b58e6:	490b      	ldr	r1, [pc, #44]	; (b5914 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b58e8:	b002      	add	sp, #8
   b58ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b58ee:	f001 bcf7 	b.w	b72e0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b58f2:	4a09      	ldr	r2, [pc, #36]	; (b5918 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b58f4:	7b26      	ldrb	r6, [r4, #12]
   b58f6:	4d09      	ldr	r5, [pc, #36]	; (b591c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b58f8:	4909      	ldr	r1, [pc, #36]	; (b5920 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b58fa:	7b64      	ldrb	r4, [r4, #13]
   b58fc:	2e01      	cmp	r6, #1
   b58fe:	bf18      	it	ne
   b5900:	4629      	movne	r1, r5
   b5902:	e9cd 1400 	strd	r1, r4, [sp]
   b5906:	4907      	ldr	r1, [pc, #28]	; (b5924 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5908:	f7ff ffd7 	bl	b58ba <_ZN5Print6printfEPKcz>
  }
   b590c:	b002      	add	sp, #8
   b590e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5910:	4a05      	ldr	r2, [pc, #20]	; (b5928 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b5912:	e7ef      	b.n	b58f4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b5914:	000b85e6 	.word	0x000b85e6
   b5918:	000b8444 	.word	0x000b8444
   b591c:	000b85e2 	.word	0x000b85e2
   b5920:	000b85de 	.word	0x000b85de
   b5924:	000b85fc 	.word	0x000b85fc
   b5928:	000b85d5 	.word	0x000b85d5

000b592c <_ZN5EpdIfC1Ev>:
#include "../lib/EPD4_2/src/epdif.h"

#include <spi.h>

EpdIf::EpdIf() {
};
   b592c:	4770      	bx	lr

000b592e <_ZN5EpdIfD1Ev>:

EpdIf::~EpdIf() {
};
   b592e:	4770      	bx	lr

000b5930 <_ZN5EpdIf12DigitalWriteEii>:

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
   b5930:	b2c9      	uxtb	r1, r1
   b5932:	b280      	uxth	r0, r0
   b5934:	f002 ba83 	b.w	b7e3e <digitalWrite>

000b5938 <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
   b5938:	b280      	uxth	r0, r0
   b593a:	f002 ba99 	b.w	b7e70 <digitalRead>

000b593e <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
   b593e:	f000 bf5f 	b.w	b6800 <delay>
	...

000b5944 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5944:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5946:	4c0b      	ldr	r4, [pc, #44]	; (b5974 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5948:	7821      	ldrb	r1, [r4, #0]
   b594a:	f3bf 8f5b 	dmb	ish
   b594e:	f011 0101 	ands.w	r1, r1, #1
   b5952:	d10b      	bne.n	b596c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5954:	4620      	mov	r0, r4
   b5956:	9101      	str	r1, [sp, #4]
   b5958:	f7fe ffd5 	bl	b4906 <__cxa_guard_acquire>
   b595c:	9901      	ldr	r1, [sp, #4]
   b595e:	b128      	cbz	r0, b596c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5960:	4805      	ldr	r0, [pc, #20]	; (b5978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5962:	f001 fd35 	bl	b73d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5966:	4620      	mov	r0, r4
   b5968:	f7fe ffd2 	bl	b4910 <__cxa_guard_release>
        return instance;
    }
   b596c:	4802      	ldr	r0, [pc, #8]	; (b5978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b596e:	b002      	add	sp, #8
   b5970:	bd10      	pop	{r4, pc}
   b5972:	bf00      	nop
   b5974:	2003e650 	.word	0x2003e650
   b5978:	2003e654 	.word	0x2003e654

000b597c <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
   b597c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
   b597e:	2101      	movs	r1, #1
   b5980:	2008      	movs	r0, #8
   b5982:	f002 fa4b 	bl	b7e1c <pinMode>
    pinMode(RST_PIN, OUTPUT);
   b5986:	2101      	movs	r1, #1
   b5988:	2006      	movs	r0, #6
   b598a:	f002 fa47 	bl	b7e1c <pinMode>
    pinMode(DC_PIN, OUTPUT);
   b598e:	2101      	movs	r1, #1
   b5990:	2005      	movs	r0, #5
   b5992:	f002 fa43 	bl	b7e1c <pinMode>
    pinMode(BUSY_PIN, INPUT); 
   b5996:	2100      	movs	r1, #0
   b5998:	2007      	movs	r0, #7
   b599a:	f002 fa3f 	bl	b7e1c <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b599e:	f7ff ffd1 	bl	b5944 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59a2:	f001 fd1f 	bl	b73e4 <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
   b59a6:	4b09      	ldr	r3, [pc, #36]	; (b59cc <_ZN5EpdIf6IfInitEv+0x50>)
   b59a8:	9300      	str	r3, [sp, #0]
   b59aa:	4b09      	ldr	r3, [pc, #36]	; (b59d0 <_ZN5EpdIf6IfInitEv+0x54>)
   b59ac:	9302      	str	r3, [sp, #8]
   b59ae:	2400      	movs	r4, #0
   b59b0:	2301      	movs	r3, #1
   b59b2:	f8ad 300c 	strh.w	r3, [sp, #12]
   b59b6:	f88d 4004 	strb.w	r4, [sp, #4]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b59ba:	f7ff ffc3 	bl	b5944 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59be:	4669      	mov	r1, sp
   b59c0:	f001 fd3a 	bl	b7438 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    
    return 0;
}
   b59c4:	4620      	mov	r0, r4
   b59c6:	b004      	add	sp, #16
   b59c8:	bd10      	pop	{r4, pc}
   b59ca:	bf00      	nop
   b59cc:	000b8624 	.word	0x000b8624
   b59d0:	001e8480 	.word	0x001e8480

000b59d4 <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
   b59d4:	b510      	push	{r4, lr}
    digitalWrite(CS_PIN, LOW);
   b59d6:	2100      	movs	r1, #0
void EpdIf::SpiTransfer(unsigned char data) {
   b59d8:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
   b59da:	2008      	movs	r0, #8
   b59dc:	f002 fa2f 	bl	b7e3e <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b59e0:	f7ff ffb0 	bl	b5944 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59e4:	4621      	mov	r1, r4
   b59e6:	f001 fd95 	bl	b7514 <_ZN8SPIClass8transferEh>
}
   b59ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
   b59ee:	2101      	movs	r1, #1
   b59f0:	2008      	movs	r0, #8
   b59f2:	f002 ba24 	b.w	b7e3e <digitalWrite>

000b59f6 <_ZN5PaintC1EPhii>:

#include <avr/pgmspace.h>
//#include "epdpaint.h"
#include "../lib/EPD4_2/src/epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
   b59f6:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
   b59f8:	2400      	movs	r4, #0
   b59fa:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b59fc:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
   b5a00:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b5a02:	d008      	beq.n	b5a16 <_ZN5PaintC1EPhii+0x20>
   b5a04:	f102 0508 	add.w	r5, r2, #8
   b5a08:	4252      	negs	r2, r2
   b5a0a:	f002 0107 	and.w	r1, r2, #7
   b5a0e:	4622      	mov	r2, r4
   b5a10:	bf58      	it	pl
   b5a12:	424a      	negpl	r2, r1
   b5a14:	1aaa      	subs	r2, r5, r2
    this->height = height;
   b5a16:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
   b5a1a:	bd30      	pop	{r4, r5, pc}

000b5a1c <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
   b5a1c:	4770      	bx	lr

000b5a1e <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5a1e:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
   b5a20:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5a22:	db15      	blt.n	b5a50 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5a24:	6844      	ldr	r4, [r0, #4]
   b5a26:	428c      	cmp	r4, r1
   b5a28:	dd12      	ble.n	b5a50 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5a2a:	2a00      	cmp	r2, #0
   b5a2c:	db10      	blt.n	b5a50 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5a2e:	6885      	ldr	r5, [r0, #8]
   b5a30:	4295      	cmp	r5, r2
   b5a32:	dd0d      	ble.n	b5a50 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b5a34:	fb02 1204 	mla	r2, r2, r4, r1
   b5a38:	6805      	ldr	r5, [r0, #0]
   b5a3a:	10d2      	asrs	r2, r2, #3
   b5a3c:	f001 0107 	and.w	r1, r1, #7
   b5a40:	2480      	movs	r4, #128	; 0x80
   b5a42:	fa44 f101 	asr.w	r1, r4, r1
   b5a46:	56a8      	ldrsb	r0, [r5, r2]
   b5a48:	b249      	sxtb	r1, r1
        if (colored) {
   b5a4a:	b113      	cbz	r3, b5a52 <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b5a4c:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b5a4e:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
   b5a50:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b5a52:	ea20 0001 	bic.w	r0, r0, r1
   b5a56:	e7fa      	b.n	b5a4e <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

000b5a58 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
   b5a58:	b570      	push	{r4, r5, r6, lr}
   b5a5a:	460b      	mov	r3, r1
   b5a5c:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
   b5a5e:	2500      	movs	r5, #0
   b5a60:	6862      	ldr	r2, [r4, #4]
   b5a62:	42aa      	cmp	r2, r5
   b5a64:	dd0c      	ble.n	b5a80 <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
   b5a66:	2600      	movs	r6, #0
   b5a68:	68a2      	ldr	r2, [r4, #8]
   b5a6a:	42b2      	cmp	r2, r6
   b5a6c:	dd06      	ble.n	b5a7c <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
   b5a6e:	4632      	mov	r2, r6
   b5a70:	4629      	mov	r1, r5
   b5a72:	4620      	mov	r0, r4
   b5a74:	f7ff ffd3 	bl	b5a1e <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
   b5a78:	3601      	adds	r6, #1
   b5a7a:	e7f5      	b.n	b5a68 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
   b5a7c:	3501      	adds	r5, #1
   b5a7e:	e7ef      	b.n	b5a60 <_ZN5Paint5ClearEi+0x8>
}
   b5a80:	bd70      	pop	{r4, r5, r6, pc}

000b5a82 <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
   b5a82:	6800      	ldr	r0, [r0, #0]
   b5a84:	4770      	bx	lr

000b5a86 <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
   b5a86:	6840      	ldr	r0, [r0, #4]
   b5a88:	4770      	bx	lr

000b5a8a <_ZN5Paint9GetHeightEv>:
    this->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint::GetHeight(void) {
    return this->height;
}
   b5a8a:	6880      	ldr	r0, [r0, #8]
   b5a8c:	4770      	bx	lr

000b5a8e <_ZN5Paint9SetRotateEi>:
int Paint::GetRotate(void) {
    return this->rotate;
}

void Paint::SetRotate(int rotate){
    this->rotate = rotate;
   b5a8e:	60c1      	str	r1, [r0, #12]
}
   b5a90:	4770      	bx	lr

000b5a92 <_ZN5Paint9DrawPixelEiii>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
   b5a92:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
   b5a94:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
   b5a96:	460d      	mov	r5, r1
   b5a98:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
   b5a9a:	b967      	cbnz	r7, b5ab6 <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5a9c:	2900      	cmp	r1, #0
   b5a9e:	db37      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5aa0:	6847      	ldr	r7, [r0, #4]
   b5aa2:	428f      	cmp	r7, r1
   b5aa4:	dd34      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5aa6:	2a00      	cmp	r2, #0
   b5aa8:	db32      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5aaa:	6885      	ldr	r5, [r0, #8]
   b5aac:	4295      	cmp	r5, r2
   b5aae:	dd2f      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
   b5ab0:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
   b5ab2:	f7ff bfb4 	b.w	b5a1e <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
   b5ab6:	2f01      	cmp	r7, #1
   b5ab8:	d10c      	bne.n	b5ad4 <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b5aba:	2900      	cmp	r1, #0
   b5abc:	db28      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5abe:	6882      	ldr	r2, [r0, #8]
   b5ac0:	428a      	cmp	r2, r1
   b5ac2:	dd25      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ac4:	2c00      	cmp	r4, #0
   b5ac6:	db23      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ac8:	6841      	ldr	r1, [r0, #4]
   b5aca:	42a1      	cmp	r1, r4
   b5acc:	dd20      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5ace:	462a      	mov	r2, r5
   b5ad0:	1b09      	subs	r1, r1, r4
   b5ad2:	e7ed      	b.n	b5ab0 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
   b5ad4:	2f02      	cmp	r7, #2
   b5ad6:	d10c      	bne.n	b5af2 <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5ad8:	2900      	cmp	r1, #0
   b5ada:	db19      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5adc:	6841      	ldr	r1, [r0, #4]
   b5ade:	42a9      	cmp	r1, r5
   b5ae0:	dd16      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ae2:	2a00      	cmp	r2, #0
   b5ae4:	db14      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ae6:	6882      	ldr	r2, [r0, #8]
   b5ae8:	42a2      	cmp	r2, r4
   b5aea:	dd11      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5aec:	1b12      	subs	r2, r2, r4
   b5aee:	1b49      	subs	r1, r1, r5
   b5af0:	e7de      	b.n	b5ab0 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
   b5af2:	2f03      	cmp	r7, #3
   b5af4:	d10c      	bne.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b5af6:	2900      	cmp	r1, #0
   b5af8:	db0a      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5afa:	6882      	ldr	r2, [r0, #8]
   b5afc:	428a      	cmp	r2, r1
   b5afe:	dd07      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5b00:	2c00      	cmp	r4, #0
   b5b02:	db05      	blt.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5b04:	6841      	ldr	r1, [r0, #4]
   b5b06:	42a1      	cmp	r1, r4
   b5b08:	dd02      	ble.n	b5b10 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5b0a:	1b52      	subs	r2, r2, r5
   b5b0c:	4621      	mov	r1, r4
   b5b0e:	e7cf      	b.n	b5ab0 <_ZN5Paint9DrawPixelEiii+0x1e>
}
   b5b10:	bcf0      	pop	{r4, r5, r6, r7}
   b5b12:	4770      	bx	lr

000b5b14 <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b5b1a:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5b1c:	4691      	mov	r9, r2
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b5b1e:	f014 0207 	ands.w	r2, r4, #7
   b5b22:	bf18      	it	ne
   b5b24:	2201      	movne	r2, #1
   b5b26:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
   b5b2a:	88ec      	ldrh	r4, [r5, #6]
   b5b2c:	3b20      	subs	r3, #32
   b5b2e:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
   b5b30:	682c      	ldr	r4, [r5, #0]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5b32:	4688      	mov	r8, r1
    const unsigned char* ptr = &font->table[char_offset];
   b5b34:	fb03 4402 	mla	r4, r3, r2, r4

    for (j = 0; j < font->Height; j++) {
   b5b38:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b5b3a:	f04f 0b80 	mov.w	fp, #128	; 0x80
    for (j = 0; j < font->Height; j++) {
   b5b3e:	88eb      	ldrh	r3, [r5, #6]
   b5b40:	42bb      	cmp	r3, r7
   b5b42:	dd20      	ble.n	b5b86 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
   b5b44:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
   b5b46:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
   b5b4a:	88ab      	ldrh	r3, [r5, #4]
   b5b4c:	42b3      	cmp	r3, r6
   b5b4e:	dd15      	ble.n	b5b7c <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b5b50:	7821      	ldrb	r1, [r4, #0]
   b5b52:	f006 0a07 	and.w	sl, r6, #7
   b5b56:	fa4b f30a 	asr.w	r3, fp, sl
   b5b5a:	4219      	tst	r1, r3
   b5b5c:	d008      	beq.n	b5b70 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
   b5b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5b60:	9201      	str	r2, [sp, #4]
   b5b62:	eb06 0108 	add.w	r1, r6, r8
   b5b66:	9000      	str	r0, [sp, #0]
   b5b68:	f7ff ff93 	bl	b5a92 <_ZN5Paint9DrawPixelEiii>
   b5b6c:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
   b5b70:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
   b5b74:	bf08      	it	eq
   b5b76:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
   b5b78:	3601      	adds	r6, #1
   b5b7a:	e7e6      	b.n	b5b4a <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
   b5b7c:	075b      	lsls	r3, r3, #29
            ptr++;
   b5b7e:	bf18      	it	ne
   b5b80:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
   b5b82:	3701      	adds	r7, #1
   b5b84:	e7db      	b.n	b5b3e <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
   b5b86:	b003      	add	sp, #12
   b5b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5b8c <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
   b5b8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b90:	9f08      	ldr	r7, [sp, #32]
   b5b92:	4606      	mov	r6, r0
   b5b94:	460c      	mov	r4, r1
   b5b96:	4690      	mov	r8, r2
   b5b98:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
   b5b9a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b5b9e:	b153      	cbz	r3, b5bb6 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
   b5ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5ba2:	4621      	mov	r1, r4
   b5ba4:	e9cd 7200 	strd	r7, r2, [sp]
   b5ba8:	4630      	mov	r0, r6
   b5baa:	4642      	mov	r2, r8
   b5bac:	f7ff ffb2 	bl	b5b14 <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
   b5bb0:	88bb      	ldrh	r3, [r7, #4]
   b5bb2:	441c      	add	r4, r3
    while (*p_text != 0) {
   b5bb4:	e7f1      	b.n	b5b9a <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
   b5bb6:	b002      	add	sp, #8
   b5bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5bbc <_ZN5Paint18DrawHorizontalLineEiiii>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
   b5bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bbe:	4606      	mov	r6, r0
   b5bc0:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
   b5bc2:	460c      	mov	r4, r1
   b5bc4:	18cd      	adds	r5, r1, r3
   b5bc6:	42a5      	cmp	r5, r4
   b5bc8:	dd07      	ble.n	b5bda <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
   b5bca:	4621      	mov	r1, r4
   b5bcc:	9b06      	ldr	r3, [sp, #24]
   b5bce:	463a      	mov	r2, r7
   b5bd0:	4630      	mov	r0, r6
   b5bd2:	f7ff ff5e 	bl	b5a92 <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
   b5bd6:	3401      	adds	r4, #1
   b5bd8:	e7f5      	b.n	b5bc6 <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
   b5bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bdc <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
   b5bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bde:	4606      	mov	r6, r0
   b5be0:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
   b5be2:	4614      	mov	r4, r2
   b5be4:	18d5      	adds	r5, r2, r3
   b5be6:	42a5      	cmp	r5, r4
   b5be8:	dd07      	ble.n	b5bfa <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
   b5bea:	4622      	mov	r2, r4
   b5bec:	9b06      	ldr	r3, [sp, #24]
   b5bee:	4639      	mov	r1, r7
   b5bf0:	4630      	mov	r0, r6
   b5bf2:	f7ff ff4e 	bl	b5a92 <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
   b5bf6:	3401      	adds	r4, #1
   b5bf8:	e7f5      	b.n	b5be6 <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
   b5bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bfc <_ZN5Paint13DrawRectangleEiiiii>:

/**
*  @brief: this draws a rectangle
*/
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5bfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5c00:	460f      	mov	r7, r1
   b5c02:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
   b5c06:	42bb      	cmp	r3, r7
   b5c08:	4619      	mov	r1, r3
   b5c0a:	bfa8      	it	ge
   b5c0c:	4639      	movge	r1, r7
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b5c0e:	42bb      	cmp	r3, r7
   b5c10:	bfb8      	it	lt
   b5c12:	463b      	movlt	r3, r7
   b5c14:	4294      	cmp	r4, r2
   b5c16:	4627      	mov	r7, r4
   b5c18:	461d      	mov	r5, r3
    min_y = y1 > y0 ? y0 : y1;
   b5c1a:	bfa8      	it	ge
   b5c1c:	4617      	movge	r7, r2
    max_y = y1 > y0 ? y1 : y0;
    
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b5c1e:	1a5b      	subs	r3, r3, r1
   b5c20:	4294      	cmp	r4, r2
   b5c22:	bfb8      	it	lt
   b5c24:	4614      	movlt	r4, r2
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5c26:	4606      	mov	r6, r0
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b5c28:	3301      	adds	r3, #1
   b5c2a:	463a      	mov	r2, r7
   b5c2c:	f8cd 8000 	str.w	r8, [sp]
   b5c30:	9303      	str	r3, [sp, #12]
   b5c32:	9102      	str	r1, [sp, #8]
   b5c34:	f7ff ffc2 	bl	b5bbc <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawHorizontalLine(min_x, max_y, max_x - min_x + 1, colored);
   b5c38:	9b03      	ldr	r3, [sp, #12]
   b5c3a:	9902      	ldr	r1, [sp, #8]
   b5c3c:	f8cd 8000 	str.w	r8, [sp]
   b5c40:	4622      	mov	r2, r4
   b5c42:	4630      	mov	r0, r6
   b5c44:	9103      	str	r1, [sp, #12]
   b5c46:	f7ff ffb9 	bl	b5bbc <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawVerticalLine(min_x, min_y, max_y - min_y + 1, colored);
   b5c4a:	1be3      	subs	r3, r4, r7
   b5c4c:	9903      	ldr	r1, [sp, #12]
   b5c4e:	f8cd 8000 	str.w	r8, [sp]
   b5c52:	3301      	adds	r3, #1
   b5c54:	463a      	mov	r2, r7
   b5c56:	4630      	mov	r0, r6
   b5c58:	9302      	str	r3, [sp, #8]
   b5c5a:	f7ff ffbf 	bl	b5bdc <_ZN5Paint16DrawVerticalLineEiiii>
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b5c5e:	9b02      	ldr	r3, [sp, #8]
   b5c60:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5c64:	463a      	mov	r2, r7
   b5c66:	4629      	mov	r1, r5
   b5c68:	4630      	mov	r0, r6
}
   b5c6a:	b004      	add	sp, #16
   b5c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b5c70:	f7ff bfb4 	b.w	b5bdc <_ZN5Paint16DrawVerticalLineEiiii>

000b5c74 <_ZN5Paint19DrawFilledRectangleEiiiii>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5c74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c78:	428b      	cmp	r3, r1
   b5c7a:	4604      	mov	r4, r0
   b5c7c:	9808      	ldr	r0, [sp, #32]
   b5c7e:	461e      	mov	r6, r3
   b5c80:	bfa8      	it	ge
   b5c82:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b5c84:	428b      	cmp	r3, r1
   b5c86:	bfb8      	it	lt
   b5c88:	460b      	movlt	r3, r1
   b5c8a:	4290      	cmp	r0, r2
   b5c8c:	4680      	mov	r8, r0
   b5c8e:	bfa8      	it	ge
   b5c90:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b5c92:	4290      	cmp	r0, r2
   b5c94:	bfac      	ite	ge
   b5c96:	ebc8 0700 	rsbge	r7, r8, r0
   b5c9a:	ebc8 0702 	rsblt	r7, r8, r2
   b5c9e:	461d      	mov	r5, r3
   b5ca0:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
   b5ca2:	42ae      	cmp	r6, r5
   b5ca4:	dc09      	bgt.n	b5cba <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b5ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5ca8:	9300      	str	r3, [sp, #0]
   b5caa:	4631      	mov	r1, r6
   b5cac:	463b      	mov	r3, r7
   b5cae:	4642      	mov	r2, r8
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	f7ff ff93 	bl	b5bdc <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
   b5cb6:	3601      	adds	r6, #1
   b5cb8:	e7f3      	b.n	b5ca2 <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
   b5cba:	b002      	add	sp, #8
   b5cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5cc0 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5cc0:	6803      	ldr	r3, [r0, #0]
   b5cc2:	b2c9      	uxtb	r1, r1
   b5cc4:	689b      	ldr	r3, [r3, #8]
   b5cc6:	4718      	bx	r3

000b5cc8 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b5cc8:	b510      	push	{r4, lr}
   b5cca:	4604      	mov	r4, r0
    Wire.begin(); 
   b5ccc:	f002 f8fe 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5cd0:	f001 f96c 	bl	b6fac <_ZN7TwoWire5beginEv>
}
   b5cd4:	4620      	mov	r0, r4
   b5cd6:	bd10      	pop	{r4, pc}

000b5cd8 <_ZN8max1720x5resetEv>:
//}


// Reset procedure
uint8_t max1720x::reset()
{
   b5cd8:	b508      	push	{r3, lr}
 	Wire.beginTransmission(MAX1720X_ADDR);
   b5cda:	f002 f8f7 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5cde:	2136      	movs	r1, #54	; 0x36
   b5ce0:	f001 f99a 	bl	b7018 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(MAX1720X_COMMAND_ADDR);
   b5ce4:	f002 f8f2 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5ce8:	2160      	movs	r1, #96	; 0x60
   b5cea:	f7ff ffe9 	bl	b5cc0 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x0f);
   b5cee:	f002 f8ed 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5cf2:	210f      	movs	r1, #15
   b5cf4:	f7ff ffe4 	bl	b5cc0 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x00);
   b5cf8:	f002 f8e8 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5cfc:	2100      	movs	r1, #0
   b5cfe:	f7ff ffdf 	bl	b5cc0 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b5d02:	f002 f8e3 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d06:	f001 f98e 	bl	b7026 <_ZN7TwoWire15endTransmissionEv>
    delay(50);
   b5d0a:	2032      	movs	r0, #50	; 0x32
   b5d0c:	f000 fd78 	bl	b6800 <delay>
    Wire.beginTransmission(MAX1720X_ADDR);
   b5d10:	f002 f8dc 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d14:	2136      	movs	r1, #54	; 0x36
   b5d16:	f001 f97f 	bl	b7018 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(MAX1720X_CONFIG2_ADDR);
   b5d1a:	f002 f8d7 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d1e:	21bb      	movs	r1, #187	; 0xbb
   b5d20:	f7ff ffce 	bl	b5cc0 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x01);
   b5d24:	f002 f8d2 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d28:	2101      	movs	r1, #1
   b5d2a:	f7ff ffc9 	bl	b5cc0 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x00);
   b5d2e:	f002 f8cd 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d32:	2100      	movs	r1, #0
   b5d34:	f7ff ffc4 	bl	b5cc0 <_ZN7TwoWire5writeEi.isra.0>
	return Wire.endTransmission();
   b5d38:	f002 f8c8 	bl	b7ecc <_Z19__fetch_global_Wirev>
}
   b5d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return Wire.endTransmission();
   b5d40:	f001 b971 	b.w	b7026 <_ZN7TwoWire15endTransmissionEv>

000b5d44 <_ZN7TwoWire5writeEi>:
   b5d44:	6803      	ldr	r3, [r0, #0]
   b5d46:	b2c9      	uxtb	r1, r1
   b5d48:	689b      	ldr	r3, [r3, #8]
   b5d4a:	4718      	bx	r3

000b5d4c <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b5d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b5d50:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b5d52:	2002      	movs	r0, #2
    cmdlen++;
   b5d54:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b5d56:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b5d58:	f000 fd52 	bl	b6800 <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b5d5c:	f002 f8b6 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d60:	2124      	movs	r1, #36	; 0x24
   b5d62:	f001 f959 	bl	b7018 <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b5d66:	f002 f8b1 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d6a:	2100      	movs	r1, #0
   b5d6c:	f7ff ffea 	bl	b5d44 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b5d70:	f002 f8ac 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d74:	2100      	movs	r1, #0
   b5d76:	f7ff ffe5 	bl	b5d44 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b5d7a:	f002 f8a7 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d7e:	21ff      	movs	r1, #255	; 0xff
   b5d80:	f7ff ffe0 	bl	b5d44 <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b5d84:	f002 f8a2 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d88:	6803      	ldr	r3, [r0, #0]
   b5d8a:	4629      	mov	r1, r5
   b5d8c:	689b      	ldr	r3, [r3, #8]
   b5d8e:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b5d90:	f002 f89c 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d94:	4269      	negs	r1, r5
   b5d96:	f7ff ffd5 	bl	b5d44 <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b5d9a:	f002 f897 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5d9e:	21d4      	movs	r1, #212	; 0xd4
   b5da0:	f7ff ffd0 	bl	b5d44 <_ZN7TwoWire5writeEi>
   b5da4:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b5da6:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b5da8:	3d01      	subs	r5, #1
   b5daa:	f104 0801 	add.w	r8, r4, #1
   b5dae:	b2e4      	uxtb	r4, r4
   b5db0:	42ac      	cmp	r4, r5
   b5db2:	da0a      	bge.n	b5dca <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b5db4:	f002 f88a 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5db8:	6803      	ldr	r3, [r0, #0]
   b5dba:	5d39      	ldrb	r1, [r7, r4]
   b5dbc:	689b      	ldr	r3, [r3, #8]
   b5dbe:	4798      	blx	r3
      checksum += cmd[i];
   b5dc0:	5d39      	ldrb	r1, [r7, r4]
   b5dc2:	440e      	add	r6, r1
   b5dc4:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b5dc6:	4644      	mov	r4, r8
   b5dc8:	e7ef      	b.n	b5daa <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b5dca:	f002 f87f 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5dce:	6803      	ldr	r3, [r0, #0]
   b5dd0:	43f1      	mvns	r1, r6
   b5dd2:	689b      	ldr	r3, [r3, #8]
   b5dd4:	b2c9      	uxtb	r1, r1
   b5dd6:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b5dd8:	f002 f878 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b5ddc:	6803      	ldr	r3, [r0, #0]
   b5dde:	2100      	movs	r1, #0
   b5de0:	689b      	ldr	r3, [r3, #8]
   b5de2:	4798      	blx	r3
    Wire.endTransmission();
   b5de4:	f002 f872 	bl	b7ecc <_Z19__fetch_global_Wirev>
}
   b5de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b5dec:	f001 b91b 	b.w	b7026 <_ZN7TwoWire15endTransmissionEv>

000b5df0 <_ZN13DFRobot_PN5328checkDCSEi>:
{
   b5df0:	b530      	push	{r4, r5, lr}
   b5df2:	4602      	mov	r2, r0
    if(!this->nfcEnable)
   b5df4:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b5df8:	b1a0      	cbz	r0, b5e24 <_ZN13DFRobot_PN5328checkDCSEi+0x34>
    for(int i = 6;i < x - 2;i++)
   b5dfa:	f06f 0503 	mvn.w	r5, #3
   b5dfe:	f102 000a 	add.w	r0, r2, #10
    uint32_t sum = 0;
   b5e02:	2300      	movs	r3, #0
    for(int i = 6;i < x - 2;i++)
   b5e04:	3902      	subs	r1, #2
   b5e06:	1aad      	subs	r5, r5, r2
   b5e08:	182c      	adds	r4, r5, r0
   b5e0a:	42a1      	cmp	r1, r4
   b5e0c:	dd03      	ble.n	b5e16 <_ZN13DFRobot_PN5328checkDCSEi+0x26>
        sum += this->receiveACK[i];
   b5e0e:	f810 4b01 	ldrb.w	r4, [r0], #1
   b5e12:	4423      	add	r3, r4
    for(int i = 6;i < x - 2;i++)
   b5e14:	e7f8      	b.n	b5e08 <_ZN13DFRobot_PN5328checkDCSEi+0x18>
    if(dcs==this->receiveACK[x - 2])
   b5e16:	440a      	add	r2, r1
    dcs = 0xff - (sum&0xff);
   b5e18:	43db      	mvns	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b5e1a:	7910      	ldrb	r0, [r2, #4]
    dcs = 0xff - (sum&0xff);
   b5e1c:	b2db      	uxtb	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b5e1e:	1a1b      	subs	r3, r3, r0
   b5e20:	4258      	negs	r0, r3
   b5e22:	4158      	adcs	r0, r3
}
   b5e24:	bd30      	pop	{r4, r5, pc}

000b5e26 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>:
{   //bool success = false;
   b5e26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5e28:	4604      	mov	r4, r0
    if(!this->nfcEnable)
   b5e2a:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b5e2e:	b350      	cbz	r0, b5e86 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    cmdPassWord[0] = COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
   b5e30:	2040      	movs	r0, #64	; 0x40
   b5e32:	f88d 0000 	strb.w	r0, [sp]
    cmdPassWord[1] = 1;                              /* The quantity number of the maxium card that can be detected in every research*/
   b5e36:	2001      	movs	r0, #1
   b5e38:	f88d 0001 	strb.w	r0, [sp, #1]
    cmdPassWord[2] = 0x60;                          
   b5e3c:	2060      	movs	r0, #96	; 0x60
   b5e3e:	f88d 0002 	strb.w	r0, [sp, #2]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b5e42:	6818      	ldr	r0, [r3, #0]
   b5e44:	889b      	ldrh	r3, [r3, #4]
   b5e46:	f8ad 3008 	strh.w	r3, [sp, #8]
    for(int i = 10;i < 14;i++) cmdPassWord[i] = id[i - 10];           // nfcUid
   b5e4a:	6813      	ldr	r3, [r2, #0]
   b5e4c:	f8cd 300a 	str.w	r3, [sp, #10]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b5e50:	6823      	ldr	r3, [r4, #0]
    cmdPassWord[3] = block;
   b5e52:	f88d 1003 	strb.w	r1, [sp, #3]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b5e56:	9001      	str	r0, [sp, #4]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	220e      	movs	r2, #14
   b5e5c:	4669      	mov	r1, sp
   b5e5e:	4620      	mov	r0, r4
   b5e60:	4798      	blx	r3
    if(!this->readAck(16))
   b5e62:	6823      	ldr	r3, [r4, #0]
   b5e64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5e68:	685b      	ldr	r3, [r3, #4]
   b5e6a:	2110      	movs	r1, #16
   b5e6c:	4620      	mov	r0, r4
   b5e6e:	4798      	blx	r3
   b5e70:	b148      	cbz	r0, b5e86 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    if(checkDCS(16) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00)   
   b5e72:	2110      	movs	r1, #16
   b5e74:	4620      	mov	r0, r4
   b5e76:	f7ff ffbb 	bl	b5df0 <_ZN13DFRobot_PN5328checkDCSEi>
   b5e7a:	b120      	cbz	r0, b5e86 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
   b5e7c:	8a20      	ldrh	r0, [r4, #16]
   b5e7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5e82:	4258      	negs	r0, r3
   b5e84:	4158      	adcs	r0, r3
}
   b5e86:	b004      	add	sp, #16
   b5e88:	bd10      	pop	{r4, pc}

000b5e8a <_ZN13DFRobot_PN5324scanEv>:
{   if(!this->nfcEnable)
   b5e8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5e8c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   b5e90:	4604      	mov	r4, r0
   b5e92:	b313      	cbz	r3, b5eda <_ZN13DFRobot_PN5324scanEv+0x50>
    cmdnfcUid[0] = COMMAND_INLISTPASSIVETARGET;
   b5e94:	234a      	movs	r3, #74	; 0x4a
   b5e96:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdnfcUid[1] = 1;                              // The quantity number of the maxium card that can be detected in every research
   b5e9a:	2301      	movs	r3, #1
   b5e9c:	f88d 3005 	strb.w	r3, [sp, #5]
    cmdnfcUid[2] = MIFARE_ISO14443A;
   b5ea0:	2300      	movs	r3, #0
   b5ea2:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdnfcUid,3);
   b5ea6:	6803      	ldr	r3, [r0, #0]
   b5ea8:	2203      	movs	r2, #3
   b5eaa:	681b      	ldr	r3, [r3, #0]
   b5eac:	a901      	add	r1, sp, #4
   b5eae:	4798      	blx	r3
    if(!readAck(25))
   b5eb0:	6823      	ldr	r3, [r4, #0]
   b5eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5eb6:	685b      	ldr	r3, [r3, #4]
   b5eb8:	2119      	movs	r1, #25
   b5eba:	4620      	mov	r0, r4
   b5ebc:	4798      	blx	r3
   b5ebe:	4603      	mov	r3, r0
   b5ec0:	b158      	cbz	r0, b5eda <_ZN13DFRobot_PN5324scanEv+0x50>
        nfcUid[i] = receiveACK[i + 19];
   b5ec2:	7ea3      	ldrb	r3, [r4, #26]
   b5ec4:	7de2      	ldrb	r2, [r4, #23]
   b5ec6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(receiveACK[13]!=1)
   b5eca:	7c63      	ldrb	r3, [r4, #17]
        nfcUid[i] = receiveACK[i + 19];
   b5ecc:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
   b5ed0:	8b22      	ldrh	r2, [r4, #24]
   b5ed2:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if(receiveACK[13]!=1)
   b5ed4:	1e5a      	subs	r2, r3, #1
   b5ed6:	4253      	negs	r3, r2
   b5ed8:	4153      	adcs	r3, r2
}
   b5eda:	4618      	mov	r0, r3
   b5edc:	b004      	add	sp, #16
   b5ede:	bd10      	pop	{r4, pc}

000b5ee0 <_ZN13DFRobot_PN5328readDataEi>:
String DFRobot_PN532::readData(int page) {
   b5ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (page > 255)
   b5ee4:	2aff      	cmp	r2, #255	; 0xff
String DFRobot_PN532::readData(int page) {
   b5ee6:	b08a      	sub	sp, #40	; 0x28
   b5ee8:	4605      	mov	r5, r0
   b5eea:	460c      	mov	r4, r1
   b5eec:	4616      	mov	r6, r2
    if (page > 255)
   b5eee:	dd06      	ble.n	b5efe <_ZN13DFRobot_PN5328readDataEi+0x1e>
        return "flase";
   b5ef0:	4939      	ldr	r1, [pc, #228]	; (b5fd8 <_ZN13DFRobot_PN5328readDataEi+0xf8>)
        return "read timeout!";
   b5ef2:	f001 fb60 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5ef6:	4628      	mov	r0, r5
   b5ef8:	b00a      	add	sp, #40	; 0x28
   b5efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!this->nfcEnable)
   b5efe:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
   b5f02:	b90b      	cbnz	r3, b5f08 <_ZN13DFRobot_PN5328readDataEi+0x28>
        return "wake up error!";
   b5f04:	4935      	ldr	r1, [pc, #212]	; (b5fdc <_ZN13DFRobot_PN5328readDataEi+0xfc>)
   b5f06:	e7f4      	b.n	b5ef2 <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!scan())
   b5f08:	4608      	mov	r0, r1
   b5f0a:	f7ff ffbe 	bl	b5e8a <_ZN13DFRobot_PN5324scanEv>
   b5f0e:	b910      	cbnz	r0, b5f16 <_ZN13DFRobot_PN5328readDataEi+0x36>
        return "no card!";
   b5f10:	4933      	ldr	r1, [pc, #204]	; (b5fe0 <_ZN13DFRobot_PN5328readDataEi+0x100>)
        return "read timeout!";
   b5f12:	4628      	mov	r0, r5
   b5f14:	e7ed      	b.n	b5ef2 <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!passWordCheck(page,nfcUid,nfcPassword))
   b5f16:	f104 0327 	add.w	r3, r4, #39	; 0x27
   b5f1a:	f104 022d 	add.w	r2, r4, #45	; 0x2d
   b5f1e:	4631      	mov	r1, r6
   b5f20:	4620      	mov	r0, r4
   b5f22:	f7ff ff80 	bl	b5e26 <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>
   b5f26:	b908      	cbnz	r0, b5f2c <_ZN13DFRobot_PN5328readDataEi+0x4c>
        return "read error!";
   b5f28:	492e      	ldr	r1, [pc, #184]	; (b5fe4 <_ZN13DFRobot_PN5328readDataEi+0x104>)
   b5f2a:	e7f2      	b.n	b5f12 <_ZN13DFRobot_PN5328readDataEi+0x32>
        cmdRead[0] = COMMAND_INDATAEXCHANGE;
   b5f2c:	2340      	movs	r3, #64	; 0x40
   b5f2e:	f88d 3004 	strb.w	r3, [sp, #4]
        cmdRead[1] = 1;                   /* Card number */
   b5f32:	2301      	movs	r3, #1
   b5f34:	f88d 3005 	strb.w	r3, [sp, #5]
        cmdRead[2] = CARD_CMD_READING;     /* Mifare Read command = 0x30 */
   b5f38:	2330      	movs	r3, #48	; 0x30
   b5f3a:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdRead,4);
   b5f3e:	6823      	ldr	r3, [r4, #0]
        cmdRead[3] = page; 
   b5f40:	f88d 6007 	strb.w	r6, [sp, #7]
    writeCommand(cmdRead,4);
   b5f44:	2204      	movs	r2, #4
   b5f46:	eb0d 0102 	add.w	r1, sp, r2
   b5f4a:	681b      	ldr	r3, [r3, #0]
   b5f4c:	4620      	mov	r0, r4
   b5f4e:	4798      	blx	r3
    if(!readAck(32))
   b5f50:	6823      	ldr	r3, [r4, #0]
   b5f52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f56:	685b      	ldr	r3, [r3, #4]
   b5f58:	2120      	movs	r1, #32
   b5f5a:	4620      	mov	r0, r4
   b5f5c:	4798      	blx	r3
   b5f5e:	b908      	cbnz	r0, b5f64 <_ZN13DFRobot_PN5328readDataEi+0x84>
        return "read timeout!";
   b5f60:	4921      	ldr	r1, [pc, #132]	; (b5fe8 <_ZN13DFRobot_PN5328readDataEi+0x108>)
   b5f62:	e7d6      	b.n	b5f12 <_ZN13DFRobot_PN5328readDataEi+0x32>
    String dataSrt = "";
   b5f64:	4921      	ldr	r1, [pc, #132]	; (b5fec <_ZN13DFRobot_PN5328readDataEi+0x10c>)
   b5f66:	a802      	add	r0, sp, #8
   b5f68:	f001 fb25 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
    if(checkDCS(32) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00){
   b5f6c:	2120      	movs	r1, #32
   b5f6e:	4620      	mov	r0, r4
   b5f70:	f7ff ff3e 	bl	b5df0 <_ZN13DFRobot_PN5328checkDCSEi>
   b5f74:	b330      	cbz	r0, b5fc4 <_ZN13DFRobot_PN5328readDataEi+0xe4>
   b5f76:	8a23      	ldrh	r3, [r4, #16]
   b5f78:	2b41      	cmp	r3, #65	; 0x41
   b5f7a:	d123      	bne.n	b5fc4 <_ZN13DFRobot_PN5328readDataEi+0xe4>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5f7c:	4f1c      	ldr	r7, [pc, #112]	; (b5ff0 <_ZN13DFRobot_PN5328readDataEi+0x110>)
   b5f7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; b5ff4 <_ZN13DFRobot_PN5328readDataEi+0x114>
   b5f82:	3412      	adds	r4, #18
   b5f84:	2600      	movs	r6, #0
            blockData[i] = receiveACK[i + 14];
   b5f86:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5f8a:	77a1      	strb	r1, [r4, #30]
            if(receiveACK[i+14]<=0x0f){
   b5f8c:	290f      	cmp	r1, #15
   b5f8e:	d821      	bhi.n	b5fd4 <_ZN13DFRobot_PN5328readDataEi+0xf4>
   b5f90:	4639      	mov	r1, r7
   b5f92:	a802      	add	r0, sp, #8
   b5f94:	f001 fbb8 	bl	b7708 <_ZN6String6concatEPKc>
                dataSrt += String(receiveACK[i + 14],HEX);
   b5f98:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   b5f9c:	2210      	movs	r2, #16
                dataSrt += String(receiveACK[i + 14],HEX);
   b5f9e:	a806      	add	r0, sp, #24
   b5fa0:	f001 fb72 	bl	b7688 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5fa4:	a906      	add	r1, sp, #24
   b5fa6:	a802      	add	r0, sp, #8
   b5fa8:	f001 fbaa 	bl	b7700 <_ZN6String6concatERKS_>
   b5fac:	a806      	add	r0, sp, #24
   b5fae:	f001 fab7 	bl	b7520 <_ZN6StringD1Ev>
            if(i<15) dataSrt += " ";
   b5fb2:	2e0f      	cmp	r6, #15
   b5fb4:	d003      	beq.n	b5fbe <_ZN13DFRobot_PN5328readDataEi+0xde>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5fb6:	4641      	mov	r1, r8
   b5fb8:	a802      	add	r0, sp, #8
   b5fba:	f001 fba5 	bl	b7708 <_ZN6String6concatEPKc>
        for(int i = 0; i<16; i++)
   b5fbe:	3601      	adds	r6, #1
   b5fc0:	2e10      	cmp	r6, #16
   b5fc2:	d1e0      	bne.n	b5f86 <_ZN13DFRobot_PN5328readDataEi+0xa6>
    return dataSrt;
   b5fc4:	a902      	add	r1, sp, #8
   b5fc6:	4628      	mov	r0, r5
   b5fc8:	f001 fb27 	bl	b761a <_ZN6StringC1EOS_>
    String dataSrt = "";
   b5fcc:	a802      	add	r0, sp, #8
   b5fce:	f001 faa7 	bl	b7520 <_ZN6StringD1Ev>
   b5fd2:	e790      	b.n	b5ef6 <_ZN13DFRobot_PN5328readDataEi+0x16>
                dataSrt += String(receiveACK[i + 14],HEX);
   b5fd4:	2210      	movs	r2, #16
   b5fd6:	e7e2      	b.n	b5f9e <_ZN13DFRobot_PN5328readDataEi+0xbe>
   b5fd8:	000bbbba 	.word	0x000bbbba
   b5fdc:	000bbba2 	.word	0x000bbba2
   b5fe0:	000bbbb1 	.word	0x000bbbb1
   b5fe4:	000bbbc0 	.word	0x000bbbc0
   b5fe8:	000bbbcc 	.word	0x000bbbcc
   b5fec:	000b8444 	.word	0x000b8444
   b5ff0:	000bbba0 	.word	0x000bbba0
   b5ff4:	000b839e 	.word	0x000b839e

000b5ff8 <_ZN13DFRobot_PN5328readDataEPhh>:
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b5ff8:	b530      	push	{r4, r5, lr}
    if(!this->nfcEnable)
   b5ffa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b5ffe:	b085      	sub	sp, #20
   b6000:	4604      	mov	r4, r0
   b6002:	460d      	mov	r5, r1
    if(!this->nfcEnable)
   b6004:	2b00      	cmp	r3, #0
   b6006:	d039      	beq.n	b607c <_ZN13DFRobot_PN5328readDataEPhh+0x84>
    String error = this->readData(block);
   b6008:	4601      	mov	r1, r0
   b600a:	4668      	mov	r0, sp
   b600c:	f7ff ff68 	bl	b5ee0 <_ZN13DFRobot_PN5328readDataEi>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6010:	491b      	ldr	r1, [pc, #108]	; (b6080 <_ZN13DFRobot_PN5328readDataEPhh+0x88>)
   b6012:	4668      	mov	r0, sp
   b6014:	f001 fbaa 	bl	b776c <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b6018:	b130      	cbz	r0, b6028 <_ZN13DFRobot_PN5328readDataEPhh+0x30>
        return -1;
   b601a:	24ff      	movs	r4, #255	; 0xff
    String error = this->readData(block);
   b601c:	4668      	mov	r0, sp
   b601e:	f001 fa7f 	bl	b7520 <_ZN6StringD1Ev>
}
   b6022:	4620      	mov	r0, r4
   b6024:	b005      	add	sp, #20
   b6026:	bd30      	pop	{r4, r5, pc}
   b6028:	4916      	ldr	r1, [pc, #88]	; (b6084 <_ZN13DFRobot_PN5328readDataEPhh+0x8c>)
   b602a:	4668      	mov	r0, sp
   b602c:	f001 fb9e 	bl	b776c <_ZNK6String6equalsEPKc>
    if(error == "no card!" || error == "read error!" || error =="unknown error!"
   b6030:	2800      	cmp	r0, #0
   b6032:	d1f2      	bne.n	b601a <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b6034:	4914      	ldr	r1, [pc, #80]	; (b6088 <_ZN13DFRobot_PN5328readDataEPhh+0x90>)
   b6036:	4668      	mov	r0, sp
   b6038:	f001 fb98 	bl	b776c <_ZNK6String6equalsEPKc>
   b603c:	2800      	cmp	r0, #0
   b603e:	d1ec      	bne.n	b601a <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b6040:	4912      	ldr	r1, [pc, #72]	; (b608c <_ZN13DFRobot_PN5328readDataEPhh+0x94>)
   b6042:	4668      	mov	r0, sp
   b6044:	f001 fb92 	bl	b776c <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b6048:	2800      	cmp	r0, #0
   b604a:	d1e6      	bne.n	b601a <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b604c:	4910      	ldr	r1, [pc, #64]	; (b6090 <_ZN13DFRobot_PN5328readDataEPhh+0x98>)
   b604e:	4668      	mov	r0, sp
   b6050:	f001 fb8c 	bl	b776c <_ZNK6String6equalsEPKc>
   b6054:	2800      	cmp	r0, #0
   b6056:	d1e0      	bne.n	b601a <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b6058:	490e      	ldr	r1, [pc, #56]	; (b6094 <_ZN13DFRobot_PN5328readDataEPhh+0x9c>)
   b605a:	4668      	mov	r0, sp
   b605c:	f001 fb86 	bl	b776c <_ZNK6String6equalsEPKc>
   b6060:	2800      	cmp	r0, #0
   b6062:	d1da      	bne.n	b601a <_ZN13DFRobot_PN5328readDataEPhh+0x22>
    memcpy(buffer,blockData,16);
   b6064:	f104 0331 	add.w	r3, r4, #49	; 0x31
   b6068:	4629      	mov	r1, r5
   b606a:	3441      	adds	r4, #65	; 0x41
   b606c:	f853 2b04 	ldr.w	r2, [r3], #4
   b6070:	f841 2b04 	str.w	r2, [r1], #4
   b6074:	42a3      	cmp	r3, r4
   b6076:	d1f9      	bne.n	b606c <_ZN13DFRobot_PN5328readDataEPhh+0x74>
    return  1;
   b6078:	2401      	movs	r4, #1
   b607a:	e7cf      	b.n	b601c <_ZN13DFRobot_PN5328readDataEPhh+0x24>
        return -1;
   b607c:	24ff      	movs	r4, #255	; 0xff
   b607e:	e7d0      	b.n	b6022 <_ZN13DFRobot_PN5328readDataEPhh+0x2a>
   b6080:	000bbbb1 	.word	0x000bbbb1
   b6084:	000bbbc0 	.word	0x000bbbc0
   b6088:	000bbbda 	.word	0x000bbbda
   b608c:	000bbbcc 	.word	0x000bbbcc
   b6090:	000bbba2 	.word	0x000bbba2
   b6094:	000bbbba 	.word	0x000bbbba

000b6098 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b6098:	b538      	push	{r3, r4, r5, lr}
   b609a:	4604      	mov	r4, r0
   b609c:	4b06      	ldr	r3, [pc, #24]	; (b60b8 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b609e:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b60a2:	4608      	mov	r0, r1
   b60a4:	4615      	mov	r5, r2
   b60a6:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b60a8:	2100      	movs	r1, #0
   b60aa:	f001 feb7 	bl	b7e1c <pinMode>
    _mode = mode;
   b60ae:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b60b2:	4620      	mov	r0, r4
   b60b4:	bd38      	pop	{r3, r4, r5, pc}
   b60b6:	bf00      	nop
   b60b8:	000bbbf4 	.word	0x000bbbf4

000b60bc <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b60bc:	b538      	push	{r3, r4, r5, lr}
   b60be:	4605      	mov	r5, r0
   b60c0:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b60c2:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b60c6:	f001 fed3 	bl	b7e70 <digitalRead>
   b60ca:	b130      	cbz	r0, b60da <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b60cc:	3c01      	subs	r4, #1
   b60ce:	b2a4      	uxth	r4, r4
   b60d0:	b12c      	cbz	r4, b60de <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b60d2:	200a      	movs	r0, #10
   b60d4:	f000 fb94 	bl	b6800 <delay>
    while(digitalRead(_irq)!=0){
   b60d8:	e7f3      	b.n	b60c2 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b60da:	2001      	movs	r0, #1
}
   b60dc:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b60de:	4620      	mov	r0, r4
   b60e0:	e7fc      	b.n	b60dc <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b60e2 <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b60e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b60e4:	2300      	movs	r3, #0
   b60e6:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b60ea:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b60ee:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b60f2:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b60f6:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b60fa:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b60fc:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b60fe:	4604      	mov	r4, r0
   b6100:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b6102:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b6106:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b610a:	d141      	bne.n	b6190 <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b610c:	f7ff ffd6 	bl	b60bc <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b6110:	b910      	cbnz	r0, b6118 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b6112:	2000      	movs	r0, #0
}
   b6114:	b003      	add	sp, #12
   b6116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b6118:	f001 fed8 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b611c:	2208      	movs	r2, #8
   b611e:	2124      	movs	r1, #36	; 0x24
   b6120:	f000 ff73 	bl	b700a <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b6124:	f001 fed2 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b6128:	6803      	ldr	r3, [r0, #0]
   b612a:	695b      	ldr	r3, [r3, #20]
   b612c:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b612e:	1d26      	adds	r6, r4, #4
   b6130:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b6134:	2001      	movs	r0, #1
   b6136:	f000 fb63 	bl	b6800 <delay>
        receiveACK[i]= Wire.read();
   b613a:	f001 fec7 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b613e:	6803      	ldr	r3, [r0, #0]
   b6140:	695b      	ldr	r3, [r3, #20]
   b6142:	4798      	blx	r3
   b6144:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b6148:	42be      	cmp	r6, r7
   b614a:	d1f3      	bne.n	b6134 <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b614c:	4620      	mov	r0, r4
   b614e:	f7ff ffb5 	bl	b60bc <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b6152:	2800      	cmp	r0, #0
   b6154:	d0dd      	beq.n	b6112 <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b6156:	f001 feb9 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b615a:	1f2a      	subs	r2, r5, #4
   b615c:	2124      	movs	r1, #36	; 0x24
   b615e:	f000 ff54 	bl	b700a <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b6162:	f001 feb3 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b6166:	6803      	ldr	r3, [r0, #0]
   b6168:	695b      	ldr	r3, [r3, #20]
   b616a:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b616c:	f06f 0709 	mvn.w	r7, #9
   b6170:	3d06      	subs	r5, #6
   b6172:	1b3f      	subs	r7, r7, r4
   b6174:	19bb      	adds	r3, r7, r6
   b6176:	429d      	cmp	r5, r3
   b6178:	dd49      	ble.n	b620e <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b617a:	2001      	movs	r0, #1
   b617c:	f000 fb40 	bl	b6800 <delay>
        receiveACK[6 + i] = Wire.read();
   b6180:	f001 fea4 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b6184:	6803      	ldr	r3, [r0, #0]
   b6186:	695b      	ldr	r3, [r3, #20]
   b6188:	4798      	blx	r3
   b618a:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b618e:	e7f1      	b.n	b6174 <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b6190:	2b00      	cmp	r3, #0
   b6192:	d13c      	bne.n	b620e <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b6194:	201e      	movs	r0, #30
   b6196:	f000 fb33 	bl	b6800 <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b619a:	f001 fe97 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b619e:	2208      	movs	r2, #8
   b61a0:	2124      	movs	r1, #36	; 0x24
   b61a2:	f000 ff32 	bl	b700a <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b61a6:	f001 fe91 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b61aa:	6803      	ldr	r3, [r0, #0]
   b61ac:	695b      	ldr	r3, [r3, #20]
   b61ae:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b61b0:	1d26      	adds	r6, r4, #4
   b61b2:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b61b6:	2001      	movs	r0, #1
   b61b8:	f000 fb22 	bl	b6800 <delay>
        receiveACK[i]= Wire.read();
   b61bc:	f001 fe86 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b61c0:	6803      	ldr	r3, [r0, #0]
   b61c2:	695b      	ldr	r3, [r3, #20]
   b61c4:	4798      	blx	r3
   b61c6:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b61ca:	42be      	cmp	r6, r7
   b61cc:	d1f3      	bne.n	b61b6 <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b61ce:	201e      	movs	r0, #30
   b61d0:	f000 fb16 	bl	b6800 <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b61d4:	f001 fe7a 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b61d8:	1f2a      	subs	r2, r5, #4
   b61da:	2124      	movs	r1, #36	; 0x24
   b61dc:	f000 ff15 	bl	b700a <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b61e0:	f001 fe74 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b61e4:	6803      	ldr	r3, [r0, #0]
   b61e6:	695b      	ldr	r3, [r3, #20]
   b61e8:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b61ea:	f06f 0709 	mvn.w	r7, #9
   b61ee:	3d06      	subs	r5, #6
   b61f0:	1b3f      	subs	r7, r7, r4
   b61f2:	19bb      	adds	r3, r7, r6
   b61f4:	429d      	cmp	r5, r3
   b61f6:	dd0a      	ble.n	b620e <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b61f8:	2001      	movs	r0, #1
   b61fa:	f000 fb01 	bl	b6800 <delay>
        receiveACK[6 + i] = Wire.read();
   b61fe:	f001 fe65 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b6202:	6803      	ldr	r3, [r0, #0]
   b6204:	695b      	ldr	r3, [r3, #20]
   b6206:	4798      	blx	r3
   b6208:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b620c:	e7f1      	b.n	b61f2 <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b620e:	2206      	movs	r2, #6
   b6210:	1d21      	adds	r1, r4, #4
   b6212:	4668      	mov	r0, sp
   b6214:	f001 ff37 	bl	b8086 <strncmp>
   b6218:	fab0 f080 	clz	r0, r0
   b621c:	0940      	lsrs	r0, r0, #5
   b621e:	e779      	b.n	b6114 <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b6220 <_ZN17DFRobot_PN532_IIC5beginEv>:
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b6220:	b537      	push	{r0, r1, r2, r4, r5, lr}
    this->nfcPassword[0] = 0xff;
   b6222:	23ff      	movs	r3, #255	; 0xff
   b6224:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    this->nfcPassword[1] = 0xff;
   b6228:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b622c:	4604      	mov	r4, r0
    this->nfcPassword[3] = 0xff;
    this->nfcPassword[4] = 0xff;
    this->nfcPassword[5] = 0xff;
    unsigned char cmdWrite[4];
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
    cmdWrite[1] = 0x01; // normal mode;
   b622e:	2501      	movs	r5, #1
    this->nfcPassword[1] = 0xff;
   b6230:	6283      	str	r3, [r0, #40]	; 0x28
    this->nfcPassword[5] = 0xff;
   b6232:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
   b6236:	2314      	movs	r3, #20
   b6238:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdWrite[2] = 0x14; // timeout 50ms * 20 = 1 second
   b623c:	f88d 3006 	strb.w	r3, [sp, #6]
    cmdWrite[1] = 0x01; // normal mode;
   b6240:	f88d 5005 	strb.w	r5, [sp, #5]
    cmdWrite[3] = 0x01; // use IRQ pin!
   b6244:	f88d 5007 	strb.w	r5, [sp, #7]
    Wire.begin();
   b6248:	f001 fe40 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b624c:	f000 feae 	bl	b6fac <_ZN7TwoWire5beginEv>
    nfcEnable = true;
    writeCommand(cmdWrite,4);
   b6250:	6823      	ldr	r3, [r4, #0]
    nfcEnable = true;
   b6252:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    writeCommand(cmdWrite,4);
   b6256:	2204      	movs	r2, #4
   b6258:	eb0d 0102 	add.w	r1, sp, r2
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	4620      	mov	r0, r4
   b6260:	4798      	blx	r3
    delay(10);
   b6262:	200a      	movs	r0, #10
   b6264:	f000 facc 	bl	b6800 <delay>
    
    if(readAck(14)!= 1){
   b6268:	6823      	ldr	r3, [r4, #0]
   b626a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b626e:	685b      	ldr	r3, [r3, #4]
   b6270:	210e      	movs	r1, #14
   b6272:	4620      	mov	r0, r4
   b6274:	4798      	blx	r3
   b6276:	b120      	cbz	r0, b6282 <_ZN17DFRobot_PN532_IIC5beginEv+0x62>
        
        return false;
    }
    return  ( receiveACK[12] == 0x15);
   b6278:	7c20      	ldrb	r0, [r4, #16]
   b627a:	f1a0 0315 	sub.w	r3, r0, #21
   b627e:	4258      	negs	r0, r3
   b6280:	4158      	adcs	r0, r3
}
   b6282:	b003      	add	sp, #12
   b6284:	bd30      	pop	{r4, r5, pc}
	...

000b6288 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <os_mutex_recursive_create+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	00030248 	.word	0x00030248

000b6298 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <HAL_Core_Runtime_Info+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	00030234 	.word	0x00030234

000b62a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <HAL_RNG_GetRandomNumber+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	685b      	ldr	r3, [r3, #4]
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	00030218 	.word	0x00030218

000b62b8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	695b      	ldr	r3, [r3, #20]
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	00030218 	.word	0x00030218

000b62c8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <hal_rtc_time_is_valid+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	00030218 	.word	0x00030218

000b62d8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <hal_rtc_get_time+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	00030218 	.word	0x00030218

000b62e8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <hal_gpio_mode+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	689b      	ldr	r3, [r3, #8]
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003022c 	.word	0x0003022c

000b62f8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <hal_gpio_get_mode+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	68db      	ldr	r3, [r3, #12]
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	0003022c 	.word	0x0003022c

000b6308 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <hal_gpio_write+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	691b      	ldr	r3, [r3, #16]
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	0003022c 	.word	0x0003022c

000b6318 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <hal_gpio_read+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	695b      	ldr	r3, [r3, #20]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	0003022c 	.word	0x0003022c

000b6328 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <hal_i2c_begin+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	68db      	ldr	r3, [r3, #12]
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	00030228 	.word	0x00030228

000b6338 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <hal_i2c_begin_transmission+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	699b      	ldr	r3, [r3, #24]
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	00030228 	.word	0x00030228

000b6348 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <hal_i2c_end_transmission+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	69db      	ldr	r3, [r3, #28]
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	00030228 	.word	0x00030228

000b6358 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b02      	ldr	r3, [pc, #8]	; (b6364 <hal_i2c_write+0xc>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	6a1b      	ldr	r3, [r3, #32]
   b6360:	9301      	str	r3, [sp, #4]
   b6362:	bd08      	pop	{r3, pc}
   b6364:	00030228 	.word	0x00030228

000b6368 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6368:	b508      	push	{r3, lr}
   b636a:	4b02      	ldr	r3, [pc, #8]	; (b6374 <hal_i2c_available+0xc>)
   b636c:	681b      	ldr	r3, [r3, #0]
   b636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6370:	9301      	str	r3, [sp, #4]
   b6372:	bd08      	pop	{r3, pc}
   b6374:	00030228 	.word	0x00030228

000b6378 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <hal_i2c_read+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	00030228 	.word	0x00030228

000b6388 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <hal_i2c_peek+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	00030228 	.word	0x00030228

000b6398 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <hal_i2c_flush+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	00030228 	.word	0x00030228

000b63a8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <hal_i2c_is_enabled+0xc>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b63b0:	9301      	str	r3, [sp, #4]
   b63b2:	bd08      	pop	{r3, pc}
   b63b4:	00030228 	.word	0x00030228

000b63b8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b02      	ldr	r3, [pc, #8]	; (b63c4 <hal_i2c_init+0xc>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b63c0:	9301      	str	r3, [sp, #4]
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	00030228 	.word	0x00030228

000b63c8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b02      	ldr	r3, [pc, #8]	; (b63d4 <hal_i2c_request_ex+0xc>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b63d0:	9301      	str	r3, [sp, #4]
   b63d2:	bd08      	pop	{r3, pc}
   b63d4:	00030228 	.word	0x00030228

000b63d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b63d8:	b508      	push	{r3, lr}
   b63da:	4b02      	ldr	r3, [pc, #8]	; (b63e4 <inet_inet_ntop+0xc>)
   b63dc:	681b      	ldr	r3, [r3, #0]
   b63de:	695b      	ldr	r3, [r3, #20]
   b63e0:	9301      	str	r3, [sp, #4]
   b63e2:	bd08      	pop	{r3, pc}
   b63e4:	00030264 	.word	0x00030264

000b63e8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b63e8:	b508      	push	{r3, lr}
   b63ea:	4b02      	ldr	r3, [pc, #8]	; (b63f4 <netdb_freeaddrinfo+0xc>)
   b63ec:	681b      	ldr	r3, [r3, #0]
   b63ee:	689b      	ldr	r3, [r3, #8]
   b63f0:	9301      	str	r3, [sp, #4]
   b63f2:	bd08      	pop	{r3, pc}
   b63f4:	00030268 	.word	0x00030268

000b63f8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b63f8:	b508      	push	{r3, lr}
   b63fa:	4b02      	ldr	r3, [pc, #8]	; (b6404 <netdb_getaddrinfo+0xc>)
   b63fc:	681b      	ldr	r3, [r3, #0]
   b63fe:	68db      	ldr	r3, [r3, #12]
   b6400:	9301      	str	r3, [sp, #4]
   b6402:	bd08      	pop	{r3, pc}
   b6404:	00030268 	.word	0x00030268

000b6408 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6408:	b508      	push	{r3, lr}
   b640a:	4b02      	ldr	r3, [pc, #8]	; (b6414 <hal_spi_begin+0xc>)
   b640c:	681b      	ldr	r3, [r3, #0]
   b640e:	681b      	ldr	r3, [r3, #0]
   b6410:	9301      	str	r3, [sp, #4]
   b6412:	bd08      	pop	{r3, pc}
   b6414:	00030230 	.word	0x00030230

000b6418 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6418:	b508      	push	{r3, lr}
   b641a:	4b02      	ldr	r3, [pc, #8]	; (b6424 <hal_spi_transfer+0xc>)
   b641c:	681b      	ldr	r3, [r3, #0]
   b641e:	695b      	ldr	r3, [r3, #20]
   b6420:	9301      	str	r3, [sp, #4]
   b6422:	bd08      	pop	{r3, pc}
   b6424:	00030230 	.word	0x00030230

000b6428 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6428:	b508      	push	{r3, lr}
   b642a:	4b02      	ldr	r3, [pc, #8]	; (b6434 <hal_spi_init+0xc>)
   b642c:	681b      	ldr	r3, [r3, #0]
   b642e:	69db      	ldr	r3, [r3, #28]
   b6430:	9301      	str	r3, [sp, #4]
   b6432:	bd08      	pop	{r3, pc}
   b6434:	00030230 	.word	0x00030230

000b6438 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6438:	b508      	push	{r3, lr}
   b643a:	4b02      	ldr	r3, [pc, #8]	; (b6444 <hal_spi_is_enabled+0xc>)
   b643c:	681b      	ldr	r3, [r3, #0]
   b643e:	6a1b      	ldr	r3, [r3, #32]
   b6440:	9301      	str	r3, [sp, #4]
   b6442:	bd08      	pop	{r3, pc}
   b6444:	00030230 	.word	0x00030230

000b6448 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6448:	b508      	push	{r3, lr}
   b644a:	4b02      	ldr	r3, [pc, #8]	; (b6454 <hal_spi_info+0xc>)
   b644c:	681b      	ldr	r3, [r3, #0]
   b644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6450:	9301      	str	r3, [sp, #4]
   b6452:	bd08      	pop	{r3, pc}
   b6454:	00030230 	.word	0x00030230

000b6458 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6458:	b508      	push	{r3, lr}
   b645a:	4b02      	ldr	r3, [pc, #8]	; (b6464 <hal_spi_set_settings+0xc>)
   b645c:	681b      	ldr	r3, [r3, #0]
   b645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6460:	9301      	str	r3, [sp, #4]
   b6462:	bd08      	pop	{r3, pc}
   b6464:	00030230 	.word	0x00030230

000b6468 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6468:	b508      	push	{r3, lr}
   b646a:	4b02      	ldr	r3, [pc, #8]	; (b6474 <hal_spi_acquire+0xc>)
   b646c:	681b      	ldr	r3, [r3, #0]
   b646e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6470:	9301      	str	r3, [sp, #4]
   b6472:	bd08      	pop	{r3, pc}
   b6474:	00030230 	.word	0x00030230

000b6478 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6478:	b508      	push	{r3, lr}
   b647a:	4b02      	ldr	r3, [pc, #8]	; (b6484 <hal_spi_release+0xc>)
   b647c:	681b      	ldr	r3, [r3, #0]
   b647e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6480:	9301      	str	r3, [sp, #4]
   b6482:	bd08      	pop	{r3, pc}
   b6484:	00030230 	.word	0x00030230

000b6488 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6488:	b508      	push	{r3, lr}
   b648a:	4b02      	ldr	r3, [pc, #8]	; (b6494 <hal_usart_write+0xc>)
   b648c:	681b      	ldr	r3, [r3, #0]
   b648e:	68db      	ldr	r3, [r3, #12]
   b6490:	9301      	str	r3, [sp, #4]
   b6492:	bd08      	pop	{r3, pc}
   b6494:	0003023c 	.word	0x0003023c

000b6498 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6498:	b508      	push	{r3, lr}
   b649a:	4b02      	ldr	r3, [pc, #8]	; (b64a4 <hal_usart_available+0xc>)
   b649c:	681b      	ldr	r3, [r3, #0]
   b649e:	691b      	ldr	r3, [r3, #16]
   b64a0:	9301      	str	r3, [sp, #4]
   b64a2:	bd08      	pop	{r3, pc}
   b64a4:	0003023c 	.word	0x0003023c

000b64a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b64a8:	b508      	push	{r3, lr}
   b64aa:	4b02      	ldr	r3, [pc, #8]	; (b64b4 <hal_usart_read+0xc>)
   b64ac:	681b      	ldr	r3, [r3, #0]
   b64ae:	695b      	ldr	r3, [r3, #20]
   b64b0:	9301      	str	r3, [sp, #4]
   b64b2:	bd08      	pop	{r3, pc}
   b64b4:	0003023c 	.word	0x0003023c

000b64b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b64b8:	b508      	push	{r3, lr}
   b64ba:	4b02      	ldr	r3, [pc, #8]	; (b64c4 <hal_usart_peek+0xc>)
   b64bc:	681b      	ldr	r3, [r3, #0]
   b64be:	699b      	ldr	r3, [r3, #24]
   b64c0:	9301      	str	r3, [sp, #4]
   b64c2:	bd08      	pop	{r3, pc}
   b64c4:	0003023c 	.word	0x0003023c

000b64c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b64c8:	b508      	push	{r3, lr}
   b64ca:	4b02      	ldr	r3, [pc, #8]	; (b64d4 <hal_usart_flush+0xc>)
   b64cc:	681b      	ldr	r3, [r3, #0]
   b64ce:	69db      	ldr	r3, [r3, #28]
   b64d0:	9301      	str	r3, [sp, #4]
   b64d2:	bd08      	pop	{r3, pc}
   b64d4:	0003023c 	.word	0x0003023c

000b64d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b64d8:	b508      	push	{r3, lr}
   b64da:	4b02      	ldr	r3, [pc, #8]	; (b64e4 <hal_usart_is_enabled+0xc>)
   b64dc:	681b      	ldr	r3, [r3, #0]
   b64de:	6a1b      	ldr	r3, [r3, #32]
   b64e0:	9301      	str	r3, [sp, #4]
   b64e2:	bd08      	pop	{r3, pc}
   b64e4:	0003023c 	.word	0x0003023c

000b64e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b64e8:	b508      	push	{r3, lr}
   b64ea:	4b02      	ldr	r3, [pc, #8]	; (b64f4 <hal_usart_available_data_for_write+0xc>)
   b64ec:	681b      	ldr	r3, [r3, #0]
   b64ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64f0:	9301      	str	r3, [sp, #4]
   b64f2:	bd08      	pop	{r3, pc}
   b64f4:	0003023c 	.word	0x0003023c

000b64f8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b64f8:	b508      	push	{r3, lr}
   b64fa:	4b02      	ldr	r3, [pc, #8]	; (b6504 <hal_usart_init_ex+0xc>)
   b64fc:	681b      	ldr	r3, [r3, #0]
   b64fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6500:	9301      	str	r3, [sp, #4]
   b6502:	bd08      	pop	{r3, pc}
   b6504:	0003023c 	.word	0x0003023c

000b6508 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b02      	ldr	r3, [pc, #8]	; (b6514 <HAL_USB_USART_Init+0xc>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	681b      	ldr	r3, [r3, #0]
   b6510:	9301      	str	r3, [sp, #4]
   b6512:	bd08      	pop	{r3, pc}
   b6514:	0003024c 	.word	0x0003024c

000b6518 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6518:	b508      	push	{r3, lr}
   b651a:	4b02      	ldr	r3, [pc, #8]	; (b6524 <HAL_USB_USART_Begin+0xc>)
   b651c:	681b      	ldr	r3, [r3, #0]
   b651e:	685b      	ldr	r3, [r3, #4]
   b6520:	9301      	str	r3, [sp, #4]
   b6522:	bd08      	pop	{r3, pc}
   b6524:	0003024c 	.word	0x0003024c

000b6528 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6528:	b508      	push	{r3, lr}
   b652a:	4b02      	ldr	r3, [pc, #8]	; (b6534 <HAL_USB_USART_Available_Data+0xc>)
   b652c:	681b      	ldr	r3, [r3, #0]
   b652e:	691b      	ldr	r3, [r3, #16]
   b6530:	9301      	str	r3, [sp, #4]
   b6532:	bd08      	pop	{r3, pc}
   b6534:	0003024c 	.word	0x0003024c

000b6538 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6538:	b508      	push	{r3, lr}
   b653a:	4b02      	ldr	r3, [pc, #8]	; (b6544 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b653c:	681b      	ldr	r3, [r3, #0]
   b653e:	695b      	ldr	r3, [r3, #20]
   b6540:	9301      	str	r3, [sp, #4]
   b6542:	bd08      	pop	{r3, pc}
   b6544:	0003024c 	.word	0x0003024c

000b6548 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6548:	b508      	push	{r3, lr}
   b654a:	4b02      	ldr	r3, [pc, #8]	; (b6554 <HAL_USB_USART_Receive_Data+0xc>)
   b654c:	681b      	ldr	r3, [r3, #0]
   b654e:	699b      	ldr	r3, [r3, #24]
   b6550:	9301      	str	r3, [sp, #4]
   b6552:	bd08      	pop	{r3, pc}
   b6554:	0003024c 	.word	0x0003024c

000b6558 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6558:	b508      	push	{r3, lr}
   b655a:	4b02      	ldr	r3, [pc, #8]	; (b6564 <HAL_USB_USART_Send_Data+0xc>)
   b655c:	681b      	ldr	r3, [r3, #0]
   b655e:	69db      	ldr	r3, [r3, #28]
   b6560:	9301      	str	r3, [sp, #4]
   b6562:	bd08      	pop	{r3, pc}
   b6564:	0003024c 	.word	0x0003024c

000b6568 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6568:	b508      	push	{r3, lr}
   b656a:	4b02      	ldr	r3, [pc, #8]	; (b6574 <HAL_USB_USART_Flush_Data+0xc>)
   b656c:	681b      	ldr	r3, [r3, #0]
   b656e:	6a1b      	ldr	r3, [r3, #32]
   b6570:	9301      	str	r3, [sp, #4]
   b6572:	bd08      	pop	{r3, pc}
   b6574:	0003024c 	.word	0x0003024c

000b6578 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6578:	b508      	push	{r3, lr}
   b657a:	4b02      	ldr	r3, [pc, #8]	; (b6584 <system_mode+0xc>)
   b657c:	681b      	ldr	r3, [r3, #0]
   b657e:	681b      	ldr	r3, [r3, #0]
   b6580:	9301      	str	r3, [sp, #4]
   b6582:	bd08      	pop	{r3, pc}
   b6584:	00030220 	.word	0x00030220

000b6588 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6588:	b508      	push	{r3, lr}
   b658a:	4b02      	ldr	r3, [pc, #8]	; (b6594 <set_system_mode+0xc>)
   b658c:	681b      	ldr	r3, [r3, #0]
   b658e:	685b      	ldr	r3, [r3, #4]
   b6590:	9301      	str	r3, [sp, #4]
   b6592:	bd08      	pop	{r3, pc}
   b6594:	00030220 	.word	0x00030220

000b6598 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6598:	b508      	push	{r3, lr}
   b659a:	4b02      	ldr	r3, [pc, #8]	; (b65a4 <system_delay_ms+0xc>)
   b659c:	681b      	ldr	r3, [r3, #0]
   b659e:	695b      	ldr	r3, [r3, #20]
   b65a0:	9301      	str	r3, [sp, #4]
   b65a2:	bd08      	pop	{r3, pc}
   b65a4:	00030220 	.word	0x00030220

000b65a8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b65a8:	b508      	push	{r3, lr}
   b65aa:	4b02      	ldr	r3, [pc, #8]	; (b65b4 <application_thread_current+0xc>)
   b65ac:	681b      	ldr	r3, [r3, #0]
   b65ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b65b0:	9301      	str	r3, [sp, #4]
   b65b2:	bd08      	pop	{r3, pc}
   b65b4:	00030220 	.word	0x00030220

000b65b8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b65b8:	b508      	push	{r3, lr}
   b65ba:	4b02      	ldr	r3, [pc, #8]	; (b65c4 <application_thread_invoke+0xc>)
   b65bc:	681b      	ldr	r3, [r3, #0]
   b65be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b65c0:	9301      	str	r3, [sp, #4]
   b65c2:	bd08      	pop	{r3, pc}
   b65c4:	00030220 	.word	0x00030220

000b65c8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b65c8:	b508      	push	{r3, lr}
   b65ca:	4b02      	ldr	r3, [pc, #8]	; (b65d4 <system_thread_get_state+0xc>)
   b65cc:	681b      	ldr	r3, [r3, #0]
   b65ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b65d0:	9301      	str	r3, [sp, #4]
   b65d2:	bd08      	pop	{r3, pc}
   b65d4:	00030220 	.word	0x00030220

000b65d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b65d8:	b508      	push	{r3, lr}
   b65da:	4b03      	ldr	r3, [pc, #12]	; (b65e8 <system_ctrl_set_app_request_handler+0x10>)
   b65dc:	681b      	ldr	r3, [r3, #0]
   b65de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b65e2:	9301      	str	r3, [sp, #4]
   b65e4:	bd08      	pop	{r3, pc}
   b65e6:	0000      	.short	0x0000
   b65e8:	00030220 	.word	0x00030220

000b65ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b03      	ldr	r3, [pc, #12]	; (b65fc <system_ctrl_set_result+0x10>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b65f6:	9301      	str	r3, [sp, #4]
   b65f8:	bd08      	pop	{r3, pc}
   b65fa:	0000      	.short	0x0000
   b65fc:	00030220 	.word	0x00030220

000b6600 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b6600:	b508      	push	{r3, lr}
   b6602:	4b02      	ldr	r3, [pc, #8]	; (b660c <spark_process+0xc>)
   b6604:	681b      	ldr	r3, [r3, #0]
   b6606:	689b      	ldr	r3, [r3, #8]
   b6608:	9301      	str	r3, [sp, #4]
   b660a:	bd08      	pop	{r3, pc}
   b660c:	00030244 	.word	0x00030244

000b6610 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6610:	b508      	push	{r3, lr}
   b6612:	4b02      	ldr	r3, [pc, #8]	; (b661c <spark_cloud_flag_connect+0xc>)
   b6614:	681b      	ldr	r3, [r3, #0]
   b6616:	68db      	ldr	r3, [r3, #12]
   b6618:	9301      	str	r3, [sp, #4]
   b661a:	bd08      	pop	{r3, pc}
   b661c:	00030244 	.word	0x00030244

000b6620 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6620:	b508      	push	{r3, lr}
   b6622:	4b02      	ldr	r3, [pc, #8]	; (b662c <spark_cloud_flag_connected+0xc>)
   b6624:	681b      	ldr	r3, [r3, #0]
   b6626:	695b      	ldr	r3, [r3, #20]
   b6628:	9301      	str	r3, [sp, #4]
   b662a:	bd08      	pop	{r3, pc}
   b662c:	00030244 	.word	0x00030244

000b6630 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6630:	b508      	push	{r3, lr}
   b6632:	4b02      	ldr	r3, [pc, #8]	; (b663c <spark_send_event+0xc>)
   b6634:	681b      	ldr	r3, [r3, #0]
   b6636:	6a1b      	ldr	r3, [r3, #32]
   b6638:	9301      	str	r3, [sp, #4]
   b663a:	bd08      	pop	{r3, pc}
   b663c:	00030244 	.word	0x00030244

000b6640 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6640:	b508      	push	{r3, lr}
   b6642:	4b02      	ldr	r3, [pc, #8]	; (b664c <spark_subscribe+0xc>)
   b6644:	681b      	ldr	r3, [r3, #0]
   b6646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6648:	9301      	str	r3, [sp, #4]
   b664a:	bd08      	pop	{r3, pc}
   b664c:	00030244 	.word	0x00030244

000b6650 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6650:	b508      	push	{r3, lr}
   b6652:	4b02      	ldr	r3, [pc, #8]	; (b665c <spark_sync_time+0xc>)
   b6654:	681b      	ldr	r3, [r3, #0]
   b6656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6658:	9301      	str	r3, [sp, #4]
   b665a:	bd08      	pop	{r3, pc}
   b665c:	00030244 	.word	0x00030244

000b6660 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6660:	b508      	push	{r3, lr}
   b6662:	4b02      	ldr	r3, [pc, #8]	; (b666c <spark_sync_time_pending+0xc>)
   b6664:	681b      	ldr	r3, [r3, #0]
   b6666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6668:	9301      	str	r3, [sp, #4]
   b666a:	bd08      	pop	{r3, pc}
   b666c:	00030244 	.word	0x00030244

000b6670 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b6670:	b508      	push	{r3, lr}
   b6672:	4b02      	ldr	r3, [pc, #8]	; (b667c <spark_set_connection_property+0xc>)
   b6674:	681b      	ldr	r3, [r3, #0]
   b6676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6678:	9301      	str	r3, [sp, #4]
   b667a:	bd08      	pop	{r3, pc}
   b667c:	00030244 	.word	0x00030244

000b6680 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6680:	b508      	push	{r3, lr}
   b6682:	4b02      	ldr	r3, [pc, #8]	; (b668c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6684:	681b      	ldr	r3, [r3, #0]
   b6686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6688:	9301      	str	r3, [sp, #4]
   b668a:	bd08      	pop	{r3, pc}
   b668c:	00030244 	.word	0x00030244

000b6690 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b6690:	b508      	push	{r3, lr}
   b6692:	4b02      	ldr	r3, [pc, #8]	; (b669c <spark_cloud_disconnect+0xc>)
   b6694:	681b      	ldr	r3, [r3, #0]
   b6696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6698:	9301      	str	r3, [sp, #4]
   b669a:	bd08      	pop	{r3, pc}
   b669c:	00030244 	.word	0x00030244

000b66a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b66a0:	b508      	push	{r3, lr}
   b66a2:	4b02      	ldr	r3, [pc, #8]	; (b66ac <network_connect+0xc>)
   b66a4:	681b      	ldr	r3, [r3, #0]
   b66a6:	685b      	ldr	r3, [r3, #4]
   b66a8:	9301      	str	r3, [sp, #4]
   b66aa:	bd08      	pop	{r3, pc}
   b66ac:	00030240 	.word	0x00030240

000b66b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b66b0:	b508      	push	{r3, lr}
   b66b2:	4b02      	ldr	r3, [pc, #8]	; (b66bc <network_connecting+0xc>)
   b66b4:	681b      	ldr	r3, [r3, #0]
   b66b6:	689b      	ldr	r3, [r3, #8]
   b66b8:	9301      	str	r3, [sp, #4]
   b66ba:	bd08      	pop	{r3, pc}
   b66bc:	00030240 	.word	0x00030240

000b66c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b66c0:	b508      	push	{r3, lr}
   b66c2:	4b02      	ldr	r3, [pc, #8]	; (b66cc <network_disconnect+0xc>)
   b66c4:	681b      	ldr	r3, [r3, #0]
   b66c6:	68db      	ldr	r3, [r3, #12]
   b66c8:	9301      	str	r3, [sp, #4]
   b66ca:	bd08      	pop	{r3, pc}
   b66cc:	00030240 	.word	0x00030240

000b66d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b66d0:	b508      	push	{r3, lr}
   b66d2:	4b02      	ldr	r3, [pc, #8]	; (b66dc <network_ready+0xc>)
   b66d4:	681b      	ldr	r3, [r3, #0]
   b66d6:	691b      	ldr	r3, [r3, #16]
   b66d8:	9301      	str	r3, [sp, #4]
   b66da:	bd08      	pop	{r3, pc}
   b66dc:	00030240 	.word	0x00030240

000b66e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b66e0:	b508      	push	{r3, lr}
   b66e2:	4b02      	ldr	r3, [pc, #8]	; (b66ec <network_on+0xc>)
   b66e4:	681b      	ldr	r3, [r3, #0]
   b66e6:	695b      	ldr	r3, [r3, #20]
   b66e8:	9301      	str	r3, [sp, #4]
   b66ea:	bd08      	pop	{r3, pc}
   b66ec:	00030240 	.word	0x00030240

000b66f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b66f0:	b508      	push	{r3, lr}
   b66f2:	4b02      	ldr	r3, [pc, #8]	; (b66fc <network_off+0xc>)
   b66f4:	681b      	ldr	r3, [r3, #0]
   b66f6:	699b      	ldr	r3, [r3, #24]
   b66f8:	9301      	str	r3, [sp, #4]
   b66fa:	bd08      	pop	{r3, pc}
   b66fc:	00030240 	.word	0x00030240

000b6700 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6700:	b508      	push	{r3, lr}
   b6702:	4b02      	ldr	r3, [pc, #8]	; (b670c <network_listen+0xc>)
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	69db      	ldr	r3, [r3, #28]
   b6708:	9301      	str	r3, [sp, #4]
   b670a:	bd08      	pop	{r3, pc}
   b670c:	00030240 	.word	0x00030240

000b6710 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6710:	b508      	push	{r3, lr}
   b6712:	4b02      	ldr	r3, [pc, #8]	; (b671c <network_listening+0xc>)
   b6714:	681b      	ldr	r3, [r3, #0]
   b6716:	6a1b      	ldr	r3, [r3, #32]
   b6718:	9301      	str	r3, [sp, #4]
   b671a:	bd08      	pop	{r3, pc}
   b671c:	00030240 	.word	0x00030240

000b6720 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6720:	b508      	push	{r3, lr}
   b6722:	4b02      	ldr	r3, [pc, #8]	; (b672c <network_set_listen_timeout+0xc>)
   b6724:	681b      	ldr	r3, [r3, #0]
   b6726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6728:	9301      	str	r3, [sp, #4]
   b672a:	bd08      	pop	{r3, pc}
   b672c:	00030240 	.word	0x00030240

000b6730 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6730:	b508      	push	{r3, lr}
   b6732:	4b02      	ldr	r3, [pc, #8]	; (b673c <network_get_listen_timeout+0xc>)
   b6734:	681b      	ldr	r3, [r3, #0]
   b6736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6738:	9301      	str	r3, [sp, #4]
   b673a:	bd08      	pop	{r3, pc}
   b673c:	00030240 	.word	0x00030240

000b6740 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6740:	b508      	push	{r3, lr}
   b6742:	4b02      	ldr	r3, [pc, #8]	; (b674c <network_is_on+0xc>)
   b6744:	681b      	ldr	r3, [r3, #0]
   b6746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6748:	9301      	str	r3, [sp, #4]
   b674a:	bd08      	pop	{r3, pc}
   b674c:	00030240 	.word	0x00030240

000b6750 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6750:	b508      	push	{r3, lr}
   b6752:	4b02      	ldr	r3, [pc, #8]	; (b675c <network_is_off+0xc>)
   b6754:	681b      	ldr	r3, [r3, #0]
   b6756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6758:	9301      	str	r3, [sp, #4]
   b675a:	bd08      	pop	{r3, pc}
   b675c:	00030240 	.word	0x00030240

000b6760 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6760:	b508      	push	{r3, lr}
   b6762:	4b02      	ldr	r3, [pc, #8]	; (b676c <malloc+0xc>)
   b6764:	681b      	ldr	r3, [r3, #0]
   b6766:	681b      	ldr	r3, [r3, #0]
   b6768:	9301      	str	r3, [sp, #4]
   b676a:	bd08      	pop	{r3, pc}
   b676c:	0003021c 	.word	0x0003021c

000b6770 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6770:	b508      	push	{r3, lr}
   b6772:	4b02      	ldr	r3, [pc, #8]	; (b677c <free+0xc>)
   b6774:	681b      	ldr	r3, [r3, #0]
   b6776:	685b      	ldr	r3, [r3, #4]
   b6778:	9301      	str	r3, [sp, #4]
   b677a:	bd08      	pop	{r3, pc}
   b677c:	0003021c 	.word	0x0003021c

000b6780 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6780:	b508      	push	{r3, lr}
   b6782:	4b02      	ldr	r3, [pc, #8]	; (b678c <realloc+0xc>)
   b6784:	681b      	ldr	r3, [r3, #0]
   b6786:	689b      	ldr	r3, [r3, #8]
   b6788:	9301      	str	r3, [sp, #4]
   b678a:	bd08      	pop	{r3, pc}
   b678c:	0003021c 	.word	0x0003021c

000b6790 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6790:	b508      	push	{r3, lr}
   b6792:	4b02      	ldr	r3, [pc, #8]	; (b679c <vsnprintf+0xc>)
   b6794:	681b      	ldr	r3, [r3, #0]
   b6796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6798:	9301      	str	r3, [sp, #4]
   b679a:	bd08      	pop	{r3, pc}
   b679c:	0003021c 	.word	0x0003021c

000b67a0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b67a0:	b508      	push	{r3, lr}
   b67a2:	4b02      	ldr	r3, [pc, #8]	; (b67ac <abort+0xc>)
   b67a4:	681b      	ldr	r3, [r3, #0]
   b67a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67a8:	9301      	str	r3, [sp, #4]
   b67aa:	bd08      	pop	{r3, pc}
   b67ac:	0003021c 	.word	0x0003021c

000b67b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b67b0:	b508      	push	{r3, lr}
   b67b2:	4b02      	ldr	r3, [pc, #8]	; (b67bc <_malloc_r+0xc>)
   b67b4:	681b      	ldr	r3, [r3, #0]
   b67b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67b8:	9301      	str	r3, [sp, #4]
   b67ba:	bd08      	pop	{r3, pc}
   b67bc:	0003021c 	.word	0x0003021c

000b67c0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b67c0:	b508      	push	{r3, lr}
   b67c2:	4b02      	ldr	r3, [pc, #8]	; (b67cc <__errno+0xc>)
   b67c4:	681b      	ldr	r3, [r3, #0]
   b67c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b67c8:	9301      	str	r3, [sp, #4]
   b67ca:	bd08      	pop	{r3, pc}
   b67cc:	0003021c 	.word	0x0003021c

000b67d0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b67d0:	b508      	push	{r3, lr}
   b67d2:	4b02      	ldr	r3, [pc, #8]	; (b67dc <__assert_func+0xc>)
   b67d4:	681b      	ldr	r3, [r3, #0]
   b67d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67d8:	9301      	str	r3, [sp, #4]
   b67da:	bd08      	pop	{r3, pc}
   b67dc:	0003021c 	.word	0x0003021c

000b67e0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b67e0:	b508      	push	{r3, lr}
   b67e2:	4b02      	ldr	r3, [pc, #8]	; (b67ec <newlib_impure_ptr_callback+0xc>)
   b67e4:	681b      	ldr	r3, [r3, #0]
   b67e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67e8:	9301      	str	r3, [sp, #4]
   b67ea:	bd08      	pop	{r3, pc}
   b67ec:	0003021c 	.word	0x0003021c

000b67f0 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b67f0:	b508      	push	{r3, lr}
   b67f2:	4b02      	ldr	r3, [pc, #8]	; (b67fc <localtime_r+0xc>)
   b67f4:	681b      	ldr	r3, [r3, #0]
   b67f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b67f8:	9301      	str	r3, [sp, #4]
   b67fa:	bd08      	pop	{r3, pc}
   b67fc:	0003021c 	.word	0x0003021c

000b6800 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6800:	2100      	movs	r1, #0
   b6802:	f7ff bec9 	b.w	b6598 <system_delay_ms>

000b6806 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b6806:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6808:	6883      	ldr	r3, [r0, #8]
   b680a:	4604      	mov	r4, r0
   b680c:	b90b      	cbnz	r3, b6812 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b680e:	f001 fbc3 	bl	b7f98 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6812:	68c3      	ldr	r3, [r0, #12]
   b6814:	4798      	blx	r3
      if (_M_manager)
   b6816:	68a3      	ldr	r3, [r4, #8]
   b6818:	b11b      	cbz	r3, b6822 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b681a:	2203      	movs	r2, #3
   b681c:	4621      	mov	r1, r4
   b681e:	4620      	mov	r0, r4
   b6820:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b6822:	4620      	mov	r0, r4
   b6824:	2110      	movs	r1, #16
}
   b6826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b682a:	f7fe b86a 	b.w	b4902 <_ZdlPvj>

000b682e <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b682e:	b510      	push	{r4, lr}
      if (_M_manager)
   b6830:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b6832:	4604      	mov	r4, r0
      if (_M_manager)
   b6834:	b113      	cbz	r3, b683c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6836:	2203      	movs	r2, #3
   b6838:	4601      	mov	r1, r0
   b683a:	4798      	blx	r3
    }
   b683c:	4620      	mov	r0, r4
   b683e:	bd10      	pop	{r4, pc}

000b6840 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6840:	b513      	push	{r0, r1, r4, lr}
   b6842:	460b      	mov	r3, r1
   b6844:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6846:	e9d0 0100 	ldrd	r0, r1, [r0]
   b684a:	466c      	mov	r4, sp
   b684c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6850:	e893 0003 	ldmia.w	r3, {r0, r1}
   b6854:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6858:	e894 0003 	ldmia.w	r4, {r0, r1}
   b685c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6860:	b002      	add	sp, #8
   b6862:	bd10      	pop	{r4, pc}

000b6864 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6864:	4802      	ldr	r0, [pc, #8]	; (b6870 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6866:	2300      	movs	r3, #0
   b6868:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b686a:	f7ff bd0d 	b.w	b6288 <os_mutex_recursive_create>
   b686e:	bf00      	nop
   b6870:	2003e65c 	.word	0x2003e65c

000b6874 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b6874:	2200      	movs	r2, #0
   b6876:	6840      	ldr	r0, [r0, #4]
   b6878:	4611      	mov	r1, r2
   b687a:	f7ff bf29 	b.w	b66d0 <network_ready>

000b687e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b687e:	2200      	movs	r2, #0
   b6880:	6840      	ldr	r0, [r0, #4]
   b6882:	4611      	mov	r1, r2
   b6884:	f7ff bf44 	b.w	b6710 <network_listening>

000b6888 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6888:	2200      	movs	r2, #0
   b688a:	6840      	ldr	r0, [r0, #4]
   b688c:	4611      	mov	r1, r2
   b688e:	f7ff bf4f 	b.w	b6730 <network_get_listen_timeout>

000b6892 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6892:	6840      	ldr	r0, [r0, #4]
   b6894:	2200      	movs	r2, #0
   b6896:	f7ff bf43 	b.w	b6720 <network_set_listen_timeout>

000b689a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b689a:	6840      	ldr	r0, [r0, #4]
   b689c:	2200      	movs	r2, #0
   b689e:	f081 0101 	eor.w	r1, r1, #1
   b68a2:	f7ff bf2d 	b.w	b6700 <network_listen>

000b68a6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b68a6:	2300      	movs	r3, #0
   b68a8:	6840      	ldr	r0, [r0, #4]
   b68aa:	461a      	mov	r2, r3
   b68ac:	4619      	mov	r1, r3
   b68ae:	f7ff bf1f 	b.w	b66f0 <network_off>

000b68b2 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b68b2:	2200      	movs	r2, #0
   b68b4:	6840      	ldr	r0, [r0, #4]
   b68b6:	4611      	mov	r1, r2
   b68b8:	f7ff befa 	b.w	b66b0 <network_connecting>

000b68bc <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b68bc:	6840      	ldr	r0, [r0, #4]
   b68be:	2200      	movs	r2, #0
   b68c0:	2102      	movs	r1, #2
   b68c2:	f7ff befd 	b.w	b66c0 <network_disconnect>

000b68c6 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b68c6:	2300      	movs	r3, #0
   b68c8:	6840      	ldr	r0, [r0, #4]
   b68ca:	461a      	mov	r2, r3
   b68cc:	f7ff bee8 	b.w	b66a0 <network_connect>

000b68d0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b68d0:	4b08      	ldr	r3, [pc, #32]	; (b68f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b68d2:	b510      	push	{r4, lr}
   b68d4:	2428      	movs	r4, #40	; 0x28
   b68d6:	4622      	mov	r2, r4
   b68d8:	4618      	mov	r0, r3
   b68da:	2100      	movs	r1, #0
   b68dc:	f001 fb77 	bl	b7fce <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b68e0:	4b05      	ldr	r3, [pc, #20]	; (b68f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b68e2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b68e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b68e8:	6042      	str	r2, [r0, #4]
   b68ea:	2204      	movs	r2, #4
   b68ec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b68ee:	4a03      	ldr	r2, [pc, #12]	; (b68fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b68f0:	601a      	str	r2, [r3, #0]
   b68f2:	bd10      	pop	{r4, pc}
   b68f4:	2003e668 	.word	0x2003e668
   b68f8:	2003e660 	.word	0x2003e660
   b68fc:	000bbc04 	.word	0x000bbc04

000b6900 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6900:	4770      	bx	lr

000b6902 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6902:	2000      	movs	r0, #0
   b6904:	4770      	bx	lr

000b6906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6906:	b510      	push	{r4, lr}
   b6908:	2110      	movs	r1, #16
   b690a:	4604      	mov	r4, r0
   b690c:	f7fd fff9 	bl	b4902 <_ZdlPvj>
   b6910:	4620      	mov	r0, r4
   b6912:	bd10      	pop	{r4, pc}

000b6914 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b6914:	b508      	push	{r3, lr}
      { delete this; }
   b6916:	f7ff fff6 	bl	b6906 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b691a:	bd08      	pop	{r3, pc}

000b691c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b691c:	b530      	push	{r4, r5, lr}
        type_(type) {
   b691e:	2200      	movs	r2, #0
   b6920:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b6924:	6002      	str	r2, [r0, #0]
   b6926:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6928:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b692a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b692c:	680c      	ldr	r4, [r1, #0]
   b692e:	8085      	strh	r5, [r0, #4]
   b6930:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b6932:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b6934:	bd30      	pop	{r4, r5, pc}

000b6936 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b6936:	b510      	push	{r4, lr}
   b6938:	4604      	mov	r4, r0
    free((void*)msg_);
   b693a:	6800      	ldr	r0, [r0, #0]
   b693c:	f7ff ff18 	bl	b6770 <free>
}
   b6940:	4620      	mov	r0, r4
   b6942:	bd10      	pop	{r4, pc}

000b6944 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6944:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b6946:	68c4      	ldr	r4, [r0, #12]
   b6948:	b1f4      	cbz	r4, b6988 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b694a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b694c:	2b02      	cmp	r3, #2
   b694e:	d103      	bne.n	b6958 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6950:	f104 000c 	add.w	r0, r4, #12
   b6954:	f7ff ffef 	bl	b6936 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6958:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b695a:	b135      	cbz	r5, b696a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b695c:	4628      	mov	r0, r5
   b695e:	f7ff ff66 	bl	b682e <_ZNSt14_Function_baseD1Ev>
   b6962:	2110      	movs	r1, #16
   b6964:	4628      	mov	r0, r5
   b6966:	f7fd ffcc 	bl	b4902 <_ZdlPvj>
   b696a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b696c:	b135      	cbz	r5, b697c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b696e:	4628      	mov	r0, r5
   b6970:	f7ff ff5d 	bl	b682e <_ZNSt14_Function_baseD1Ev>
   b6974:	2110      	movs	r1, #16
   b6976:	4628      	mov	r0, r5
   b6978:	f7fd ffc3 	bl	b4902 <_ZdlPvj>
   b697c:	4620      	mov	r0, r4
   b697e:	2114      	movs	r1, #20
   b6980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b6984:	f7fd bfbd 	b.w	b4902 <_ZdlPvj>
   b6988:	bd38      	pop	{r3, r4, r5, pc}

000b698a <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b698a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b698c:	230c      	movs	r3, #12
   b698e:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b6992:	6803      	ldr	r3, [r0, #0]
   b6994:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b6998:	7a03      	ldrb	r3, [r0, #8]
   b699a:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b699e:	6843      	ldr	r3, [r0, #4]
   b69a0:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b69a2:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b69a4:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b69a6:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b69aa:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b69ac:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b69b0:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b69b4:	f7ff fe6c 	bl	b6690 <spark_cloud_disconnect>
}
   b69b8:	b005      	add	sp, #20
   b69ba:	f85d fb04 	ldr.w	pc, [sp], #4

000b69be <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b69be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b69c0:	220c      	movs	r2, #12
   b69c2:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b69c6:	6802      	ldr	r2, [r0, #0]
   b69c8:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b69cc:	7a02      	ldrb	r2, [r0, #8]
   b69ce:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b69d2:	6842      	ldr	r2, [r0, #4]
   b69d4:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b69d6:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b69d8:	7a42      	ldrb	r2, [r0, #9]
   b69da:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b69de:	4619      	mov	r1, r3
   b69e0:	aa01      	add	r2, sp, #4
   b69e2:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b69e4:	f8ad 300d 	strh.w	r3, [sp, #13]
   b69e8:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b69ec:	f7ff fe40 	bl	b6670 <spark_set_connection_property>
}
   b69f0:	b005      	add	sp, #20
   b69f2:	f85d fb04 	ldr.w	pc, [sp], #4

000b69f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b69f6:	680b      	ldr	r3, [r1, #0]
   b69f8:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b69fa:	684b      	ldr	r3, [r1, #4]
   b69fc:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b69fe:	b113      	cbz	r3, b6a06 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b6a00:	685a      	ldr	r2, [r3, #4]
   b6a02:	3201      	adds	r2, #1
   b6a04:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b6a06:	4770      	bx	lr

000b6a08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a0a:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6a0c:	4668      	mov	r0, sp
   b6a0e:	460d      	mov	r5, r1
   b6a10:	f7ff fff1 	bl	b69f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a14:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a16:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a18:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6a1a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6a1c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6a1e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6a20:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6a22:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6a24:	f7fe fb42 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6a28:	b135      	cbz	r5, b6a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6a2a:	1d28      	adds	r0, r5, #4
   b6a2c:	f7fe fb3e 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a30:	2108      	movs	r1, #8
   b6a32:	4628      	mov	r0, r5
   b6a34:	f7fd ff65 	bl	b4902 <_ZdlPvj>
        return p;
    }
   b6a38:	4620      	mov	r0, r4
   b6a3a:	b003      	add	sp, #12
   b6a3c:	bd30      	pop	{r4, r5, pc}

000b6a3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6a3e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6a40:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a42:	b90a      	cbnz	r2, b6a48 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6a44:	f001 faa8 	bl	b7f98 <_ZSt25__throw_bad_function_callv>
    }
   b6a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a4c:	68c3      	ldr	r3, [r0, #12]
   b6a4e:	4718      	bx	r3

000b6a50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6a50:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6a52:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6a54:	f100 0110 	add.w	r1, r0, #16
   b6a58:	f7ff fff1 	bl	b6a3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6a5c:	bd08      	pop	{r3, pc}

000b6a5e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6a5e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6a60:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a62:	b90a      	cbnz	r2, b6a68 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6a64:	f001 fa98 	bl	b7f98 <_ZSt25__throw_bad_function_callv>
    }
   b6a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a6c:	68c3      	ldr	r3, [r0, #12]
   b6a6e:	4718      	bx	r3

000b6a70 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6a70:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6a72:	6800      	ldr	r0, [r0, #0]
   b6a74:	f100 0110 	add.w	r1, r0, #16
   b6a78:	f7ff fff1 	bl	b6a5e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6a7c:	bd08      	pop	{r3, pc}
	...

000b6a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6a80:	b538      	push	{r3, r4, r5, lr}
   b6a82:	2300      	movs	r3, #0
   b6a84:	4604      	mov	r4, r0
   b6a86:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6a88:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6a8a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6a8c:	f7fd ff35 	bl	b48fa <_Znwj>
   b6a90:	b128      	cbz	r0, b6a9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a92:	2301      	movs	r3, #1
   b6a94:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6a98:	4b02      	ldr	r3, [pc, #8]	; (b6aa4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6a9a:	6003      	str	r3, [r0, #0]
   b6a9c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6a9e:	6020      	str	r0, [r4, #0]
	}
   b6aa0:	4620      	mov	r0, r4
   b6aa2:	bd38      	pop	{r3, r4, r5, pc}
   b6aa4:	000bbc40 	.word	0x000bbc40

000b6aa8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6aa8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6aaa:	2300      	movs	r3, #0
   b6aac:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6aae:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6ab0:	4604      	mov	r4, r0
   b6ab2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6ab4:	b12b      	cbz	r3, b6ac2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6ab6:	2202      	movs	r2, #2
   b6ab8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6aba:	68eb      	ldr	r3, [r5, #12]
   b6abc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6abe:	68ab      	ldr	r3, [r5, #8]
   b6ac0:	60a3      	str	r3, [r4, #8]
    }
   b6ac2:	4620      	mov	r0, r4
   b6ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6aca:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6acc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6ace:	4668      	mov	r0, sp
   b6ad0:	f7ff ff24 	bl	b691c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6ad4:	f04f 0302 	mov.w	r3, #2
   b6ad8:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6adc:	2a00      	cmp	r2, #0
   b6ade:	d103      	bne.n	b6ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6ae0:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6ae4:	2900      	cmp	r1, #0
   b6ae6:	d1f7      	bne.n	b6ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6ae8:	d125      	bne.n	b6b36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6aea:	f104 050c 	add.w	r5, r4, #12
   b6aee:	4669      	mov	r1, sp
   b6af0:	4628      	mov	r0, r5
   b6af2:	f7ff ff13 	bl	b691c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6af6:	f3bf 8f5b 	dmb	ish
   b6afa:	2301      	movs	r3, #1
   b6afc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6afe:	2000      	movs	r0, #0
   b6b00:	f104 0308 	add.w	r3, r4, #8
   b6b04:	f3bf 8f5b 	dmb	ish
   b6b08:	e853 6f00 	ldrex	r6, [r3]
   b6b0c:	e843 0200 	strex	r2, r0, [r3]
   b6b10:	2a00      	cmp	r2, #0
   b6b12:	d1f9      	bne.n	b6b08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6b14:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6b18:	b16e      	cbz	r6, b6b36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6b1a:	f7ff fd45 	bl	b65a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6b1e:	b178      	cbz	r0, b6b40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6b20:	4629      	mov	r1, r5
   b6b22:	4630      	mov	r0, r6
   b6b24:	f7ff ff8b 	bl	b6a3e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6b28:	4630      	mov	r0, r6
   b6b2a:	f7ff fe80 	bl	b682e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6b2e:	2110      	movs	r1, #16
   b6b30:	4630      	mov	r0, r6
   b6b32:	f7fd fee6 	bl	b4902 <_ZdlPvj>
        p_->setError(std::move(error));
   b6b36:	4668      	mov	r0, sp
   b6b38:	f7ff fefd 	bl	b6936 <_ZN8particle5ErrorD1Ev>
    }
   b6b3c:	b009      	add	sp, #36	; 0x24
   b6b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6b40:	4631      	mov	r1, r6
   b6b42:	a802      	add	r0, sp, #8
   b6b44:	f7ff ffb0 	bl	b6aa8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6b48:	68e0      	ldr	r0, [r4, #12]
   b6b4a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6b4e:	b108      	cbz	r0, b6b54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6b50:	f001 fa7c 	bl	b804c <strdup>
        type_(type) {
   b6b54:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6b56:	2010      	movs	r0, #16
   b6b58:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6b5c:	f7fd fecd 	bl	b48fa <_Znwj>
   b6b60:	4605      	mov	r5, r0
   b6b62:	b1e8      	cbz	r0, b6ba0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6b64:	2700      	movs	r7, #0
   b6b66:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b68:	2018      	movs	r0, #24
   b6b6a:	f7fd fec6 	bl	b48fa <_Znwj>
   b6b6e:	4604      	mov	r4, r0
   b6b70:	b188      	cbz	r0, b6b96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6b72:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6b74:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6b76:	a802      	add	r0, sp, #8
   b6b78:	f7ff fe62 	bl	b6840 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b7c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6b7e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b80:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b82:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6b84:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b86:	a906      	add	r1, sp, #24
   b6b88:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b8a:	60e3      	str	r3, [r4, #12]
   b6b8c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6b90:	9205      	str	r2, [sp, #20]
   b6b92:	f7ff fec3 	bl	b691c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6b96:	4b08      	ldr	r3, [pc, #32]	; (b6bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6b98:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b9a:	4b08      	ldr	r3, [pc, #32]	; (b6bbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b9c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b9e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6ba0:	a806      	add	r0, sp, #24
   b6ba2:	f7ff fec8 	bl	b6936 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6ba6:	a802      	add	r0, sp, #8
   b6ba8:	f7ff fe41 	bl	b682e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6bac:	2200      	movs	r2, #0
   b6bae:	4629      	mov	r1, r5
   b6bb0:	4803      	ldr	r0, [pc, #12]	; (b6bc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6bb2:	f7ff fd01 	bl	b65b8 <application_thread_invoke>
   b6bb6:	e7b7      	b.n	b6b28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6bb8:	000b6a51 	.word	0x000b6a51
   b6bbc:	000b6cd5 	.word	0x000b6cd5
   b6bc0:	000b6807 	.word	0x000b6807

000b6bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bc8:	b08b      	sub	sp, #44	; 0x2c
   b6bca:	4605      	mov	r5, r0
   b6bcc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6bd0:	460f      	mov	r7, r1
   b6bd2:	4690      	mov	r8, r2
   b6bd4:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6bd6:	f7ff fd23 	bl	b6620 <spark_cloud_flag_connected>
   b6bda:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6bdc:	4683      	mov	fp, r0
   b6bde:	bb38      	cbnz	r0, b6c30 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6be0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6be4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6be6:	a905      	add	r1, sp, #20
   b6be8:	4630      	mov	r0, r6
   b6bea:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6bee:	f7ff fe95 	bl	b691c <_ZN8particle5ErrorC1EOS0_>
   b6bf2:	2014      	movs	r0, #20
   b6bf4:	f7fd fe81 	bl	b48fa <_Znwj>
   b6bf8:	4604      	mov	r4, r0
   b6bfa:	b148      	cbz	r0, b6c10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6bfc:	2302      	movs	r3, #2
   b6bfe:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6c00:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6c02:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6c06:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6c08:	4631      	mov	r1, r6
   b6c0a:	300c      	adds	r0, #12
   b6c0c:	f7ff fe86 	bl	b691c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c10:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6c12:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c14:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6c18:	f7ff ff32 	bl	b6a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6c1c:	4630      	mov	r0, r6
   b6c1e:	f7ff fe8a 	bl	b6936 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6c22:	a805      	add	r0, sp, #20
   b6c24:	f7ff fe87 	bl	b6936 <_ZN8particle5ErrorD1Ev>
}
   b6c28:	4628      	mov	r0, r5
   b6c2a:	b00b      	add	sp, #44	; 0x2c
   b6c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6c30:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6c32:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6c34:	2014      	movs	r0, #20
   b6c36:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6c3a:	9307      	str	r3, [sp, #28]
   b6c3c:	f7fd fe5d 	bl	b48fa <_Znwj>
   b6c40:	4601      	mov	r1, r0
   b6c42:	b118      	cbz	r0, b6c4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6c48:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6c4a:	7044      	strb	r4, [r0, #1]
   b6c4c:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c4e:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6c50:	f7ff ff16 	bl	b6a80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6c54:	4b1e      	ldr	r3, [pc, #120]	; (b6cd0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6c56:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6c58:	2008      	movs	r0, #8
   b6c5a:	f7fd fe4e 	bl	b48fa <_Znwj>
   b6c5e:	4604      	mov	r4, r0
   b6c60:	b110      	cbz	r0, b6c68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6c62:	a903      	add	r1, sp, #12
   b6c64:	f7ff fec7 	bl	b69f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6c68:	9600      	str	r6, [sp, #0]
   b6c6a:	fa5f f38a 	uxtb.w	r3, sl
   b6c6e:	464a      	mov	r2, r9
   b6c70:	4641      	mov	r1, r8
   b6c72:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6c74:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6c76:	f7ff fcdb 	bl	b6630 <spark_send_event>
   b6c7a:	b9b8      	cbnz	r0, b6cac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6c7c:	9b03      	ldr	r3, [sp, #12]
   b6c7e:	785b      	ldrb	r3, [r3, #1]
   b6c80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6c84:	b993      	cbnz	r3, b6cac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6c86:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6c8a:	a905      	add	r1, sp, #20
   b6c8c:	a803      	add	r0, sp, #12
   b6c8e:	9205      	str	r2, [sp, #20]
   b6c90:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6c94:	f7ff ff18 	bl	b6ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6c98:	a805      	add	r0, sp, #20
   b6c9a:	f7ff fe4c 	bl	b6936 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6c9e:	a805      	add	r0, sp, #20
   b6ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6ca2:	f7ff feb1 	bl	b6a08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6ca6:	a806      	add	r0, sp, #24
   b6ca8:	f7fe fa00 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cac:	a903      	add	r1, sp, #12
   b6cae:	a805      	add	r0, sp, #20
   b6cb0:	f7ff fea1 	bl	b69f6 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6cb4:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6cb6:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6cb8:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6cba:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6cbc:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6cbe:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6cc0:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6cc2:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6cc4:	f7fe f9f2 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cc8:	a804      	add	r0, sp, #16
   b6cca:	f7fe f9ef 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6cce:	e7ab      	b.n	b6c28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6cd0:	000b6d51 	.word	0x000b6d51

000b6cd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6cd4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cd8:	4605      	mov	r5, r0
	switch (__op)
   b6cda:	d103      	bne.n	b6ce4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6cdc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6cde:	6003      	str	r3, [r0, #0]
      }
   b6ce0:	2000      	movs	r0, #0
   b6ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6ce4:	2a02      	cmp	r2, #2
   b6ce6:	d010      	beq.n	b6d0a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6ce8:	2a03      	cmp	r2, #3
   b6cea:	d1f9      	bne.n	b6ce0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6cec:	6804      	ldr	r4, [r0, #0]
   b6cee:	2c00      	cmp	r4, #0
   b6cf0:	d0f6      	beq.n	b6ce0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6cf2:	f104 0010 	add.w	r0, r4, #16
   b6cf6:	f7ff fe1e 	bl	b6936 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6cfa:	4620      	mov	r0, r4
   b6cfc:	f7ff fd97 	bl	b682e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6d00:	2118      	movs	r1, #24
   b6d02:	4620      	mov	r0, r4
   b6d04:	f7fd fdfd 	bl	b4902 <_ZdlPvj>
   b6d08:	e7ea      	b.n	b6ce0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6d0a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6d0c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6d0e:	f7fd fdf4 	bl	b48fa <_Znwj>
   b6d12:	4604      	mov	r4, r0
   b6d14:	b150      	cbz	r0, b6d2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6d16:	4631      	mov	r1, r6
   b6d18:	f7ff fec6 	bl	b6aa8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6d1c:	6930      	ldr	r0, [r6, #16]
   b6d1e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6d22:	b108      	cbz	r0, b6d28 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6d24:	f001 f992 	bl	b804c <strdup>
        type_(type) {
   b6d28:	6120      	str	r0, [r4, #16]
   b6d2a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6d2c:	602c      	str	r4, [r5, #0]
	}
   b6d2e:	e7d7      	b.n	b6ce0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6d30 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6d30:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6d32:	2300      	movs	r3, #0
   b6d34:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6d36:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6d38:	4604      	mov	r4, r0
   b6d3a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6d3c:	b12b      	cbz	r3, b6d4a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6d3e:	2202      	movs	r2, #2
   b6d40:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6d42:	68eb      	ldr	r3, [r5, #12]
   b6d44:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6d46:	68ab      	ldr	r3, [r5, #8]
   b6d48:	60a3      	str	r3, [r4, #8]
    }
   b6d4a:	4620      	mov	r0, r4
   b6d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6d50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6d50:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d52:	b089      	sub	sp, #36	; 0x24
   b6d54:	4604      	mov	r4, r0
   b6d56:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6d58:	a801      	add	r0, sp, #4
   b6d5a:	4611      	mov	r1, r2
   b6d5c:	f7ff fe54 	bl	b6a08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6d60:	b1a4      	cbz	r4, b6d8c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6d62:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6d64:	b11d      	cbz	r5, b6d6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6d66:	4628      	mov	r0, r5
   b6d68:	f001 f970 	bl	b804c <strdup>
   b6d6c:	4605      	mov	r5, r0
   b6d6e:	a801      	add	r0, sp, #4
   b6d70:	a903      	add	r1, sp, #12
        type_(type) {
   b6d72:	9503      	str	r5, [sp, #12]
   b6d74:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6d78:	f7ff fea6 	bl	b6ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6d7c:	a803      	add	r0, sp, #12
   b6d7e:	f7ff fdda 	bl	b6936 <_ZN8particle5ErrorD1Ev>
   b6d82:	a802      	add	r0, sp, #8
   b6d84:	f7fe f992 	bl	b50ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6d88:	b009      	add	sp, #36	; 0x24
   b6d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6d8c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6d8e:	2301      	movs	r3, #1
   b6d90:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6d94:	2a00      	cmp	r2, #0
   b6d96:	d103      	bne.n	b6da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6d98:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6d9c:	2900      	cmp	r1, #0
   b6d9e:	d1f7      	bne.n	b6d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6da0:	d1ef      	bne.n	b6d82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6da2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6da4:	f3bf 8f5b 	dmb	ish
   b6da8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6daa:	1d2b      	adds	r3, r5, #4
   b6dac:	f3bf 8f5b 	dmb	ish
   b6db0:	e853 6f00 	ldrex	r6, [r3]
   b6db4:	e843 4200 	strex	r2, r4, [r3]
   b6db8:	2a00      	cmp	r2, #0
   b6dba:	d1f9      	bne.n	b6db0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6dbc:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6dc0:	2e00      	cmp	r6, #0
   b6dc2:	d0de      	beq.n	b6d82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6dc4:	4620      	mov	r0, r4
   b6dc6:	f7ff fbef 	bl	b65a8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6dca:	4607      	mov	r7, r0
   b6dcc:	b160      	cbz	r0, b6de8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6dce:	f105 010c 	add.w	r1, r5, #12
   b6dd2:	4630      	mov	r0, r6
   b6dd4:	f7ff fe43 	bl	b6a5e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6dd8:	4630      	mov	r0, r6
   b6dda:	f7ff fd28 	bl	b682e <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6dde:	2110      	movs	r1, #16
   b6de0:	4630      	mov	r0, r6
   b6de2:	f7fd fd8e 	bl	b4902 <_ZdlPvj>
   b6de6:	e7cc      	b.n	b6d82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6de8:	4631      	mov	r1, r6
   b6dea:	a803      	add	r0, sp, #12
   b6dec:	f7ff ffa0 	bl	b6d30 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6df0:	7b2b      	ldrb	r3, [r5, #12]
   b6df2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6df6:	2010      	movs	r0, #16
   b6df8:	f7fd fd7f 	bl	b48fa <_Znwj>
   b6dfc:	4605      	mov	r5, r0
   b6dfe:	b1d0      	cbz	r0, b6e36 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6e00:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e02:	2014      	movs	r0, #20
   b6e04:	f7fd fd79 	bl	b48fa <_Znwj>
   b6e08:	4604      	mov	r4, r0
   b6e0a:	b178      	cbz	r0, b6e2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6e0c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6e0e:	4601      	mov	r1, r0
   b6e10:	a803      	add	r0, sp, #12
   b6e12:	f7ff fd15 	bl	b6840 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6e18:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e1a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e1c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6e1e:	9205      	str	r2, [sp, #20]
   b6e20:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e22:	60e3      	str	r3, [r4, #12]
   b6e24:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6e28:	9206      	str	r2, [sp, #24]
   b6e2a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6e2c:	4b06      	ldr	r3, [pc, #24]	; (b6e48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6e2e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6e30:	4b06      	ldr	r3, [pc, #24]	; (b6e4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e32:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6e34:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6e36:	a803      	add	r0, sp, #12
   b6e38:	f7ff fcf9 	bl	b682e <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6e3c:	2200      	movs	r2, #0
   b6e3e:	4629      	mov	r1, r5
   b6e40:	4803      	ldr	r0, [pc, #12]	; (b6e50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6e42:	f7ff fbb9 	bl	b65b8 <application_thread_invoke>
   b6e46:	e7c7      	b.n	b6dd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6e48:	000b6a71 	.word	0x000b6a71
   b6e4c:	000b6e55 	.word	0x000b6e55
   b6e50:	000b6807 	.word	0x000b6807

000b6e54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6e54:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e56:	b570      	push	{r4, r5, r6, lr}
   b6e58:	4604      	mov	r4, r0
	switch (__op)
   b6e5a:	d103      	bne.n	b6e64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6e5c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6e5e:	6003      	str	r3, [r0, #0]
      }
   b6e60:	2000      	movs	r0, #0
   b6e62:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6e64:	2a02      	cmp	r2, #2
   b6e66:	d00c      	beq.n	b6e82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6e68:	2a03      	cmp	r2, #3
   b6e6a:	d1f9      	bne.n	b6e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6e6c:	6804      	ldr	r4, [r0, #0]
   b6e6e:	2c00      	cmp	r4, #0
   b6e70:	d0f6      	beq.n	b6e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6e72:	4620      	mov	r0, r4
   b6e74:	f7ff fcdb 	bl	b682e <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6e78:	2114      	movs	r1, #20
   b6e7a:	4620      	mov	r0, r4
   b6e7c:	f7fd fd41 	bl	b4902 <_ZdlPvj>
   b6e80:	e7ee      	b.n	b6e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e82:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6e84:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e86:	f7fd fd38 	bl	b48fa <_Znwj>
   b6e8a:	4605      	mov	r5, r0
   b6e8c:	b120      	cbz	r0, b6e98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6e8e:	4631      	mov	r1, r6
   b6e90:	f7ff ff4e 	bl	b6d30 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6e94:	7c33      	ldrb	r3, [r6, #16]
   b6e96:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6e98:	6025      	str	r5, [r4, #0]
	}
   b6e9a:	e7e1      	b.n	b6e60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6e9c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6e9c:	2200      	movs	r2, #0
   b6e9e:	6840      	ldr	r0, [r0, #4]
   b6ea0:	4611      	mov	r1, r2
   b6ea2:	f7ff bc35 	b.w	b6710 <network_listening>

000b6ea6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6ea6:	2200      	movs	r2, #0
   b6ea8:	6840      	ldr	r0, [r0, #4]
   b6eaa:	4611      	mov	r1, r2
   b6eac:	f7ff bc40 	b.w	b6730 <network_get_listen_timeout>

000b6eb0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6eb0:	6840      	ldr	r0, [r0, #4]
   b6eb2:	2200      	movs	r2, #0
   b6eb4:	f7ff bc34 	b.w	b6720 <network_set_listen_timeout>

000b6eb8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6eb8:	6840      	ldr	r0, [r0, #4]
   b6eba:	2200      	movs	r2, #0
   b6ebc:	f081 0101 	eor.w	r1, r1, #1
   b6ec0:	f7ff bc1e 	b.w	b6700 <network_listen>

000b6ec4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ec4:	2300      	movs	r3, #0
   b6ec6:	6840      	ldr	r0, [r0, #4]
   b6ec8:	461a      	mov	r2, r3
   b6eca:	4619      	mov	r1, r3
   b6ecc:	f7ff bc10 	b.w	b66f0 <network_off>

000b6ed0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ed0:	2300      	movs	r3, #0
   b6ed2:	6840      	ldr	r0, [r0, #4]
   b6ed4:	461a      	mov	r2, r3
   b6ed6:	4619      	mov	r1, r3
   b6ed8:	f7ff bc02 	b.w	b66e0 <network_on>

000b6edc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6edc:	2200      	movs	r2, #0
   b6ede:	6840      	ldr	r0, [r0, #4]
   b6ee0:	4611      	mov	r1, r2
   b6ee2:	f7ff bbf5 	b.w	b66d0 <network_ready>

000b6ee6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6ee6:	2200      	movs	r2, #0
   b6ee8:	6840      	ldr	r0, [r0, #4]
   b6eea:	4611      	mov	r1, r2
   b6eec:	f7ff bbe0 	b.w	b66b0 <network_connecting>

000b6ef0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ef0:	6840      	ldr	r0, [r0, #4]
   b6ef2:	2200      	movs	r2, #0
   b6ef4:	2102      	movs	r1, #2
   b6ef6:	f7ff bbe3 	b.w	b66c0 <network_disconnect>

000b6efa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6efa:	2300      	movs	r3, #0
   b6efc:	6840      	ldr	r0, [r0, #4]
   b6efe:	461a      	mov	r2, r3
   b6f00:	f7ff bbce 	b.w	b66a0 <network_connect>

000b6f04 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6f04:	4b02      	ldr	r3, [pc, #8]	; (b6f10 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6f06:	2203      	movs	r2, #3
   b6f08:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f0a:	4a02      	ldr	r2, [pc, #8]	; (b6f14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f0c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f0e:	4770      	bx	lr
   b6f10:	2003e690 	.word	0x2003e690
   b6f14:	000bbc5c 	.word	0x000bbc5c

000b6f18 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6f18:	4770      	bx	lr

000b6f1a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f1c:	4606      	mov	r6, r0
   b6f1e:	4615      	mov	r5, r2
   b6f20:	460c      	mov	r4, r1
   b6f22:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6f24:	42bc      	cmp	r4, r7
   b6f26:	d006      	beq.n	b6f36 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6f28:	6833      	ldr	r3, [r6, #0]
   b6f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6f2e:	689b      	ldr	r3, [r3, #8]
   b6f30:	4630      	mov	r0, r6
   b6f32:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6f34:	e7f6      	b.n	b6f24 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6f36:	4628      	mov	r0, r5
   b6f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f3a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6f3a:	7c00      	ldrb	r0, [r0, #16]
   b6f3c:	2200      	movs	r2, #0
   b6f3e:	f7ff ba0b 	b.w	b6358 <hal_i2c_write>

000b6f42 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6f42:	7c00      	ldrb	r0, [r0, #16]
   b6f44:	2100      	movs	r1, #0
   b6f46:	f7ff ba0f 	b.w	b6368 <hal_i2c_available>

000b6f4a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6f4a:	7c00      	ldrb	r0, [r0, #16]
   b6f4c:	2100      	movs	r1, #0
   b6f4e:	f7ff ba13 	b.w	b6378 <hal_i2c_read>

000b6f52 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6f52:	7c00      	ldrb	r0, [r0, #16]
   b6f54:	2100      	movs	r1, #0
   b6f56:	f7ff ba17 	b.w	b6388 <hal_i2c_peek>

000b6f5a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6f5a:	7c00      	ldrb	r0, [r0, #16]
   b6f5c:	2100      	movs	r1, #0
   b6f5e:	f7ff ba1b 	b.w	b6398 <hal_i2c_flush>

000b6f62 <_ZN7TwoWireD0Ev>:
   b6f62:	b510      	push	{r4, lr}
   b6f64:	2114      	movs	r1, #20
   b6f66:	4604      	mov	r4, r0
   b6f68:	f7fd fccb 	bl	b4902 <_ZdlPvj>
   b6f6c:	4620      	mov	r0, r4
   b6f6e:	bd10      	pop	{r4, pc}

000b6f70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f70:	b538      	push	{r3, r4, r5, lr}
   b6f72:	4604      	mov	r4, r0
   b6f74:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f7a:	2200      	movs	r2, #0
   b6f7c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f80:	4b09      	ldr	r3, [pc, #36]	; (b6fa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6f82:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f84:	4608      	mov	r0, r1
   b6f86:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6f88:	4629      	mov	r1, r5
   b6f8a:	f7ff fa15 	bl	b63b8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f8e:	30bf      	adds	r0, #191	; 0xbf
   b6f90:	d108      	bne.n	b6fa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6f92:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f94:	07db      	lsls	r3, r3, #31
   b6f96:	d505      	bpl.n	b6fa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6f98:	6868      	ldr	r0, [r5, #4]
   b6f9a:	f7ff fbe9 	bl	b6770 <free>
    free(conf.tx_buffer);
   b6f9e:	68e8      	ldr	r0, [r5, #12]
   b6fa0:	f7ff fbe6 	bl	b6770 <free>
}
   b6fa4:	4620      	mov	r0, r4
   b6fa6:	bd38      	pop	{r3, r4, r5, pc}
   b6fa8:	000bbc98 	.word	0x000bbc98

000b6fac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6fac:	2300      	movs	r3, #0
   b6fae:	7c00      	ldrb	r0, [r0, #16]
   b6fb0:	461a      	mov	r2, r3
   b6fb2:	4619      	mov	r1, r3
   b6fb4:	f7ff b9b8 	b.w	b6328 <hal_i2c_begin>

000b6fb8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6fb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6fba:	2200      	movs	r2, #0
   b6fbc:	2314      	movs	r3, #20
   b6fbe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6fc2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6fc6:	780b      	ldrb	r3, [r1, #0]
   b6fc8:	f88d 3008 	strb.w	r3, [sp, #8]
   b6fcc:	684b      	ldr	r3, [r1, #4]
   b6fce:	9303      	str	r3, [sp, #12]
   b6fd0:	68cb      	ldr	r3, [r1, #12]
   b6fd2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6fd4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6fd6:	7a0b      	ldrb	r3, [r1, #8]
   b6fd8:	9305      	str	r3, [sp, #20]
   b6fda:	a901      	add	r1, sp, #4
   b6fdc:	f7ff f9f4 	bl	b63c8 <hal_i2c_request_ex>
}
   b6fe0:	b007      	add	sp, #28
   b6fe2:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fe6 <_ZN7TwoWire11requestFromEhjh>:
{
   b6fe6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6fe8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6fea:	f88d 1000 	strb.w	r1, [sp]
   b6fee:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6ff2:	9103      	str	r1, [sp, #12]
   b6ff4:	bf18      	it	ne
   b6ff6:	2301      	movne	r3, #1
   b6ff8:	4669      	mov	r1, sp
    size_ = size;
   b6ffa:	9201      	str	r2, [sp, #4]
   b6ffc:	f88d 3008 	strb.w	r3, [sp, #8]
   b7000:	f7ff ffda 	bl	b6fb8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7004:	b005      	add	sp, #20
   b7006:	f85d fb04 	ldr.w	pc, [sp], #4

000b700a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b700a:	2301      	movs	r3, #1
   b700c:	f7ff bfeb 	b.w	b6fe6 <_ZN7TwoWire11requestFromEhjh>

000b7010 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7010:	7c00      	ldrb	r0, [r0, #16]
   b7012:	2200      	movs	r2, #0
   b7014:	f7ff b990 	b.w	b6338 <hal_i2c_begin_transmission>

000b7018 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7018:	b2c9      	uxtb	r1, r1
   b701a:	f7ff bff9 	b.w	b7010 <_ZN7TwoWire17beginTransmissionEh>

000b701e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b701e:	7c00      	ldrb	r0, [r0, #16]
   b7020:	2200      	movs	r2, #0
   b7022:	f7ff b991 	b.w	b6348 <hal_i2c_end_transmission>

000b7026 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7026:	2101      	movs	r1, #1
   b7028:	f7ff bff9 	b.w	b701e <_ZN7TwoWire15endTransmissionEh>

000b702c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b702c:	4770      	bx	lr

000b702e <_ZN9IPAddressD0Ev>:
   b702e:	b510      	push	{r4, lr}
   b7030:	2118      	movs	r1, #24
   b7032:	4604      	mov	r4, r0
   b7034:	f7fd fc65 	bl	b4902 <_ZdlPvj>
   b7038:	4620      	mov	r0, r4
   b703a:	bd10      	pop	{r4, pc}

000b703c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b703c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b703e:	7d03      	ldrb	r3, [r0, #20]
   b7040:	2b06      	cmp	r3, #6
{
   b7042:	b08d      	sub	sp, #52	; 0x34
   b7044:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7046:	f100 0704 	add.w	r7, r0, #4
   b704a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b704e:	d012      	beq.n	b7076 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7050:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7054:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7058:	220a      	movs	r2, #10
   b705a:	4630      	mov	r0, r6
   b705c:	f000 f95d 	bl	b731a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7060:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7062:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7064:	d019      	beq.n	b709a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7066:	2c00      	cmp	r4, #0
   b7068:	d0f4      	beq.n	b7054 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b706a:	212e      	movs	r1, #46	; 0x2e
   b706c:	4630      	mov	r0, r6
   b706e:	f000 f93b 	bl	b72e8 <_ZN5Print5printEc>
   b7072:	4404      	add	r4, r0
   b7074:	e7ee      	b.n	b7054 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7076:	232f      	movs	r3, #47	; 0x2f
   b7078:	466a      	mov	r2, sp
   b707a:	4639      	mov	r1, r7
   b707c:	200a      	movs	r0, #10
		buf[0] = 0;
   b707e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7082:	f7ff f9a9 	bl	b63d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7086:	4668      	mov	r0, sp
   b7088:	f7fd fbf4 	bl	b4874 <strlen>
   b708c:	6833      	ldr	r3, [r6, #0]
   b708e:	4602      	mov	r2, r0
   b7090:	68db      	ldr	r3, [r3, #12]
   b7092:	4669      	mov	r1, sp
   b7094:	4630      	mov	r0, r6
   b7096:	4798      	blx	r3
   b7098:	4604      	mov	r4, r0
    }
    return n;
}
   b709a:	4620      	mov	r0, r4
   b709c:	b00d      	add	sp, #52	; 0x34
   b709e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b70a0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b70a0:	b510      	push	{r4, lr}
   b70a2:	4b05      	ldr	r3, [pc, #20]	; (b70b8 <_ZN9IPAddressC1Ev+0x18>)
   b70a4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b70a6:	2211      	movs	r2, #17
   b70a8:	f840 3b04 	str.w	r3, [r0], #4
   b70ac:	2100      	movs	r1, #0
   b70ae:	f000 ff8e 	bl	b7fce <memset>
}
   b70b2:	4620      	mov	r0, r4
   b70b4:	bd10      	pop	{r4, pc}
   b70b6:	bf00      	nop
   b70b8:	000bbcc0 	.word	0x000bbcc0

000b70bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b70bc:	4603      	mov	r3, r0
   b70be:	4a07      	ldr	r2, [pc, #28]	; (b70dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b70c0:	b510      	push	{r4, lr}
   b70c2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b70c6:	f101 0210 	add.w	r2, r1, #16
   b70ca:	f851 4b04 	ldr.w	r4, [r1], #4
   b70ce:	f843 4b04 	str.w	r4, [r3], #4
   b70d2:	4291      	cmp	r1, r2
   b70d4:	d1f9      	bne.n	b70ca <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b70d6:	780a      	ldrb	r2, [r1, #0]
   b70d8:	701a      	strb	r2, [r3, #0]
}
   b70da:	bd10      	pop	{r4, pc}
   b70dc:	000bbcc0 	.word	0x000bbcc0

000b70e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b70e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b70e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b70e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b70ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b70ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b70f2:	2304      	movs	r3, #4
   b70f4:	6041      	str	r1, [r0, #4]
   b70f6:	7503      	strb	r3, [r0, #20]
}
   b70f8:	bd10      	pop	{r4, pc}
	...

000b70fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b70fc:	b507      	push	{r0, r1, r2, lr}
   b70fe:	4b06      	ldr	r3, [pc, #24]	; (b7118 <_ZN9IPAddressC1EPKh+0x1c>)
   b7100:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7102:	78cb      	ldrb	r3, [r1, #3]
   b7104:	9300      	str	r3, [sp, #0]
   b7106:	788b      	ldrb	r3, [r1, #2]
   b7108:	784a      	ldrb	r2, [r1, #1]
   b710a:	7809      	ldrb	r1, [r1, #0]
   b710c:	f7ff ffe8 	bl	b70e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7110:	b003      	add	sp, #12
   b7112:	f85d fb04 	ldr.w	pc, [sp], #4
   b7116:	bf00      	nop
   b7118:	000bbcc0 	.word	0x000bbcc0

000b711c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b711c:	4b01      	ldr	r3, [pc, #4]	; (b7124 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b711e:	4a02      	ldr	r2, [pc, #8]	; (b7128 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7120:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7122:	4770      	bx	lr
   b7124:	2003e698 	.word	0x2003e698
   b7128:	000bbccc 	.word	0x000bbccc

000b712c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b712c:	2300      	movs	r3, #0
   b712e:	6840      	ldr	r0, [r0, #4]
   b7130:	461a      	mov	r2, r3
   b7132:	f7ff bab5 	b.w	b66a0 <network_connect>

000b7136 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7136:	6840      	ldr	r0, [r0, #4]
   b7138:	2200      	movs	r2, #0
   b713a:	2102      	movs	r1, #2
   b713c:	f7ff bac0 	b.w	b66c0 <network_disconnect>

000b7140 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7140:	2200      	movs	r2, #0
   b7142:	6840      	ldr	r0, [r0, #4]
   b7144:	4611      	mov	r1, r2
   b7146:	f7ff bab3 	b.w	b66b0 <network_connecting>

000b714a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b714a:	2200      	movs	r2, #0
   b714c:	6840      	ldr	r0, [r0, #4]
   b714e:	4611      	mov	r1, r2
   b7150:	f7ff babe 	b.w	b66d0 <network_ready>

000b7154 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7154:	2300      	movs	r3, #0
   b7156:	6840      	ldr	r0, [r0, #4]
   b7158:	461a      	mov	r2, r3
   b715a:	4619      	mov	r1, r3
   b715c:	f7ff bac0 	b.w	b66e0 <network_on>

000b7160 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7160:	2300      	movs	r3, #0
   b7162:	6840      	ldr	r0, [r0, #4]
   b7164:	461a      	mov	r2, r3
   b7166:	4619      	mov	r1, r3
   b7168:	f7ff bac2 	b.w	b66f0 <network_off>

000b716c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b716c:	6840      	ldr	r0, [r0, #4]
   b716e:	2100      	movs	r1, #0
   b7170:	f7ff bae6 	b.w	b6740 <network_is_on>

000b7174 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7174:	6840      	ldr	r0, [r0, #4]
   b7176:	2100      	movs	r1, #0
   b7178:	f7ff baea 	b.w	b6750 <network_is_off>

000b717c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b717c:	6840      	ldr	r0, [r0, #4]
   b717e:	2200      	movs	r2, #0
   b7180:	f081 0101 	eor.w	r1, r1, #1
   b7184:	f7ff babc 	b.w	b6700 <network_listen>

000b7188 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7188:	6840      	ldr	r0, [r0, #4]
   b718a:	2200      	movs	r2, #0
   b718c:	f7ff bac8 	b.w	b6720 <network_set_listen_timeout>

000b7190 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7190:	2200      	movs	r2, #0
   b7192:	6840      	ldr	r0, [r0, #4]
   b7194:	4611      	mov	r1, r2
   b7196:	f7ff bacb 	b.w	b6730 <network_get_listen_timeout>

000b719a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b719a:	2200      	movs	r2, #0
   b719c:	6840      	ldr	r0, [r0, #4]
   b719e:	4611      	mov	r1, r2
   b71a0:	f7ff bab6 	b.w	b6710 <network_listening>

000b71a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b71a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b71a8:	b095      	sub	sp, #84	; 0x54
   b71aa:	4614      	mov	r4, r2
   b71ac:	460d      	mov	r5, r1
   b71ae:	4607      	mov	r7, r0
    IPAddress addr;
   b71b0:	f7ff ff76 	bl	b70a0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b71b4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b71b6:	221c      	movs	r2, #28
   b71b8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b71ba:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b71bc:	f000 ff07 	bl	b7fce <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b71c0:	2340      	movs	r3, #64	; 0x40
   b71c2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b71c4:	4620      	mov	r0, r4
   b71c6:	466b      	mov	r3, sp
   b71c8:	aa0c      	add	r2, sp, #48	; 0x30
   b71ca:	2100      	movs	r1, #0
   b71cc:	f7ff f914 	bl	b63f8 <netdb_getaddrinfo>
    if (!r) {
   b71d0:	4604      	mov	r4, r0
   b71d2:	2800      	cmp	r0, #0
   b71d4:	d14b      	bne.n	b726e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71d6:	4602      	mov	r2, r0
   b71d8:	2101      	movs	r1, #1
   b71da:	6868      	ldr	r0, [r5, #4]
   b71dc:	f7ff fa78 	bl	b66d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71e0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71e2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71e4:	4622      	mov	r2, r4
   b71e6:	6868      	ldr	r0, [r5, #4]
   b71e8:	f7ff fa72 	bl	b66d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71ec:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71ee:	4681      	mov	r9, r0
        bool ok = false;
   b71f0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71f2:	2e00      	cmp	r6, #0
   b71f4:	d03b      	beq.n	b726e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b71f6:	2900      	cmp	r1, #0
   b71f8:	d139      	bne.n	b726e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b71fa:	6873      	ldr	r3, [r6, #4]
   b71fc:	2b02      	cmp	r3, #2
   b71fe:	d003      	beq.n	b7208 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7200:	2b0a      	cmp	r3, #10
   b7202:	d011      	beq.n	b7228 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7204:	69f6      	ldr	r6, [r6, #28]
   b7206:	e7f4      	b.n	b71f2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7208:	f1b8 0f00 	cmp.w	r8, #0
   b720c:	d0fa      	beq.n	b7204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b720e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7210:	a806      	add	r0, sp, #24
   b7212:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7214:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7216:	f7ff ff71 	bl	b70fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b721a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b721c:	1d3c      	adds	r4, r7, #4
   b721e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7220:	682b      	ldr	r3, [r5, #0]
   b7222:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7224:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7226:	e7ed      	b.n	b7204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7228:	f1b9 0f00 	cmp.w	r9, #0
   b722c:	d0ea      	beq.n	b7204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b722e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7230:	2210      	movs	r2, #16
   b7232:	a801      	add	r0, sp, #4
   b7234:	f000 fecb 	bl	b7fce <memset>
                    a.v = 6;
   b7238:	2306      	movs	r3, #6
   b723a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b723e:	ad01      	add	r5, sp, #4
   b7240:	f104 0308 	add.w	r3, r4, #8
   b7244:	3418      	adds	r4, #24
   b7246:	6818      	ldr	r0, [r3, #0]
   b7248:	6859      	ldr	r1, [r3, #4]
   b724a:	462a      	mov	r2, r5
   b724c:	c203      	stmia	r2!, {r0, r1}
   b724e:	3308      	adds	r3, #8
   b7250:	42a3      	cmp	r3, r4
   b7252:	4615      	mov	r5, r2
   b7254:	d1f7      	bne.n	b7246 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7256:	a901      	add	r1, sp, #4
   b7258:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b725a:	ad07      	add	r5, sp, #28
   b725c:	f7ff ff2e 	bl	b70bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7262:	1d3c      	adds	r4, r7, #4
   b7264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7266:	682b      	ldr	r3, [r5, #0]
   b7268:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b726a:	4649      	mov	r1, r9
   b726c:	e7ca      	b.n	b7204 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b726e:	9800      	ldr	r0, [sp, #0]
   b7270:	f7ff f8ba 	bl	b63e8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7274:	4638      	mov	r0, r7
   b7276:	b015      	add	sp, #84	; 0x54
   b7278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b727c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b727c:	4b02      	ldr	r3, [pc, #8]	; (b7288 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b727e:	4a03      	ldr	r2, [pc, #12]	; (b728c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7280:	601a      	str	r2, [r3, #0]
   b7282:	2200      	movs	r2, #0
   b7284:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7286:	4770      	bx	lr
   b7288:	2003e69c 	.word	0x2003e69c
   b728c:	000bbcd8 	.word	0x000bbcd8

000b7290 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7292:	4606      	mov	r6, r0
   b7294:	460d      	mov	r5, r1
  size_t n = 0;
   b7296:	188f      	adds	r7, r1, r2
   b7298:	2400      	movs	r4, #0
  while (size--) {
   b729a:	42bd      	cmp	r5, r7
   b729c:	d00c      	beq.n	b72b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b729e:	6833      	ldr	r3, [r6, #0]
   b72a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b72a4:	689b      	ldr	r3, [r3, #8]
   b72a6:	4630      	mov	r0, r6
   b72a8:	4798      	blx	r3
     if (chunk>=0)
   b72aa:	1e03      	subs	r3, r0, #0
   b72ac:	db01      	blt.n	b72b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b72ae:	441c      	add	r4, r3
  while (size--) {
   b72b0:	e7f3      	b.n	b729a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b72b2:	2c00      	cmp	r4, #0
   b72b4:	bf08      	it	eq
   b72b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b72b8:	4620      	mov	r0, r4
   b72ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72bc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b72bc:	b513      	push	{r0, r1, r4, lr}
   b72be:	4604      	mov	r4, r0
    }
   b72c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b72c2:	b159      	cbz	r1, b72dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b72c4:	9101      	str	r1, [sp, #4]
   b72c6:	f7fd fad5 	bl	b4874 <strlen>
   b72ca:	6823      	ldr	r3, [r4, #0]
   b72cc:	9901      	ldr	r1, [sp, #4]
   b72ce:	68db      	ldr	r3, [r3, #12]
   b72d0:	4602      	mov	r2, r0
   b72d2:	4620      	mov	r0, r4
    }
   b72d4:	b002      	add	sp, #8
   b72d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b72da:	4718      	bx	r3
    }
   b72dc:	b002      	add	sp, #8
   b72de:	bd10      	pop	{r4, pc}

000b72e0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b72e0:	b508      	push	{r3, lr}
  return write(str);
   b72e2:	f7ff ffeb 	bl	b72bc <_ZN5Print5writeEPKc>
}
   b72e6:	bd08      	pop	{r3, pc}

000b72e8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b72e8:	6803      	ldr	r3, [r0, #0]
   b72ea:	689b      	ldr	r3, [r3, #8]
   b72ec:	4718      	bx	r3

000b72ee <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b72ee:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b72f0:	210d      	movs	r1, #13
{
   b72f2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b72f4:	f7ff fff8 	bl	b72e8 <_ZN5Print5printEc>
  n += print('\n');
   b72f8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b72fa:	4604      	mov	r4, r0
  n += print('\n');
   b72fc:	4628      	mov	r0, r5
   b72fe:	f7ff fff3 	bl	b72e8 <_ZN5Print5printEc>
  return n;
}
   b7302:	4420      	add	r0, r4
   b7304:	bd38      	pop	{r3, r4, r5, pc}

000b7306 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7306:	b538      	push	{r3, r4, r5, lr}
   b7308:	4605      	mov	r5, r0
  return write(str);
   b730a:	f7ff ffd7 	bl	b72bc <_ZN5Print5writeEPKc>
   b730e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7310:	4628      	mov	r0, r5
   b7312:	f7ff ffec 	bl	b72ee <_ZN5Print7printlnEv>
  return n;
}
   b7316:	4420      	add	r0, r4
   b7318:	bd38      	pop	{r3, r4, r5, pc}

000b731a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b731a:	b530      	push	{r4, r5, lr}
   b731c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b731e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7320:	2a01      	cmp	r2, #1
  *str = '\0';
   b7322:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7326:	bf98      	it	ls
   b7328:	220a      	movls	r2, #10
   b732a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b732c:	460d      	mov	r5, r1
   b732e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7332:	fb01 5312 	mls	r3, r1, r2, r5
   b7336:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b733a:	2b09      	cmp	r3, #9
   b733c:	bf94      	ite	ls
   b733e:	3330      	addls	r3, #48	; 0x30
   b7340:	3337      	addhi	r3, #55	; 0x37
   b7342:	b2db      	uxtb	r3, r3
  } while(n);
   b7344:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7346:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b734a:	d9ef      	bls.n	b732c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b734c:	4621      	mov	r1, r4
   b734e:	f7ff ffb5 	bl	b72bc <_ZN5Print5writeEPKc>
}
   b7352:	b00b      	add	sp, #44	; 0x2c
   b7354:	bd30      	pop	{r4, r5, pc}

000b7356 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b735a:	b086      	sub	sp, #24
   b735c:	af00      	add	r7, sp, #0
   b735e:	4605      	mov	r5, r0
   b7360:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7362:	1d38      	adds	r0, r7, #4
   b7364:	2114      	movs	r1, #20
{
   b7366:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7368:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b736a:	f7ff fa11 	bl	b6790 <vsnprintf>

    if (n<bufsize)
   b736e:	2813      	cmp	r0, #19
   b7370:	d80e      	bhi.n	b7390 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7372:	1d39      	adds	r1, r7, #4
   b7374:	4628      	mov	r0, r5
   b7376:	f7ff ffa1 	bl	b72bc <_ZN5Print5writeEPKc>
   b737a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b737c:	b11e      	cbz	r6, b7386 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b737e:	4628      	mov	r0, r5
   b7380:	f7ff ffb5 	bl	b72ee <_ZN5Print7printlnEv>
   b7384:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7386:	4620      	mov	r0, r4
   b7388:	3718      	adds	r7, #24
   b738a:	46bd      	mov	sp, r7
   b738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7390:	f100 0308 	add.w	r3, r0, #8
   b7394:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7398:	46e8      	mov	r8, sp
        char bigger[n+1];
   b739a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b739e:	4622      	mov	r2, r4
   b73a0:	1c41      	adds	r1, r0, #1
   b73a2:	683b      	ldr	r3, [r7, #0]
   b73a4:	4668      	mov	r0, sp
   b73a6:	f7ff f9f3 	bl	b6790 <vsnprintf>
  return write(str);
   b73aa:	4669      	mov	r1, sp
   b73ac:	4628      	mov	r0, r5
   b73ae:	f7ff ff85 	bl	b72bc <_ZN5Print5writeEPKc>
   b73b2:	4604      	mov	r4, r0
   b73b4:	46c5      	mov	sp, r8
   b73b6:	e7e1      	b.n	b737c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b73b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b73b8:	4b01      	ldr	r3, [pc, #4]	; (b73c0 <_GLOBAL__sub_I_RGB+0x8>)
   b73ba:	2200      	movs	r2, #0
   b73bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b73be:	4770      	bx	lr
   b73c0:	2003e6a4 	.word	0x2003e6a4

000b73c4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b73c4:	2100      	movs	r1, #0
   b73c6:	f7ff b857 	b.w	b6478 <hal_spi_release>

000b73ca <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b73ca:	2100      	movs	r1, #0
   b73cc:	f7ff b84c 	b.w	b6468 <hal_spi_acquire>

000b73d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b73d0:	b510      	push	{r4, lr}
   b73d2:	4604      	mov	r4, r0
   b73d4:	4608      	mov	r0, r1
{
    _spi = spi;
   b73d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b73d8:	f7ff f826 	bl	b6428 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b73dc:	2300      	movs	r3, #0
   b73de:	6063      	str	r3, [r4, #4]
}
   b73e0:	4620      	mov	r0, r4
   b73e2:	bd10      	pop	{r4, pc}

000b73e4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b73e4:	b513      	push	{r0, r1, r4, lr}
   b73e6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b73e8:	7800      	ldrb	r0, [r0, #0]
   b73ea:	f7ff ffee 	bl	b73ca <_ZN8SPIClass4lockEv.isra.0>
   b73ee:	b958      	cbnz	r0, b7408 <_ZN8SPIClass5beginEv+0x24>
   b73f0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b73f2:	9001      	str	r0, [sp, #4]
   b73f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b73f8:	f7ff f806 	bl	b6408 <hal_spi_begin>
        unlock();
   b73fc:	9801      	ldr	r0, [sp, #4]
    }
}
   b73fe:	b002      	add	sp, #8
   b7400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7404:	f7ff bfde 	b.w	b73c4 <_ZN8SPIClass6unlockEv.isra.0>
   b7408:	b002      	add	sp, #8
   b740a:	bd10      	pop	{r4, pc}

000b740c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b740c:	0840      	lsrs	r0, r0, #1
{
   b740e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7410:	6018      	str	r0, [r3, #0]
   b7412:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7414:	6818      	ldr	r0, [r3, #0]
   b7416:	4288      	cmp	r0, r1
   b7418:	b2e5      	uxtb	r5, r4
   b741a:	d906      	bls.n	b742a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b741c:	3401      	adds	r4, #1
   b741e:	2c08      	cmp	r4, #8
   b7420:	d002      	beq.n	b7428 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7422:	0840      	lsrs	r0, r0, #1
   b7424:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7426:	e7f5      	b.n	b7414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7428:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b742a:	4b02      	ldr	r3, [pc, #8]	; (b7434 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b742c:	5d5b      	ldrb	r3, [r3, r5]
   b742e:	7013      	strb	r3, [r2, #0]
}
   b7430:	bd30      	pop	{r4, r5, pc}
   b7432:	bf00      	nop
   b7434:	000bbd0c 	.word	0x000bbd0c

000b7438 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b743c:	4606      	mov	r6, r0
   b743e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7440:	7800      	ldrb	r0, [r0, #0]
{
   b7442:	460c      	mov	r4, r1
    CHECK(lock());
   b7444:	f7ff ffc1 	bl	b73ca <_ZN8SPIClass4lockEv.isra.0>
   b7448:	2800      	cmp	r0, #0
   b744a:	db1b      	blt.n	b7484 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b744c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b744e:	2214      	movs	r2, #20
   b7450:	2100      	movs	r1, #0
   b7452:	a809      	add	r0, sp, #36	; 0x24
   b7454:	f000 fdbb 	bl	b7fce <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7458:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b745a:	2200      	movs	r2, #0
   b745c:	a909      	add	r1, sp, #36	; 0x24
   b745e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7460:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7464:	f7fe fff0 	bl	b6448 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7468:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b746c:	b113      	cbz	r3, b7474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b746e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7472:	b155      	cbz	r5, b748a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7474:	2700      	movs	r7, #0
   b7476:	46b9      	mov	r9, r7
   b7478:	46b8      	mov	r8, r7
   b747a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b747c:	7923      	ldrb	r3, [r4, #4]
   b747e:	b15d      	cbz	r5, b7498 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7480:	b1c3      	cbz	r3, b74b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7482:	2000      	movs	r0, #0
}
   b7484:	b00f      	add	sp, #60	; 0x3c
   b7486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b748a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b748e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7492:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7496:	e7f1      	b.n	b747c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7498:	2b00      	cmp	r3, #0
   b749a:	d135      	bne.n	b7508 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b749c:	68a3      	ldr	r3, [r4, #8]
   b749e:	4543      	cmp	r3, r8
   b74a0:	d108      	bne.n	b74b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b74a2:	f88d 9020 	strb.w	r9, [sp, #32]
   b74a6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74aa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74ae:	89a3      	ldrh	r3, [r4, #12]
   b74b0:	429a      	cmp	r2, r3
   b74b2:	d0e6      	beq.n	b7482 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b74b4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b74b6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b74b8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b74bc:	980a      	ldr	r0, [sp, #40]	; 0x28
   b74be:	ab04      	add	r3, sp, #16
   b74c0:	f10d 020f 	add.w	r2, sp, #15
   b74c4:	f7ff ffa2 	bl	b740c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b74c8:	7921      	ldrb	r1, [r4, #4]
   b74ca:	b985      	cbnz	r5, b74ee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b74cc:	b989      	cbnz	r1, b74f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74ce:	68a3      	ldr	r3, [r4, #8]
   b74d0:	4543      	cmp	r3, r8
   b74d2:	d30e      	bcc.n	b74f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b74d4:	f88d 9020 	strb.w	r9, [sp, #32]
   b74d8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74dc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74e0:	89a3      	ldrh	r3, [r4, #12]
   b74e2:	429a      	cmp	r2, r3
   b74e4:	d105      	bne.n	b74f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b74e6:	9b04      	ldr	r3, [sp, #16]
   b74e8:	4543      	cmp	r3, r8
   b74ea:	d102      	bne.n	b74f2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74ec:	e7c9      	b.n	b7482 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b74ee:	2900      	cmp	r1, #0
   b74f0:	d1f9      	bne.n	b74e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b74f2:	2300      	movs	r3, #0
   b74f4:	9301      	str	r3, [sp, #4]
   b74f6:	7b63      	ldrb	r3, [r4, #13]
   b74f8:	9300      	str	r3, [sp, #0]
   b74fa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b74fe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7500:	7830      	ldrb	r0, [r6, #0]
   b7502:	f7fe ffa9 	bl	b6458 <hal_spi_set_settings>
   b7506:	e7bc      	b.n	b7482 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7508:	e9cd 5500 	strd	r5, r5, [sp]
   b750c:	462b      	mov	r3, r5
   b750e:	462a      	mov	r2, r5
   b7510:	2101      	movs	r1, #1
   b7512:	e7f5      	b.n	b7500 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7514 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7514:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7516:	7800      	ldrb	r0, [r0, #0]
   b7518:	f7fe ff7e 	bl	b6418 <hal_spi_transfer>
}
   b751c:	b2c0      	uxtb	r0, r0
   b751e:	bd08      	pop	{r3, pc}

000b7520 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7520:	b510      	push	{r4, lr}
   b7522:	4604      	mov	r4, r0
{
	free(buffer);
   b7524:	6800      	ldr	r0, [r0, #0]
   b7526:	f7ff f923 	bl	b6770 <free>
}
   b752a:	4620      	mov	r0, r4
   b752c:	bd10      	pop	{r4, pc}

000b752e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b752e:	b510      	push	{r4, lr}
   b7530:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7532:	6800      	ldr	r0, [r0, #0]
   b7534:	b108      	cbz	r0, b753a <_ZN6String10invalidateEv+0xc>
   b7536:	f7ff f91b 	bl	b6770 <free>
	buffer = NULL;
   b753a:	2300      	movs	r3, #0
	capacity = len = 0;
   b753c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7540:	6023      	str	r3, [r4, #0]
}
   b7542:	bd10      	pop	{r4, pc}

000b7544 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7544:	b538      	push	{r3, r4, r5, lr}
   b7546:	4604      	mov	r4, r0
   b7548:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b754a:	6800      	ldr	r0, [r0, #0]
   b754c:	3101      	adds	r1, #1
   b754e:	f7ff f917 	bl	b6780 <realloc>
	if (newbuffer) {
   b7552:	b110      	cbz	r0, b755a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7554:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7558:	2001      	movs	r0, #1
	}
	return 0;
}
   b755a:	bd38      	pop	{r3, r4, r5, pc}

000b755c <_ZN6String7reserveEj>:
{
   b755c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b755e:	6803      	ldr	r3, [r0, #0]
{
   b7560:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7562:	b123      	cbz	r3, b756e <_ZN6String7reserveEj+0x12>
   b7564:	6843      	ldr	r3, [r0, #4]
   b7566:	428b      	cmp	r3, r1
   b7568:	d301      	bcc.n	b756e <_ZN6String7reserveEj+0x12>
   b756a:	2001      	movs	r0, #1
}
   b756c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b756e:	4620      	mov	r0, r4
   b7570:	f7ff ffe8 	bl	b7544 <_ZN6String12changeBufferEj>
   b7574:	2800      	cmp	r0, #0
   b7576:	d0f9      	beq.n	b756c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7578:	68a3      	ldr	r3, [r4, #8]
   b757a:	2b00      	cmp	r3, #0
   b757c:	d1f5      	bne.n	b756a <_ZN6String7reserveEj+0xe>
   b757e:	6822      	ldr	r2, [r4, #0]
   b7580:	7013      	strb	r3, [r2, #0]
   b7582:	e7f2      	b.n	b756a <_ZN6String7reserveEj+0xe>

000b7584 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7584:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7586:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7588:	4611      	mov	r1, r2
   b758a:	9201      	str	r2, [sp, #4]
{
   b758c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b758e:	f7ff ffe5 	bl	b755c <_ZN6String7reserveEj>
   b7592:	9a01      	ldr	r2, [sp, #4]
   b7594:	b928      	cbnz	r0, b75a2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7596:	4620      	mov	r0, r4
   b7598:	f7ff ffc9 	bl	b752e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b759c:	4620      	mov	r0, r4
   b759e:	b003      	add	sp, #12
   b75a0:	bd30      	pop	{r4, r5, pc}
	len = length;
   b75a2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b75a4:	4629      	mov	r1, r5
   b75a6:	6820      	ldr	r0, [r4, #0]
   b75a8:	f000 fd03 	bl	b7fb2 <memcpy>
	buffer[len] = 0;
   b75ac:	6822      	ldr	r2, [r4, #0]
   b75ae:	68a3      	ldr	r3, [r4, #8]
   b75b0:	2100      	movs	r1, #0
   b75b2:	54d1      	strb	r1, [r2, r3]
	return *this;
   b75b4:	e7f2      	b.n	b759c <_ZN6String4copyEPKcj+0x18>

000b75b6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b75b6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b75b8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b75ba:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b75be:	4604      	mov	r4, r0
	len = 0;
   b75c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   b75c2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b75c4:	b141      	cbz	r1, b75d8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b75c6:	4608      	mov	r0, r1
   b75c8:	9101      	str	r1, [sp, #4]
   b75ca:	f7fd f953 	bl	b4874 <strlen>
   b75ce:	9901      	ldr	r1, [sp, #4]
   b75d0:	4602      	mov	r2, r0
   b75d2:	4620      	mov	r0, r4
   b75d4:	f7ff ffd6 	bl	b7584 <_ZN6String4copyEPKcj>
}
   b75d8:	4620      	mov	r0, r4
   b75da:	b002      	add	sp, #8
   b75dc:	bd10      	pop	{r4, pc}

000b75de <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b75de:	b538      	push	{r3, r4, r5, lr}
   b75e0:	4605      	mov	r5, r0
	if (buffer) {
   b75e2:	6800      	ldr	r0, [r0, #0]
{
   b75e4:	460c      	mov	r4, r1
	if (buffer) {
   b75e6:	b170      	cbz	r0, b7606 <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
   b75e8:	686a      	ldr	r2, [r5, #4]
   b75ea:	688b      	ldr	r3, [r1, #8]
   b75ec:	429a      	cmp	r2, r3
   b75ee:	d308      	bcc.n	b7602 <_ZN6String4moveERS_+0x24>
   b75f0:	6809      	ldr	r1, [r1, #0]
   b75f2:	b131      	cbz	r1, b7602 <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
   b75f4:	f000 fd22 	bl	b803c <strcpy>
			len = rhs.len;
   b75f8:	68a3      	ldr	r3, [r4, #8]
   b75fa:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b75fc:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b75fe:	60a3      	str	r3, [r4, #8]
}
   b7600:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b7602:	f7ff f8b5 	bl	b6770 <free>
	buffer = rhs.buffer;
   b7606:	6823      	ldr	r3, [r4, #0]
   b7608:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b760a:	6863      	ldr	r3, [r4, #4]
   b760c:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b760e:	68a3      	ldr	r3, [r4, #8]
   b7610:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b7612:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b7614:	e9c4 3300 	strd	r3, r3, [r4]
   b7618:	e7f1      	b.n	b75fe <_ZN6String4moveERS_+0x20>

000b761a <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b761a:	b510      	push	{r4, lr}
	buffer = NULL;
   b761c:	2300      	movs	r3, #0
	capacity = 0;
   b761e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b7622:	4604      	mov	r4, r0
	len = 0;
   b7624:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7626:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7628:	f7ff ffd9 	bl	b75de <_ZN6String4moveERS_>
}
   b762c:	4620      	mov	r0, r4
   b762e:	bd10      	pop	{r4, pc}

000b7630 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7630:	4288      	cmp	r0, r1
{
   b7632:	b510      	push	{r4, lr}
   b7634:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b7636:	d005      	beq.n	b7644 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7638:	680b      	ldr	r3, [r1, #0]
   b763a:	b12b      	cbz	r3, b7648 <_ZN6StringaSERKS_+0x18>
   b763c:	688a      	ldr	r2, [r1, #8]
   b763e:	4619      	mov	r1, r3
   b7640:	f7ff ffa0 	bl	b7584 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7644:	4620      	mov	r0, r4
   b7646:	bd10      	pop	{r4, pc}
	else invalidate();
   b7648:	f7ff ff71 	bl	b752e <_ZN6String10invalidateEv>
   b764c:	e7fa      	b.n	b7644 <_ZN6StringaSERKS_+0x14>

000b764e <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b764e:	b510      	push	{r4, lr}
	buffer = NULL;
   b7650:	2300      	movs	r3, #0
String::String(const String &value)
   b7652:	4604      	mov	r4, r0
	capacity = 0;
   b7654:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7658:	6083      	str	r3, [r0, #8]
	flags = 0;
   b765a:	7303      	strb	r3, [r0, #12]
	*this = value;
   b765c:	f7ff ffe8 	bl	b7630 <_ZN6StringaSERKS_>
}
   b7660:	4620      	mov	r0, r4
   b7662:	bd10      	pop	{r4, pc}

000b7664 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7664:	b513      	push	{r0, r1, r4, lr}
   b7666:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7668:	b159      	cbz	r1, b7682 <_ZN6StringaSEPKc+0x1e>
   b766a:	4608      	mov	r0, r1
   b766c:	9101      	str	r1, [sp, #4]
   b766e:	f7fd f901 	bl	b4874 <strlen>
   b7672:	9901      	ldr	r1, [sp, #4]
   b7674:	4602      	mov	r2, r0
   b7676:	4620      	mov	r0, r4
   b7678:	f7ff ff84 	bl	b7584 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b767c:	4620      	mov	r0, r4
   b767e:	b002      	add	sp, #8
   b7680:	bd10      	pop	{r4, pc}
	else invalidate();
   b7682:	f7ff ff54 	bl	b752e <_ZN6String10invalidateEv>
   b7686:	e7f9      	b.n	b767c <_ZN6StringaSEPKc+0x18>

000b7688 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b7688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b768a:	4604      	mov	r4, r0
	buffer = NULL;
   b768c:	2300      	movs	r3, #0
	capacity = 0;
   b768e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7692:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7694:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b7696:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b7698:	a901      	add	r1, sp, #4
   b769a:	f000 fadf 	bl	b7c5c <utoa>
	*this = buf;
   b769e:	a901      	add	r1, sp, #4
   b76a0:	4620      	mov	r0, r4
   b76a2:	f7ff ffdf 	bl	b7664 <_ZN6StringaSEPKc>
}
   b76a6:	4620      	mov	r0, r4
   b76a8:	b004      	add	sp, #16
   b76aa:	bd10      	pop	{r4, pc}

000b76ac <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b76ac:	b510      	push	{r4, lr}
   b76ae:	4604      	mov	r4, r0
   b76b0:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b76b2:	2300      	movs	r3, #0
	capacity = 0;
   b76b4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b76b8:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b76ba:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b76bc:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b76be:	a901      	add	r1, sp, #4
   b76c0:	f000 fab6 	bl	b7c30 <itoa>
	*this = buf;
   b76c4:	a901      	add	r1, sp, #4
   b76c6:	4620      	mov	r0, r4
   b76c8:	f7ff ffcc 	bl	b7664 <_ZN6StringaSEPKc>
}
   b76cc:	4620      	mov	r0, r4
   b76ce:	b00a      	add	sp, #40	; 0x28
   b76d0:	bd10      	pop	{r4, pc}

000b76d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b76d2:	b570      	push	{r4, r5, r6, lr}
   b76d4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b76d6:	460e      	mov	r6, r1
   b76d8:	b909      	cbnz	r1, b76de <_ZN6String6concatEPKcj+0xc>
   b76da:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b76dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b76de:	b16a      	cbz	r2, b76fc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b76e0:	6884      	ldr	r4, [r0, #8]
   b76e2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b76e4:	4621      	mov	r1, r4
   b76e6:	f7ff ff39 	bl	b755c <_ZN6String7reserveEj>
   b76ea:	2800      	cmp	r0, #0
   b76ec:	d0f5      	beq.n	b76da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b76ee:	6828      	ldr	r0, [r5, #0]
   b76f0:	68ab      	ldr	r3, [r5, #8]
   b76f2:	4631      	mov	r1, r6
   b76f4:	4418      	add	r0, r3
   b76f6:	f000 fca1 	bl	b803c <strcpy>
	len = newlen;
   b76fa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b76fc:	2001      	movs	r0, #1
   b76fe:	e7ed      	b.n	b76dc <_ZN6String6concatEPKcj+0xa>

000b7700 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b7700:	688a      	ldr	r2, [r1, #8]
   b7702:	6809      	ldr	r1, [r1, #0]
   b7704:	f7ff bfe5 	b.w	b76d2 <_ZN6String6concatEPKcj>

000b7708 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b7708:	b513      	push	{r0, r1, r4, lr}
   b770a:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b770c:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b770e:	b151      	cbz	r1, b7726 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b7710:	9101      	str	r1, [sp, #4]
   b7712:	f7fd f8af 	bl	b4874 <strlen>
   b7716:	9901      	ldr	r1, [sp, #4]
   b7718:	4602      	mov	r2, r0
   b771a:	4620      	mov	r0, r4
}
   b771c:	b002      	add	sp, #8
   b771e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b7722:	f7ff bfd6 	b.w	b76d2 <_ZN6String6concatEPKcj>
}
   b7726:	b002      	add	sp, #8
   b7728:	bd10      	pop	{r4, pc}

000b772a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b772a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b772c:	688a      	ldr	r2, [r1, #8]
   b772e:	6809      	ldr	r1, [r1, #0]
{
   b7730:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7732:	f7ff ffce 	bl	b76d2 <_ZN6String6concatEPKcj>
   b7736:	b910      	cbnz	r0, b773e <_ZplRK15StringSumHelperRK6String+0x14>
   b7738:	4620      	mov	r0, r4
   b773a:	f7ff fef8 	bl	b752e <_ZN6String10invalidateEv>
	return a;
}
   b773e:	4620      	mov	r0, r4
   b7740:	bd10      	pop	{r4, pc}

000b7742 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b7742:	b513      	push	{r0, r1, r4, lr}
   b7744:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7746:	b929      	cbnz	r1, b7754 <_ZplRK15StringSumHelperPKc+0x12>
   b7748:	4620      	mov	r0, r4
   b774a:	f7ff fef0 	bl	b752e <_ZN6String10invalidateEv>
	return a;
}
   b774e:	4620      	mov	r0, r4
   b7750:	b002      	add	sp, #8
   b7752:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b7754:	4608      	mov	r0, r1
   b7756:	9101      	str	r1, [sp, #4]
   b7758:	f7fd f88c 	bl	b4874 <strlen>
   b775c:	9901      	ldr	r1, [sp, #4]
   b775e:	4602      	mov	r2, r0
   b7760:	4620      	mov	r0, r4
   b7762:	f7ff ffb6 	bl	b76d2 <_ZN6String6concatEPKcj>
   b7766:	2800      	cmp	r0, #0
   b7768:	d0ee      	beq.n	b7748 <_ZplRK15StringSumHelperPKc+0x6>
   b776a:	e7f0      	b.n	b774e <_ZplRK15StringSumHelperPKc+0xc>

000b776c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b776c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b776e:	6882      	ldr	r2, [r0, #8]
   b7770:	b93a      	cbnz	r2, b7782 <_ZNK6String6equalsEPKc+0x16>
   b7772:	b121      	cbz	r1, b777e <_ZNK6String6equalsEPKc+0x12>
   b7774:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b7776:	fab0 f080 	clz	r0, r0
   b777a:	0940      	lsrs	r0, r0, #5
   b777c:	e000      	b.n	b7780 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b777e:	2001      	movs	r0, #1
}
   b7780:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7782:	6800      	ldr	r0, [r0, #0]
   b7784:	b909      	cbnz	r1, b778a <_ZNK6String6equalsEPKc+0x1e>
   b7786:	7800      	ldrb	r0, [r0, #0]
   b7788:	e7f5      	b.n	b7776 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b778a:	f7fd f869 	bl	b4860 <strcmp>
   b778e:	e7f2      	b.n	b7776 <_ZNK6String6equalsEPKc+0xa>

000b7790 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b7790:	b40e      	push	{r1, r2, r3}
   b7792:	b570      	push	{r4, r5, r6, lr}
   b7794:	b087      	sub	sp, #28
   b7796:	ad0b      	add	r5, sp, #44	; 0x2c
   b7798:	4604      	mov	r4, r0
   b779a:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b779e:	9201      	str	r2, [sp, #4]
   b77a0:	462b      	mov	r3, r5
   b77a2:	2105      	movs	r1, #5
   b77a4:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b77a6:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b77a8:	f7fe fff2 	bl	b6790 <vsnprintf>
    va_end(marker);

    String result;
   b77ac:	490b      	ldr	r1, [pc, #44]	; (b77dc <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b77ae:	4606      	mov	r6, r0
    String result;
   b77b0:	4620      	mov	r0, r4
   b77b2:	f7ff ff00 	bl	b75b6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b77b6:	4631      	mov	r1, r6
   b77b8:	4620      	mov	r0, r4
   b77ba:	f7ff fecf 	bl	b755c <_ZN6String7reserveEj>
    if (result.buffer) {
   b77be:	6820      	ldr	r0, [r4, #0]
   b77c0:	b130      	cbz	r0, b77d0 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b77c2:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b77c4:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b77c6:	462b      	mov	r3, r5
   b77c8:	1c71      	adds	r1, r6, #1
   b77ca:	f7fe ffe1 	bl	b6790 <vsnprintf>
        va_end(marker);
        result.len = n;
   b77ce:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b77d0:	4620      	mov	r0, r4
   b77d2:	b007      	add	sp, #28
   b77d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b77d8:	b003      	add	sp, #12
   b77da:	4770      	bx	lr
   b77dc:	000b8444 	.word	0x000b8444

000b77e0 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b77e0:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b77e2:	2420      	movs	r4, #32
{
   b77e4:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b77e6:	4622      	mov	r2, r4
   b77e8:	2100      	movs	r1, #0
   b77ea:	4668      	mov	r0, sp
   b77ec:	f000 fbef 	bl	b7fce <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b77f0:	2100      	movs	r1, #0
   b77f2:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b77f4:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b77f8:	f7fe fd4e 	bl	b6298 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b77fc:	9801      	ldr	r0, [sp, #4]
   b77fe:	b008      	add	sp, #32
   b7800:	bd10      	pop	{r4, pc}
	...

000b7804 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7804:	4b05      	ldr	r3, [pc, #20]	; (b781c <_GLOBAL__sub_I_System+0x18>)
   b7806:	2202      	movs	r2, #2
   b7808:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b780a:	4b05      	ldr	r3, [pc, #20]	; (b7820 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b780c:	4a05      	ldr	r2, [pc, #20]	; (b7824 <_GLOBAL__sub_I_System+0x20>)
   b780e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7810:	2000      	movs	r0, #0
   b7812:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7816:	f7fe beb7 	b.w	b6588 <set_system_mode>
   b781a:	bf00      	nop
   b781c:	2003e6c0 	.word	0x2003e6c0
   b7820:	2003e6b4 	.word	0x2003e6b4
   b7824:	ffff0000 	.word	0xffff0000

000b7828 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b782c:	4a15      	ldr	r2, [pc, #84]	; (b7884 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b782e:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7890 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b7832:	e9d2 6300 	ldrd	r6, r3, [r2]
   b7836:	1980      	adds	r0, r0, r6
   b7838:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b783c:	4b12      	ldr	r3, [pc, #72]	; (b7888 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b783e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b7842:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b7846:	1986      	adds	r6, r0, r6
   b7848:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b784c:	42bb      	cmp	r3, r7
   b784e:	bf08      	it	eq
   b7850:	42b2      	cmpeq	r2, r6
{
   b7852:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b7854:	d013      	beq.n	b787e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b7856:	a903      	add	r1, sp, #12
   b7858:	4668      	mov	r0, sp
   b785a:	e9cd 6700 	strd	r6, r7, [sp]
   b785e:	f7fe ffc7 	bl	b67f0 <localtime_r>
	calendar_time.tm_year += 1900;
   b7862:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7864:	4d09      	ldr	r5, [pc, #36]	; (b788c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b7866:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b786a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b786c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b786e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b7876:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b787a:	6823      	ldr	r3, [r4, #0]
   b787c:	602b      	str	r3, [r5, #0]
    }
}
   b787e:	b00c      	add	sp, #48	; 0x30
   b7880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7884:	2003e6f8 	.word	0x2003e6f8
   b7888:	2003e6f0 	.word	0x2003e6f0
   b788c:	2003e6c8 	.word	0x2003e6c8
   b7890:	2003e700 	.word	0x2003e700

000b7894 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b7894:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b7896:	2000      	movs	r0, #0
   b7898:	f7fe fee2 	bl	b6660 <spark_sync_time_pending>
   b789c:	b128      	cbz	r0, b78aa <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b789e:	f7fe febf 	bl	b6620 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b78a2:	f080 0001 	eor.w	r0, r0, #1
   b78a6:	b2c0      	uxtb	r0, r0
    }
   b78a8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b78aa:	2001      	movs	r0, #1
   b78ac:	e7fc      	b.n	b78a8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b78b0 <_ZN9TimeClass12hourFormat12Ex>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   b78b0:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78b2:	f7ff ffb9 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
	if(calendar_time_cache.tm_hour == 0)
   b78b6:	4b04      	ldr	r3, [pc, #16]	; (b78c8 <_ZN9TimeClass12hourFormat12Ex+0x18>)
   b78b8:	6898      	ldr	r0, [r3, #8]
   b78ba:	b118      	cbz	r0, b78c4 <_ZN9TimeClass12hourFormat12Ex+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   b78bc:	280c      	cmp	r0, #12
   b78be:	dd00      	ble.n	b78c2 <_ZN9TimeClass12hourFormat12Ex+0x12>
		return calendar_time_cache.tm_hour - 12 ;
   b78c0:	380c      	subs	r0, #12
	else
		return calendar_time_cache.tm_hour ;
}
   b78c2:	bd08      	pop	{r3, pc}
		return 12;	//midnight
   b78c4:	200c      	movs	r0, #12
   b78c6:	e7fc      	b.n	b78c2 <_ZN9TimeClass12hourFormat12Ex+0x12>
   b78c8:	2003e6c8 	.word	0x2003e6c8

000b78cc <_ZN9TimeClass4isPMEx>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
   b78cc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78ce:	f7ff ffab 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
   b78d2:	4b03      	ldr	r3, [pc, #12]	; (b78e0 <_ZN9TimeClass4isPMEx+0x14>)
	return (hour(t) >= 12);
   b78d4:	6898      	ldr	r0, [r3, #8]
}
   b78d6:	280b      	cmp	r0, #11
   b78d8:	bfd4      	ite	le
   b78da:	2000      	movle	r0, #0
   b78dc:	2001      	movgt	r0, #1
   b78de:	bd08      	pop	{r3, pc}
   b78e0:	2003e6c8 	.word	0x2003e6c8

000b78e4 <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   b78e4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78e6:	f7ff ff9f 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
   b78ea:	4b01      	ldr	r3, [pc, #4]	; (b78f0 <_ZN9TimeClass6minuteEx+0xc>)
   b78ec:	6858      	ldr	r0, [r3, #4]
   b78ee:	bd08      	pop	{r3, pc}
   b78f0:	2003e6c8 	.word	0x2003e6c8

000b78f4 <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   b78f4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78f6:	f7ff ff97 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
   b78fa:	4b01      	ldr	r3, [pc, #4]	; (b7900 <_ZN9TimeClass6secondEx+0xc>)
   b78fc:	6818      	ldr	r0, [r3, #0]
   b78fe:	bd08      	pop	{r3, pc}
   b7900:	2003e6c8 	.word	0x2003e6c8

000b7904 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b7904:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b7906:	f7ff ff8f 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b790a:	4b02      	ldr	r3, [pc, #8]	; (b7914 <_ZN9TimeClass5monthEx+0x10>)
   b790c:	6918      	ldr	r0, [r3, #16]
}
   b790e:	3001      	adds	r0, #1
   b7910:	bd08      	pop	{r3, pc}
   b7912:	bf00      	nop
   b7914:	2003e6c8 	.word	0x2003e6c8

000b7918 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7918:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b791c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b7924:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7926:	d411      	bmi.n	b794c <_ZN9TimeClass4zoneEf+0x34>
   b7928:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b792c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b7934:	dc0a      	bgt.n	b794c <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b7936:	eddf 7a06 	vldr	s15, [pc, #24]	; b7950 <_ZN9TimeClass4zoneEf+0x38>
   b793a:	ee60 7a27 	vmul.f32	s15, s0, s15
   b793e:	ee17 0a90 	vmov	r0, s15
   b7942:	f7fc ff59 	bl	b47f8 <__aeabi_f2lz>
   b7946:	4b03      	ldr	r3, [pc, #12]	; (b7954 <_ZN9TimeClass4zoneEf+0x3c>)
   b7948:	e9c3 0100 	strd	r0, r1, [r3]
}
   b794c:	bd08      	pop	{r3, pc}
   b794e:	bf00      	nop
   b7950:	45610000 	.word	0x45610000
   b7954:	2003e6f8 	.word	0x2003e6f8

000b7958 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7958:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b795a:	2000      	movs	r0, #0
   b795c:	f7fe fcb4 	bl	b62c8 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7960:	4604      	mov	r4, r0
   b7962:	b9a0      	cbnz	r0, b798e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b7964:	f7fe fe08 	bl	b6578 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7968:	2801      	cmp	r0, #1
   b796a:	d110      	bne.n	b798e <_ZN9TimeClass7isValidEv+0x36>
   b796c:	4620      	mov	r0, r4
   b796e:	f7fe fe2b 	bl	b65c8 <system_thread_get_state>
   b7972:	b960      	cbnz	r0, b798e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b7974:	f7ff ff8e 	bl	b7894 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7978:	b910      	cbnz	r0, b7980 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b797a:	f7fe fe41 	bl	b6600 <spark_process>
        while (_while() && !_condition()) {
   b797e:	e7f9      	b.n	b7974 <_ZN9TimeClass7isValidEv+0x1c>
   b7980:	f7ff ff88 	bl	b7894 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b7984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7988:	2000      	movs	r0, #0
   b798a:	f7fe bc9d 	b.w	b62c8 <hal_rtc_time_is_valid>
}
   b798e:	4620      	mov	r0, r4
   b7990:	bd10      	pop	{r4, pc}

000b7992 <_ZN9TimeClass3nowEv>:
{
   b7992:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b7994:	f7ff ffe0 	bl	b7958 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7998:	2210      	movs	r2, #16
   b799a:	2100      	movs	r1, #0
   b799c:	4668      	mov	r0, sp
   b799e:	f000 fb16 	bl	b7fce <memset>
    hal_rtc_get_time(&tv, nullptr);
   b79a2:	2100      	movs	r1, #0
   b79a4:	4668      	mov	r0, sp
   b79a6:	f7fe fc97 	bl	b62d8 <hal_rtc_get_time>
}
   b79aa:	9800      	ldr	r0, [sp, #0]
   b79ac:	b005      	add	sp, #20
   b79ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b79b2 <_ZN9TimeClass4isPMEv>:
{
   b79b2:	b508      	push	{r3, lr}
	return isPM(now());
   b79b4:	f7ff ffed 	bl	b7992 <_ZN9TimeClass3nowEv>
}
   b79b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return isPM(now());
   b79bc:	17c1      	asrs	r1, r0, #31
   b79be:	f7ff bf85 	b.w	b78cc <_ZN9TimeClass4isPMEx>
	...

000b79c4 <_ZN9TimeClass3dayEv>:
{
   b79c4:	b508      	push	{r3, lr}
	return day(now());
   b79c6:	f7ff ffe4 	bl	b7992 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79ca:	17c1      	asrs	r1, r0, #31
   b79cc:	f7ff ff2c 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
}
   b79d0:	4b01      	ldr	r3, [pc, #4]	; (b79d8 <_ZN9TimeClass3dayEv+0x14>)
   b79d2:	68d8      	ldr	r0, [r3, #12]
   b79d4:	bd08      	pop	{r3, pc}
   b79d6:	bf00      	nop
   b79d8:	2003e6c8 	.word	0x2003e6c8

000b79dc <_ZN9TimeClass5monthEv>:
{
   b79dc:	b508      	push	{r3, lr}
	return month(now());
   b79de:	f7ff ffd8 	bl	b7992 <_ZN9TimeClass3nowEv>
}
   b79e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b79e6:	17c1      	asrs	r1, r0, #31
   b79e8:	f7ff bf8c 	b.w	b7904 <_ZN9TimeClass5monthEx>

000b79ec <_ZN9TimeClass4yearEv>:
{
   b79ec:	b508      	push	{r3, lr}
	return year(now());
   b79ee:	f7ff ffd0 	bl	b7992 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79f2:	17c1      	asrs	r1, r0, #31
   b79f4:	f7ff ff18 	bl	b7828 <_ZL22Refresh_UnixTime_Cachex>
}
   b79f8:	4b01      	ldr	r3, [pc, #4]	; (b7a00 <_ZN9TimeClass4yearEv+0x14>)
   b79fa:	6958      	ldr	r0, [r3, #20]
   b79fc:	bd08      	pop	{r3, pc}
   b79fe:	bf00      	nop
   b7a00:	2003e6c8 	.word	0x2003e6c8

000b7a04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7a04:	4b02      	ldr	r3, [pc, #8]	; (b7a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7a06:	681a      	ldr	r2, [r3, #0]
   b7a08:	4b02      	ldr	r3, [pc, #8]	; (b7a14 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a0a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a0c:	4770      	bx	lr
   b7a0e:	bf00      	nop
   b7a10:	2003de4c 	.word	0x2003de4c
   b7a14:	2003e6c4 	.word	0x2003e6c4

000b7a18 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7a18:	4770      	bx	lr

000b7a1a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a1a:	7441      	strb	r1, [r0, #17]
}
   b7a1c:	4770      	bx	lr

000b7a1e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7a1e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7a20:	7c00      	ldrb	r0, [r0, #16]
   b7a22:	f7fe fd61 	bl	b64e8 <hal_usart_available_data_for_write>
}
   b7a26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a2a:	bd08      	pop	{r3, pc}

000b7a2c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a2c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a2e:	7c00      	ldrb	r0, [r0, #16]
   b7a30:	f7fe fd32 	bl	b6498 <hal_usart_available>
}
   b7a34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a38:	bd08      	pop	{r3, pc}

000b7a3a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a3c:	7c00      	ldrb	r0, [r0, #16]
   b7a3e:	f7fe fd3b 	bl	b64b8 <hal_usart_peek>
}
   b7a42:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a46:	bd08      	pop	{r3, pc}

000b7a48 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a48:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a4a:	7c00      	ldrb	r0, [r0, #16]
   b7a4c:	f7fe fd2c 	bl	b64a8 <hal_usart_read>
}
   b7a50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a54:	bd08      	pop	{r3, pc}

000b7a56 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7a56:	7c00      	ldrb	r0, [r0, #16]
   b7a58:	f7fe bd36 	b.w	b64c8 <hal_usart_flush>

000b7a5c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a5e:	7c45      	ldrb	r5, [r0, #17]
{
   b7a60:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a62:	b12d      	cbz	r5, b7a70 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7a64:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7a66:	b003      	add	sp, #12
   b7a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7a6c:	f7fe bd0c 	b.w	b6488 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a70:	7c00      	ldrb	r0, [r0, #16]
   b7a72:	9101      	str	r1, [sp, #4]
   b7a74:	f7fe fd38 	bl	b64e8 <hal_usart_available_data_for_write>
   b7a78:	2800      	cmp	r0, #0
   b7a7a:	9901      	ldr	r1, [sp, #4]
   b7a7c:	dcf2      	bgt.n	b7a64 <_ZN11USARTSerial5writeEh+0x8>
}
   b7a7e:	4628      	mov	r0, r5
   b7a80:	b003      	add	sp, #12
   b7a82:	bd30      	pop	{r4, r5, pc}

000b7a84 <_ZN11USARTSerialD0Ev>:
   b7a84:	b510      	push	{r4, lr}
   b7a86:	2114      	movs	r1, #20
   b7a88:	4604      	mov	r4, r0
   b7a8a:	f7fc ff3a 	bl	b4902 <_ZdlPvj>
   b7a8e:	4620      	mov	r0, r4
   b7a90:	bd10      	pop	{r4, pc}
	...

000b7a94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7a94:	b510      	push	{r4, lr}
   b7a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a9a:	4604      	mov	r4, r0
   b7a9c:	4608      	mov	r0, r1
   b7a9e:	4611      	mov	r1, r2
   b7aa0:	2200      	movs	r2, #0
   b7aa2:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7aa6:	4b04      	ldr	r3, [pc, #16]	; (b7ab8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7aa8:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7aaa:	2301      	movs	r3, #1
  _serial = serial;
   b7aac:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7aae:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7ab0:	f7fe fd22 	bl	b64f8 <hal_usart_init_ex>
}
   b7ab4:	4620      	mov	r0, r4
   b7ab6:	bd10      	pop	{r4, pc}
   b7ab8:	000bbd38 	.word	0x000bbd38

000b7abc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7abc:	7441      	strb	r1, [r0, #17]
}
   b7abe:	4770      	bx	lr

000b7ac0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ac0:	4770      	bx	lr

000b7ac2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7ac2:	4770      	bx	lr

000b7ac4 <_ZN9USBSerial4readEv>:
{
   b7ac4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7ac6:	2100      	movs	r1, #0
   b7ac8:	7c00      	ldrb	r0, [r0, #16]
   b7aca:	f7fe fd3d 	bl	b6548 <HAL_USB_USART_Receive_Data>
}
   b7ace:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ad2:	bd08      	pop	{r3, pc}

000b7ad4 <_ZN9USBSerial4peekEv>:
{
   b7ad4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7ad6:	2101      	movs	r1, #1
   b7ad8:	7c00      	ldrb	r0, [r0, #16]
   b7ada:	f7fe fd35 	bl	b6548 <HAL_USB_USART_Receive_Data>
}
   b7ade:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ae2:	bd08      	pop	{r3, pc}

000b7ae4 <_ZN9USBSerial17availableForWriteEv>:
{
   b7ae4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7ae6:	7c00      	ldrb	r0, [r0, #16]
   b7ae8:	f7fe fd26 	bl	b6538 <HAL_USB_USART_Available_Data_For_Write>
}
   b7aec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7af0:	bd08      	pop	{r3, pc}

000b7af2 <_ZN9USBSerial9availableEv>:
{
   b7af2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7af4:	7c00      	ldrb	r0, [r0, #16]
   b7af6:	f7fe fd17 	bl	b6528 <HAL_USB_USART_Available_Data>
}
   b7afa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7afe:	bd08      	pop	{r3, pc}

000b7b00 <_ZN9USBSerial5writeEh>:
{
   b7b00:	b513      	push	{r0, r1, r4, lr}
   b7b02:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b04:	7c00      	ldrb	r0, [r0, #16]
{
   b7b06:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b08:	f7fe fd16 	bl	b6538 <HAL_USB_USART_Available_Data_For_Write>
   b7b0c:	2800      	cmp	r0, #0
   b7b0e:	9901      	ldr	r1, [sp, #4]
   b7b10:	dc01      	bgt.n	b7b16 <_ZN9USBSerial5writeEh+0x16>
   b7b12:	7c60      	ldrb	r0, [r4, #17]
   b7b14:	b120      	cbz	r0, b7b20 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7b16:	7c20      	ldrb	r0, [r4, #16]
   b7b18:	f7fe fd1e 	bl	b6558 <HAL_USB_USART_Send_Data>
   b7b1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7b20:	b002      	add	sp, #8
   b7b22:	bd10      	pop	{r4, pc}

000b7b24 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b24:	7c00      	ldrb	r0, [r0, #16]
   b7b26:	f7fe bd1f 	b.w	b6568 <HAL_USB_USART_Flush_Data>

000b7b2a <_ZN9USBSerialD0Ev>:
   b7b2a:	b510      	push	{r4, lr}
   b7b2c:	2114      	movs	r1, #20
   b7b2e:	4604      	mov	r4, r0
   b7b30:	f7fc fee7 	bl	b4902 <_ZdlPvj>
   b7b34:	4620      	mov	r0, r4
   b7b36:	bd10      	pop	{r4, pc}

000b7b38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b38:	b510      	push	{r4, lr}
   b7b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b3e:	4604      	mov	r4, r0
   b7b40:	4608      	mov	r0, r1
   b7b42:	2100      	movs	r1, #0
   b7b44:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b48:	4b04      	ldr	r3, [pc, #16]	; (b7b5c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b4a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b4c:	2301      	movs	r3, #1
  _serial = serial;
   b7b4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b50:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b52:	4611      	mov	r1, r2
   b7b54:	f7fe fcd8 	bl	b6508 <HAL_USB_USART_Init>
}
   b7b58:	4620      	mov	r0, r4
   b7b5a:	bd10      	pop	{r4, pc}
   b7b5c:	000bbd68 	.word	0x000bbd68

000b7b60 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7b60:	7c00      	ldrb	r0, [r0, #16]
   b7b62:	2200      	movs	r2, #0
   b7b64:	f7fe bcd8 	b.w	b6518 <HAL_USB_USART_Begin>

000b7b68 <_Z19acquireSerialBufferv>:
{
   b7b68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7b6a:	2214      	movs	r2, #20
{
   b7b6c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7b6e:	2100      	movs	r1, #0
   b7b70:	f000 fa2d 	bl	b7fce <memset>
}
   b7b74:	4620      	mov	r0, r4
   b7b76:	bd10      	pop	{r4, pc}

000b7b78 <_Z16_fetch_usbserialv>:
{
   b7b78:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b7a:	4c0f      	ldr	r4, [pc, #60]	; (b7bb8 <_Z16_fetch_usbserialv+0x40>)
{
   b7b7c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7b7e:	a803      	add	r0, sp, #12
   b7b80:	f7ff fff2 	bl	b7b68 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b84:	7821      	ldrb	r1, [r4, #0]
   b7b86:	f3bf 8f5b 	dmb	ish
   b7b8a:	f011 0101 	ands.w	r1, r1, #1
   b7b8e:	d10f      	bne.n	b7bb0 <_Z16_fetch_usbserialv+0x38>
   b7b90:	4620      	mov	r0, r4
   b7b92:	9101      	str	r1, [sp, #4]
   b7b94:	f7fc feb7 	bl	b4906 <__cxa_guard_acquire>
   b7b98:	9901      	ldr	r1, [sp, #4]
   b7b9a:	b148      	cbz	r0, b7bb0 <_Z16_fetch_usbserialv+0x38>
   b7b9c:	aa03      	add	r2, sp, #12
   b7b9e:	4807      	ldr	r0, [pc, #28]	; (b7bbc <_Z16_fetch_usbserialv+0x44>)
   b7ba0:	f7ff ffca 	bl	b7b38 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7ba4:	4620      	mov	r0, r4
   b7ba6:	f7fc feb3 	bl	b4910 <__cxa_guard_release>
   b7baa:	4805      	ldr	r0, [pc, #20]	; (b7bc0 <_Z16_fetch_usbserialv+0x48>)
   b7bac:	f000 f9f7 	bl	b7f9e <atexit>
	return _usbserial;
}
   b7bb0:	4802      	ldr	r0, [pc, #8]	; (b7bbc <_Z16_fetch_usbserialv+0x44>)
   b7bb2:	b008      	add	sp, #32
   b7bb4:	bd10      	pop	{r4, pc}
   b7bb6:	bf00      	nop
   b7bb8:	2003e708 	.word	0x2003e708
   b7bbc:	2003e70c 	.word	0x2003e70c
   b7bc0:	000b7ac1 	.word	0x000b7ac1

000b7bc4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7bc4:	b510      	push	{r4, lr}
   b7bc6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7bc8:	f7fc fe54 	bl	b4874 <strlen>
   b7bcc:	3801      	subs	r0, #1
   b7bce:	1823      	adds	r3, r4, r0
   b7bd0:	4620      	mov	r0, r4
	while(i<j){
   b7bd2:	4283      	cmp	r3, r0
   b7bd4:	d906      	bls.n	b7be4 <_Z11str_reversePc+0x20>
		c = *i;
   b7bd6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7bd8:	7819      	ldrb	r1, [r3, #0]
   b7bda:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7bde:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7be2:	e7f6      	b.n	b7bd2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7be4:	bd10      	pop	{r4, pc}

000b7be6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7be6:	b570      	push	{r4, r5, r6, lr}
   b7be8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7bea:	1e91      	subs	r1, r2, #2
   b7bec:	2922      	cmp	r1, #34	; 0x22
   b7bee:	d81d      	bhi.n	b7c2c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7bf0:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7bf2:	b930      	cbnz	r0, b7c02 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7bf4:	4423      	add	r3, r4
            *ptr++ = '0';
   b7bf6:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7bf8:	429d      	cmp	r5, r3
   b7bfa:	d210      	bcs.n	b7c1e <ultoa+0x38>
            *ptr++ = '0';
   b7bfc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7c00:	e7fa      	b.n	b7bf8 <ultoa+0x12>
            result.quot = a/radix;
   b7c02:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7c06:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7c0a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7c0c:	2809      	cmp	r0, #9
                *ptr += '0';
   b7c0e:	bf94      	ite	ls
   b7c10:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7c12:	3157      	addhi	r1, #87	; 0x57
   b7c14:	b2c9      	uxtb	r1, r1
   b7c16:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7c1a:	4630      	mov	r0, r6
	while(a){
   b7c1c:	e7e9      	b.n	b7bf2 <ultoa+0xc>

	*ptr = '\0';
   b7c1e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7c20:	4620      	mov	r0, r4
	*ptr = '\0';
   b7c22:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7c24:	f7ff ffce 	bl	b7bc4 <_Z11str_reversePc>
	return buffer;
   b7c28:	4620      	mov	r0, r4
}
   b7c2a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7c2c:	2000      	movs	r0, #0
   b7c2e:	e7fc      	b.n	b7c2a <ultoa+0x44>

000b7c30 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7c30:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7c32:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7c34:	460c      	mov	r4, r1
   b7c36:	4615      	mov	r5, r2
	if(a<0){
   b7c38:	da0e      	bge.n	b7c58 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7c3e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7c42:	bf14      	ite	ne
   b7c44:	4258      	negne	r0, r3
   b7c46:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7c48:	2301      	movs	r3, #1
		*buffer = '-';
   b7c4a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7c4c:	462a      	mov	r2, r5
   b7c4e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7c50:	f7ff ffc9 	bl	b7be6 <ultoa>
	}
	return buffer;
}
   b7c54:	4620      	mov	r0, r4
   b7c56:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7c58:	2301      	movs	r3, #1
   b7c5a:	e7f9      	b.n	b7c50 <itoa+0x20>

000b7c5c <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b7c5c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b7c5e:	2301      	movs	r3, #1
   b7c60:	f7ff ffc1 	bl	b7be6 <ultoa>
}
   b7c64:	bd08      	pop	{r3, pc}
	...

000b7c68 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c68:	4b01      	ldr	r3, [pc, #4]	; (b7c70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c6a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c6c:	4770      	bx	lr
   b7c6e:	bf00      	nop
   b7c70:	2003de50 	.word	0x2003de50

000b7c74 <serialEventRun>:
{
   b7c74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7c76:	4b0b      	ldr	r3, [pc, #44]	; (b7ca4 <serialEventRun+0x30>)
   b7c78:	b143      	cbz	r3, b7c8c <serialEventRun+0x18>
   b7c7a:	f7ff ff7d 	bl	b7b78 <_Z16_fetch_usbserialv>
   b7c7e:	6803      	ldr	r3, [r0, #0]
   b7c80:	691b      	ldr	r3, [r3, #16]
   b7c82:	4798      	blx	r3
   b7c84:	2800      	cmp	r0, #0
   b7c86:	dd01      	ble.n	b7c8c <serialEventRun+0x18>
        serialEvent();
   b7c88:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c8c:	4b06      	ldr	r3, [pc, #24]	; (b7ca8 <serialEventRun+0x34>)
   b7c8e:	b143      	cbz	r3, b7ca2 <serialEventRun+0x2e>
   b7c90:	f000 f95c 	bl	b7f4c <_Z22__fetch_global_Serial1v>
   b7c94:	6803      	ldr	r3, [r0, #0]
   b7c96:	691b      	ldr	r3, [r3, #16]
   b7c98:	4798      	blx	r3
   b7c9a:	2800      	cmp	r0, #0
   b7c9c:	dd01      	ble.n	b7ca2 <serialEventRun+0x2e>
        serialEvent1();
   b7c9e:	f3af 8000 	nop.w
}
   b7ca2:	bd08      	pop	{r3, pc}
	...

000b7cac <_post_loop>:
{
   b7cac:	b508      	push	{r3, lr}
	serialEventRun();
   b7cae:	f7ff ffe1 	bl	b7c74 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7cb2:	f7fe fb01 	bl	b62b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7cb6:	4b01      	ldr	r3, [pc, #4]	; (b7cbc <_post_loop+0x10>)
   b7cb8:	6018      	str	r0, [r3, #0]
}
   b7cba:	bd08      	pop	{r3, pc}
   b7cbc:	2003e728 	.word	0x2003e728

000b7cc0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cc0:	4805      	ldr	r0, [pc, #20]	; (b7cd8 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7cc2:	4a06      	ldr	r2, [pc, #24]	; (b7cdc <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7cc4:	4906      	ldr	r1, [pc, #24]	; (b7ce0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7cc6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cc8:	1a12      	subs	r2, r2, r0
   b7cca:	f000 f972 	bl	b7fb2 <memcpy>
    __backup_sram_signature = signature;
   b7cce:	4b05      	ldr	r3, [pc, #20]	; (b7ce4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7cd0:	4a05      	ldr	r2, [pc, #20]	; (b7ce8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7cd2:	601a      	str	r2, [r3, #0]
}
   b7cd4:	bd08      	pop	{r3, pc}
   b7cd6:	bf00      	nop
   b7cd8:	2003f400 	.word	0x2003f400
   b7cdc:	2003f404 	.word	0x2003f404
   b7ce0:	000bc040 	.word	0x000bc040
   b7ce4:	2003f400 	.word	0x2003f400
   b7ce8:	9a271c1e 	.word	0x9a271c1e

000b7cec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7cec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7cee:	2300      	movs	r3, #0
   b7cf0:	9300      	str	r3, [sp, #0]
   b7cf2:	461a      	mov	r2, r3
   b7cf4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7cf8:	f7fe fc78 	bl	b65ec <system_ctrl_set_result>
}
   b7cfc:	b003      	add	sp, #12
   b7cfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d04 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7d04:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7d06:	8843      	ldrh	r3, [r0, #2]
   b7d08:	2b0a      	cmp	r3, #10
   b7d0a:	d008      	beq.n	b7d1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7d0c:	2b50      	cmp	r3, #80	; 0x50
   b7d0e:	d10b      	bne.n	b7d28 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7d10:	4b09      	ldr	r3, [pc, #36]	; (b7d38 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7d12:	681b      	ldr	r3, [r3, #0]
   b7d14:	b14b      	cbz	r3, b7d2a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7d16:	b003      	add	sp, #12
   b7d18:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7d1c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7d1e:	f7ff ffe5 	bl	b7cec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7d22:	b003      	add	sp, #12
   b7d24:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d28:	2300      	movs	r3, #0
   b7d2a:	9300      	str	r3, [sp, #0]
   b7d2c:	461a      	mov	r2, r3
   b7d2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d32:	f7fe fc5b 	bl	b65ec <system_ctrl_set_result>
}
   b7d36:	e7f4      	b.n	b7d22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7d38:	2003e724 	.word	0x2003e724

000b7d3c <module_user_init_hook>:
{
   b7d3c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7d3e:	4812      	ldr	r0, [pc, #72]	; (b7d88 <module_user_init_hook+0x4c>)
   b7d40:	2100      	movs	r1, #0
   b7d42:	f7fe fd4d 	bl	b67e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7d46:	4b11      	ldr	r3, [pc, #68]	; (b7d8c <module_user_init_hook+0x50>)
   b7d48:	681a      	ldr	r2, [r3, #0]
   b7d4a:	4b11      	ldr	r3, [pc, #68]	; (b7d90 <module_user_init_hook+0x54>)
   b7d4c:	429a      	cmp	r2, r3
   b7d4e:	4b11      	ldr	r3, [pc, #68]	; (b7d94 <module_user_init_hook+0x58>)
   b7d50:	bf0c      	ite	eq
   b7d52:	2201      	moveq	r2, #1
   b7d54:	2200      	movne	r2, #0
   b7d56:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d58:	d001      	beq.n	b7d5e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d5a:	f7ff ffb1 	bl	b7cc0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d5e:	f7fe faa3 	bl	b62a8 <HAL_RNG_GetRandomNumber>
   b7d62:	4604      	mov	r4, r0
    srand(seed);
   b7d64:	f000 f93c 	bl	b7fe0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d68:	4b0b      	ldr	r3, [pc, #44]	; (b7d98 <module_user_init_hook+0x5c>)
   b7d6a:	b113      	cbz	r3, b7d72 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d6c:	4620      	mov	r0, r4
   b7d6e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d72:	2100      	movs	r1, #0
   b7d74:	4808      	ldr	r0, [pc, #32]	; (b7d98 <module_user_init_hook+0x5c>)
   b7d76:	f7fe fc83 	bl	b6680 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7d7e:	4807      	ldr	r0, [pc, #28]	; (b7d9c <module_user_init_hook+0x60>)
   b7d80:	2100      	movs	r1, #0
   b7d82:	f7fe bc29 	b.w	b65d8 <system_ctrl_set_app_request_handler>
   b7d86:	bf00      	nop
   b7d88:	000b7c69 	.word	0x000b7c69
   b7d8c:	2003f400 	.word	0x2003f400
   b7d90:	9a271c1e 	.word	0x9a271c1e
   b7d94:	2003e720 	.word	0x2003e720
   b7d98:	00000000 	.word	0x00000000
   b7d9c:	000b7d05 	.word	0x000b7d05

000b7da0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7da0:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b7da2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7da4:	d902      	bls.n	b7dac <pinAvailable+0xc>
    return false;
   b7da6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7da8:	b002      	add	sp, #8
   b7daa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7dac:	f1a0 030b 	sub.w	r3, r0, #11
   b7db0:	2b02      	cmp	r3, #2
   b7db2:	d81a      	bhi.n	b7dea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7db4:	4c17      	ldr	r4, [pc, #92]	; (b7e14 <pinAvailable+0x74>)
   b7db6:	7821      	ldrb	r1, [r4, #0]
   b7db8:	f3bf 8f5b 	dmb	ish
   b7dbc:	f011 0101 	ands.w	r1, r1, #1
   b7dc0:	d10b      	bne.n	b7dda <pinAvailable+0x3a>
   b7dc2:	4620      	mov	r0, r4
   b7dc4:	9101      	str	r1, [sp, #4]
   b7dc6:	f7fc fd9e 	bl	b4906 <__cxa_guard_acquire>
   b7dca:	9901      	ldr	r1, [sp, #4]
   b7dcc:	b128      	cbz	r0, b7dda <pinAvailable+0x3a>
   b7dce:	4812      	ldr	r0, [pc, #72]	; (b7e18 <pinAvailable+0x78>)
   b7dd0:	f7ff fafe 	bl	b73d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7dd4:	4620      	mov	r0, r4
   b7dd6:	f7fc fd9b 	bl	b4910 <__cxa_guard_release>
   b7dda:	4b0f      	ldr	r3, [pc, #60]	; (b7e18 <pinAvailable+0x78>)
   b7ddc:	7818      	ldrb	r0, [r3, #0]
   b7dde:	f7fe fb2b 	bl	b6438 <hal_spi_is_enabled>
   b7de2:	2800      	cmp	r0, #0
   b7de4:	d1df      	bne.n	b7da6 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7de6:	2001      	movs	r0, #1
   b7de8:	e7de      	b.n	b7da8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7dea:	2801      	cmp	r0, #1
   b7dec:	d809      	bhi.n	b7e02 <pinAvailable+0x62>
   b7dee:	f000 f86d 	bl	b7ecc <_Z19__fetch_global_Wirev>
   b7df2:	2100      	movs	r1, #0
   b7df4:	7c00      	ldrb	r0, [r0, #16]
   b7df6:	f7fe fad7 	bl	b63a8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7dfa:	f080 0001 	eor.w	r0, r0, #1
   b7dfe:	b2c0      	uxtb	r0, r0
   b7e00:	e7d2      	b.n	b7da8 <pinAvailable+0x8>
   b7e02:	3809      	subs	r0, #9
   b7e04:	2801      	cmp	r0, #1
   b7e06:	d8ee      	bhi.n	b7de6 <pinAvailable+0x46>
   b7e08:	f000 f8a0 	bl	b7f4c <_Z22__fetch_global_Serial1v>
   b7e0c:	7c00      	ldrb	r0, [r0, #16]
   b7e0e:	f7fe fb63 	bl	b64d8 <hal_usart_is_enabled>
   b7e12:	e7f2      	b.n	b7dfa <pinAvailable+0x5a>
   b7e14:	2003e650 	.word	0x2003e650
   b7e18:	2003e654 	.word	0x2003e654

000b7e1c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e1c:	2825      	cmp	r0, #37	; 0x25
{
   b7e1e:	b538      	push	{r3, r4, r5, lr}
   b7e20:	4604      	mov	r4, r0
   b7e22:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e24:	d80a      	bhi.n	b7e3c <pinMode+0x20>
   b7e26:	29ff      	cmp	r1, #255	; 0xff
   b7e28:	d008      	beq.n	b7e3c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7e2a:	f7ff ffb9 	bl	b7da0 <pinAvailable>
   b7e2e:	b128      	cbz	r0, b7e3c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7e30:	4629      	mov	r1, r5
   b7e32:	4620      	mov	r0, r4
}
   b7e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7e38:	f7fe ba56 	b.w	b62e8 <hal_gpio_mode>
}
   b7e3c:	bd38      	pop	{r3, r4, r5, pc}

000b7e3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7e3e:	b538      	push	{r3, r4, r5, lr}
   b7e40:	4604      	mov	r4, r0
   b7e42:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7e44:	f7fe fa58 	bl	b62f8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7e48:	28ff      	cmp	r0, #255	; 0xff
   b7e4a:	d010      	beq.n	b7e6e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7e4c:	2806      	cmp	r0, #6
   b7e4e:	d804      	bhi.n	b7e5a <digitalWrite+0x1c>
   b7e50:	234d      	movs	r3, #77	; 0x4d
   b7e52:	fa23 f000 	lsr.w	r0, r3, r0
   b7e56:	07c3      	lsls	r3, r0, #31
   b7e58:	d409      	bmi.n	b7e6e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7e5a:	4620      	mov	r0, r4
   b7e5c:	f7ff ffa0 	bl	b7da0 <pinAvailable>
   b7e60:	b128      	cbz	r0, b7e6e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7e62:	4629      	mov	r1, r5
   b7e64:	4620      	mov	r0, r4
}
   b7e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7e6a:	f7fe ba4d 	b.w	b6308 <hal_gpio_write>
}
   b7e6e:	bd38      	pop	{r3, r4, r5, pc}

000b7e70 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b7e70:	b510      	push	{r4, lr}
   b7e72:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7e74:	f7fe fa40 	bl	b62f8 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7e78:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7e7a:	b2db      	uxtb	r3, r3
   b7e7c:	2b01      	cmp	r3, #1
   b7e7e:	d908      	bls.n	b7e92 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7e80:	4620      	mov	r0, r4
   b7e82:	f7ff ff8d 	bl	b7da0 <pinAvailable>
   b7e86:	b120      	cbz	r0, b7e92 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7e88:	4620      	mov	r0, r4
}
   b7e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7e8e:	f7fe ba43 	b.w	b6318 <hal_gpio_read>
}
   b7e92:	2000      	movs	r0, #0
   b7e94:	bd10      	pop	{r4, pc}

000b7e96 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e96:	4770      	bx	lr

000b7e98 <_Z17acquireWireBufferv>:
{
   b7e98:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7e9a:	4b0a      	ldr	r3, [pc, #40]	; (b7ec4 <_Z17acquireWireBufferv+0x2c>)
   b7e9c:	6003      	str	r3, [r0, #0]
   b7e9e:	2301      	movs	r3, #1
{
   b7ea0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7ea2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7ea4:	4908      	ldr	r1, [pc, #32]	; (b7ec8 <_Z17acquireWireBufferv+0x30>)
   b7ea6:	2020      	movs	r0, #32
   b7ea8:	f000 f874 	bl	b7f94 <_ZnajRKSt9nothrow_t>
	};
   b7eac:	2520      	movs	r5, #32
   b7eae:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7eb0:	4905      	ldr	r1, [pc, #20]	; (b7ec8 <_Z17acquireWireBufferv+0x30>)
	};
   b7eb2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7eb4:	4628      	mov	r0, r5
   b7eb6:	f000 f86d 	bl	b7f94 <_ZnajRKSt9nothrow_t>
	};
   b7eba:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7ebe:	4620      	mov	r0, r4
   b7ec0:	bd38      	pop	{r3, r4, r5, pc}
   b7ec2:	bf00      	nop
   b7ec4:	00010018 	.word	0x00010018
   b7ec8:	000bbd90 	.word	0x000bbd90

000b7ecc <_Z19__fetch_global_Wirev>:
{
   b7ecc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ece:	4d0e      	ldr	r5, [pc, #56]	; (b7f08 <_Z19__fetch_global_Wirev+0x3c>)
   b7ed0:	7829      	ldrb	r1, [r5, #0]
   b7ed2:	f3bf 8f5b 	dmb	ish
   b7ed6:	f011 0401 	ands.w	r4, r1, #1
{
   b7eda:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7edc:	d111      	bne.n	b7f02 <_Z19__fetch_global_Wirev+0x36>
   b7ede:	4628      	mov	r0, r5
   b7ee0:	f7fc fd11 	bl	b4906 <__cxa_guard_acquire>
   b7ee4:	b168      	cbz	r0, b7f02 <_Z19__fetch_global_Wirev+0x36>
   b7ee6:	4668      	mov	r0, sp
   b7ee8:	f7ff ffd6 	bl	b7e98 <_Z17acquireWireBufferv>
   b7eec:	466a      	mov	r2, sp
   b7eee:	4621      	mov	r1, r4
   b7ef0:	4806      	ldr	r0, [pc, #24]	; (b7f0c <_Z19__fetch_global_Wirev+0x40>)
   b7ef2:	f7ff f83d 	bl	b6f70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7ef6:	4628      	mov	r0, r5
   b7ef8:	f7fc fd0a 	bl	b4910 <__cxa_guard_release>
   b7efc:	4804      	ldr	r0, [pc, #16]	; (b7f10 <_Z19__fetch_global_Wirev+0x44>)
   b7efe:	f000 f84e 	bl	b7f9e <atexit>
	return wire;
}
   b7f02:	4802      	ldr	r0, [pc, #8]	; (b7f0c <_Z19__fetch_global_Wirev+0x40>)
   b7f04:	b007      	add	sp, #28
   b7f06:	bd30      	pop	{r4, r5, pc}
   b7f08:	2003e72c 	.word	0x2003e72c
   b7f0c:	2003e730 	.word	0x2003e730
   b7f10:	000b7e97 	.word	0x000b7e97

000b7f14 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f14:	4770      	bx	lr
	...

000b7f18 <_Z20acquireSerial1Bufferv>:
{
   b7f18:	b538      	push	{r3, r4, r5, lr}
   b7f1a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7f1c:	2514      	movs	r5, #20
   b7f1e:	462a      	mov	r2, r5
   b7f20:	2100      	movs	r1, #0
   b7f22:	f000 f854 	bl	b7fce <memset>
   b7f26:	8025      	strh	r5, [r4, #0]
   b7f28:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f2a:	4907      	ldr	r1, [pc, #28]	; (b7f48 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7f2c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f2e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7f30:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f32:	f000 f82f 	bl	b7f94 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f36:	4904      	ldr	r1, [pc, #16]	; (b7f48 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7f38:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f3a:	4628      	mov	r0, r5
   b7f3c:	f000 f82a 	bl	b7f94 <_ZnajRKSt9nothrow_t>
    };
   b7f40:	60e0      	str	r0, [r4, #12]
}
   b7f42:	4620      	mov	r0, r4
   b7f44:	bd38      	pop	{r3, r4, r5, pc}
   b7f46:	bf00      	nop
   b7f48:	000bbd90 	.word	0x000bbd90

000b7f4c <_Z22__fetch_global_Serial1v>:
{
   b7f4c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f4e:	4d0e      	ldr	r5, [pc, #56]	; (b7f88 <_Z22__fetch_global_Serial1v+0x3c>)
   b7f50:	7829      	ldrb	r1, [r5, #0]
   b7f52:	f3bf 8f5b 	dmb	ish
   b7f56:	f011 0401 	ands.w	r4, r1, #1
{
   b7f5a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f5c:	d111      	bne.n	b7f82 <_Z22__fetch_global_Serial1v+0x36>
   b7f5e:	4628      	mov	r0, r5
   b7f60:	f7fc fcd1 	bl	b4906 <__cxa_guard_acquire>
   b7f64:	b168      	cbz	r0, b7f82 <_Z22__fetch_global_Serial1v+0x36>
   b7f66:	a801      	add	r0, sp, #4
   b7f68:	f7ff ffd6 	bl	b7f18 <_Z20acquireSerial1Bufferv>
   b7f6c:	aa01      	add	r2, sp, #4
   b7f6e:	4621      	mov	r1, r4
   b7f70:	4806      	ldr	r0, [pc, #24]	; (b7f8c <_Z22__fetch_global_Serial1v+0x40>)
   b7f72:	f7ff fd8f 	bl	b7a94 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7f76:	4628      	mov	r0, r5
   b7f78:	f7fc fcca 	bl	b4910 <__cxa_guard_release>
   b7f7c:	4804      	ldr	r0, [pc, #16]	; (b7f90 <_Z22__fetch_global_Serial1v+0x44>)
   b7f7e:	f000 f80e 	bl	b7f9e <atexit>
    return serial1;
}
   b7f82:	4802      	ldr	r0, [pc, #8]	; (b7f8c <_Z22__fetch_global_Serial1v+0x40>)
   b7f84:	b007      	add	sp, #28
   b7f86:	bd30      	pop	{r4, r5, pc}
   b7f88:	2003e744 	.word	0x2003e744
   b7f8c:	2003e748 	.word	0x2003e748
   b7f90:	000b7f15 	.word	0x000b7f15

000b7f94 <_ZnajRKSt9nothrow_t>:
   b7f94:	f7fc bcb3 	b.w	b48fe <_Znaj>

000b7f98 <_ZSt25__throw_bad_function_callv>:
   b7f98:	b508      	push	{r3, lr}
   b7f9a:	f7fe fc01 	bl	b67a0 <abort>

000b7f9e <atexit>:
   b7f9e:	2300      	movs	r3, #0
   b7fa0:	4601      	mov	r1, r0
   b7fa2:	461a      	mov	r2, r3
   b7fa4:	4618      	mov	r0, r3
   b7fa6:	f000 b97d 	b.w	b82a4 <__register_exitproc>

000b7faa <atoi>:
   b7faa:	220a      	movs	r2, #10
   b7fac:	2100      	movs	r1, #0
   b7fae:	f000 b96f 	b.w	b8290 <strtol>

000b7fb2 <memcpy>:
   b7fb2:	440a      	add	r2, r1
   b7fb4:	4291      	cmp	r1, r2
   b7fb6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7fba:	d100      	bne.n	b7fbe <memcpy+0xc>
   b7fbc:	4770      	bx	lr
   b7fbe:	b510      	push	{r4, lr}
   b7fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7fc8:	4291      	cmp	r1, r2
   b7fca:	d1f9      	bne.n	b7fc0 <memcpy+0xe>
   b7fcc:	bd10      	pop	{r4, pc}

000b7fce <memset>:
   b7fce:	4402      	add	r2, r0
   b7fd0:	4603      	mov	r3, r0
   b7fd2:	4293      	cmp	r3, r2
   b7fd4:	d100      	bne.n	b7fd8 <memset+0xa>
   b7fd6:	4770      	bx	lr
   b7fd8:	f803 1b01 	strb.w	r1, [r3], #1
   b7fdc:	e7f9      	b.n	b7fd2 <memset+0x4>
	...

000b7fe0 <srand>:
   b7fe0:	b538      	push	{r3, r4, r5, lr}
   b7fe2:	4b10      	ldr	r3, [pc, #64]	; (b8024 <srand+0x44>)
   b7fe4:	681d      	ldr	r5, [r3, #0]
   b7fe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7fe8:	4604      	mov	r4, r0
   b7fea:	b9b3      	cbnz	r3, b801a <srand+0x3a>
   b7fec:	2018      	movs	r0, #24
   b7fee:	f7fe fbb7 	bl	b6760 <malloc>
   b7ff2:	4602      	mov	r2, r0
   b7ff4:	63a8      	str	r0, [r5, #56]	; 0x38
   b7ff6:	b920      	cbnz	r0, b8002 <srand+0x22>
   b7ff8:	4b0b      	ldr	r3, [pc, #44]	; (b8028 <srand+0x48>)
   b7ffa:	480c      	ldr	r0, [pc, #48]	; (b802c <srand+0x4c>)
   b7ffc:	2142      	movs	r1, #66	; 0x42
   b7ffe:	f7fe fbe7 	bl	b67d0 <__assert_func>
   b8002:	490b      	ldr	r1, [pc, #44]	; (b8030 <srand+0x50>)
   b8004:	4b0b      	ldr	r3, [pc, #44]	; (b8034 <srand+0x54>)
   b8006:	e9c0 1300 	strd	r1, r3, [r0]
   b800a:	4b0b      	ldr	r3, [pc, #44]	; (b8038 <srand+0x58>)
   b800c:	6083      	str	r3, [r0, #8]
   b800e:	230b      	movs	r3, #11
   b8010:	8183      	strh	r3, [r0, #12]
   b8012:	2100      	movs	r1, #0
   b8014:	2001      	movs	r0, #1
   b8016:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b801a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b801c:	2200      	movs	r2, #0
   b801e:	611c      	str	r4, [r3, #16]
   b8020:	615a      	str	r2, [r3, #20]
   b8022:	bd38      	pop	{r3, r4, r5, pc}
   b8024:	2003de50 	.word	0x2003de50
   b8028:	000bbd91 	.word	0x000bbd91
   b802c:	000bbda8 	.word	0x000bbda8
   b8030:	abcd330e 	.word	0xabcd330e
   b8034:	e66d1234 	.word	0xe66d1234
   b8038:	0005deec 	.word	0x0005deec

000b803c <strcpy>:
   b803c:	4603      	mov	r3, r0
   b803e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b8042:	f803 2b01 	strb.w	r2, [r3], #1
   b8046:	2a00      	cmp	r2, #0
   b8048:	d1f9      	bne.n	b803e <strcpy+0x2>
   b804a:	4770      	bx	lr

000b804c <strdup>:
   b804c:	4b02      	ldr	r3, [pc, #8]	; (b8058 <strdup+0xc>)
   b804e:	4601      	mov	r1, r0
   b8050:	6818      	ldr	r0, [r3, #0]
   b8052:	f000 b803 	b.w	b805c <_strdup_r>
   b8056:	bf00      	nop
   b8058:	2003de50 	.word	0x2003de50

000b805c <_strdup_r>:
   b805c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b805e:	4604      	mov	r4, r0
   b8060:	4608      	mov	r0, r1
   b8062:	460d      	mov	r5, r1
   b8064:	f7fc fc06 	bl	b4874 <strlen>
   b8068:	1c42      	adds	r2, r0, #1
   b806a:	4611      	mov	r1, r2
   b806c:	4620      	mov	r0, r4
   b806e:	9201      	str	r2, [sp, #4]
   b8070:	f7fe fb9e 	bl	b67b0 <_malloc_r>
   b8074:	4604      	mov	r4, r0
   b8076:	b118      	cbz	r0, b8080 <_strdup_r+0x24>
   b8078:	9a01      	ldr	r2, [sp, #4]
   b807a:	4629      	mov	r1, r5
   b807c:	f7ff ff99 	bl	b7fb2 <memcpy>
   b8080:	4620      	mov	r0, r4
   b8082:	b003      	add	sp, #12
   b8084:	bd30      	pop	{r4, r5, pc}

000b8086 <strncmp>:
   b8086:	b510      	push	{r4, lr}
   b8088:	b17a      	cbz	r2, b80aa <strncmp+0x24>
   b808a:	4603      	mov	r3, r0
   b808c:	3901      	subs	r1, #1
   b808e:	1884      	adds	r4, r0, r2
   b8090:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8094:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8098:	4290      	cmp	r0, r2
   b809a:	d101      	bne.n	b80a0 <strncmp+0x1a>
   b809c:	42a3      	cmp	r3, r4
   b809e:	d101      	bne.n	b80a4 <strncmp+0x1e>
   b80a0:	1a80      	subs	r0, r0, r2
   b80a2:	bd10      	pop	{r4, pc}
   b80a4:	2800      	cmp	r0, #0
   b80a6:	d1f3      	bne.n	b8090 <strncmp+0xa>
   b80a8:	e7fa      	b.n	b80a0 <strncmp+0x1a>
   b80aa:	4610      	mov	r0, r2
   b80ac:	e7f9      	b.n	b80a2 <strncmp+0x1c>

000b80ae <strncpy>:
   b80ae:	b510      	push	{r4, lr}
   b80b0:	3901      	subs	r1, #1
   b80b2:	4603      	mov	r3, r0
   b80b4:	b132      	cbz	r2, b80c4 <strncpy+0x16>
   b80b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b80ba:	f803 4b01 	strb.w	r4, [r3], #1
   b80be:	3a01      	subs	r2, #1
   b80c0:	2c00      	cmp	r4, #0
   b80c2:	d1f7      	bne.n	b80b4 <strncpy+0x6>
   b80c4:	441a      	add	r2, r3
   b80c6:	2100      	movs	r1, #0
   b80c8:	4293      	cmp	r3, r2
   b80ca:	d100      	bne.n	b80ce <strncpy+0x20>
   b80cc:	bd10      	pop	{r4, pc}
   b80ce:	f803 1b01 	strb.w	r1, [r3], #1
   b80d2:	e7f9      	b.n	b80c8 <strncpy+0x1a>

000b80d4 <strtok>:
   b80d4:	4b16      	ldr	r3, [pc, #88]	; (b8130 <strtok+0x5c>)
   b80d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80d8:	681e      	ldr	r6, [r3, #0]
   b80da:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b80dc:	4605      	mov	r5, r0
   b80de:	b9fc      	cbnz	r4, b8120 <strtok+0x4c>
   b80e0:	2050      	movs	r0, #80	; 0x50
   b80e2:	9101      	str	r1, [sp, #4]
   b80e4:	f7fe fb3c 	bl	b6760 <malloc>
   b80e8:	9901      	ldr	r1, [sp, #4]
   b80ea:	65b0      	str	r0, [r6, #88]	; 0x58
   b80ec:	4602      	mov	r2, r0
   b80ee:	b920      	cbnz	r0, b80fa <strtok+0x26>
   b80f0:	4b10      	ldr	r3, [pc, #64]	; (b8134 <strtok+0x60>)
   b80f2:	4811      	ldr	r0, [pc, #68]	; (b8138 <strtok+0x64>)
   b80f4:	2157      	movs	r1, #87	; 0x57
   b80f6:	f7fe fb6b 	bl	b67d0 <__assert_func>
   b80fa:	e9c0 4400 	strd	r4, r4, [r0]
   b80fe:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b8102:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b8106:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b810a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b810e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b8112:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b8116:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b811a:	6184      	str	r4, [r0, #24]
   b811c:	7704      	strb	r4, [r0, #28]
   b811e:	6244      	str	r4, [r0, #36]	; 0x24
   b8120:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b8122:	2301      	movs	r3, #1
   b8124:	4628      	mov	r0, r5
   b8126:	b002      	add	sp, #8
   b8128:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b812c:	f000 b806 	b.w	b813c <__strtok_r>
   b8130:	2003de50 	.word	0x2003de50
   b8134:	000bbd91 	.word	0x000bbd91
   b8138:	000bbe01 	.word	0x000bbe01

000b813c <__strtok_r>:
   b813c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b813e:	b908      	cbnz	r0, b8144 <__strtok_r+0x8>
   b8140:	6810      	ldr	r0, [r2, #0]
   b8142:	b188      	cbz	r0, b8168 <__strtok_r+0x2c>
   b8144:	4604      	mov	r4, r0
   b8146:	4620      	mov	r0, r4
   b8148:	f814 5b01 	ldrb.w	r5, [r4], #1
   b814c:	460f      	mov	r7, r1
   b814e:	f817 6b01 	ldrb.w	r6, [r7], #1
   b8152:	b91e      	cbnz	r6, b815c <__strtok_r+0x20>
   b8154:	b965      	cbnz	r5, b8170 <__strtok_r+0x34>
   b8156:	6015      	str	r5, [r2, #0]
   b8158:	4628      	mov	r0, r5
   b815a:	e005      	b.n	b8168 <__strtok_r+0x2c>
   b815c:	42b5      	cmp	r5, r6
   b815e:	d1f6      	bne.n	b814e <__strtok_r+0x12>
   b8160:	2b00      	cmp	r3, #0
   b8162:	d1f0      	bne.n	b8146 <__strtok_r+0xa>
   b8164:	6014      	str	r4, [r2, #0]
   b8166:	7003      	strb	r3, [r0, #0]
   b8168:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b816a:	461c      	mov	r4, r3
   b816c:	e00c      	b.n	b8188 <__strtok_r+0x4c>
   b816e:	b915      	cbnz	r5, b8176 <__strtok_r+0x3a>
   b8170:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8174:	460e      	mov	r6, r1
   b8176:	f816 5b01 	ldrb.w	r5, [r6], #1
   b817a:	42ab      	cmp	r3, r5
   b817c:	d1f7      	bne.n	b816e <__strtok_r+0x32>
   b817e:	2b00      	cmp	r3, #0
   b8180:	d0f3      	beq.n	b816a <__strtok_r+0x2e>
   b8182:	2300      	movs	r3, #0
   b8184:	f804 3c01 	strb.w	r3, [r4, #-1]
   b8188:	6014      	str	r4, [r2, #0]
   b818a:	e7ed      	b.n	b8168 <__strtok_r+0x2c>

000b818c <_strtol_l.constprop.0>:
   b818c:	2b01      	cmp	r3, #1
   b818e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8192:	d001      	beq.n	b8198 <_strtol_l.constprop.0+0xc>
   b8194:	2b24      	cmp	r3, #36	; 0x24
   b8196:	d906      	bls.n	b81a6 <_strtol_l.constprop.0+0x1a>
   b8198:	f7fe fb12 	bl	b67c0 <__errno>
   b819c:	2316      	movs	r3, #22
   b819e:	6003      	str	r3, [r0, #0]
   b81a0:	2000      	movs	r0, #0
   b81a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b81a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b828c <_strtol_l.constprop.0+0x100>
   b81aa:	460d      	mov	r5, r1
   b81ac:	462e      	mov	r6, r5
   b81ae:	f815 4b01 	ldrb.w	r4, [r5], #1
   b81b2:	f814 700c 	ldrb.w	r7, [r4, ip]
   b81b6:	f017 0708 	ands.w	r7, r7, #8
   b81ba:	d1f7      	bne.n	b81ac <_strtol_l.constprop.0+0x20>
   b81bc:	2c2d      	cmp	r4, #45	; 0x2d
   b81be:	d132      	bne.n	b8226 <_strtol_l.constprop.0+0x9a>
   b81c0:	782c      	ldrb	r4, [r5, #0]
   b81c2:	2701      	movs	r7, #1
   b81c4:	1cb5      	adds	r5, r6, #2
   b81c6:	2b00      	cmp	r3, #0
   b81c8:	d05b      	beq.n	b8282 <_strtol_l.constprop.0+0xf6>
   b81ca:	2b10      	cmp	r3, #16
   b81cc:	d109      	bne.n	b81e2 <_strtol_l.constprop.0+0x56>
   b81ce:	2c30      	cmp	r4, #48	; 0x30
   b81d0:	d107      	bne.n	b81e2 <_strtol_l.constprop.0+0x56>
   b81d2:	782c      	ldrb	r4, [r5, #0]
   b81d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b81d8:	2c58      	cmp	r4, #88	; 0x58
   b81da:	d14d      	bne.n	b8278 <_strtol_l.constprop.0+0xec>
   b81dc:	786c      	ldrb	r4, [r5, #1]
   b81de:	2310      	movs	r3, #16
   b81e0:	3502      	adds	r5, #2
   b81e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b81e6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b81ea:	f04f 0c00 	mov.w	ip, #0
   b81ee:	fbb8 f9f3 	udiv	r9, r8, r3
   b81f2:	4666      	mov	r6, ip
   b81f4:	fb03 8a19 	mls	sl, r3, r9, r8
   b81f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b81fc:	f1be 0f09 	cmp.w	lr, #9
   b8200:	d816      	bhi.n	b8230 <_strtol_l.constprop.0+0xa4>
   b8202:	4674      	mov	r4, lr
   b8204:	42a3      	cmp	r3, r4
   b8206:	dd24      	ble.n	b8252 <_strtol_l.constprop.0+0xc6>
   b8208:	f1bc 0f00 	cmp.w	ip, #0
   b820c:	db1e      	blt.n	b824c <_strtol_l.constprop.0+0xc0>
   b820e:	45b1      	cmp	r9, r6
   b8210:	d31c      	bcc.n	b824c <_strtol_l.constprop.0+0xc0>
   b8212:	d101      	bne.n	b8218 <_strtol_l.constprop.0+0x8c>
   b8214:	45a2      	cmp	sl, r4
   b8216:	db19      	blt.n	b824c <_strtol_l.constprop.0+0xc0>
   b8218:	fb06 4603 	mla	r6, r6, r3, r4
   b821c:	f04f 0c01 	mov.w	ip, #1
   b8220:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8224:	e7e8      	b.n	b81f8 <_strtol_l.constprop.0+0x6c>
   b8226:	2c2b      	cmp	r4, #43	; 0x2b
   b8228:	bf04      	itt	eq
   b822a:	782c      	ldrbeq	r4, [r5, #0]
   b822c:	1cb5      	addeq	r5, r6, #2
   b822e:	e7ca      	b.n	b81c6 <_strtol_l.constprop.0+0x3a>
   b8230:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8234:	f1be 0f19 	cmp.w	lr, #25
   b8238:	d801      	bhi.n	b823e <_strtol_l.constprop.0+0xb2>
   b823a:	3c37      	subs	r4, #55	; 0x37
   b823c:	e7e2      	b.n	b8204 <_strtol_l.constprop.0+0x78>
   b823e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8242:	f1be 0f19 	cmp.w	lr, #25
   b8246:	d804      	bhi.n	b8252 <_strtol_l.constprop.0+0xc6>
   b8248:	3c57      	subs	r4, #87	; 0x57
   b824a:	e7db      	b.n	b8204 <_strtol_l.constprop.0+0x78>
   b824c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8250:	e7e6      	b.n	b8220 <_strtol_l.constprop.0+0x94>
   b8252:	f1bc 0f00 	cmp.w	ip, #0
   b8256:	da05      	bge.n	b8264 <_strtol_l.constprop.0+0xd8>
   b8258:	2322      	movs	r3, #34	; 0x22
   b825a:	6003      	str	r3, [r0, #0]
   b825c:	4646      	mov	r6, r8
   b825e:	b942      	cbnz	r2, b8272 <_strtol_l.constprop.0+0xe6>
   b8260:	4630      	mov	r0, r6
   b8262:	e79e      	b.n	b81a2 <_strtol_l.constprop.0+0x16>
   b8264:	b107      	cbz	r7, b8268 <_strtol_l.constprop.0+0xdc>
   b8266:	4276      	negs	r6, r6
   b8268:	2a00      	cmp	r2, #0
   b826a:	d0f9      	beq.n	b8260 <_strtol_l.constprop.0+0xd4>
   b826c:	f1bc 0f00 	cmp.w	ip, #0
   b8270:	d000      	beq.n	b8274 <_strtol_l.constprop.0+0xe8>
   b8272:	1e69      	subs	r1, r5, #1
   b8274:	6011      	str	r1, [r2, #0]
   b8276:	e7f3      	b.n	b8260 <_strtol_l.constprop.0+0xd4>
   b8278:	2430      	movs	r4, #48	; 0x30
   b827a:	2b00      	cmp	r3, #0
   b827c:	d1b1      	bne.n	b81e2 <_strtol_l.constprop.0+0x56>
   b827e:	2308      	movs	r3, #8
   b8280:	e7af      	b.n	b81e2 <_strtol_l.constprop.0+0x56>
   b8282:	2c30      	cmp	r4, #48	; 0x30
   b8284:	d0a5      	beq.n	b81d2 <_strtol_l.constprop.0+0x46>
   b8286:	230a      	movs	r3, #10
   b8288:	e7ab      	b.n	b81e2 <_strtol_l.constprop.0+0x56>
   b828a:	bf00      	nop
   b828c:	000bbe5d 	.word	0x000bbe5d

000b8290 <strtol>:
   b8290:	4613      	mov	r3, r2
   b8292:	460a      	mov	r2, r1
   b8294:	4601      	mov	r1, r0
   b8296:	4802      	ldr	r0, [pc, #8]	; (b82a0 <strtol+0x10>)
   b8298:	6800      	ldr	r0, [r0, #0]
   b829a:	f7ff bf77 	b.w	b818c <_strtol_l.constprop.0>
   b829e:	bf00      	nop
   b82a0:	2003de50 	.word	0x2003de50

000b82a4 <__register_exitproc>:
   b82a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b82a8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8364 <__register_exitproc+0xc0>
   b82ac:	4606      	mov	r6, r0
   b82ae:	f8d8 0000 	ldr.w	r0, [r8]
   b82b2:	461f      	mov	r7, r3
   b82b4:	460d      	mov	r5, r1
   b82b6:	4691      	mov	r9, r2
   b82b8:	f000 f856 	bl	b8368 <__retarget_lock_acquire_recursive>
   b82bc:	4b25      	ldr	r3, [pc, #148]	; (b8354 <__register_exitproc+0xb0>)
   b82be:	681c      	ldr	r4, [r3, #0]
   b82c0:	b934      	cbnz	r4, b82d0 <__register_exitproc+0x2c>
   b82c2:	4c25      	ldr	r4, [pc, #148]	; (b8358 <__register_exitproc+0xb4>)
   b82c4:	601c      	str	r4, [r3, #0]
   b82c6:	4b25      	ldr	r3, [pc, #148]	; (b835c <__register_exitproc+0xb8>)
   b82c8:	b113      	cbz	r3, b82d0 <__register_exitproc+0x2c>
   b82ca:	681b      	ldr	r3, [r3, #0]
   b82cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b82d0:	6863      	ldr	r3, [r4, #4]
   b82d2:	2b1f      	cmp	r3, #31
   b82d4:	dd07      	ble.n	b82e6 <__register_exitproc+0x42>
   b82d6:	f8d8 0000 	ldr.w	r0, [r8]
   b82da:	f000 f847 	bl	b836c <__retarget_lock_release_recursive>
   b82de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b82e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b82e6:	b34e      	cbz	r6, b833c <__register_exitproc+0x98>
   b82e8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b82ec:	b988      	cbnz	r0, b8312 <__register_exitproc+0x6e>
   b82ee:	4b1c      	ldr	r3, [pc, #112]	; (b8360 <__register_exitproc+0xbc>)
   b82f0:	b923      	cbnz	r3, b82fc <__register_exitproc+0x58>
   b82f2:	f8d8 0000 	ldr.w	r0, [r8]
   b82f6:	f000 f838 	bl	b836a <__retarget_lock_release>
   b82fa:	e7f0      	b.n	b82de <__register_exitproc+0x3a>
   b82fc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8300:	f7fe fa2e 	bl	b6760 <malloc>
   b8304:	2800      	cmp	r0, #0
   b8306:	d0f4      	beq.n	b82f2 <__register_exitproc+0x4e>
   b8308:	2300      	movs	r3, #0
   b830a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b830e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8312:	6863      	ldr	r3, [r4, #4]
   b8314:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8318:	2201      	movs	r2, #1
   b831a:	409a      	lsls	r2, r3
   b831c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8320:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8324:	4313      	orrs	r3, r2
   b8326:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b832a:	2e02      	cmp	r6, #2
   b832c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8330:	bf02      	ittt	eq
   b8332:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8336:	4313      	orreq	r3, r2
   b8338:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b833c:	6863      	ldr	r3, [r4, #4]
   b833e:	f8d8 0000 	ldr.w	r0, [r8]
   b8342:	1c5a      	adds	r2, r3, #1
   b8344:	3302      	adds	r3, #2
   b8346:	6062      	str	r2, [r4, #4]
   b8348:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b834c:	f000 f80e 	bl	b836c <__retarget_lock_release_recursive>
   b8350:	2000      	movs	r0, #0
   b8352:	e7c6      	b.n	b82e2 <__register_exitproc+0x3e>
   b8354:	2003e7e8 	.word	0x2003e7e8
   b8358:	2003e75c 	.word	0x2003e75c
   b835c:	00000000 	.word	0x00000000
   b8360:	000b6761 	.word	0x000b6761
   b8364:	2003deb4 	.word	0x2003deb4

000b8368 <__retarget_lock_acquire_recursive>:
   b8368:	4770      	bx	lr

000b836a <__retarget_lock_release>:
   b836a:	4770      	bx	lr

000b836c <__retarget_lock_release_recursive>:
   b836c:	4770      	bx	lr

000b836e <link_code_end>:
	...

000b8370 <dynalib_user>:
   b8370:	4885 000b 48c1 000b 48e9 000b 48ed 000b     .H...H...H...H..
   b8380:	0000 0000 7055 6164 6974 676e 4520 502d     ....Updating E-P
   b8390:	7061 7265 4420 7369 6c70 7961 0a0d 0020     aper Display.. .
   b83a0:	6146 6c69 6465 7420 206f 6e69 7469 6169     Failed to initia
   b83b0:	696c 657a 6420 7369 6c70 7961 5400 5449     lize display.TIT
   b83c0:	454c 5300 6174 7472 0020 6954 656d 4500     LE.Start .Time.E
   b83d0:	646e 2020 0020 4142 5454 5245 2059 0025     nd   .BATTERY %.
   b83e0:	6954 656d 5a20 6e6f 0065 4e49 5453 5552     Time Zone.INSTRU
   b83f0:	5443 524f 003a 7453 7261 6873 7069 4920     CTOR:.Starship I
   b8400:	5446 2033 202d 5700 6168 2074 6f74 6520     FT3 - .What to e
   b8410:	7078 6365 2074 6600 6f72 206d 6874 2065     xpect .from the 
   b8420:	656e 7478 0020 6c66 6769 7468 7420 7365     next .flight tes
   b8430:	0074 3025 6932 4100 004d 4d50 2d00 5400     t.%02i.AM.PM.-.T
   b8440:	7c00 0a00 4300 6c61 696c 676e 4520 646e     .|...Calling End
   b8450:	5020 696f 746e 6620 6e75 7463 6f69 2e6e      Point function.
   b8460:	2e2e 6600 6572 2065 656d 6f6d 7972 203a     ...free memory: 
   b8470:	4900 2046 7453 7461 6d65 6e65 2074 7865     .IF Statement ex
   b8480:	6365 7475 6e69 0067 6f68 6b6f 722d 7365     ecuting.hook-res
   b8490:	6f70 736e 2f65 6567 5f74 6164 6174 4900     ponse/get_data.I
   b84a0:	696e 6974 6c61 7a69 6e69 2067 4e50 3335     nitializing PN53
   b84b0:	0032 6553 646e 6e69 2067 4652 4449 6420     2.Sending RFID d
   b84c0:	7461 0061 227b 6353 6e61 2273 5b3a 227b     ata.{"Scans":[{"
   b84d0:	7645 6e65 4974 2264 253a 2c64 5222 6165     EventId":%d,"Rea
   b84e0:	6564 4d72 646f 2265 223a 7325 2c22 5422     derMode":"%s","T
   b84f0:	6d69 5365 6174 706d 3a22 2522 2273 222c     imeStamp":"%s","
   b8500:	6449 6e65 6974 6966 7265 3a22 2522 2273     Identifier":"%s"
   b8510:	2c7d 227b 7645 6e65 4974 2264 253a 2c64     },{"EventId":%d,
   b8520:	5222 6165 6564 4d72 646f 2265 223a 7325     "ReaderMode":"%s
   b8530:	2c22 5422 6d69 5365 6174 706d 3a22 2522     ","TimeStamp":"%
   b8540:	2273 222c 6449 6e65 6974 6966 7265 3a22     s","Identifier":
   b8550:	2522 2273 5d7d 007d 6544 6976 6563 6420     "%s"}]}.Device d
   b8560:	7461 0061 6c43 6165 6972 676e 5320 7274     ata.Clearing Str
   b8570:	6e69 2067 7562 6666 7265 4600 4941 454c     ing buffer.FAILE
   b8580:	2044 202d 4c50 4145 4553 5320 4143 204e     D - PLEASE SCAN 
   b8590:	4741 4941 214e 2c00 5000 6275 696c 6873     AGAIN!.,.Publish
   b85a0:	6420 7461 2061 6e6f 6320 756f 746e 5000      data on count.P
   b85b0:	6275 696c 6873 6420 7461 2061 6e6f 7420     ublish data on t
   b85c0:	6d69 0065 444c 204f 6944 6373 6e6f 656e     ime.LDO Disconne
   b85d0:	7463 6465 6400 6665 7561 746c 0020 534d     cted.default .MS
   b85e0:	0042 534c 0042 533c 4950 6553 7474 6e69     B.LSB.<SPISettin
   b85f0:	7367 6420 6665 7561 746c 003e 533c 4950     gs default>.<SPI
   b8600:	6553 7474 6e69 7367 2520 2573 2075 7325     Settings %s%u %s
   b8610:	4d20 444f 2545 3e75 0000 0000                MODE%u>....

000b861c <_ZTVN8particle11SPISettingsE>:
	...
   b8624:	58d9 000b 58ab 000b 58ad 000b               .X...X...X..

000b8630 <_ZL12Font16_Table>:
	...
   b8650:	0000 000c 000c 000c 000c 000c 000c 000c     ................
   b8660:	000c 0000 000c 0000 0000 0000 0000 0000     ................
   b8670:	0000 0000 c01d c01d 8008 8008 8008 0000     ................
	...
   b8690:	0000 800d 800d 800d 800d c03f 001b c03f     ..........?...?.
   b86a0:	001b 001b 001b 001b 0000 0000 0000 0000     ................
   b86b0:	0004 801f 8031 8031 0038 001e 000f 8003     ....1.1.8.......
   b86c0:	8031 8031 003f 0004 0004 0000 0000 0000     1.1.?...........
   b86d0:	0000 0018 0024 0024 c018 8007 001e 8031     ....$.$.......1.
   b86e0:	4002 4002 8001 0000 0000 0000 0000 0000     .@.@............
   b86f0:	0000 0000 000f 0018 0018 0018 000c 801d     ................
   b8700:	0037 0033 801d 0000 0000 0000 0000 0000     7.3.............
   b8710:	0000 0000 0007 0007 0002 0002 0002 0000     ................
	...
   b8730:	0000 0003 0003 0006 000e 000c 000c 000c     ................
   b8740:	000c 000e 0006 0003 0003 0000 0000 0000     ................
   b8750:	0000 0018 0018 000c 0006 0006 0006 0006     ................
   b8760:	0006 0006 000c 001c 0018 0000 0000 0000     ................
   b8770:	0000 0006 0006 c03f c03f 000f 801f 8019     ......?.?.......
	...
   b8794:	0000 0004 0004 0004 803f 0004 0004 0004     ........?.......
	...
   b87c0:	0000 0006 0004 000c 0008 0008 0000 0000     ................
	...
   b87dc:	803f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   b8800:	0000 000c 000c 0000 0000 0000 0000 0000     ................
   b8810:	c000 c000 8001 8001 0003 0003 0006 000c     ................
   b8820:	000c 0018 0018 0030 0030 0000 0000 0000     ......0.0.......
   b8830:	0000 000e 001b 8031 8031 8031 8031 8031     ......1.1.1.1.1.
   b8840:	8031 001b 000e 0000 0000 0000 0000 0000     1...............
   b8850:	0000 0006 003e 0006 0006 0006 0006 0006     ....>...........
   b8860:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
   b8870:	0000 000f 8019 8031 8031 0003 0006 000c     ......1.1.......
   b8880:	0018 0030 803f 0000 0000 0000 0000 0000     ..0.?...........
   b8890:	0000 003f 8061 8001 0003 001f 8003 8001     ..?.a...........
   b88a0:	8001 8061 003f 0000 0000 0000 0000 0000     ..a.?...........
   b88b0:	0000 0007 0007 000f 000b 001b 0013 0033     ..............3.
   b88c0:	803f 0003 800f 0000 0000 0000 0000 0000     ?...............
   b88d0:	0000 801f 0018 0018 0018 001f 8011 8001     ................
   b88e0:	8001 8021 001f 0000 0000 0000 0000 0000     ..!.............
   b88f0:	0000 8007 001c 0018 0030 0037 8039 8031     ........0.7.9.1.
   b8900:	8031 8019 000f 0000 0000 0000 0000 0000     1...............
   b8910:	0000 007f 0043 0003 0006 0006 0006 0006     ....C...........
   b8920:	000c 000c 000c 0000 0000 0000 0000 0000     ................
   b8930:	0000 001f 8031 8031 8031 001f 8031 8031     ....1.1.1...1.1.
   b8940:	8031 8031 001f 0000 0000 0000 0000 0000     1.1.............
   b8950:	0000 001e 0033 8031 8031 8033 801d 8001     ....3.1.1.3.....
   b8960:	0003 0007 003c 0000 0000 0000 0000 0000     ....<...........
	...
   b8978:	000c 000c 0000 0000 0000 000c 000c 0000     ................
	...
   b8998:	0003 0003 0000 0000 0000 0006 0004 0008     ................
   b89a8:	0008 0000 0000 0000 0000 0000 c000 0003     ................
   b89b8:	0004 0018 0060 0018 0004 0003 c000 0000     ....`...........
	...
   b89d8:	0000 c07f 0000 c07f 0000 0000 0000 0000     ................
	...
   b89f4:	0060 0018 0004 0003 c000 0003 0004 0018     `...............
   b8a04:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
   b8a14:	001f 8031 8031 8001 0007 000c 000c 0000     ..1.1...........
   b8a24:	000c 0000 0000 0000 0000 0000 0000 000e     ................
   b8a34:	0011 0021 0021 0027 0029 0029 0027 0020     ..!.!.'.).).'. .
   b8a44:	0011 000e 0000 0000 0000 0000 0000 0000     ................
   b8a54:	003f 000f 0009 8019 8019 801f c030 c030     ?...........0.0.
   b8a64:	e079 0000 0000 0000 0000 0000 0000 0000     y...............
   b8a74:	007f 8031 8031 8031 003f 8031 8031 8031     ..1.1.1.?.1.1.1.
   b8a84:	007f 0000 0000 0000 0000 0000 0000 0000     ................
   b8a94:	401f c030 4060 0060 0060 0060 4060 8030     .@0.`@`.`.`.`@0.
   b8aa4:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8ab4:	007f 8031 c030 c030 c030 c030 c030 8031     ..1.0.0.0.0.0.1.
   b8ac4:	007f 0000 0000 0000 0000 0000 0000 0000     ................
   b8ad4:	807f 8030 8030 0032 003e 0032 8030 8030     ..0.0.2.>.2.0.0.
   b8ae4:	807f 0000 0000 0000 0000 0000 0000 0000     ................
   b8af4:	c07f 4030 4030 0032 003e 0032 0030 0030     ..0@0@2.>.2.0.0.
   b8b04:	007c 0000 0000 0000 0000 0000 0000 0000     |...............
   b8b14:	801e 8031 8060 0060 0060 c067 8061 8031     ..1.`.`.`.g.a.1.
   b8b24:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8b34:	c07b 8031 8031 8031 803f 8031 8031 8031     {.1.1.1.?.1.1.1.
   b8b44:	c07b 0000 0000 0000 0000 0000 0000 0000     {...............
   b8b54:	c03f 0006 0006 0006 0006 0006 0006 0006     ?...............
   b8b64:	c03f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b8b74:	c01f 0003 0003 0003 0003 0063 0063 0063     ..........c.c.c.
   b8b84:	003e 0000 0000 0000 0000 0000 0000 0000     >...............
   b8b94:	c07b 8031 0033 0036 003c 003e 0033 8031     {.1.3.6.<.>.3.1.
   b8ba4:	c079 0000 0000 0000 0000 0000 0000 0000     y...............
   b8bb4:	007e 0018 0018 0018 0018 4018 4018 4018     ~..........@.@.@
   b8bc4:	c07f 0000 0000 0000 0000 0000 0000 0000     ................
   b8bd4:	e0e0 c060 c071 c07b c06a c06e c064 c060     ..`.q.{.j.n.d.`.
   b8be4:	e0fb 0000 0000 0000 0000 0000 0000 0000     ................
   b8bf4:	c073 8031 8039 803d 8035 8037 8033 8031     s.1.9.=.5.7.3.1.
   b8c04:	8079 0000 0000 0000 0000 0000 0000 0000     y...............
   b8c14:	001f 8031 c060 c060 c060 c060 c060 8031     ..1.`.`.`.`.`.1.
   b8c24:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8c34:	007f 8031 8031 8031 8031 003f 0030 0030     ..1.1.1.1.?.0.0.
   b8c44:	007e 0000 0000 0000 0000 0000 0000 0000     ~...............
   b8c54:	001f 8031 c060 c060 c060 c060 c060 8031     ..1.`.`.`.`.`.1.
   b8c64:	001f c00c 801f 0000 0000 0000 0000 0000     ................
   b8c74:	007f 8031 8031 8031 003e 0033 8031 8031     ..1.1.1.>.3.1.1.
   b8c84:	e07c 0000 0000 0000 0000 0000 0000 0000     |...............
   b8c94:	801f 8031 8031 0038 001f 8003 8031 8031     ..1.1.8.....1.1.
   b8ca4:	003f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b8cb4:	807f 804c 804c 804c 000c 000c 000c 000c     ..L.L.L.........
   b8cc4:	003f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b8cd4:	c07b 8031 8031 8031 8031 8031 8031 8031     {.1.1.1.1.1.1.1.
   b8ce4:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8cf4:	c07b 8031 8031 001b 001b 001b 000a 000e     {.1.1...........
   b8d04:	000e 0000 0000 0000 0000 0000 0000 0000     ................
   b8d14:	e0fb c060 c064 c06e c06e 802a 803b 803b     ..`.d.n.n.*.;.;.
   b8d24:	8031 0000 0000 0000 0000 0000 0000 0000     1...............
   b8d34:	c07b 8031 001b 000e 000e 000e 001b 8031     {.1...........1.
   b8d44:	c07b 0000 0000 0000 0000 0000 0000 0000     {...............
   b8d54:	e079 c030 8019 000f 0006 0006 0006 0006     y.0.............
   b8d64:	801f 0000 0000 0000 0000 0000 0000 0000     ................
   b8d74:	803f 8021 0023 0006 0004 000c 8018 8030     ?.!.#.........0.
   b8d84:	803f 0000 0000 0000 0000 0000 0000 8007     ?...............
   b8d94:	0006 0006 0006 0006 0006 0006 0006 0006     ................
   b8da4:	0006 0006 8007 0000 0000 0000 0030 0030     ............0.0.
   b8db4:	0018 0018 000c 000c 0006 0003 0003 8001     ................
   b8dc4:	8001 c000 c000 0000 0000 0000 0000 001e     ................
   b8dd4:	0006 0006 0006 0006 0006 0006 0006 0006     ................
   b8de4:	0006 0006 001e 0000 0000 0000 0004 000a     ................
   b8df4:	000a 0011 8020 8020 0000 0000 0000 0000     .... . .........
	...
   b8e2c:	0000 e0ff 0008 0004 0002 0000 0000 0000     ................
	...
   b8e58:	001f 8001 8001 801f 8031 8033 c01d 0000     ........1.3.....
	...
   b8e70:	0000 0070 0030 0030 0037 8039 c030 c030     ..p.0.0.7.9.0.0.
   b8e80:	c030 8039 0077 0000 0000 0000 0000 0000     0.9.w...........
	...
   b8e98:	801e 8031 8060 0060 8060 8031 001f 0000     ..1.`.`.`.1.....
	...
   b8eb0:	0000 8003 8001 8001 801d 8033 8061 8061     ..........3.a.a.
   b8ec0:	8061 8033 c01d 0000 0000 0000 0000 0000     a.3.............
	...
   b8ed8:	001f 8031 c060 c07f 0060 c030 801f 0000     ..1.`...`.0.....
	...
   b8ef0:	0000 e007 000c 000c 803f 000c 000c 000c     ........?.......
   b8f00:	000c 000c 803f 0000 0000 0000 0000 0000     ....?...........
	...
   b8f18:	c01d 8033 8061 8061 8061 8033 801d 8001     ..3.a.a.a.3.....
   b8f28:	8001 001f 0000 0000 0000 0070 0030 0030     ..........p.0.0.
   b8f38:	0037 8039 8031 8031 8031 8031 c07b 0000     7.9.1.1.1.1.{...
	...
   b8f50:	0000 0006 0006 0000 001e 0006 0006 0006     ................
   b8f60:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
   b8f70:	0000 0006 0006 0000 003f 0003 0003 0003     ........?.......
   b8f80:	0003 0003 0003 0003 0003 003e 0000 0000     ..........>.....
   b8f90:	0000 0070 0030 0030 8037 0036 003c 003c     ..p.0.0.7.6.<.<.
   b8fa0:	0036 0033 c077 0000 0000 0000 0000 0000     6.3.w...........
   b8fb0:	0000 001e 0006 0006 0006 0006 0006 0006     ................
   b8fc0:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
	...
   b8fd8:	807f c036 c036 c036 c036 c036 e076 0000     ..6.6.6.6.6.v...
	...
   b8ff8:	0077 8039 8031 8031 8031 8031 c07b 0000     w.9.1.1.1.1.{...
	...
   b9018:	001f 8031 c060 c060 c060 8031 001f 0000     ..1.`.`.`.1.....
	...
   b9038:	0077 8039 c030 c030 c030 8039 0037 0030     w.9.0.0.0.9.7.0.
   b9048:	0030 007c 0000 0000 0000 0000 0000 0000     0.|.............
   b9058:	c01d 8033 8061 8061 8061 8033 801d 8001     ..3.a.a.a.3.....
   b9068:	8001 c007 0000 0000 0000 0000 0000 0000     ................
   b9078:	807b c01c 0018 0018 0018 0018 007f 0000     {...............
	...
   b9098:	801f 8031 003c 001f 8003 8031 003f 0000     ..1.<.....1.?...
	...
   b90b0:	0000 0018 0018 0018 007f 0018 0018 0018     ................
   b90c0:	0018 8018 000f 0000 0000 0000 0000 0000     ................
	...
   b90d8:	8073 8031 8031 8031 8031 8033 c01d 0000     s.1.1.1.1.3.....
	...
   b90f8:	c07b 8031 8031 001b 001b 000e 000e 0000     {.1.1...........
	...
   b9118:	e0f1 c060 c064 c06e 803b 803b 8031 0000     ..`.d.n.;.;.1...
	...
   b9138:	c07b 001b 000e 000e 000e 001b c07b 0000     {...........{...
	...
   b9158:	e079 c030 8019 8019 000b 000f 0006 0006     y.0.............
   b9168:	000c 003e 0000 0000 0000 0000 0000 0000     ..>.............
   b9178:	803f 8021 0003 000e 0018 8030 803f 0000     ?.!.......0.?...
	...
   b9190:	0000 0006 000c 000c 000c 000c 000c 0018     ................
   b91a0:	000c 000c 000c 000c 0006 0000 0000 0000     ................
   b91b0:	0000 0006 0006 0006 0006 0006 0006 0006     ................
   b91c0:	0006 0006 0006 0006 0006 0000 0000 0000     ................
   b91d0:	0000 000c 0006 0006 0006 0006 0006 0003     ................
   b91e0:	0006 0006 0006 0006 000c 0000 0000 0000     ................
	...
   b91f8:	0000 0018 8024 0003 0000 0000 0000 0000     ....$...........
	...

000b9210 <_ZL12Font20_Table>:
	...
   b9238:	0000 0007 0007 0007 0007 0007 0007 0007     ................
   b9248:	0002 0002 0000 0000 0007 0007 0000 0000     ................
	...
   b9264:	e01c e01c e01c 4008 4008 4008 0000 0000     .......@.@.@....
	...
   b9288:	c00c c00c c00c c00c c00c f03f f03f c00c     ..........?.?...
   b9298:	c00c f03f f03f c00c c00c c00c c00c c00c     ..?.?...........
	...
   b92b0:	0003 0003 e007 e00f 6018 0018 001f c00f     .........`......
   b92c0:	e000 6018 6018 c01f 801f 0003 0003 0003     ...`.`..........
	...
   b92d8:	0000 001c 0022 0022 0022 601c e001 800f     ...."."."..`....
   b92e8:	003c c031 2002 2002 2002 c001 0000 0000     <.1.. . . ......
	...
   b9304:	0000 e003 e00f 000c 000c 0006 300f f01f     .............0..
   b9314:	e019 c018 f01f b007 0000 0000 0000 0000     ................
	...
   b932c:	8003 8003 8003 0001 0001 0001 0000 0000     ................
	...
   b9350:	0000 c000 c000 8001 8001 8001 0003 0003     ................
   b9360:	0003 0003 0003 0003 8001 8001 8001 c000     ................
   b9370:	c000 0000 0000 0000 0000 000c 000c 0006     ................
   b9380:	0006 0006 0003 0003 0003 0003 0003 0003     ................
   b9390:	0006 0006 0006 000c 000c 0000 0000 0000     ................
   b93a0:	0000 0003 0003 0003 601b e01f 8007 8007     .........`......
   b93b0:	c00f c00c 0000 0000 0000 0000 0000 0000     ................
	...
   b93cc:	0000 0003 0003 0003 0003 f03f f03f 0003     ..........?.?...
   b93dc:	0003 0003 0003 0000 0000 0000 0000 0000     ................
	...
   b9404:	0000 8003 0003 0003 0006 0006 0004 0000     ................
	...
   b9424:	0000 e03f e03f 0000 0000 0000 0000 0000     ..?.?...........
	...
   b9454:	0000 8003 8003 8003 0000 0000 0000 0000     ................
   b9464:	0000 0000 6000 6000 c000 c000 c000 8001     .....`.`........
   b9474:	8001 0003 0003 0006 0006 000c 000c 000c     ................
   b9484:	0018 0018 0000 0000 0000 0000 0000 800f     ................
   b9494:	c01f c018 6030 6030 6030 6030 6030 6030     ....0`0`0`0`0`0`
   b94a4:	6030 c018 c01f 800f 0000 0000 0000 0000     0`..............
   b94b4:	0000 0000 0000 0003 001f 001f 0003 0003     ................
   b94c4:	0003 0003 0003 0003 0003 0003 e01f e01f     ................
	...
   b94e0:	0000 800f c01f e038 6030 6000 c000 8001     ......8.0`.`....
   b94f0:	0003 0006 000c 0018 e03f e03f 0000 0000     ........?.?.....
	...
   b9508:	0000 800f c03f e030 6000 e000 c007 c007     ....?.0..`......
   b9518:	e000 6000 6000 e060 c07f 803f 0000 0000     ...`.``...?.....
	...
   b9530:	0000 c001 c003 c003 c006 c00c c00c c018     ................
   b9540:	c030 e03f e03f c000 e003 e003 0000 0000     0.?.?...........
	...
   b9558:	0000 c01f c01f 0018 0018 801f c01f e018     ................
   b9568:	6000 6000 6000 e030 c03f 801f 0000 0000     .`.`.`0.?.......
	...
   b9580:	0000 e003 e00f 001e 0018 0038 8037 c03f     ..........8.7.?.
   b9590:	e038 6030 6030 e018 c01f 8007 0000 0000     8.0`0`..........
	...
   b95a8:	0000 e03f e03f 6030 6000 c000 c000 c000     ..?.?.0`.`......
   b95b8:	8001 8001 8001 0003 0003 0003 0000 0000     ................
	...
   b95d0:	0000 800f c01f e038 6030 e038 c01f c01f     ......8.0`8.....
   b95e0:	e038 6030 6030 e038 c01f 800f 0000 0000     8.0`0`8.........
	...
   b95f8:	0000 000f c01f c038 6030 6030 e038 e01f     ......8.0`0`8...
   b9608:	600f e000 c000 c003 803f 003e 0000 0000     .`......?.>.....
	...
   b9628:	0000 8003 8003 8003 0000 0000 0000 8003     ................
   b9638:	8003 8003 0000 0000 0000 0000 0000 0000     ................
	...
   b9650:	0000 c001 c001 c001 0000 0000 0000 8003     ................
   b9660:	0003 0006 0006 0004 0000 0000 0000 0000     ................
   b9670:	0000 0000 0000 3000 f000 c003 0007 001c     .......0........
   b9680:	0078 001c 0007 c003 f000 3000 0000 0000     x..........0....
	...
   b96a0:	0000 f07f f07f 0000 0000 f07f f07f 0000     ................
	...
   b96c4:	0000 0030 003c 000f 8003 e000 7800 e000     ..0.<........x..
   b96d4:	8003 000f 003c 0030 0000 0000 0000 0000     ....<.0.........
	...
   b96ec:	800f c01f 6018 6018 6000 c001 8003 0003     .....`.`.`......
   b96fc:	0000 0000 0007 0007 0000 0000 0000 0000     ................
   b970c:	0000 0000 0000 8003 800c 4008 4010 4010     ...........@.@.@
   b971c:	c011 4012 4012 4012 c011 0010 0008 4008     ...@.@.@.......@
   b972c:	8007 0000 0000 0000 0000 0000 0000 0000     ................
   b973c:	801f 801f 8003 c006 c006 c00c 600c e01f     .............`..
   b974c:	e01f 3030 7878 7878 0000 0000 0000 0000     ..00xxxx........
	...
   b9764:	803f c03f 6018 6018 e018 c01f e01f 7018     ?.?..`.`.......p
   b9774:	3018 3018 f03f e03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b978c:	b007 f00f 701c 3038 0030 0030 0030 0030     .....p800.0.0.0.
   b979c:	3038 701c e00f c007 0000 0000 0000 0000     80.p............
	...
   b97b4:	807f c07f e030 7030 3030 3030 3030 3030     ....0.0p00000000
   b97c4:	7030 e030 c07f 807f 0000 0000 0000 0000     0p0.............
	...
   b97dc:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b97ec:	3018 3018 f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b9804:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b9814:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b982c:	b007 f01f 7018 3030 0030 0030 f831 f831     .....p000.0.1.1.
   b983c:	3030 3018 f01f c007 0000 0000 0000 0000     00.0............
	...
   b9854:	f03c f03c 6018 6018 6018 e01f e01f 6018     <.<..`.`.`.....`
   b9864:	6018 6018 f03c f03c 0000 0000 0000 0000     .`.`<.<.........
	...
   b987c:	e01f e01f 0003 0003 0003 0003 0003 0003     ................
   b988c:	0003 0003 e01f e01f 0000 0000 0000 0000     ................
	...
   b98a4:	f803 f803 6000 6000 6000 6000 6030 6030     .....`.`.`.`0`0`
   b98b4:	6030 e030 c03f 800f 0000 0000 0000 0000     0`0.?...........
	...
   b98cc:	f83e f83e e018 8019 001b 001f 801d c018     >.>.............
   b98dc:	c018 6018 783e 383e 0000 0000 0000 0000     ...`>x>8........
	...
   b98f4:	003f 003f 000c 000c 000c 000c 000c 300c     ?.?............0
   b9904:	300c 300c f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b991c:	7878 7878 7038 f03c b034 b037 b037 3033     xxxx8p<.4.7.7.30
   b992c:	3033 3030 f87c f87c 0000 0000 0000 0000     3000|.|.........
	...
   b9944:	f039 f03d 601c 601e 601e 601b 601b e019     9.=..`.`.`.`.`..
   b9954:	e019 e018 e03e 603e 0000 0000 0000 0000     ....>.>`........
	...
   b996c:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b997c:	7038 e01c c00f 8007 0000 0000 0000 0000     8p..............
	...
   b9994:	c03f e03f 7018 3018 3018 7018 e01f c01f     ?.?..p.0.0.p....
   b99a4:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b99bc:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b99cc:	7038 e01c c00f 8007 b007 f00f e00c 0000     8p..............
	...
   b99e4:	c03f e03f 7018 3018 7018 e01f c01f e018     ?.?..p.0.p......
   b99f4:	6018 7018 383e 183e 0000 0000 0000 0000     .`.p>8>.........
	...
   b9a0c:	b00f f01f 7038 3030 0038 801f e007 7000     ....8p008......p
   b9a1c:	3030 7038 e03f c037 0000 0000 0000 0000     008p?.7.........
	...
   b9a34:	f03f f03f 3033 3033 3033 0003 0003 0003     ?.?.303030......
   b9a44:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b9a5c:	f03c f03c 6018 6018 6018 6018 6018 6018     <.<..`.`.`.`.`.`
   b9a6c:	6018 e01c c00f 8007 0000 0000 0000 0000     .`..............
	...
   b9a84:	f078 f078 6030 6030 c018 c018 800d 800d     x.x.0`0`........
   b9a94:	800d 0007 0007 0007 0000 0000 0000 0000     ................
	...
   b9aac:	7c7c 7c7c 1830 9833 9833 9833 d836 d016     ||||0.3.3.3.6...
   b9abc:	701c 701c 701c 3018 0000 0000 0000 0000     .p.p.p.0........
	...
   b9ad4:	f078 f078 6030 c018 800d 0007 0007 800d     x.x.0`..........
   b9ae4:	c018 6030 f078 f078 0000 0000 0000 0000     ..0`x.x.........
	...
   b9afc:	f03c f03c 6018 c00c 8007 8007 0003 0003     <.<..`..........
   b9b0c:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b9b24:	e01f e01f 6018 c018 8001 0003 0003 0006     .....`..........
   b9b34:	600c 6018 e01f e01f 0000 0000 0000 0000     .`.`............
   b9b44:	0000 0000 0000 c003 c003 0003 0003 0003     ................
   b9b54:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b9b64:	0003 c003 c003 0000 0000 0000 0018 0018     ................
   b9b74:	000c 000c 000c 0006 0006 0003 0003 8001     ................
   b9b84:	8001 c000 c000 c000 6000 6000 0000 0000     .........`.`....
   b9b94:	0000 0000 0000 000f 000f 0003 0003 0003     ................
   b9ba4:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b9bb4:	0003 000f 000f 0000 0000 0000 0000 0002     ................
   b9bc4:	0007 800d c018 6030 2020 0000 0000 0000     ......0`  ......
	...
   b9c0c:	fcff fcff 0000 0004 0003 8000 0000 0000     ................
	...
   b9c40:	0000 c00f e01f 6000 e00f e01f 6038 e030     .......`....8`0.
   b9c50:	f03f 701f 0000 0000 0000 0000 0000 0000     ?..p............
   b9c60:	0000 0070 0070 0030 0030 8037 e03f 6038     ..p.p.0.0.7.?.8`
   b9c70:	3030 3030 3030 6038 e07f 8077 0000 0000     0000008`..w.....
	...
   b9c90:	0000 b007 f01f 3018 3030 0030 0030 3038     .......0000.0.80
   b9ca0:	f01f c00f 0000 0000 0000 0000 0000 0000     ................
   b9cb0:	0000 7000 7000 3000 3000 b007 f01f 7018     ...p.p.0.0.....p
   b9cc0:	3030 3030 3030 7038 f81f b807 0000 0000     0000008p........
	...
   b9ce0:	0000 8007 e01f 6018 f03f f03f 0030 3018     .......`?.?.0..0
   b9cf0:	f01f c007 0000 0000 0000 0000 0000 0000     ................
   b9d00:	0000 f003 f007 0006 0006 e01f e01f 0006     ................
   b9d10:	0006 0006 0006 0006 e01f e01f 0000 0000     ................
	...
   b9d30:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b9d40:	f01f b007 3000 7000 e00f c00f 0000 0000     .....0.p........
   b9d50:	0000 0038 0038 0018 0018 c01b e01f 601c     ..8.8..........`
   b9d60:	6018 6018 6018 6018 f03c f03c 0000 0000     .`.`.`.`<.<.....
	...
   b9d78:	0000 0003 0003 0000 0000 001f 001f 0003     ................
   b9d88:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b9da0:	0000 0003 0003 0000 0000 c01f c01f c000     ................
   b9db0:	c000 c000 c000 c000 c000 c000 c000 c001     ................
   b9dc0:	803f 003f 0000 0000 0000 0038 0038 0018     ?.?.......8.8...
   b9dd0:	0018 e01b e01b 001b 001e 001e 001b 8019     ................
   b9de0:	f039 f039 0000 0000 0000 0000 0000 0000     9.9.............
   b9df0:	0000 001f 001f 0003 0003 0003 0003 0003     ................
   b9e00:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b9e20:	0000 e07e f07f 3033 3033 3033 3033 3033     ..~...3030303030
   b9e30:	b87b b87b 0000 0000 0000 0000 0000 0000     {.{.............
	...
   b9e48:	0000 c03b e03f 601c 6018 6018 6018 6018     ..;.?..`.`.`.`.`
   b9e58:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b9e70:	0000 8007 e01f 6018 3030 3030 3030 6018     .......`000000.`
   b9e80:	e01f 8007 0000 0000 0000 0000 0000 0000     ................
	...
   b9e98:	0000 8077 e07f 6038 3030 3030 3030 6038     ..w...8`0000008`
   b9ea8:	e03f 8037 0030 0030 007c 007c 0000 0000     ?.7.0.0.|.|.....
	...
   b9ec0:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b9ed0:	f01f b007 3000 3000 f800 f800 0000 0000     .....0.0........
	...
   b9ee8:	0000 e03c f03d 300f 000e 000c 000c 000c     ..<.=..0........
   b9ef8:	c03f c03f 0000 0000 0000 0000 0000 0000     ?.?.............
	...
   b9f10:	0000 e007 e01f 6018 001e c00f e001 6018     .......`.......`
   b9f20:	e01f 801f 0000 0000 0000 0000 0000 0000     ................
   b9f30:	0000 0000 000c 000c 000c e03f e03f 000c     ..........?.?...
   b9f40:	000c 000c 000c 300c f00f c007 0000 0000     .......0........
	...
   b9f60:	0000 e038 e038 6018 6018 6018 6018 e018     ..8.8..`.`.`.`..
   b9f70:	f01f 700f 0000 0000 0000 0000 0000 0000     ...p............
	...
   b9f88:	0000 f078 f078 6030 c018 c018 800d 800d     ..x.x.0`........
   b9f98:	0007 0007 0000 0000 0000 0000 0000 0000     ................
	...
   b9fb0:	0000 f078 f078 6032 6032 e037 c01d c01d     ..x.x.2`2`7.....
   b9fc0:	c018 c018 0000 0000 0000 0000 0000 0000     ................
	...
   b9fd8:	0000 f03c f03c c00c 8007 0003 8007 c00c     ..<.<...........
   b9fe8:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   ba000:	0000 f078 f078 6030 c018 c018 800d 800f     ..x.x.0`........
   ba010:	0007 0006 0006 000c 007f 007f 0000 0000     ................
	...
   ba028:	0000 e01f e01f c018 8001 0003 0006 600c     ...............`
   ba038:	e01f e01f 0000 0000 0000 0000 0000 0000     ................
   ba048:	0000 c001 c003 0003 0003 0003 0003 0003     ................
   ba058:	0007 000e 0007 0003 0003 0003 0003 c003     ................
   ba068:	c001 0000 0000 0000 0000 0003 0003 0003     ................
   ba078:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   ba088:	0003 0003 0003 0003 0003 0000 0000 0000     ................
   ba098:	0000 001c 001e 0006 0006 0006 0006 0006     ................
   ba0a8:	0007 8003 0007 0006 0006 0006 0006 001e     ................
   ba0b8:	001c 0000 0000 0000 0000 0000 0000 0000     ................
   ba0c8:	0000 0000 000e 303f f033 e001 0000 0000     ......?03.......
	...

000ba0e8 <_ZL12Font24_Table>:
	...
   ba134:	0000 8003 0300 0080 8003 0300 0080 8003     ................
   ba144:	0300 0080 8003 0300 0080 8003 0100 0000     ................
   ba154:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
   ba180:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
   ba190:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
   ba1c4:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
   ba1d4:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
   ba1e4:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
   ba1f4:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
   ba204:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
   ba214:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
   ba224:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
   ba234:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
   ba254:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
   ba264:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
   ba274:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
   ba2a4:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
   ba2b4:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
   ba2c4:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
   ba2e8:	0300 0080 8003 0300 0080 0001 0100 0000     ................
   ba2f8:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
   ba32c:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
   ba33c:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
   ba34c:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
   ba35c:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
   ba374:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
   ba384:	0700 0000 8003 0300 0080 8003 0300 0080     ................
   ba394:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
   ba3a4:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
   ba3bc:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
   ba3cc:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
   ba40c:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
   ba41c:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
   ba42c:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
   ba470:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
   ba480:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
   ba4a8:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
   ba500:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   ba520:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
   ba530:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
   ba540:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
   ba550:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
   ba56c:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
   ba57c:	1800 0018 1818 1800 0018 1818 1800 0018     ................
   ba58c:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
   ba5b4:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
   ba5c4:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   ba5d4:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
   ba5fc:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
   ba60c:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
   ba61c:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
   ba644:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
   ba654:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
   ba664:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
   ba68c:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
   ba69c:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
   ba6ac:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
   ba6d4:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
   ba6e4:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
   ba6f4:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
   ba71c:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
   ba72c:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
   ba73c:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
   ba764:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
   ba774:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
   ba784:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
   ba7ac:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
   ba7bc:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
   ba7cc:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
   ba7f4:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
   ba804:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
   ba814:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
   ba848:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   ba860:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   ba890:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
   ba8a8:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
   ba8d4:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
   ba8e4:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
   ba8f4:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
   ba924:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
   ba934:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   ba964:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
   ba974:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
   ba984:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
   ba9a8:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
   ba9b8:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
   ba9c8:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
   ba9ec:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
   ba9fc:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
   baa0c:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
   baa1c:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
   baa38:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
   baa48:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
   baa58:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
   baa80:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   baa90:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
   baaa0:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
   baac8:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   baad8:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
   baae8:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
   bab10:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
   bab20:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
   bab30:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
   bab58:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
   bab68:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
   bab78:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
   baba0:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
   babb0:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
   babc0:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   babe8:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   babf8:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
   bac08:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
   bac30:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   bac40:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
   bac50:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   bac78:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
   bac88:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bac98:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
   bacc0:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
   bacd0:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
   bace0:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
   bad08:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
   bad18:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
   bad28:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
   bad50:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
   bad60:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
   bad70:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
   bad98:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
   bada8:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
   badb8:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
   bade0:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
   badf0:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
   bae00:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
   bae28:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   bae38:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   bae48:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
   bae70:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
   bae80:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
   bae90:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   baeb8:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   baec8:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   baed8:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
   baee8:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
   baf00:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   baf10:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
   baf20:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
   baf48:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
   baf58:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
   baf68:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
   baf90:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
   bafa0:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
   bafb0:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   bafd8:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   bafe8:	1818 1800 0018 1818 1800 0018 1818 1800     ................
   baff8:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
   bb020:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
   bb030:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
   bb040:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
   bb068:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
   bb078:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
   bb088:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
   bb0b0:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
   bb0c0:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
   bb0d0:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
   bb0f8:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
   bb108:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
   bb118:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   bb140:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
   bb150:	c018 0100 0080 0003 0600 0018 180c 1800     ................
   bb160:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
   bb184:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
   bb194:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb1a4:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bb1b4:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
   bb1c4:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
   bb1d4:	000e 0600 0000 0006 0300 0000 0003 0100     ................
   bb1e4:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
   bb1f4:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
   bb214:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
   bb224:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb234:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bb244:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
   bb25c:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
   bb26c:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
   bb2e0:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
   bb2f0:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
   bb340:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
   bb350:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
   bb360:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb37c:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
   bb38c:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
   bb39c:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
   bb3d0:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
   bb3e0:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
   bb3f0:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb40c:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
   bb41c:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
   bb42c:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
   bb460:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
   bb470:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
   bb480:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb49c:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
   bb4ac:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
   bb4bc:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
   bb4f0:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   bb500:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   bb510:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
   bb520:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
   bb530:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
   bb540:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
   bb550:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   bb574:	0000 8001 0100 0080 0000 0000 0000 801f     ................
   bb584:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
   bb594:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   bb5bc:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
   bb5cc:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
   bb5dc:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
   bb5ec:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
   bb604:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
   bb614:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
   bb624:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
   bb64c:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
   bb65c:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb66c:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   bb6a0:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
   bb6b0:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
   bb6c0:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb6e8:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
   bb6f8:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
   bb708:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
   bb730:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
   bb740:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
   bb750:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb778:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
   bb788:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
   bb798:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
   bb7c0:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   bb7d0:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   bb7e0:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
   bb7f0:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb808:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
   bb818:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
   bb828:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   bb850:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
   bb860:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
   bb870:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb88c:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
   bb89c:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
   bb8ac:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
   bb8e0:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
   bb8f0:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
   bb900:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb928:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
   bb938:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
   bb948:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb970:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
   bb980:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
   bb990:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
   bb9b8:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
   bb9c8:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
   bb9d8:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
   bba00:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
   bba10:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
   bba20:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
   bba30:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bba48:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
   bba58:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
   bba68:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bba84:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
   bba94:	0100 0080 8001 0100 0080 8003 0700 0000     ................
   bbaa4:	8003 0100 0080 8001 0100 0080 8001 0100     ................
   bbab4:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
   bbacc:	0000 8001 0100 0080 8001 0100 0080 8001     ................
   bbadc:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bbaec:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bbafc:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
   bbb14:	0000 0007 0700 0080 8001 0100 0080 8001     ................
   bbb24:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
   bbb34:	c001 0100 0080 8001 0100 0080 8001 0100     ................
   bbb44:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
   bbb70:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...
   bbba0:	0030 6177 656b 7520 2070 7265 6f72 2172     0.wake up error!
   bbbb0:	6e00 206f 6163 6472 0021 6c66 7361 0065     .no card!.flase.
   bbbc0:	6572 6461 6520 7272 726f 0021 6572 6461     read error!.read
   bbbd0:	7420 6d69 6f65 7475 0021 6e75 6e6b 776f      timeout!.unknow
   bbbe0:	206e 7265 6f72 2172 0000 0000               n error!....

000bbbec <_ZTV17DFRobot_PN532_IIC>:
	...
   bbbf4:	5d4d 000b 60e3 000b                         M]...`..

000bbbfc <_ZTVN5spark13CellularClassE>:
	...
   bbc04:	68c7 000b 68bd 000b 68b3 000b 6875 000b     .h...h...h..uh..
   bbc14:	4917 000b 68a7 000b 716d 000b 7175 000b     .I...h..mq..uq..
   bbc24:	689b 000b 6893 000b 6889 000b 687f 000b     .h...h...h...h..
   bbc34:	71a5 000b                                   .q..

000bbc38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbc40:	6901 000b 6907 000b 6945 000b 6915 000b     .i...i..Ei...i..
   bbc50:	6903 000b                                   .i..

000bbc54 <_ZTVN5spark13EthernetClassE>:
	...
   bbc5c:	6efb 000b 6ef1 000b 6ee7 000b 6edd 000b     .n...n...n...n..
   bbc6c:	6ed1 000b 6ec5 000b 716d 000b 7175 000b     .n...n..mq..uq..
   bbc7c:	6eb9 000b 6eb1 000b 6ea7 000b 6e9d 000b     .n...n...n...n..
   bbc8c:	71a5 000b                                   .q..

000bbc90 <_ZTV7TwoWire>:
	...
   bbc98:	6f19 000b 6f63 000b 6f3b 000b 6f1b 000b     .o..co..;o...o..
   bbca8:	6f43 000b 6f4b 000b 6f53 000b 6f5b 000b     Co..Ko..So..[o..

000bbcb8 <_ZTV9IPAddress>:
	...
   bbcc0:	703d 000b 702d 000b 702f 000b 7061 0070     =p..-p../p..app.

000bbcd0 <_ZTVN5spark12NetworkClassE>:
	...
   bbcd8:	712d 000b 7137 000b 7141 000b 714b 000b     -q..7q..Aq..Kq..
   bbce8:	7155 000b 7161 000b 716d 000b 7175 000b     Uq..aq..mq..uq..
   bbcf8:	717d 000b 7189 000b 7191 000b 719b 000b     }q...q...q...q..
   bbd08:	71a5 000b                                   .q..

000bbd0c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bbd0c:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   bbd1c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   bbd2c:	6d69 0065                                   ime.

000bbd30 <_ZTV11USARTSerial>:
	...
   bbd38:	7a19 000b 7a85 000b 7a5d 000b 7291 000b     .z...z..]z...r..
   bbd48:	7a2d 000b 7a49 000b 7a3b 000b 7a57 000b     -z..Iz..;z..Wz..
   bbd58:	7a1b 000b 7a1f 000b                         .z...z..

000bbd60 <_ZTV9USBSerial>:
	...
   bbd68:	7ac3 000b 7b2b 000b 7b01 000b 7291 000b     .z..+{...{...r..
   bbd78:	7af3 000b 7ac5 000b 7ad5 000b 7b25 000b     .z...z...z..%{..
   bbd88:	7ae5 000b 7abd 000b                         .z...z..

000bbd90 <_ZSt7nothrow>:
   bbd90:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bbda0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   bbdb0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bbdc0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bbdd0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   bbde0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bbdf0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bbe00:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   bbe10:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   bbe20:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   bbe30:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   bbe40:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   bbe50:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000bbe5c <_ctype_>:
   bbe5c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bbe6c:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bbe7c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bbe8c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bbe9c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bbeac:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bbebc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bbecc:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bbedc:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bbf5d <link_const_data_end>:
   bbf5d:	00          	.byte	0x00
	...

000bbf60 <link_constructors_location>:
   bbf60:	000b50d9 	.word	0x000b50d9
   bbf64:	000b6865 	.word	0x000b6865
   bbf68:	000b68d1 	.word	0x000b68d1
   bbf6c:	000b6f05 	.word	0x000b6f05
   bbf70:	000b711d 	.word	0x000b711d
   bbf74:	000b727d 	.word	0x000b727d
   bbf78:	000b73b9 	.word	0x000b73b9
   bbf7c:	000b7805 	.word	0x000b7805
   bbf80:	000b7a05 	.word	0x000b7a05
