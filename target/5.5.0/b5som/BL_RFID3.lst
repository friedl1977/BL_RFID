
/Users/friedlbasson/Desktop/VSC/BL_RFID3/target/5.5.0/b5som/BL_RFID3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007f5c  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bbf78  000bbf78  0000bf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         00000098  2003de20  000bbf9c  0000de20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000938  2003deb8  2003deb8  0001deb8  2**3
                  ALLOC
  6 .backup       00000004  2003f400  000bc034  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bc038  000bc038  0001c038  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bc03e  000bc03e  0001c03e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bc062  000bc062  0001c062  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016a51d  00000000  00000000  0001c066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00017400  00000000  00000000  00186583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000425aa  00000000  00000000  0019d983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003130  00000000  00000000  001dff2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000bbd0  00000000  00000000  001e305d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003fa85  00000000  00000000  001eec2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004e7f6  00000000  00000000  0022e6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014943b  00000000  00000000  0027cea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008ed0  00000000  00000000  003c62e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <__aeabi_drsub>:
   b401c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4020:	e002      	b.n	b4028 <__adddf3>
   b4022:	bf00      	nop

000b4024 <__aeabi_dsub>:
   b4024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b4028 <__adddf3>:
   b4028:	b530      	push	{r4, r5, lr}
   b402a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b402e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4032:	ea94 0f05 	teq	r4, r5
   b4036:	bf08      	it	eq
   b4038:	ea90 0f02 	teqeq	r0, r2
   b403c:	bf1f      	itttt	ne
   b403e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4042:	ea55 0c02 	orrsne.w	ip, r5, r2
   b4046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b404e:	f000 80e2 	beq.w	b4216 <__adddf3+0x1ee>
   b4052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b4056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405a:	bfb8      	it	lt
   b405c:	426d      	neglt	r5, r5
   b405e:	dd0c      	ble.n	b407a <__adddf3+0x52>
   b4060:	442c      	add	r4, r5
   b4062:	ea80 0202 	eor.w	r2, r0, r2
   b4066:	ea81 0303 	eor.w	r3, r1, r3
   b406a:	ea82 0000 	eor.w	r0, r2, r0
   b406e:	ea83 0101 	eor.w	r1, r3, r1
   b4072:	ea80 0202 	eor.w	r2, r0, r2
   b4076:	ea81 0303 	eor.w	r3, r1, r3
   b407a:	2d36      	cmp	r5, #54	; 0x36
   b407c:	bf88      	it	hi
   b407e:	bd30      	pophi	{r4, r5, pc}
   b4080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b408c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4090:	d002      	beq.n	b4098 <__adddf3+0x70>
   b4092:	4240      	negs	r0, r0
   b4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b409c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a4:	d002      	beq.n	b40ac <__adddf3+0x84>
   b40a6:	4252      	negs	r2, r2
   b40a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40ac:	ea94 0f05 	teq	r4, r5
   b40b0:	f000 80a7 	beq.w	b4202 <__adddf3+0x1da>
   b40b4:	f1a4 0401 	sub.w	r4, r4, #1
   b40b8:	f1d5 0e20 	rsbs	lr, r5, #32
   b40bc:	db0d      	blt.n	b40da <__adddf3+0xb2>
   b40be:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c2:	fa22 f205 	lsr.w	r2, r2, r5
   b40c6:	1880      	adds	r0, r0, r2
   b40c8:	f141 0100 	adc.w	r1, r1, #0
   b40cc:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d0:	1880      	adds	r0, r0, r2
   b40d2:	fa43 f305 	asr.w	r3, r3, r5
   b40d6:	4159      	adcs	r1, r3
   b40d8:	e00e      	b.n	b40f8 <__adddf3+0xd0>
   b40da:	f1a5 0520 	sub.w	r5, r5, #32
   b40de:	f10e 0e20 	add.w	lr, lr, #32
   b40e2:	2a01      	cmp	r2, #1
   b40e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40e8:	bf28      	it	cs
   b40ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40ee:	fa43 f305 	asr.w	r3, r3, r5
   b40f2:	18c0      	adds	r0, r0, r3
   b40f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b40fc:	d507      	bpl.n	b410e <__adddf3+0xe6>
   b40fe:	f04f 0e00 	mov.w	lr, #0
   b4102:	f1dc 0c00 	rsbs	ip, ip, #0
   b4106:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410a:	eb6e 0101 	sbc.w	r1, lr, r1
   b410e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4112:	d31b      	bcc.n	b414c <__adddf3+0x124>
   b4114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b4118:	d30c      	bcc.n	b4134 <__adddf3+0x10c>
   b411a:	0849      	lsrs	r1, r1, #1
   b411c:	ea5f 0030 	movs.w	r0, r0, rrx
   b4120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4124:	f104 0401 	add.w	r4, r4, #1
   b4128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b412c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4130:	f080 809a 	bcs.w	b4268 <__adddf3+0x240>
   b4134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b4138:	bf08      	it	eq
   b413a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b413e:	f150 0000 	adcs.w	r0, r0, #0
   b4142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4146:	ea41 0105 	orr.w	r1, r1, r5
   b414a:	bd30      	pop	{r4, r5, pc}
   b414c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4150:	4140      	adcs	r0, r0
   b4152:	eb41 0101 	adc.w	r1, r1, r1
   b4156:	3c01      	subs	r4, #1
   b4158:	bf28      	it	cs
   b415a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b415e:	d2e9      	bcs.n	b4134 <__adddf3+0x10c>
   b4160:	f091 0f00 	teq	r1, #0
   b4164:	bf04      	itt	eq
   b4166:	4601      	moveq	r1, r0
   b4168:	2000      	moveq	r0, #0
   b416a:	fab1 f381 	clz	r3, r1
   b416e:	bf08      	it	eq
   b4170:	3320      	addeq	r3, #32
   b4172:	f1a3 030b 	sub.w	r3, r3, #11
   b4176:	f1b3 0220 	subs.w	r2, r3, #32
   b417a:	da0c      	bge.n	b4196 <__adddf3+0x16e>
   b417c:	320c      	adds	r2, #12
   b417e:	dd08      	ble.n	b4192 <__adddf3+0x16a>
   b4180:	f102 0c14 	add.w	ip, r2, #20
   b4184:	f1c2 020c 	rsb	r2, r2, #12
   b4188:	fa01 f00c 	lsl.w	r0, r1, ip
   b418c:	fa21 f102 	lsr.w	r1, r1, r2
   b4190:	e00c      	b.n	b41ac <__adddf3+0x184>
   b4192:	f102 0214 	add.w	r2, r2, #20
   b4196:	bfd8      	it	le
   b4198:	f1c2 0c20 	rsble	ip, r2, #32
   b419c:	fa01 f102 	lsl.w	r1, r1, r2
   b41a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a4:	bfdc      	itt	le
   b41a6:	ea41 010c 	orrle.w	r1, r1, ip
   b41aa:	4090      	lslle	r0, r2
   b41ac:	1ae4      	subs	r4, r4, r3
   b41ae:	bfa2      	ittt	ge
   b41b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b4:	4329      	orrge	r1, r5
   b41b6:	bd30      	popge	{r4, r5, pc}
   b41b8:	ea6f 0404 	mvn.w	r4, r4
   b41bc:	3c1f      	subs	r4, #31
   b41be:	da1c      	bge.n	b41fa <__adddf3+0x1d2>
   b41c0:	340c      	adds	r4, #12
   b41c2:	dc0e      	bgt.n	b41e2 <__adddf3+0x1ba>
   b41c4:	f104 0414 	add.w	r4, r4, #20
   b41c8:	f1c4 0220 	rsb	r2, r4, #32
   b41cc:	fa20 f004 	lsr.w	r0, r0, r4
   b41d0:	fa01 f302 	lsl.w	r3, r1, r2
   b41d4:	ea40 0003 	orr.w	r0, r0, r3
   b41d8:	fa21 f304 	lsr.w	r3, r1, r4
   b41dc:	ea45 0103 	orr.w	r1, r5, r3
   b41e0:	bd30      	pop	{r4, r5, pc}
   b41e2:	f1c4 040c 	rsb	r4, r4, #12
   b41e6:	f1c4 0220 	rsb	r2, r4, #32
   b41ea:	fa20 f002 	lsr.w	r0, r0, r2
   b41ee:	fa01 f304 	lsl.w	r3, r1, r4
   b41f2:	ea40 0003 	orr.w	r0, r0, r3
   b41f6:	4629      	mov	r1, r5
   b41f8:	bd30      	pop	{r4, r5, pc}
   b41fa:	fa21 f004 	lsr.w	r0, r1, r4
   b41fe:	4629      	mov	r1, r5
   b4200:	bd30      	pop	{r4, r5, pc}
   b4202:	f094 0f00 	teq	r4, #0
   b4206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420a:	bf06      	itte	eq
   b420c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4210:	3401      	addeq	r4, #1
   b4212:	3d01      	subne	r5, #1
   b4214:	e74e      	b.n	b40b4 <__adddf3+0x8c>
   b4216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421a:	bf18      	it	ne
   b421c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4220:	d029      	beq.n	b4276 <__adddf3+0x24e>
   b4222:	ea94 0f05 	teq	r4, r5
   b4226:	bf08      	it	eq
   b4228:	ea90 0f02 	teqeq	r0, r2
   b422c:	d005      	beq.n	b423a <__adddf3+0x212>
   b422e:	ea54 0c00 	orrs.w	ip, r4, r0
   b4232:	bf04      	itt	eq
   b4234:	4619      	moveq	r1, r3
   b4236:	4610      	moveq	r0, r2
   b4238:	bd30      	pop	{r4, r5, pc}
   b423a:	ea91 0f03 	teq	r1, r3
   b423e:	bf1e      	ittt	ne
   b4240:	2100      	movne	r1, #0
   b4242:	2000      	movne	r0, #0
   b4244:	bd30      	popne	{r4, r5, pc}
   b4246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424a:	d105      	bne.n	b4258 <__adddf3+0x230>
   b424c:	0040      	lsls	r0, r0, #1
   b424e:	4149      	adcs	r1, r1
   b4250:	bf28      	it	cs
   b4252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b4256:	bd30      	pop	{r4, r5, pc}
   b4258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b425c:	bf3c      	itt	cc
   b425e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4262:	bd30      	popcc	{r4, r5, pc}
   b4264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4270:	f04f 0000 	mov.w	r0, #0
   b4274:	bd30      	pop	{r4, r5, pc}
   b4276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427a:	bf1a      	itte	ne
   b427c:	4619      	movne	r1, r3
   b427e:	4610      	movne	r0, r2
   b4280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4284:	bf1c      	itt	ne
   b4286:	460b      	movne	r3, r1
   b4288:	4602      	movne	r2, r0
   b428a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b428e:	bf06      	itte	eq
   b4290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4294:	ea91 0f03 	teqeq	r1, r3
   b4298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b429c:	bd30      	pop	{r4, r5, pc}
   b429e:	bf00      	nop

000b42a0 <__aeabi_ui2d>:
   b42a0:	f090 0f00 	teq	r0, #0
   b42a4:	bf04      	itt	eq
   b42a6:	2100      	moveq	r1, #0
   b42a8:	4770      	bxeq	lr
   b42aa:	b530      	push	{r4, r5, lr}
   b42ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b4:	f04f 0500 	mov.w	r5, #0
   b42b8:	f04f 0100 	mov.w	r1, #0
   b42bc:	e750      	b.n	b4160 <__adddf3+0x138>
   b42be:	bf00      	nop

000b42c0 <__aeabi_i2d>:
   b42c0:	f090 0f00 	teq	r0, #0
   b42c4:	bf04      	itt	eq
   b42c6:	2100      	moveq	r1, #0
   b42c8:	4770      	bxeq	lr
   b42ca:	b530      	push	{r4, r5, lr}
   b42cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42d8:	bf48      	it	mi
   b42da:	4240      	negmi	r0, r0
   b42dc:	f04f 0100 	mov.w	r1, #0
   b42e0:	e73e      	b.n	b4160 <__adddf3+0x138>
   b42e2:	bf00      	nop

000b42e4 <__aeabi_f2d>:
   b42e4:	0042      	lsls	r2, r0, #1
   b42e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ea:	ea4f 0131 	mov.w	r1, r1, rrx
   b42ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f2:	bf1f      	itttt	ne
   b42f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b42fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4300:	4770      	bxne	lr
   b4302:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b4306:	bf08      	it	eq
   b4308:	4770      	bxeq	lr
   b430a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b430e:	bf04      	itt	eq
   b4310:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4314:	4770      	bxeq	lr
   b4316:	b530      	push	{r4, r5, lr}
   b4318:	f44f 7460 	mov.w	r4, #896	; 0x380
   b431c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4320:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4324:	e71c      	b.n	b4160 <__adddf3+0x138>
   b4326:	bf00      	nop

000b4328 <__aeabi_ul2d>:
   b4328:	ea50 0201 	orrs.w	r2, r0, r1
   b432c:	bf08      	it	eq
   b432e:	4770      	bxeq	lr
   b4330:	b530      	push	{r4, r5, lr}
   b4332:	f04f 0500 	mov.w	r5, #0
   b4336:	e00a      	b.n	b434e <__aeabi_l2d+0x16>

000b4338 <__aeabi_l2d>:
   b4338:	ea50 0201 	orrs.w	r2, r0, r1
   b433c:	bf08      	it	eq
   b433e:	4770      	bxeq	lr
   b4340:	b530      	push	{r4, r5, lr}
   b4342:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b4346:	d502      	bpl.n	b434e <__aeabi_l2d+0x16>
   b4348:	4240      	negs	r0, r0
   b434a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b434e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4352:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b4356:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435a:	f43f aed8 	beq.w	b410e <__adddf3+0xe6>
   b435e:	f04f 0203 	mov.w	r2, #3
   b4362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4366:	bf18      	it	ne
   b4368:	3203      	addne	r2, #3
   b436a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436e:	bf18      	it	ne
   b4370:	3203      	addne	r2, #3
   b4372:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b4376:	f1c2 0320 	rsb	r3, r2, #32
   b437a:	fa00 fc03 	lsl.w	ip, r0, r3
   b437e:	fa20 f002 	lsr.w	r0, r0, r2
   b4382:	fa01 fe03 	lsl.w	lr, r1, r3
   b4386:	ea40 000e 	orr.w	r0, r0, lr
   b438a:	fa21 f102 	lsr.w	r1, r1, r2
   b438e:	4414      	add	r4, r2
   b4390:	e6bd      	b.n	b410e <__adddf3+0xe6>
   b4392:	bf00      	nop

000b4394 <__aeabi_dmul>:
   b4394:	b570      	push	{r4, r5, r6, lr}
   b4396:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b439e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a2:	bf1d      	ittte	ne
   b43a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43a8:	ea94 0f0c 	teqne	r4, ip
   b43ac:	ea95 0f0c 	teqne	r5, ip
   b43b0:	f000 f8de 	bleq	b4570 <__aeabi_dmul+0x1dc>
   b43b4:	442c      	add	r4, r5
   b43b6:	ea81 0603 	eor.w	r6, r1, r3
   b43ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43c6:	bf18      	it	ne
   b43c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d4:	d038      	beq.n	b4448 <__aeabi_dmul+0xb4>
   b43d6:	fba0 ce02 	umull	ip, lr, r0, r2
   b43da:	f04f 0500 	mov.w	r5, #0
   b43de:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43e6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ea:	f04f 0600 	mov.w	r6, #0
   b43ee:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f2:	f09c 0f00 	teq	ip, #0
   b43f6:	bf18      	it	ne
   b43f8:	f04e 0e01 	orrne.w	lr, lr, #1
   b43fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4400:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4404:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b4408:	d204      	bcs.n	b4414 <__aeabi_dmul+0x80>
   b440a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b440e:	416d      	adcs	r5, r5
   b4410:	eb46 0606 	adc.w	r6, r6, r6
   b4414:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b4418:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b441c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4420:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4424:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b4428:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b442c:	bf88      	it	hi
   b442e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4432:	d81e      	bhi.n	b4472 <__aeabi_dmul+0xde>
   b4434:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b4438:	bf08      	it	eq
   b443a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b443e:	f150 0000 	adcs.w	r0, r0, #0
   b4442:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b4446:	bd70      	pop	{r4, r5, r6, pc}
   b4448:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b444c:	ea46 0101 	orr.w	r1, r6, r1
   b4450:	ea40 0002 	orr.w	r0, r0, r2
   b4454:	ea81 0103 	eor.w	r1, r1, r3
   b4458:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b445c:	bfc2      	ittt	gt
   b445e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4462:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4466:	bd70      	popgt	{r4, r5, r6, pc}
   b4468:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b446c:	f04f 0e00 	mov.w	lr, #0
   b4470:	3c01      	subs	r4, #1
   b4472:	f300 80ab 	bgt.w	b45cc <__aeabi_dmul+0x238>
   b4476:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447a:	bfde      	ittt	le
   b447c:	2000      	movle	r0, #0
   b447e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4482:	bd70      	pople	{r4, r5, r6, pc}
   b4484:	f1c4 0400 	rsb	r4, r4, #0
   b4488:	3c20      	subs	r4, #32
   b448a:	da35      	bge.n	b44f8 <__aeabi_dmul+0x164>
   b448c:	340c      	adds	r4, #12
   b448e:	dc1b      	bgt.n	b44c8 <__aeabi_dmul+0x134>
   b4490:	f104 0414 	add.w	r4, r4, #20
   b4494:	f1c4 0520 	rsb	r5, r4, #32
   b4498:	fa00 f305 	lsl.w	r3, r0, r5
   b449c:	fa20 f004 	lsr.w	r0, r0, r4
   b44a0:	fa01 f205 	lsl.w	r2, r1, r5
   b44a4:	ea40 0002 	orr.w	r0, r0, r2
   b44a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b4:	fa21 f604 	lsr.w	r6, r1, r4
   b44b8:	eb42 0106 	adc.w	r1, r2, r6
   b44bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c0:	bf08      	it	eq
   b44c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44c6:	bd70      	pop	{r4, r5, r6, pc}
   b44c8:	f1c4 040c 	rsb	r4, r4, #12
   b44cc:	f1c4 0520 	rsb	r5, r4, #32
   b44d0:	fa00 f304 	lsl.w	r3, r0, r4
   b44d4:	fa20 f005 	lsr.w	r0, r0, r5
   b44d8:	fa01 f204 	lsl.w	r2, r1, r4
   b44dc:	ea40 0002 	orr.w	r0, r0, r2
   b44e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44e8:	f141 0100 	adc.w	r1, r1, #0
   b44ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f0:	bf08      	it	eq
   b44f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44f6:	bd70      	pop	{r4, r5, r6, pc}
   b44f8:	f1c4 0520 	rsb	r5, r4, #32
   b44fc:	fa00 f205 	lsl.w	r2, r0, r5
   b4500:	ea4e 0e02 	orr.w	lr, lr, r2
   b4504:	fa20 f304 	lsr.w	r3, r0, r4
   b4508:	fa01 f205 	lsl.w	r2, r1, r5
   b450c:	ea43 0302 	orr.w	r3, r3, r2
   b4510:	fa21 f004 	lsr.w	r0, r1, r4
   b4514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4518:	fa21 f204 	lsr.w	r2, r1, r4
   b451c:	ea20 0002 	bic.w	r0, r0, r2
   b4520:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4524:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b4528:	bf08      	it	eq
   b452a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b452e:	bd70      	pop	{r4, r5, r6, pc}
   b4530:	f094 0f00 	teq	r4, #0
   b4534:	d10f      	bne.n	b4556 <__aeabi_dmul+0x1c2>
   b4536:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453a:	0040      	lsls	r0, r0, #1
   b453c:	eb41 0101 	adc.w	r1, r1, r1
   b4540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4544:	bf08      	it	eq
   b4546:	3c01      	subeq	r4, #1
   b4548:	d0f7      	beq.n	b453a <__aeabi_dmul+0x1a6>
   b454a:	ea41 0106 	orr.w	r1, r1, r6
   b454e:	f095 0f00 	teq	r5, #0
   b4552:	bf18      	it	ne
   b4554:	4770      	bxne	lr
   b4556:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455a:	0052      	lsls	r2, r2, #1
   b455c:	eb43 0303 	adc.w	r3, r3, r3
   b4560:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4564:	bf08      	it	eq
   b4566:	3d01      	subeq	r5, #1
   b4568:	d0f7      	beq.n	b455a <__aeabi_dmul+0x1c6>
   b456a:	ea43 0306 	orr.w	r3, r3, r6
   b456e:	4770      	bx	lr
   b4570:	ea94 0f0c 	teq	r4, ip
   b4574:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b4578:	bf18      	it	ne
   b457a:	ea95 0f0c 	teqne	r5, ip
   b457e:	d00c      	beq.n	b459a <__aeabi_dmul+0x206>
   b4580:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4584:	bf18      	it	ne
   b4586:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458a:	d1d1      	bne.n	b4530 <__aeabi_dmul+0x19c>
   b458c:	ea81 0103 	eor.w	r1, r1, r3
   b4590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4594:	f04f 0000 	mov.w	r0, #0
   b4598:	bd70      	pop	{r4, r5, r6, pc}
   b459a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b459e:	bf06      	itte	eq
   b45a0:	4610      	moveq	r0, r2
   b45a2:	4619      	moveq	r1, r3
   b45a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45a8:	d019      	beq.n	b45de <__aeabi_dmul+0x24a>
   b45aa:	ea94 0f0c 	teq	r4, ip
   b45ae:	d102      	bne.n	b45b6 <__aeabi_dmul+0x222>
   b45b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b4:	d113      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45b6:	ea95 0f0c 	teq	r5, ip
   b45ba:	d105      	bne.n	b45c8 <__aeabi_dmul+0x234>
   b45bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c0:	bf1c      	itt	ne
   b45c2:	4610      	movne	r0, r2
   b45c4:	4619      	movne	r1, r3
   b45c6:	d10a      	bne.n	b45de <__aeabi_dmul+0x24a>
   b45c8:	ea81 0103 	eor.w	r1, r1, r3
   b45cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45d8:	f04f 0000 	mov.w	r0, #0
   b45dc:	bd70      	pop	{r4, r5, r6, pc}
   b45de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45e6:	bd70      	pop	{r4, r5, r6, pc}

000b45e8 <__aeabi_ddiv>:
   b45e8:	b570      	push	{r4, r5, r6, lr}
   b45ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45f6:	bf1d      	ittte	ne
   b45f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b45fc:	ea94 0f0c 	teqne	r4, ip
   b4600:	ea95 0f0c 	teqne	r5, ip
   b4604:	f000 f8a7 	bleq	b4756 <__aeabi_ddiv+0x16e>
   b4608:	eba4 0405 	sub.w	r4, r4, r5
   b460c:	ea81 0e03 	eor.w	lr, r1, r3
   b4610:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4614:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b4618:	f000 8088 	beq.w	b472c <__aeabi_ddiv+0x144>
   b461c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4620:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4624:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b4628:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b462c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4630:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4634:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b4638:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b463c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4640:	429d      	cmp	r5, r3
   b4642:	bf08      	it	eq
   b4644:	4296      	cmpeq	r6, r2
   b4646:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b464e:	d202      	bcs.n	b4656 <__aeabi_ddiv+0x6e>
   b4650:	085b      	lsrs	r3, r3, #1
   b4652:	ea4f 0232 	mov.w	r2, r2, rrx
   b4656:	1ab6      	subs	r6, r6, r2
   b4658:	eb65 0503 	sbc.w	r5, r5, r3
   b465c:	085b      	lsrs	r3, r3, #1
   b465e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4662:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b4666:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466a:	ebb6 0e02 	subs.w	lr, r6, r2
   b466e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4672:	bf22      	ittt	cs
   b4674:	1ab6      	subcs	r6, r6, r2
   b4676:	4675      	movcs	r5, lr
   b4678:	ea40 000c 	orrcs.w	r0, r0, ip
   b467c:	085b      	lsrs	r3, r3, #1
   b467e:	ea4f 0232 	mov.w	r2, r2, rrx
   b4682:	ebb6 0e02 	subs.w	lr, r6, r2
   b4686:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468a:	bf22      	ittt	cs
   b468c:	1ab6      	subcs	r6, r6, r2
   b468e:	4675      	movcs	r5, lr
   b4690:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4694:	085b      	lsrs	r3, r3, #1
   b4696:	ea4f 0232 	mov.w	r2, r2, rrx
   b469a:	ebb6 0e02 	subs.w	lr, r6, r2
   b469e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a2:	bf22      	ittt	cs
   b46a4:	1ab6      	subcs	r6, r6, r2
   b46a6:	4675      	movcs	r5, lr
   b46a8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46ac:	085b      	lsrs	r3, r3, #1
   b46ae:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b2:	ebb6 0e02 	subs.w	lr, r6, r2
   b46b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46ba:	bf22      	ittt	cs
   b46bc:	1ab6      	subcs	r6, r6, r2
   b46be:	4675      	movcs	r5, lr
   b46c0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c4:	ea55 0e06 	orrs.w	lr, r5, r6
   b46c8:	d018      	beq.n	b46fc <__aeabi_ddiv+0x114>
   b46ca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46ce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46da:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46de:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46e6:	d1c0      	bne.n	b466a <__aeabi_ddiv+0x82>
   b46e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46ec:	d10b      	bne.n	b4706 <__aeabi_ddiv+0x11e>
   b46ee:	ea41 0100 	orr.w	r1, r1, r0
   b46f2:	f04f 0000 	mov.w	r0, #0
   b46f6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fa:	e7b6      	b.n	b466a <__aeabi_ddiv+0x82>
   b46fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4700:	bf04      	itt	eq
   b4702:	4301      	orreq	r1, r0
   b4704:	2000      	moveq	r0, #0
   b4706:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470a:	bf88      	it	hi
   b470c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4710:	f63f aeaf 	bhi.w	b4472 <__aeabi_dmul+0xde>
   b4714:	ebb5 0c03 	subs.w	ip, r5, r3
   b4718:	bf04      	itt	eq
   b471a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b471e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4722:	f150 0000 	adcs.w	r0, r0, #0
   b4726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472a:	bd70      	pop	{r4, r5, r6, pc}
   b472c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4730:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4734:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b4738:	bfc2      	ittt	gt
   b473a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b473e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4742:	bd70      	popgt	{r4, r5, r6, pc}
   b4744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4748:	f04f 0e00 	mov.w	lr, #0
   b474c:	3c01      	subs	r4, #1
   b474e:	e690      	b.n	b4472 <__aeabi_dmul+0xde>
   b4750:	ea45 0e06 	orr.w	lr, r5, r6
   b4754:	e68d      	b.n	b4472 <__aeabi_dmul+0xde>
   b4756:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475a:	ea94 0f0c 	teq	r4, ip
   b475e:	bf08      	it	eq
   b4760:	ea95 0f0c 	teqeq	r5, ip
   b4764:	f43f af3b 	beq.w	b45de <__aeabi_dmul+0x24a>
   b4768:	ea94 0f0c 	teq	r4, ip
   b476c:	d10a      	bne.n	b4784 <__aeabi_ddiv+0x19c>
   b476e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4772:	f47f af34 	bne.w	b45de <__aeabi_dmul+0x24a>
   b4776:	ea95 0f0c 	teq	r5, ip
   b477a:	f47f af25 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b477e:	4610      	mov	r0, r2
   b4780:	4619      	mov	r1, r3
   b4782:	e72c      	b.n	b45de <__aeabi_dmul+0x24a>
   b4784:	ea95 0f0c 	teq	r5, ip
   b4788:	d106      	bne.n	b4798 <__aeabi_ddiv+0x1b0>
   b478a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b478e:	f43f aefd 	beq.w	b458c <__aeabi_dmul+0x1f8>
   b4792:	4610      	mov	r0, r2
   b4794:	4619      	mov	r1, r3
   b4796:	e722      	b.n	b45de <__aeabi_dmul+0x24a>
   b4798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b479c:	bf18      	it	ne
   b479e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a2:	f47f aec5 	bne.w	b4530 <__aeabi_dmul+0x19c>
   b47a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47aa:	f47f af0d 	bne.w	b45c8 <__aeabi_dmul+0x234>
   b47ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b2:	f47f aeeb 	bne.w	b458c <__aeabi_dmul+0x1f8>
   b47b6:	e712      	b.n	b45de <__aeabi_dmul+0x24a>

000b47b8 <__aeabi_d2uiz>:
   b47b8:	004a      	lsls	r2, r1, #1
   b47ba:	d211      	bcs.n	b47e0 <__aeabi_d2uiz+0x28>
   b47bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b47c0:	d211      	bcs.n	b47e6 <__aeabi_d2uiz+0x2e>
   b47c2:	d50d      	bpl.n	b47e0 <__aeabi_d2uiz+0x28>
   b47c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b47c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b47cc:	d40e      	bmi.n	b47ec <__aeabi_d2uiz+0x34>
   b47ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b47d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b47d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b47da:	fa23 f002 	lsr.w	r0, r3, r2
   b47de:	4770      	bx	lr
   b47e0:	f04f 0000 	mov.w	r0, #0
   b47e4:	4770      	bx	lr
   b47e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b47ea:	d102      	bne.n	b47f2 <__aeabi_d2uiz+0x3a>
   b47ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b47f0:	4770      	bx	lr
   b47f2:	f04f 0000 	mov.w	r0, #0
   b47f6:	4770      	bx	lr

000b47f8 <__aeabi_f2lz>:
   b47f8:	ee07 0a90 	vmov	s15, r0
   b47fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   b4800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4804:	d401      	bmi.n	b480a <__aeabi_f2lz+0x12>
   b4806:	f000 b80b 	b.w	b4820 <__aeabi_f2ulz>
   b480a:	eef1 7a67 	vneg.f32	s15, s15
   b480e:	b508      	push	{r3, lr}
   b4810:	ee17 0a90 	vmov	r0, s15
   b4814:	f000 f804 	bl	b4820 <__aeabi_f2ulz>
   b4818:	4240      	negs	r0, r0
   b481a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b481e:	bd08      	pop	{r3, pc}

000b4820 <__aeabi_f2ulz>:
   b4820:	b5d0      	push	{r4, r6, r7, lr}
   b4822:	f7ff fd5f 	bl	b42e4 <__aeabi_f2d>
   b4826:	4b0c      	ldr	r3, [pc, #48]	; (b4858 <__aeabi_f2ulz+0x38>)
   b4828:	2200      	movs	r2, #0
   b482a:	4606      	mov	r6, r0
   b482c:	460f      	mov	r7, r1
   b482e:	f7ff fdb1 	bl	b4394 <__aeabi_dmul>
   b4832:	f7ff ffc1 	bl	b47b8 <__aeabi_d2uiz>
   b4836:	4604      	mov	r4, r0
   b4838:	f7ff fd32 	bl	b42a0 <__aeabi_ui2d>
   b483c:	4b07      	ldr	r3, [pc, #28]	; (b485c <__aeabi_f2ulz+0x3c>)
   b483e:	2200      	movs	r2, #0
   b4840:	f7ff fda8 	bl	b4394 <__aeabi_dmul>
   b4844:	4602      	mov	r2, r0
   b4846:	460b      	mov	r3, r1
   b4848:	4630      	mov	r0, r6
   b484a:	4639      	mov	r1, r7
   b484c:	f7ff fbea 	bl	b4024 <__aeabi_dsub>
   b4850:	f7ff ffb2 	bl	b47b8 <__aeabi_d2uiz>
   b4854:	4621      	mov	r1, r4
   b4856:	bdd0      	pop	{r4, r6, r7, pc}
   b4858:	3df00000 	.word	0x3df00000
   b485c:	41f00000 	.word	0x41f00000

000b4860 <strcmp>:
   b4860:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4864:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4868:	2a01      	cmp	r2, #1
   b486a:	bf28      	it	cs
   b486c:	429a      	cmpcs	r2, r3
   b486e:	d0f7      	beq.n	b4860 <strcmp>
   b4870:	1ad0      	subs	r0, r2, r3
   b4872:	4770      	bx	lr

000b4874 <strlen>:
   b4874:	4603      	mov	r3, r0
   b4876:	f813 2b01 	ldrb.w	r2, [r3], #1
   b487a:	2a00      	cmp	r2, #0
   b487c:	d1fb      	bne.n	b4876 <strlen+0x2>
   b487e:	1a18      	subs	r0, r3, r0
   b4880:	3801      	subs	r0, #1
   b4882:	4770      	bx	lr

000b4884 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4884:	4809      	ldr	r0, [pc, #36]	; (b48ac <module_user_pre_init+0x28>)
   b4886:	490a      	ldr	r1, [pc, #40]	; (b48b0 <module_user_pre_init+0x2c>)
   b4888:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b488a:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b488c:	d005      	beq.n	b489a <module_user_pre_init+0x16>
   b488e:	4a09      	ldr	r2, [pc, #36]	; (b48b4 <module_user_pre_init+0x30>)
   b4890:	4282      	cmp	r2, r0
   b4892:	d002      	beq.n	b489a <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4894:	1a12      	subs	r2, r2, r0
   b4896:	f003 fb88 	bl	b7faa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b489a:	4807      	ldr	r0, [pc, #28]	; (b48b8 <module_user_pre_init+0x34>)
   b489c:	4a07      	ldr	r2, [pc, #28]	; (b48bc <module_user_pre_init+0x38>)
   b489e:	2100      	movs	r1, #0
   b48a0:	1a12      	subs	r2, r2, r0
   b48a2:	f003 fb90 	bl	b7fc6 <memset>
    return &link_global_data_start;
}
   b48a6:	4801      	ldr	r0, [pc, #4]	; (b48ac <module_user_pre_init+0x28>)
   b48a8:	bd08      	pop	{r3, pc}
   b48aa:	bf00      	nop
   b48ac:	2003de20 	.word	0x2003de20
   b48b0:	000bbf9c 	.word	0x000bbf9c
   b48b4:	2003deb8 	.word	0x2003deb8
   b48b8:	2003deb8 	.word	0x2003deb8
   b48bc:	2003e7f0 	.word	0x2003e7f0

000b48c0 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b48c0:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48c2:	4e07      	ldr	r6, [pc, #28]	; (b48e0 <module_user_init+0x20>)
   b48c4:	4c07      	ldr	r4, [pc, #28]	; (b48e4 <module_user_init+0x24>)
    module_user_init_hook();
   b48c6:	f003 fa35 	bl	b7d34 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48ca:	1ba4      	subs	r4, r4, r6
   b48cc:	08a4      	lsrs	r4, r4, #2
   b48ce:	2500      	movs	r5, #0
   b48d0:	42ac      	cmp	r4, r5
   b48d2:	d100      	bne.n	b48d6 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b48d4:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b48d6:	f856 3b04 	ldr.w	r3, [r6], #4
   b48da:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b48dc:	3501      	adds	r5, #1
   b48de:	e7f7      	b.n	b48d0 <module_user_init+0x10>
   b48e0:	000bbf54 	.word	0x000bbf54
   b48e4:	000bbf78 	.word	0x000bbf78

000b48e8 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b48e8:	f000 bca2 	b.w	b5230 <setup>

000b48ec <module_user_loop>:
}

void module_user_loop() {
   b48ec:	b508      	push	{r3, lr}
    loop();
   b48ee:	f000 fe15 	bl	b551c <loop>
    _post_loop();
}
   b48f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b48f6:	f003 b9d5 	b.w	b7ca4 <_post_loop>

000b48fa <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b48fa:	f001 bf2d 	b.w	b6758 <malloc>

000b48fe <_Znaj>:
   b48fe:	f001 bf2b 	b.w	b6758 <malloc>

000b4902 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4902:	f001 bf31 	b.w	b6768 <free>

000b4906 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4906:	7800      	ldrb	r0, [r0, #0]
   b4908:	fab0 f080 	clz	r0, r0
   b490c:	0940      	lsrs	r0, r0, #5
   b490e:	4770      	bx	lr

000b4910 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4910:	2301      	movs	r3, #1
   b4912:	7003      	strb	r3, [r0, #0]
   b4914:	4770      	bx	lr
	...

000b4918 <_Z9myHandlerPKcS0_>:
      Particle.publish("get_data", data, PRIVATE);
      new_end_point_STATE = 1;  
      }                           
}

void myHandler(const char *event, const char *data) {
   b4918:	b538      	push	{r3, r4, r5, lr}

// Split the string from API
    strcpy(testval, (const char *)data);
   b491a:	480b      	ldr	r0, [pc, #44]	; (b4948 <_Z9myHandlerPKcS0_+0x30>)
   b491c:	4c0b      	ldr	r4, [pc, #44]	; (b494c <_Z9myHandlerPKcS0_+0x34>)
    char *p = strtok (( char *)testval, "|");

    while (p != NULL)
        {
            array[i++] = p;
            p = strtok (NULL, "|");
   b491e:	4d0c      	ldr	r5, [pc, #48]	; (b4950 <_Z9myHandlerPKcS0_+0x38>)
    strcpy(testval, (const char *)data);
   b4920:	f003 fb88 	bl	b8034 <strcpy>
    char *p = strtok (( char *)testval, "|");
   b4924:	490a      	ldr	r1, [pc, #40]	; (b4950 <_Z9myHandlerPKcS0_+0x38>)
   b4926:	4808      	ldr	r0, [pc, #32]	; (b4948 <_Z9myHandlerPKcS0_+0x30>)
   b4928:	f003 fbd0 	bl	b80cc <strtok>
    while (p != NULL)
   b492c:	b130      	cbz	r0, b493c <_Z9myHandlerPKcS0_+0x24>
            array[i++] = p;
   b492e:	f844 0b04 	str.w	r0, [r4], #4
            p = strtok (NULL, "|");
   b4932:	4629      	mov	r1, r5
   b4934:	2000      	movs	r0, #0
   b4936:	f003 fbc9 	bl	b80cc <strtok>
    while (p != NULL)
   b493a:	e7f7      	b.n	b492c <_Z9myHandlerPKcS0_+0x14>
        }
    
    Parser_STATE = 0;
   b493c:	4b05      	ldr	r3, [pc, #20]	; (b4954 <_Z9myHandlerPKcS0_+0x3c>)
   b493e:	6018      	str	r0, [r3, #0]
    Handler_STATE = 1;
   b4940:	4b05      	ldr	r3, [pc, #20]	; (b4958 <_Z9myHandlerPKcS0_+0x40>)
   b4942:	2201      	movs	r2, #1
   b4944:	601a      	str	r2, [r3, #0]
    //Serial.print("\n"); 
    //ApiParser_event2();

    // Handler_STATE = 1;
    // new_end_point_STATE = 2;
}
   b4946:	bd38      	pop	{r3, r4, r5, pc}
   b4948:	2003e1a4 	.word	0x2003e1a4
   b494c:	2003e098 	.word	0x2003e098
   b4950:	000b837c 	.word	0x000b837c
   b4954:	2003e05c 	.word	0x2003e05c
   b4958:	2003e048 	.word	0x2003e048

000b495c <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   b495c:	2300      	movs	r3, #0
   b495e:	6840      	ldr	r0, [r0, #4]
   b4960:	461a      	mov	r2, r3
   b4962:	4619      	mov	r1, r3
   b4964:	f001 beb8 	b.w	b66d8 <network_on>

000b4968 <_ZN11myStructureC1Ev>:
struct myStructure{
   b4968:	b538      	push	{r3, r4, r5, lr}
   b496a:	4d1f      	ldr	r5, [pc, #124]	; (b49e8 <_ZN11myStructureC1Ev+0x80>)
   b496c:	4604      	mov	r4, r0
   b496e:	4629      	mov	r1, r5
   b4970:	f002 fe1d 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b4974:	4629      	mov	r1, r5
   b4976:	f104 0010 	add.w	r0, r4, #16
   b497a:	f002 fe18 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b497e:	4629      	mov	r1, r5
   b4980:	f104 0020 	add.w	r0, r4, #32
   b4984:	f002 fe13 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b4988:	4629      	mov	r1, r5
   b498a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b498e:	f002 fe0e 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b4992:	4629      	mov	r1, r5
   b4994:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4998:	f002 fe09 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b499c:	4629      	mov	r1, r5
   b499e:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b49a2:	f002 fe04 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49a6:	4629      	mov	r1, r5
   b49a8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b49ac:	f002 fdff 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49b0:	4629      	mov	r1, r5
   b49b2:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b49b6:	f002 fdfa 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49ba:	4629      	mov	r1, r5
   b49bc:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b49c0:	f002 fdf5 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49c4:	4629      	mov	r1, r5
   b49c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b49ca:	f002 fdf0 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49ce:	4629      	mov	r1, r5
   b49d0:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b49d4:	f002 fdeb 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49d8:	4629      	mov	r1, r5
   b49da:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b49de:	f002 fde6 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b49e2:	4620      	mov	r0, r4
   b49e4:	bd38      	pop	{r3, r4, r5, pc}
   b49e6:	bf00      	nop
   b49e8:	000b8399 	.word	0x000b8399

000b49ec <_Z3EPDv>:

void EPD() {
   b49ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b49f0:	f5ad 4d43 	sub.w	sp, sp, #49920	; 0xc300
   b49f4:	b0aa      	sub	sp, #168	; 0xa8

  Epd epd;
   b49f6:	a810      	add	r0, sp, #64	; 0x40
   b49f8:	f000 fe28 	bl	b564c <_ZN3EpdC1Ev>
  Serial.print("Updating E-Paper Display\r\n ");
   b49fc:	f003 f8b8 	bl	b7b70 <_Z16_fetch_usbserialv>
   b4a00:	490a      	ldr	r1, [pc, #40]	; (b4a2c <_Z3EPDv+0x40>)
   b4a02:	f002 fc69 	bl	b72d8 <_ZN5Print5printEPKc>

 if (epd.Init() != 0) { 
   b4a06:	a810      	add	r0, sp, #64	; 0x40
   b4a08:	f000 fe6e 	bl	b56e8 <_ZN3Epd4InitEv>
   b4a0c:	4604      	mov	r4, r0
   b4a0e:	b188      	cbz	r0, b4a34 <_Z3EPDv+0x48>
   Serial.print("Failed to initialize display");
   b4a10:	f003 f8ae 	bl	b7b70 <_Z16_fetch_usbserialv>
   b4a14:	4906      	ldr	r1, [pc, #24]	; (b4a30 <_Z3EPDv+0x44>)
   b4a16:	f002 fc5f 	bl	b72d8 <_ZN5Print5printEPKc>
  Epd epd;
   b4a1a:	a810      	add	r0, sp, #64	; 0x40
   b4a1c:	f000 fe10 	bl	b5640 <_ZN3EpdD1Ev>
  previous_EPD_Millis = current_EPD_Millis;         //Reset Timer

  /* This displays an image */
  //epd.DisplayFrame(IMAGE_BLACK, IMAGE_RED);
  //epd.DisplayFrame(QR_BLACK, QR_RED);
}
   b4a20:	f50d 4d43 	add.w	sp, sp, #49920	; 0xc300
   b4a24:	b02a      	add	sp, #168	; 0xa8
   b4a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4a2a:	bf00      	nop
   b4a2c:	000b837e 	.word	0x000b837e
   b4a30:	000b839a 	.word	0x000b839a
  epd.ClearFrame();
   b4a34:	a810      	add	r0, sp, #64	; 0x40
   b4a36:	f000 fedc 	bl	b57f2 <_ZN3Epd10ClearFrameEv>
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4a3a:	f44f 7394 	mov.w	r3, #296	; 0x128
   b4a3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   b4a42:	a916      	add	r1, sp, #88	; 0x58
   b4a44:	a804      	add	r0, sp, #16
   b4a46:	f000 ffd2 	bl	b59ee <_ZN5PaintC1EPhii>
  paint.Clear(UNCOLORED);
   b4a4a:	a804      	add	r0, sp, #16
   b4a4c:	2101      	movs	r1, #1
   b4a4e:	f000 ffff 	bl	b5a50 <_ZN5Paint5ClearEi>
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b4a52:	f8df 8368 	ldr.w	r8, [pc, #872]	; b4dbc <_Z3EPDv+0x3d0>
    paint.DrawStringAt(10, 145, "Start ", &Font20, COLORED);
   b4a56:	4dc6      	ldr	r5, [pc, #792]	; (b4d70 <_Z3EPDv+0x384>)
    paint.DrawStringAt(110, 165, String(GetHourFromString(12,5, array[5])), &Font20, COLORED);
   b4a58:	4ec6      	ldr	r6, [pc, #792]	; (b4d74 <_Z3EPDv+0x388>)
  paint.SetRotate(2);
   b4a5a:	a804      	add	r0, sp, #16
   b4a5c:	2102      	movs	r1, #2
   b4a5e:	f001 f812 	bl	b5a86 <_ZN5Paint9SetRotateEi>
    paint.DrawStringAt(10, 5, "TITLE", &Font24, COLORED);
   b4a62:	a804      	add	r0, sp, #16
   b4a64:	4bc4      	ldr	r3, [pc, #784]	; (b4d78 <_Z3EPDv+0x38c>)
   b4a66:	9401      	str	r4, [sp, #4]
   b4a68:	f8cd 8000 	str.w	r8, [sp]
   b4a6c:	2205      	movs	r2, #5
   b4a6e:	210a      	movs	r1, #10
   b4a70:	f001 f888 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(10, 145, "Start ", &Font20, COLORED);
   b4a74:	9500      	str	r5, [sp, #0]
   b4a76:	a804      	add	r0, sp, #16
   b4a78:	4bc0      	ldr	r3, [pc, #768]	; (b4d7c <_Z3EPDv+0x390>)
   b4a7a:	9401      	str	r4, [sp, #4]
   b4a7c:	2291      	movs	r2, #145	; 0x91
   b4a7e:	210a      	movs	r1, #10
   b4a80:	f001 f880 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(10, 165, "Time", &Font20, COLORED);
   b4a84:	e9cd 5400 	strd	r5, r4, [sp]
   b4a88:	4bbd      	ldr	r3, [pc, #756]	; (b4d80 <_Z3EPDv+0x394>)
   b4a8a:	a804      	add	r0, sp, #16
   b4a8c:	22a5      	movs	r2, #165	; 0xa5
   b4a8e:	210a      	movs	r1, #10
   b4a90:	f001 f878 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    strncpy(Hour_min_endpoint,myString+(position-1),length);
   b4a94:	6971      	ldr	r1, [r6, #20]
   b4a96:	2205      	movs	r2, #5
   b4a98:	310b      	adds	r1, #11
   b4a9a:	a808      	add	r0, sp, #32
   b4a9c:	f003 fb03 	bl	b80a6 <strncpy>
    return (String)Hour_min_endpoint;
   b4aa0:	ab0c      	add	r3, sp, #48	; 0x30
   b4aa2:	a908      	add	r1, sp, #32
   b4aa4:	4618      	mov	r0, r3
   b4aa6:	9303      	str	r3, [sp, #12]
   b4aa8:	f002 fd81 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
    paint.DrawStringAt(110, 165, String(GetHourFromString(12,5, array[5])), &Font20, COLORED);
   b4aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4aae:	e9cd 5400 	strd	r5, r4, [sp]
   b4ab2:	22a5      	movs	r2, #165	; 0xa5
   b4ab4:	216e      	movs	r1, #110	; 0x6e
   b4ab6:	a804      	add	r0, sp, #16
   b4ab8:	f001 f864 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4abc:	9803      	ldr	r0, [sp, #12]
   b4abe:	f002 fd2b 	bl	b7518 <_ZN6StringD1Ev>
    paint.DrawStringAt(205, 145, "End   ", &Font20, COLORED);
   b4ac2:	e9cd 5400 	strd	r5, r4, [sp]
   b4ac6:	a804      	add	r0, sp, #16
   b4ac8:	4bae      	ldr	r3, [pc, #696]	; (b4d84 <_Z3EPDv+0x398>)
   b4aca:	2291      	movs	r2, #145	; 0x91
   b4acc:	21cd      	movs	r1, #205	; 0xcd
   b4ace:	f001 f859 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(205, 165, "Time", &Font20, COLORED);
   b4ad2:	4bab      	ldr	r3, [pc, #684]	; (b4d80 <_Z3EPDv+0x394>)
   b4ad4:	e9cd 5400 	strd	r5, r4, [sp]
   b4ad8:	a804      	add	r0, sp, #16
   b4ada:	22a5      	movs	r2, #165	; 0xa5
   b4adc:	21cd      	movs	r1, #205	; 0xcd
   b4ade:	f001 f851 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    strncpy(Hour_min_endpoint,myString+(position-1),length);
   b4ae2:	69b1      	ldr	r1, [r6, #24]
   b4ae4:	2205      	movs	r2, #5
   b4ae6:	310b      	adds	r1, #11
   b4ae8:	a808      	add	r0, sp, #32
   b4aea:	f003 fadc 	bl	b80a6 <strncpy>
    return (String)Hour_min_endpoint;
   b4aee:	a908      	add	r1, sp, #32
   b4af0:	9803      	ldr	r0, [sp, #12]
   b4af2:	f002 fd5c 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
    paint.DrawStringAt(305, 165, String(GetHourFromString(12,5, array[6])), &Font20, COLORED);
   b4af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4af8:	e9cd 5400 	strd	r5, r4, [sp]
   b4afc:	22a5      	movs	r2, #165	; 0xa5
   b4afe:	f240 1131 	movw	r1, #305	; 0x131
   b4b02:	a804      	add	r0, sp, #16
   b4b04:	f001 f83e 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawFilledRectangle(10, 35, 100, 120, COLORED);
   b4b08:	2678      	movs	r6, #120	; 0x78
    paint.DrawStringAt(305, 165, String(GetHourFromString(12,5, array[6])), &Font20, COLORED);
   b4b0a:	9803      	ldr	r0, [sp, #12]
   b4b0c:	f002 fd04 	bl	b7518 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(10, 35, 100, 120, COLORED);
   b4b10:	9600      	str	r6, [sp, #0]
   b4b12:	a804      	add	r0, sp, #16
   b4b14:	9401      	str	r4, [sp, #4]
   b4b16:	2364      	movs	r3, #100	; 0x64
   b4b18:	2223      	movs	r2, #35	; 0x23
   b4b1a:	210a      	movs	r1, #10
   b4b1c:	f001 f8a6 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 27, 110, 27, COLORED);
   b4b20:	221b      	movs	r2, #27
   b4b22:	9200      	str	r2, [sp, #0]
   b4b24:	a804      	add	r0, sp, #16
   b4b26:	9401      	str	r4, [sp, #4]
   b4b28:	236e      	movs	r3, #110	; 0x6e
   b4b2a:	210a      	movs	r1, #10
   b4b2c:	f001 f89e 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(110, 27, 110, 120, COLORED);
   b4b30:	236e      	movs	r3, #110	; 0x6e
   b4b32:	e9cd 6400 	strd	r6, r4, [sp]
   b4b36:	4619      	mov	r1, r3
   b4b38:	a804      	add	r0, sp, #16
   b4b3a:	221b      	movs	r2, #27
   b4b3c:	f001 f896 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 140, 190, 140, COLORED);
   b4b40:	278c      	movs	r7, #140	; 0x8c
    paint.DrawFilledRectangle(110, 120, 395, 120, COLORED);
   b4b42:	e9cd 6400 	strd	r6, r4, [sp]
   b4b46:	4632      	mov	r2, r6
   b4b48:	a804      	add	r0, sp, #16
   b4b4a:	f240 138b 	movw	r3, #395	; 0x18b
   b4b4e:	216e      	movs	r1, #110	; 0x6e
   b4b50:	f001 f88c 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 185, 190, 185, COLORED);
   b4b54:	26b9      	movs	r6, #185	; 0xb9
    paint.DrawFilledRectangle(10, 140, 190, 140, COLORED);
   b4b56:	9700      	str	r7, [sp, #0]
   b4b58:	463a      	mov	r2, r7
   b4b5a:	a804      	add	r0, sp, #16
   b4b5c:	9401      	str	r4, [sp, #4]
   b4b5e:	23be      	movs	r3, #190	; 0xbe
   b4b60:	210a      	movs	r1, #10
   b4b62:	f001 f883 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(10, 185, 190, 185, COLORED);
   b4b66:	9600      	str	r6, [sp, #0]
   b4b68:	4632      	mov	r2, r6
   b4b6a:	a804      	add	r0, sp, #16
   b4b6c:	9401      	str	r4, [sp, #4]
   b4b6e:	23be      	movs	r3, #190	; 0xbe
   b4b70:	210a      	movs	r1, #10
   b4b72:	f001 f87b 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(190, 140, 190, 185, COLORED);
   b4b76:	23be      	movs	r3, #190	; 0xbe
   b4b78:	e9cd 6400 	strd	r6, r4, [sp]
   b4b7c:	463a      	mov	r2, r7
   b4b7e:	4619      	mov	r1, r3
   b4b80:	a804      	add	r0, sp, #16
   b4b82:	f001 f873 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 140, 200, 185, COLORED);
   b4b86:	23c8      	movs	r3, #200	; 0xc8
   b4b88:	e9cd 6400 	strd	r6, r4, [sp]
   b4b8c:	463a      	mov	r2, r7
   b4b8e:	4619      	mov	r1, r3
   b4b90:	a804      	add	r0, sp, #16
   b4b92:	f001 f86b 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 185, 390, 185, COLORED);
   b4b96:	e9cd 6400 	strd	r6, r4, [sp]
   b4b9a:	4632      	mov	r2, r6
   b4b9c:	a804      	add	r0, sp, #16
   b4b9e:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4ba2:	21c8      	movs	r1, #200	; 0xc8
   b4ba4:	f001 f862 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(200, 140, 390, 140, COLORED);
   b4ba8:	e9cd 7400 	strd	r7, r4, [sp]
   b4bac:	463a      	mov	r2, r7
   b4bae:	a804      	add	r0, sp, #16
   b4bb0:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4bb4:	21c8      	movs	r1, #200	; 0xc8
   b4bb6:	f001 f859 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawFilledRectangle(205, 185, 390, 185, COLORED);
   b4bba:	e9cd 6400 	strd	r6, r4, [sp]
   b4bbe:	4632      	mov	r2, r6
   b4bc0:	a804      	add	r0, sp, #16
    paint.DrawRectangle(10, 230, 260, 290, COLORED);
   b4bc2:	f44f 7691 	mov.w	r6, #290	; 0x122
    paint.DrawFilledRectangle(205, 185, 390, 185, COLORED);
   b4bc6:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4bca:	21cd      	movs	r1, #205	; 0xcd
   b4bcc:	f001 f84e 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawRectangle(10, 230, 260, 290, COLORED);
   b4bd0:	9600      	str	r6, [sp, #0]
   b4bd2:	a804      	add	r0, sp, #16
   b4bd4:	9401      	str	r4, [sp, #4]
   b4bd6:	f44f 7382 	mov.w	r3, #260	; 0x104
   b4bda:	22e6      	movs	r2, #230	; 0xe6
   b4bdc:	210a      	movs	r1, #10
   b4bde:	f001 f809 	bl	b5bf4 <_ZN5Paint13DrawRectangleEiiiii>
    paint.DrawRectangle(280, 200, 390, 290, COLORED);
   b4be2:	e9cd 6400 	strd	r6, r4, [sp]
   b4be6:	a804      	add	r0, sp, #16
   b4be8:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4bec:	22c8      	movs	r2, #200	; 0xc8
   b4bee:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4bf2:	f000 ffff 	bl	b5bf4 <_ZN5Paint13DrawRectangleEiiiii>
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                                   // battery background
   b4bf6:	23de      	movs	r3, #222	; 0xde
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                            // Battery Title
   b4bf8:	4e63      	ldr	r6, [pc, #396]	; (b4d88 <_Z3EPDv+0x39c>)
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                                   // battery background
   b4bfa:	9300      	str	r3, [sp, #0]
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                            // Battery Title
   b4bfc:	2701      	movs	r7, #1
    paint.DrawFilledRectangle(280, 200, 390, 222, COLORED);                                   // battery background
   b4bfe:	a804      	add	r0, sp, #16
   b4c00:	9401      	str	r4, [sp, #4]
   b4c02:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4c06:	22c8      	movs	r2, #200	; 0xc8
   b4c08:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4c0c:	f001 f82e 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(285, 205, "BATTERY %", &Font16, UNCOLORED);                            // Battery Title
   b4c10:	a804      	add	r0, sp, #16
   b4c12:	4b5e      	ldr	r3, [pc, #376]	; (b4d8c <_Z3EPDv+0x3a0>)
   b4c14:	9701      	str	r7, [sp, #4]
   b4c16:	9600      	str	r6, [sp, #0]
   b4c18:	22cd      	movs	r2, #205	; 0xcd
   b4c1a:	f240 111d 	movw	r1, #285	; 0x11d
   b4c1e:	f000 ffb1 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(320, 227, String(SOC) + "%", &Font16, COLORED);                        // SOC
   b4c22:	4b5b      	ldr	r3, [pc, #364]	; (b4d90 <_Z3EPDv+0x3a4>)
   b4c24:	220a      	movs	r2, #10
   b4c26:	6819      	ldr	r1, [r3, #0]
   b4c28:	a808      	add	r0, sp, #32
   b4c2a:	f002 fd3b 	bl	b76a4 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b4c2e:	a908      	add	r1, sp, #32
   b4c30:	9803      	ldr	r0, [sp, #12]
   b4c32:	f002 fd08 	bl	b7646 <_ZN6StringC1ERKS_>
   b4c36:	4957      	ldr	r1, [pc, #348]	; (b4d94 <_Z3EPDv+0x3a8>)
   b4c38:	9803      	ldr	r0, [sp, #12]
   b4c3a:	f002 fd7e 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4c3e:	e9cd 6400 	strd	r6, r4, [sp]
   b4c42:	22e3      	movs	r2, #227	; 0xe3
   b4c44:	6803      	ldr	r3, [r0, #0]
   b4c46:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b4c4a:	a804      	add	r0, sp, #16
   b4c4c:	f000 ff9a 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
class StringSumHelper : public String
   b4c50:	9803      	ldr	r0, [sp, #12]
   b4c52:	f002 fc61 	bl	b7518 <_ZN6StringD1Ev>
   b4c56:	a808      	add	r0, sp, #32
   b4c58:	f002 fc5e 	bl	b7518 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(280, 244, 390, 266, COLORED);                                   // Time Zone background
   b4c5c:	f44f 7385 	mov.w	r3, #266	; 0x10a
   b4c60:	9300      	str	r3, [sp, #0]
   b4c62:	a804      	add	r0, sp, #16
   b4c64:	9401      	str	r4, [sp, #4]
   b4c66:	f44f 73c3 	mov.w	r3, #390	; 0x186
   b4c6a:	22f4      	movs	r2, #244	; 0xf4
   b4c6c:	f44f 718c 	mov.w	r1, #280	; 0x118
   b4c70:	f000 fffc 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(285, 249, "Time Zone", &Font16, UNCOLORED);                            // Time Zone background
   b4c74:	4b48      	ldr	r3, [pc, #288]	; (b4d98 <_Z3EPDv+0x3ac>)
   b4c76:	22f9      	movs	r2, #249	; 0xf9
   b4c78:	a804      	add	r0, sp, #16
   b4c7a:	e9cd 6700 	strd	r6, r7, [sp]
   b4c7e:	f240 111d 	movw	r1, #285	; 0x11d
   b4c82:	f000 ff7f 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(305, 271, String(ApiData1.timezone), &Font16, COLORED);                // GMT
   b4c86:	4945      	ldr	r1, [pc, #276]	; (b4d9c <_Z3EPDv+0x3b0>)
   b4c88:	9803      	ldr	r0, [sp, #12]
   b4c8a:	f002 fcdc 	bl	b7646 <_ZN6StringC1ERKS_>
   b4c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4c90:	f240 120f 	movw	r2, #271	; 0x10f
   b4c94:	f240 1131 	movw	r1, #305	; 0x131
   b4c98:	a804      	add	r0, sp, #16
   b4c9a:	e9cd 6400 	strd	r6, r4, [sp]
   b4c9e:	f000 ff71 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4ca2:	9803      	ldr	r0, [sp, #12]
   b4ca4:	f002 fc38 	bl	b7518 <_ZN6StringD1Ev>
    paint.DrawFilledRectangle(10, 230, 260, 200, COLORED);                                    // instructor background
   b4ca8:	23c8      	movs	r3, #200	; 0xc8
   b4caa:	9300      	str	r3, [sp, #0]
   b4cac:	a804      	add	r0, sp, #16
   b4cae:	9401      	str	r4, [sp, #4]
   b4cb0:	f44f 7382 	mov.w	r3, #260	; 0x104
   b4cb4:	22e6      	movs	r2, #230	; 0xe6
   b4cb6:	210a      	movs	r1, #10
   b4cb8:	f000 ffd8 	bl	b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>
    paint.DrawStringAt(15, 210, "INSTRUCTOR:", &Font20, UNCOLORED);                           // instructor Title
   b4cbc:	e9cd 5700 	strd	r5, r7, [sp]
   b4cc0:	4b37      	ldr	r3, [pc, #220]	; (b4da0 <_Z3EPDv+0x3b4>)
   b4cc2:	22d2      	movs	r2, #210	; 0xd2
   b4cc4:	a804      	add	r0, sp, #16
   b4cc6:	210f      	movs	r1, #15
   b4cc8:	f000 ff5c 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(15, 240, String(ApiData1.instructorFirstName), &Font20, COLORED);      // instructor Title
   b4ccc:	4935      	ldr	r1, [pc, #212]	; (b4da4 <_Z3EPDv+0x3b8>)
   b4cce:	9803      	ldr	r0, [sp, #12]
   b4cd0:	f002 fcb9 	bl	b7646 <_ZN6StringC1ERKS_>
   b4cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4cd6:	22f0      	movs	r2, #240	; 0xf0
   b4cd8:	e9cd 5400 	strd	r5, r4, [sp]
   b4cdc:	210f      	movs	r1, #15
   b4cde:	a804      	add	r0, sp, #16
   b4ce0:	f000 ff50 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4ce4:	9803      	ldr	r0, [sp, #12]
   b4ce6:	f002 fc17 	bl	b7518 <_ZN6StringD1Ev>
    paint.DrawStringAt(15, 260, String(ApiData1.instructorLastName), &Font20, COLORED);       // instructor Title
   b4cea:	492f      	ldr	r1, [pc, #188]	; (b4da8 <_Z3EPDv+0x3bc>)
   b4cec:	9803      	ldr	r0, [sp, #12]
   b4cee:	f002 fcaa 	bl	b7646 <_ZN6StringC1ERKS_>
   b4cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4cf4:	e9cd 5400 	strd	r5, r4, [sp]
   b4cf8:	f44f 7282 	mov.w	r2, #260	; 0x104
   b4cfc:	210f      	movs	r1, #15
   b4cfe:	a804      	add	r0, sp, #16
   b4d00:	f000 ff40 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4d04:	9803      	ldr	r0, [sp, #12]
   b4d06:	f002 fc07 	bl	b7518 <_ZN6StringD1Ev>
    paint.DrawStringAt(130, 5, "Starship IFT3 - ", &Font24, COLORED);                           //To Do
   b4d0a:	a804      	add	r0, sp, #16
   b4d0c:	e9cd 8400 	strd	r8, r4, [sp]
   b4d10:	4b26      	ldr	r3, [pc, #152]	; (b4dac <_Z3EPDv+0x3c0>)
   b4d12:	2205      	movs	r2, #5
   b4d14:	2182      	movs	r1, #130	; 0x82
   b4d16:	f000 ff35 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 35, "What to expect ", &Font24, COLORED);                           //To Do
   b4d1a:	a804      	add	r0, sp, #16
   b4d1c:	e9cd 8400 	strd	r8, r4, [sp]
   b4d20:	4b23      	ldr	r3, [pc, #140]	; (b4db0 <_Z3EPDv+0x3c4>)
   b4d22:	2223      	movs	r2, #35	; 0x23
   b4d24:	2182      	movs	r1, #130	; 0x82
   b4d26:	f000 ff2d 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 65, "from the next ", &Font24, COLORED);                            //To Do
   b4d2a:	a804      	add	r0, sp, #16
   b4d2c:	e9cd 8400 	strd	r8, r4, [sp]
   b4d30:	4b20      	ldr	r3, [pc, #128]	; (b4db4 <_Z3EPDv+0x3c8>)
   b4d32:	2241      	movs	r2, #65	; 0x41
   b4d34:	2182      	movs	r1, #130	; 0x82
   b4d36:	f000 ff25 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    paint.DrawStringAt(130, 95, "flight test", &Font24, COLORED);                               //To Do
   b4d3a:	4b1f      	ldr	r3, [pc, #124]	; (b4db8 <_Z3EPDv+0x3cc>)
   b4d3c:	225f      	movs	r2, #95	; 0x5f
   b4d3e:	2182      	movs	r1, #130	; 0x82
   b4d40:	a804      	add	r0, sp, #16
   b4d42:	e9cd 8400 	strd	r8, r4, [sp]
   b4d46:	f000 ff1d 	bl	b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
    epd.SetPartialWindowBlack(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());       //To Do
   b4d4a:	a804      	add	r0, sp, #16
   b4d4c:	f000 fe95 	bl	b5a7a <_ZN5Paint8GetImageEv>
   b4d50:	9003      	str	r0, [sp, #12]
   b4d52:	a804      	add	r0, sp, #16
   b4d54:	f000 fe93 	bl	b5a7e <_ZN5Paint8GetWidthEv>
   b4d58:	4605      	mov	r5, r0
   b4d5a:	a804      	add	r0, sp, #16
   b4d5c:	f000 fe91 	bl	b5a82 <_ZN5Paint9GetHeightEv>
   b4d60:	4623      	mov	r3, r4
   b4d62:	4622      	mov	r2, r4
   b4d64:	9903      	ldr	r1, [sp, #12]
   b4d66:	e9cd 5000 	strd	r5, r0, [sp]
   b4d6a:	a810      	add	r0, sp, #64	; 0x40
   b4d6c:	e028      	b.n	b4dc0 <_Z3EPDv+0x3d4>
   b4d6e:	bf00      	nop
   b4d70:	2003de3c 	.word	0x2003de3c
   b4d74:	2003e098 	.word	0x2003e098
   b4d78:	000b83b7 	.word	0x000b83b7
   b4d7c:	000b83bd 	.word	0x000b83bd
   b4d80:	000b83c4 	.word	0x000b83c4
   b4d84:	000b83c9 	.word	0x000b83c9
   b4d88:	2003de34 	.word	0x2003de34
   b4d8c:	000b83d0 	.word	0x000b83d0
   b4d90:	2003e074 	.word	0x2003e074
   b4d94:	000b83d8 	.word	0x000b83d8
   b4d98:	000b83da 	.word	0x000b83da
   b4d9c:	2003df28 	.word	0x2003df28
   b4da0:	000b83e4 	.word	0x000b83e4
   b4da4:	2003df48 	.word	0x2003df48
   b4da8:	2003df58 	.word	0x2003df58
   b4dac:	000b83f0 	.word	0x000b83f0
   b4db0:	000b8401 	.word	0x000b8401
   b4db4:	000b8411 	.word	0x000b8411
   b4db8:	000b8420 	.word	0x000b8420
   b4dbc:	2003de44 	.word	0x2003de44
   b4dc0:	f000 fcaf 	bl	b5722 <_ZN3Epd21SetPartialWindowBlackEPKhiiii>
  epd.DisplayFrame();                               /* Displays the data from the SRAM in e-Paper module */
   b4dc4:	a810      	add	r0, sp, #64	; 0x40
   b4dc6:	f000 fd45 	bl	b5854 <_ZN3Epd12DisplayFrameEv>
  delay(50);
   b4dca:	2032      	movs	r0, #50	; 0x32
   b4dcc:	f001 fd14 	bl	b67f8 <delay>
  epd.ClearFrame(); 
   b4dd0:	a810      	add	r0, sp, #64	; 0x40
   b4dd2:	f000 fd0e 	bl	b57f2 <_ZN3Epd10ClearFrameEv>
  epd.Sleep();                                      /* Deep sleep */
   b4dd6:	a810      	add	r0, sp, #64	; 0x40
   b4dd8:	f000 fd49 	bl	b586e <_ZN3Epd5SleepEv>
  new_end_point_STATE = 0;
   b4ddc:	4b04      	ldr	r3, [pc, #16]	; (b4df0 <_Z3EPDv+0x404>)
   b4dde:	601c      	str	r4, [r3, #0]
  previous_EPD_Millis = current_EPD_Millis;         //Reset Timer
   b4de0:	4b04      	ldr	r3, [pc, #16]	; (b4df4 <_Z3EPDv+0x408>)
   b4de2:	681a      	ldr	r2, [r3, #0]
   b4de4:	4b04      	ldr	r3, [pc, #16]	; (b4df8 <_Z3EPDv+0x40c>)
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4de6:	a804      	add	r0, sp, #16
  previous_EPD_Millis = current_EPD_Millis;         //Reset Timer
   b4de8:	601a      	str	r2, [r3, #0]
  Paint paint(image, 400, 296);    //width should be the multiple of 8
   b4dea:	f000 fe13 	bl	b5a14 <_ZN5PaintD1Ev>
   b4dee:	e614      	b.n	b4a1a <_Z3EPDv+0x2e>
   b4df0:	2003e13c 	.word	0x2003e13c
   b4df4:	2003e0fc 	.word	0x2003e0fc
   b4df8:	2003e18c 	.word	0x2003e18c

000b4dfc <_Z8RealTimev>:
//         Serial.println(" PM");
//         Serial.println("\n");
//         Serial.println("\n");
}

void RealTime(void){
   b4dfc:	b500      	push	{lr}
	const char * c_str() const { return buffer; }
   b4dfe:	4b57      	ldr	r3, [pc, #348]	; (b4f5c <_Z8RealTimev+0x160>)
   b4e00:	b09d      	sub	sp, #116	; 0x74

  Time.zone(atoi(ApiData1.timeZoneOffset));
   b4e02:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   b4e06:	f003 f8cc 	bl	b7fa2 <atoi>
   b4e0a:	ee07 0a90 	vmov	s15, r0
   b4e0e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b4e12:	f002 fd7d 	bl	b7910 <_ZN9TimeClass4zoneEf>
   b4e16:	4b52      	ldr	r3, [pc, #328]	; (b4f60 <_Z8RealTimev+0x164>)
  Time.zone(atoi(ApiData2.timeZoneOffset));
   b4e18:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   b4e1c:	f003 f8c1 	bl	b7fa2 <atoi>
   b4e20:	ee07 0a90 	vmov	s15, r0
   b4e24:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   b4e28:	f002 fd72 	bl	b7910 <_ZN9TimeClass4zoneEf>

  String hour = String(Time.hourFormat12(Time.now()));
   b4e2c:	f002 fdad 	bl	b798a <_ZN9TimeClass3nowEv>
   b4e30:	17c1      	asrs	r1, r0, #31
   b4e32:	f002 fd39 	bl	b78a8 <_ZN9TimeClass12hourFormat12Ex>
   b4e36:	220a      	movs	r2, #10
   b4e38:	4601      	mov	r1, r0
   b4e3a:	4668      	mov	r0, sp
   b4e3c:	f002 fc32 	bl	b76a4 <_ZN6StringC1Eih>
  String minute = String::format("%02i",Time.minute(Time.now()));
   b4e40:	f002 fda3 	bl	b798a <_ZN9TimeClass3nowEv>
   b4e44:	17c1      	asrs	r1, r0, #31
   b4e46:	f002 fd49 	bl	b78dc <_ZN9TimeClass6minuteEx>
   b4e4a:	4946      	ldr	r1, [pc, #280]	; (b4f64 <_Z8RealTimev+0x168>)
   b4e4c:	4602      	mov	r2, r0
   b4e4e:	a804      	add	r0, sp, #16
   b4e50:	f002 fc9a 	bl	b7788 <_ZN6String6formatEPKcz>
  String second = String::format("%02i",Time.second(Time.now()));
   b4e54:	f002 fd99 	bl	b798a <_ZN9TimeClass3nowEv>
   b4e58:	17c1      	asrs	r1, r0, #31
   b4e5a:	f002 fd47 	bl	b78ec <_ZN9TimeClass6secondEx>
   b4e5e:	4941      	ldr	r1, [pc, #260]	; (b4f64 <_Z8RealTimev+0x168>)
   b4e60:	4602      	mov	r2, r0
   b4e62:	a808      	add	r0, sp, #32
   b4e64:	f002 fc90 	bl	b7788 <_ZN6String6formatEPKcz>
   
  String day = String(Time.day());
   b4e68:	f002 fda8 	bl	b79bc <_ZN9TimeClass3dayEv>
   b4e6c:	220a      	movs	r2, #10
   b4e6e:	4601      	mov	r1, r0
   b4e70:	a80c      	add	r0, sp, #48	; 0x30
   b4e72:	f002 fc17 	bl	b76a4 <_ZN6StringC1Eih>
  String month = String(Time.month());
   b4e76:	f002 fdad 	bl	b79d4 <_ZN9TimeClass5monthEv>
   b4e7a:	220a      	movs	r2, #10
   b4e7c:	4601      	mov	r1, r0
   b4e7e:	a810      	add	r0, sp, #64	; 0x40
   b4e80:	f002 fc10 	bl	b76a4 <_ZN6StringC1Eih>
  String year = String(Time.year());
   b4e84:	f002 fdae 	bl	b79e4 <_ZN9TimeClass4yearEv>
   b4e88:	220a      	movs	r2, #10
   b4e8a:	4601      	mov	r1, r0
   b4e8c:	a814      	add	r0, sp, #80	; 0x50
   b4e8e:	f002 fc09 	bl	b76a4 <_ZN6StringC1Eih>

    if(!Time.isPM()){
   b4e92:	f002 fd8a 	bl	b79aa <_ZN9TimeClass4isPMEv>
	StringSumHelper(const String &s) : String(s) {}
   b4e96:	4669      	mov	r1, sp
   b4e98:	2800      	cmp	r0, #0
   b4e9a:	d14c      	bne.n	b4f36 <_Z8RealTimev+0x13a>
   b4e9c:	a818      	add	r0, sp, #96	; 0x60
   b4e9e:	f002 fbd2 	bl	b7646 <_ZN6StringC1ERKS_>
        hhmmss = hour + ":" + minute + ":" + second +"AM";
   b4ea2:	4931      	ldr	r1, [pc, #196]	; (b4f68 <_Z8RealTimev+0x16c>)
   b4ea4:	a818      	add	r0, sp, #96	; 0x60
   b4ea6:	f002 fc48 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4eaa:	a904      	add	r1, sp, #16
   b4eac:	f002 fc39 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4eb0:	492d      	ldr	r1, [pc, #180]	; (b4f68 <_Z8RealTimev+0x16c>)
   b4eb2:	f002 fc42 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4eb6:	a908      	add	r1, sp, #32
   b4eb8:	f002 fc33 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4ebc:	492b      	ldr	r1, [pc, #172]	; (b4f6c <_Z8RealTimev+0x170>)
          } else {
            hhmmss = hour + ":" + minute + ":" + second +"PM";
   b4ebe:	f002 fc3c 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4ec2:	4601      	mov	r1, r0
   b4ec4:	482a      	ldr	r0, [pc, #168]	; (b4f70 <_Z8RealTimev+0x174>)
   b4ec6:	f002 fbaf 	bl	b7628 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4eca:	a818      	add	r0, sp, #96	; 0x60
   b4ecc:	f002 fb24 	bl	b7518 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b4ed0:	a914      	add	r1, sp, #80	; 0x50
   b4ed2:	a818      	add	r0, sp, #96	; 0x60
   b4ed4:	f002 fbb7 	bl	b7646 <_ZN6StringC1ERKS_>
          }
            data_time = year + "-" + month + "-" + day + "T" + hhmmss;
   b4ed8:	4926      	ldr	r1, [pc, #152]	; (b4f74 <_Z8RealTimev+0x178>)
   b4eda:	a818      	add	r0, sp, #96	; 0x60
   b4edc:	f002 fc2d 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4ee0:	a910      	add	r1, sp, #64	; 0x40
   b4ee2:	f002 fc1e 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4ee6:	4923      	ldr	r1, [pc, #140]	; (b4f74 <_Z8RealTimev+0x178>)
   b4ee8:	f002 fc27 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4eec:	a90c      	add	r1, sp, #48	; 0x30
   b4eee:	f002 fc18 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4ef2:	4921      	ldr	r1, [pc, #132]	; (b4f78 <_Z8RealTimev+0x17c>)
   b4ef4:	f002 fc21 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4ef8:	491d      	ldr	r1, [pc, #116]	; (b4f70 <_Z8RealTimev+0x174>)
   b4efa:	f002 fc12 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4efe:	4601      	mov	r1, r0
   b4f00:	481e      	ldr	r0, [pc, #120]	; (b4f7c <_Z8RealTimev+0x180>)
   b4f02:	f002 fb91 	bl	b7628 <_ZN6StringaSERKS_>
class StringSumHelper : public String
   b4f06:	a818      	add	r0, sp, #96	; 0x60
   b4f08:	f002 fb06 	bl	b7518 <_ZN6StringD1Ev>
  String year = String(Time.year());
   b4f0c:	a814      	add	r0, sp, #80	; 0x50
   b4f0e:	f002 fb03 	bl	b7518 <_ZN6StringD1Ev>
  String month = String(Time.month());
   b4f12:	a810      	add	r0, sp, #64	; 0x40
   b4f14:	f002 fb00 	bl	b7518 <_ZN6StringD1Ev>
  String day = String(Time.day());
   b4f18:	a80c      	add	r0, sp, #48	; 0x30
   b4f1a:	f002 fafd 	bl	b7518 <_ZN6StringD1Ev>
  String second = String::format("%02i",Time.second(Time.now()));
   b4f1e:	a808      	add	r0, sp, #32
   b4f20:	f002 fafa 	bl	b7518 <_ZN6StringD1Ev>
  String minute = String::format("%02i",Time.minute(Time.now()));
   b4f24:	a804      	add	r0, sp, #16
   b4f26:	f002 faf7 	bl	b7518 <_ZN6StringD1Ev>
  String hour = String(Time.hourFormat12(Time.now()));
   b4f2a:	4668      	mov	r0, sp
   b4f2c:	f002 faf4 	bl	b7518 <_ZN6StringD1Ev>
 }
   b4f30:	b01d      	add	sp, #116	; 0x74
   b4f32:	f85d fb04 	ldr.w	pc, [sp], #4
	StringSumHelper(const String &s) : String(s) {}
   b4f36:	a818      	add	r0, sp, #96	; 0x60
   b4f38:	f002 fb85 	bl	b7646 <_ZN6StringC1ERKS_>
            hhmmss = hour + ":" + minute + ":" + second +"PM";
   b4f3c:	490a      	ldr	r1, [pc, #40]	; (b4f68 <_Z8RealTimev+0x16c>)
   b4f3e:	a818      	add	r0, sp, #96	; 0x60
   b4f40:	f002 fbfb 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4f44:	a904      	add	r1, sp, #16
   b4f46:	f002 fbec 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4f4a:	4907      	ldr	r1, [pc, #28]	; (b4f68 <_Z8RealTimev+0x16c>)
   b4f4c:	f002 fbf5 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b4f50:	a908      	add	r1, sp, #32
   b4f52:	f002 fbe6 	bl	b7722 <_ZplRK15StringSumHelperRK6String>
   b4f56:	490a      	ldr	r1, [pc, #40]	; (b4f80 <_Z8RealTimev+0x184>)
   b4f58:	e7b1      	b.n	b4ebe <_Z8RealTimev+0xc2>
   b4f5a:	bf00      	nop
   b4f5c:	2003deb8 	.word	0x2003deb8
   b4f60:	2003df78 	.word	0x2003df78
   b4f64:	000b842c 	.word	0x000b842c
   b4f68:	000b83ee 	.word	0x000b83ee
   b4f6c:	000b8431 	.word	0x000b8431
   b4f70:	2003e12c 	.word	0x2003e12c
   b4f74:	000b8437 	.word	0x000b8437
   b4f78:	000b8439 	.word	0x000b8439
   b4f7c:	2003e118 	.word	0x2003e118
   b4f80:	000b8434 	.word	0x000b8434

000b4f84 <_Z16ApiParser_event1v>:

void ApiParser_event1(void){                    //store all sperate data from API into the struct variable
   b4f84:	b538      	push	{r3, r4, r5, lr}

//ApiData.id = array[0];
  ApiData1.readerMode = array[1];
   b4f86:	4d1d      	ldr	r5, [pc, #116]	; (b4ffc <_Z16ApiParser_event1v+0x78>)
   b4f88:	4c1d      	ldr	r4, [pc, #116]	; (b5000 <_Z16ApiParser_event1v+0x7c>)
   b4f8a:	6869      	ldr	r1, [r5, #4]
   b4f8c:	f104 0020 	add.w	r0, r4, #32
   b4f90:	f002 fb64 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.roomName = array[2];
   b4f94:	68a9      	ldr	r1, [r5, #8]
   b4f96:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b4f9a:	f002 fb5f 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.id = array[3];
   b4f9e:	68e9      	ldr	r1, [r5, #12]
   b4fa0:	4620      	mov	r0, r4
   b4fa2:	f002 fb5b 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.title = array[4];
   b4fa6:	6929      	ldr	r1, [r5, #16]
   b4fa8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b4fac:	f002 fb56 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.startTime = array[5];
   b4fb0:	6969      	ldr	r1, [r5, #20]
   b4fb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b4fb6:	f002 fb51 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.endTime = array[6];
   b4fba:	69a9      	ldr	r1, [r5, #24]
   b4fbc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4fc0:	f002 fb4c 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.timezone = array[7];
   b4fc4:	69e9      	ldr	r1, [r5, #28]
   b4fc6:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b4fca:	f002 fb47 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.timeZoneOffset = array[8];
   b4fce:	6a29      	ldr	r1, [r5, #32]
   b4fd0:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b4fd4:	f002 fb42 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.instructorFirstName = array[9];
   b4fd8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   b4fda:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b4fde:	f002 fb3d 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.instructorLastName = array[10];
   b4fe2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   b4fe4:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b4fe8:	f002 fb38 	bl	b765c <_ZN6StringaSEPKc>
  ApiData1.isHybrid = array[11];
   b4fec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   b4fee:	f104 00b0 	add.w	r0, r4, #176	; 0xb0

}
   b4ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ApiData1.isHybrid = array[11];
   b4ff6:	f002 bb31 	b.w	b765c <_ZN6StringaSEPKc>
   b4ffa:	bf00      	nop
   b4ffc:	2003e098 	.word	0x2003e098
   b5000:	2003deb8 	.word	0x2003deb8

000b5004 <_Z16ApiParser_event2v>:

void ApiParser_event2(void){                    //store all sperate data from API into the struct variable
   b5004:	b538      	push	{r3, r4, r5, lr}

    //ApiData.id = array[0];
    ApiData2.readerMode = array[10];
   b5006:	4d1e      	ldr	r5, [pc, #120]	; (b5080 <_Z16ApiParser_event2v+0x7c>)
   b5008:	4c1e      	ldr	r4, [pc, #120]	; (b5084 <_Z16ApiParser_event2v+0x80>)
   b500a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   b500c:	f104 0020 	add.w	r0, r4, #32
   b5010:	f002 fb24 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.roomName = array[2];
   b5014:	68a9      	ldr	r1, [r5, #8]
   b5016:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b501a:	f002 fb1f 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.id = array[12];
   b501e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   b5020:	4620      	mov	r0, r4
   b5022:	f002 fb1b 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.title = array[13];
   b5026:	6b69      	ldr	r1, [r5, #52]	; 0x34
   b5028:	f104 0040 	add.w	r0, r4, #64	; 0x40
   b502c:	f002 fb16 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.startTime = array[14];
   b5030:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   b5032:	f104 0050 	add.w	r0, r4, #80	; 0x50
   b5036:	f002 fb11 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.endTime = array[15];
   b503a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   b503c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b5040:	f002 fb0c 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.timezone = array[16];
   b5044:	6c29      	ldr	r1, [r5, #64]	; 0x40
   b5046:	f104 0070 	add.w	r0, r4, #112	; 0x70
   b504a:	f002 fb07 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.timeZoneOffset = array[17];
   b504e:	6c69      	ldr	r1, [r5, #68]	; 0x44
   b5050:	f104 0080 	add.w	r0, r4, #128	; 0x80
   b5054:	f002 fb02 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.instructorFirstName = array[18];
   b5058:	6ca9      	ldr	r1, [r5, #72]	; 0x48
   b505a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   b505e:	f002 fafd 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.instructorLastName = array[19];
   b5062:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
   b5064:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   b5068:	f002 faf8 	bl	b765c <_ZN6StringaSEPKc>
    ApiData2.isHybrid = array[20];
   b506c:	6d29      	ldr	r1, [r5, #80]	; 0x50
   b506e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   b5072:	f002 faf3 	bl	b765c <_ZN6StringaSEPKc>

    new_end_point_STATE = 2;
   b5076:	4b04      	ldr	r3, [pc, #16]	; (b5088 <_Z16ApiParser_event2v+0x84>)
   b5078:	2202      	movs	r2, #2
   b507a:	601a      	str	r2, [r3, #0]
    
}
   b507c:	bd38      	pop	{r3, r4, r5, pc}
   b507e:	bf00      	nop
   b5080:	2003e098 	.word	0x2003e098
   b5084:	2003df78 	.word	0x2003df78
   b5088:	2003e13c 	.word	0x2003e13c

000b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b508c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b508e:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b5090:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b5092:	b17c      	cbz	r4, b50b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b5094:	6863      	ldr	r3, [r4, #4]
   b5096:	3b01      	subs	r3, #1
   b5098:	6063      	str	r3, [r4, #4]
   b509a:	b95b      	cbnz	r3, b50b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b509c:	6823      	ldr	r3, [r4, #0]
   b509e:	4620      	mov	r0, r4
   b50a0:	689b      	ldr	r3, [r3, #8]
   b50a2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b50a4:	68a3      	ldr	r3, [r4, #8]
   b50a6:	3b01      	subs	r3, #1
   b50a8:	60a3      	str	r3, [r4, #8]
   b50aa:	b91b      	cbnz	r3, b50b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b50ac:	6823      	ldr	r3, [r4, #0]
   b50ae:	4620      	mov	r0, r4
   b50b0:	68db      	ldr	r3, [r3, #12]
   b50b2:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b50b4:	4628      	mov	r0, r5
   b50b6:	bd38      	pop	{r3, r4, r5, pc}

000b50b8 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b50b8:	4b1d      	ldr	r3, [pc, #116]	; (b5130 <_GLOBAL__sub_I_SystemMode+0x78>)
    Serial.println("Clearing String buffer");             //Clear String after publish.
    Identifier = ("");    
    TimeStamp = ("");
    RFID_counter = 0;
    previous_Publish_Millis = current_Publish_Millis;
}
   b50ba:	b510      	push	{r4, lr}
   b50bc:	2400      	movs	r4, #0
   b50be:	701c      	strb	r4, [r3, #0]
   b50c0:	4b1c      	ldr	r3, [pc, #112]	; (b5134 <_GLOBAL__sub_I_SystemMode+0x7c>)
   b50c2:	2201      	movs	r2, #1
   b50c4:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b50c6:	4b1c      	ldr	r3, [pc, #112]	; (b5138 <_GLOBAL__sub_I_SystemMode+0x80>)
    SleepResult() {}
   b50c8:	f1a2 1201 	sub.w	r2, r2, #65537	; 0x10001
              error_(SYSTEM_ERROR_NONE) {
   b50cc:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b50d0:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b50d2:	2002      	movs	r0, #2
   b50d4:	f001 fa54 	bl	b6580 <set_system_mode>
String EvendId;
   b50d8:	4918      	ldr	r1, [pc, #96]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b50da:	4819      	ldr	r0, [pc, #100]	; (b5140 <_GLOBAL__sub_I_SystemMode+0x88>)
   b50dc:	f002 fa67 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
String ReaderMode;
   b50e0:	4916      	ldr	r1, [pc, #88]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b50e2:	4818      	ldr	r0, [pc, #96]	; (b5144 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b50e4:	f002 fa63 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
String TimeStamp;
   b50e8:	4914      	ldr	r1, [pc, #80]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b50ea:	4817      	ldr	r0, [pc, #92]	; (b5148 <_GLOBAL__sub_I_SystemMode+0x90>)
   b50ec:	f002 fa5f 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
String Identifier;
   b50f0:	4912      	ldr	r1, [pc, #72]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b50f2:	4816      	ldr	r0, [pc, #88]	; (b514c <_GLOBAL__sub_I_SystemMode+0x94>)
   b50f4:	f002 fa5b 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
String rfid_uid = "";
   b50f8:	4910      	ldr	r1, [pc, #64]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b50fa:	4815      	ldr	r0, [pc, #84]	; (b5150 <_GLOBAL__sub_I_SystemMode+0x98>)
   b50fc:	f002 fa57 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
String hhmmss;
   b5100:	490e      	ldr	r1, [pc, #56]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b5102:	4814      	ldr	r0, [pc, #80]	; (b5154 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b5104:	f002 fa53 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
String data_time;
   b5108:	490c      	ldr	r1, [pc, #48]	; (b513c <_GLOBAL__sub_I_SystemMode+0x84>)
   b510a:	4813      	ldr	r0, [pc, #76]	; (b5158 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b510c:	f002 fa4f 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
}ApiData1, ApiData2;
   b5110:	4812      	ldr	r0, [pc, #72]	; (b515c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b5112:	f7ff fc29 	bl	b4968 <_ZN11myStructureC1Ev>
   b5116:	4812      	ldr	r0, [pc, #72]	; (b5160 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b5118:	f7ff fc26 	bl	b4968 <_ZN11myStructureC1Ev>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b511c:	4622      	mov	r2, r4
   b511e:	4811      	ldr	r0, [pc, #68]	; (b5164 <_GLOBAL__sub_I_SystemMode+0xac>)
   b5120:	2102      	movs	r1, #2
   b5122:	f000 ffb5 	bl	b6090 <_ZN17DFRobot_PN532_IICC1Ehh>
}
   b5126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
max1720x gauge;
   b512a:	480f      	ldr	r0, [pc, #60]	; (b5168 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b512c:	f000 bdc8 	b.w	b5cc0 <_ZN8max1720xC1Ev>
   b5130:	2003e094 	.word	0x2003e094
   b5134:	2003e095 	.word	0x2003e095
   b5138:	2003e078 	.word	0x2003e078
   b513c:	000b8399 	.word	0x000b8399
   b5140:	2003e038 	.word	0x2003e038
   b5144:	2003e064 	.word	0x2003e064
   b5148:	2003e084 	.word	0x2003e084
   b514c:	2003e04c 	.word	0x2003e04c
   b5150:	2003e194 	.word	0x2003e194
   b5154:	2003e12c 	.word	0x2003e12c
   b5158:	2003e118 	.word	0x2003e118
   b515c:	2003deb8 	.word	0x2003deb8
   b5160:	2003df78 	.word	0x2003df78
   b5164:	2003e140 	.word	0x2003e140
   b5168:	2003e128 	.word	0x2003e128

000b516c <_Z9End_Pointv>:
void End_Point() {
   b516c:	b530      	push	{r4, r5, lr}
   b516e:	b085      	sub	sp, #20
  Serial.println("Calling End Point function..."); 
   b5170:	f002 fcfe 	bl	b7b70 <_Z16_fetch_usbserialv>
   b5174:	4926      	ldr	r1, [pc, #152]	; (b5210 <_Z9End_Pointv+0xa4>)
   b5176:	f002 f8c2 	bl	b72fe <_ZN5Print7printlnEPKc>
      uint32_t freemem = System.freeMemory();
   b517a:	f002 fb2d 	bl	b77d8 <_ZN11SystemClass10freeMemoryEv>
   b517e:	4605      	mov	r5, r0
      Serial.print("free memory: ");
   b5180:	f002 fcf6 	bl	b7b70 <_Z16_fetch_usbserialv>
   b5184:	4923      	ldr	r1, [pc, #140]	; (b5214 <_Z9End_Pointv+0xa8>)
   b5186:	f002 f8a7 	bl	b72d8 <_ZN5Print5printEPKc>
      Serial.println(freemem);
   b518a:	f002 fcf1 	bl	b7b70 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b518e:	220a      	movs	r2, #10
   b5190:	4604      	mov	r4, r0
   b5192:	4629      	mov	r1, r5
   b5194:	f002 f8bd 	bl	b7312 <_ZN5Print11printNumberEmh>
        n += println();
   b5198:	4620      	mov	r0, r4
   b519a:	f002 f8a4 	bl	b72e6 <_ZN5Print7printlnEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b519e:	f001 fa3b 	bl	b6618 <spark_cloud_flag_connected>
   if (Particle.connected() == false) {
   b51a2:	bb98      	cbnz	r0, b520c <_Z9End_Pointv+0xa0>
      Serial.println("IF Statement executing");
   b51a4:	f002 fce4 	bl	b7b70 <_Z16_fetch_usbserialv>
   b51a8:	491b      	ldr	r1, [pc, #108]	; (b5218 <_Z9End_Pointv+0xac>)
   b51aa:	f002 f8a8 	bl	b72fe <_ZN5Print7printlnEPKc>
      digitalWrite(LDO_EN, HIGH);
   b51ae:	2101      	movs	r1, #1
   b51b0:	2017      	movs	r0, #23
   b51b2:	f002 fe40 	bl	b7e36 <digitalWrite>
      delay(1000);
   b51b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b51ba:	f001 fb1d 	bl	b67f8 <delay>
      Cellular.on();
   b51be:	4817      	ldr	r0, [pc, #92]	; (b521c <_Z9End_Pointv+0xb0>)
   b51c0:	f7ff fbcc 	bl	b495c <_ZN5spark13CellularClass2onEv>
      waitUntil(Cellular.isOn);
   b51c4:	4815      	ldr	r0, [pc, #84]	; (b521c <_Z9End_Pointv+0xb0>)
   b51c6:	f001 ffcd 	bl	b7164 <_ZN5spark12NetworkClass4isOnEv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b51ca:	b910      	cbnz	r0, b51d2 <_Z9End_Pointv+0x66>
            spark_process();
   b51cc:	f001 fa14 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b51d0:	e7f8      	b.n	b51c4 <_Z9End_Pointv+0x58>
   b51d2:	4812      	ldr	r0, [pc, #72]	; (b521c <_Z9End_Pointv+0xb0>)
   b51d4:	f001 ffc6 	bl	b7164 <_ZN5spark12NetworkClass4isOnEv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b51d8:	f001 fa16 	bl	b6608 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b51dc:	f001 fa1c 	bl	b6618 <spark_cloud_flag_connected>
   b51e0:	b910      	cbnz	r0, b51e8 <_Z9End_Pointv+0x7c>
            spark_process();
   b51e2:	f001 fa09 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b51e6:	e7f9      	b.n	b51dc <_Z9End_Pointv+0x70>
   b51e8:	f001 fa16 	bl	b6618 <spark_cloud_flag_connected>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b51ec:	4b0c      	ldr	r3, [pc, #48]	; (b5220 <_Z9End_Pointv+0xb4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b51ee:	4a0d      	ldr	r2, [pc, #52]	; (b5224 <_Z9End_Pointv+0xb8>)
   b51f0:	781b      	ldrb	r3, [r3, #0]
   b51f2:	490d      	ldr	r1, [pc, #52]	; (b5228 <_Z9End_Pointv+0xbc>)
   b51f4:	f88d 3000 	strb.w	r3, [sp]
   b51f8:	a802      	add	r0, sp, #8
   b51fa:	233c      	movs	r3, #60	; 0x3c
   b51fc:	f001 fcde 	bl	b6bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b5200:	a803      	add	r0, sp, #12
   b5202:	f7ff ff43 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      new_end_point_STATE = 1;  
   b5206:	4b09      	ldr	r3, [pc, #36]	; (b522c <_Z9End_Pointv+0xc0>)
   b5208:	2201      	movs	r2, #1
   b520a:	601a      	str	r2, [r3, #0]
}
   b520c:	b005      	add	sp, #20
   b520e:	bd30      	pop	{r4, r5, pc}
   b5210:	000b843b 	.word	0x000b843b
   b5214:	000b8459 	.word	0x000b8459
   b5218:	000b8467 	.word	0x000b8467
   b521c:	2003e664 	.word	0x2003e664
   b5220:	2003e095 	.word	0x2003e095
   b5224:	2003de28 	.word	0x2003de28
   b5228:	000b848c 	.word	0x000b848c
   b522c:	2003e13c 	.word	0x2003e13c

000b5230 <setup>:
void setup() {
   b5230:	b530      	push	{r4, r5, lr}
   b5232:	b087      	sub	sp, #28
  Serial.begin(115200);
   b5234:	f002 fc9c 	bl	b7b70 <_Z16_fetch_usbserialv>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b5238:	2500      	movs	r5, #0
   b523a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b523e:	f002 fc8b 	bl	b7b58 <_ZN9USBSerial5beginEl>
   b5242:	4925      	ldr	r1, [pc, #148]	; (b52d8 <setup+0xa8>)
   b5244:	4825      	ldr	r0, [pc, #148]	; (b52dc <setup+0xac>)
   b5246:	462b      	mov	r3, r5
   b5248:	462a      	mov	r2, r5
   b524a:	e9cd 5500 	strd	r5, r5, [sp]
   b524e:	f001 f9f3 	bl	b6638 <spark_subscribe>
inline CloudDisconnectOptions::CloudDisconnectOptions() :
        CloudDisconnectOptions(0, 0, false, false) {
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
   b5252:	2401      	movs	r4, #1
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b5254:	2203      	movs	r2, #3
   b5256:	f241 3388 	movw	r3, #5000	; 0x1388
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
   b525a:	a803      	add	r0, sp, #12
   b525c:	e9cd 2303 	strd	r2, r3, [sp, #12]
        bool clearSession) :
   b5260:	f8ad 4014 	strh.w	r4, [sp, #20]
   b5264:	f001 fba7 	bl	b69b6 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>
  pinMode(BATON, OUTPUT);
   b5268:	4621      	mov	r1, r4
   b526a:	2016      	movs	r0, #22
   b526c:	f002 fdd2 	bl	b7e14 <pinMode>
  digitalWrite(BATON,HIGH);
   b5270:	4621      	mov	r1, r4
   b5272:	2016      	movs	r0, #22
   b5274:	f002 fddf 	bl	b7e36 <digitalWrite>
  pinMode (BUZZER, OUTPUT);
   b5278:	4621      	mov	r1, r4
   b527a:	2009      	movs	r0, #9
   b527c:	f002 fdca 	bl	b7e14 <pinMode>
  digitalWrite (BUZZER, LOW);
   b5280:	4629      	mov	r1, r5
   b5282:	2009      	movs	r0, #9
   b5284:	f002 fdd7 	bl	b7e36 <digitalWrite>
  pinMode(LDO_EN, OUTPUT);
   b5288:	4621      	mov	r1, r4
   b528a:	2017      	movs	r0, #23
   b528c:	f002 fdc2 	bl	b7e14 <pinMode>
  digitalWrite(LDO_EN, HIGH);
   b5290:	4621      	mov	r1, r4
   b5292:	2017      	movs	r0, #23
   b5294:	f002 fdcf 	bl	b7e36 <digitalWrite>
  gauge.reset();                                  // Resets MAX1720x
   b5298:	4811      	ldr	r0, [pc, #68]	; (b52e0 <setup+0xb0>)
  while (!nfc.begin()) {
   b529a:	4d12      	ldr	r5, [pc, #72]	; (b52e4 <setup+0xb4>)
    Serial.print(".");
   b529c:	4c12      	ldr	r4, [pc, #72]	; (b52e8 <setup+0xb8>)
  gauge.reset();                                  // Resets MAX1720x
   b529e:	f000 fd17 	bl	b5cd0 <_ZN8max1720x5resetEv>
  Serial.println();
   b52a2:	f002 fc65 	bl	b7b70 <_Z16_fetch_usbserialv>
   b52a6:	f002 f81e 	bl	b72e6 <_ZN5Print7printlnEv>
  Serial.print("Initializing PN532");
   b52aa:	f002 fc61 	bl	b7b70 <_Z16_fetch_usbserialv>
   b52ae:	490f      	ldr	r1, [pc, #60]	; (b52ec <setup+0xbc>)
   b52b0:	f002 f812 	bl	b72d8 <_ZN5Print5printEPKc>
  while (!nfc.begin()) {
   b52b4:	4628      	mov	r0, r5
   b52b6:	f000 ffaf 	bl	b6218 <_ZN17DFRobot_PN532_IIC5beginEv>
   b52ba:	b940      	cbnz	r0, b52ce <setup+0x9e>
    Serial.print(".");
   b52bc:	f002 fc58 	bl	b7b70 <_Z16_fetch_usbserialv>
   b52c0:	4621      	mov	r1, r4
   b52c2:	f002 f809 	bl	b72d8 <_ZN5Print5printEPKc>
    delay (100);
   b52c6:	2064      	movs	r0, #100	; 0x64
   b52c8:	f001 fa96 	bl	b67f8 <delay>
  while (!nfc.begin()) {
   b52cc:	e7f2      	b.n	b52b4 <setup+0x84>
}
   b52ce:	b007      	add	sp, #28
   b52d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  End_Point();                                      //Retrieve initial schedule
   b52d4:	f7ff bf4a 	b.w	b516c <_Z9End_Pointv>
   b52d8:	000b4919 	.word	0x000b4919
   b52dc:	000b847e 	.word	0x000b847e
   b52e0:	2003e128 	.word	0x2003e128
   b52e4:	2003e140 	.word	0x2003e140
   b52e8:	000b8457 	.word	0x000b8457
   b52ec:	000b8495 	.word	0x000b8495

000b52f0 <_Z12publish_datav>:
void publish_data(void){                      // this function publish the JSON to particle console
   b52f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52f4:	b08e      	sub	sp, #56	; 0x38
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b52f6:	f001 f98f 	bl	b6618 <spark_cloud_flag_connected>
   if (Particle.connected() == false) {
   b52fa:	bb18      	cbnz	r0, b5344 <_Z12publish_datav+0x54>
      Serial.println("Sending RFID data");
   b52fc:	f002 fc38 	bl	b7b70 <_Z16_fetch_usbserialv>
   b5300:	4933      	ldr	r1, [pc, #204]	; (b53d0 <_Z12publish_datav+0xe0>)
   b5302:	f001 fffc 	bl	b72fe <_ZN5Print7printlnEPKc>
      digitalWrite(LDO_EN, HIGH);
   b5306:	2101      	movs	r1, #1
   b5308:	2017      	movs	r0, #23
   b530a:	f002 fd94 	bl	b7e36 <digitalWrite>
      delay(1000);
   b530e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5312:	f001 fa71 	bl	b67f8 <delay>
      Cellular.on();
   b5316:	482f      	ldr	r0, [pc, #188]	; (b53d4 <_Z12publish_datav+0xe4>)
   b5318:	f7ff fb20 	bl	b495c <_ZN5spark13CellularClass2onEv>
      waitUntil(Cellular.isOn);
   b531c:	482d      	ldr	r0, [pc, #180]	; (b53d4 <_Z12publish_datav+0xe4>)
   b531e:	f001 ff21 	bl	b7164 <_ZN5spark12NetworkClass4isOnEv>
   b5322:	b910      	cbnz	r0, b532a <_Z12publish_datav+0x3a>
            spark_process();
   b5324:	f001 f968 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b5328:	e7f8      	b.n	b531c <_Z12publish_datav+0x2c>
   b532a:	482a      	ldr	r0, [pc, #168]	; (b53d4 <_Z12publish_datav+0xe4>)
   b532c:	f001 ff1a 	bl	b7164 <_ZN5spark12NetworkClass4isOnEv>
        spark_cloud_flag_connect();
   b5330:	f001 f96a 	bl	b6608 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b5334:	f001 f970 	bl	b6618 <spark_cloud_flag_connected>
   b5338:	b910      	cbnz	r0, b5340 <_Z12publish_datav+0x50>
            spark_process();
   b533a:	f001 f95d 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b533e:	e7f9      	b.n	b5334 <_Z12publish_datav+0x44>
   b5340:	f001 f96a 	bl	b6618 <spark_cloud_flag_connected>
	const char * c_str() const { return buffer; }
   b5344:	4e24      	ldr	r6, [pc, #144]	; (b53d8 <_Z12publish_datav+0xe8>)
   b5346:	4c25      	ldr	r4, [pc, #148]	; (b53dc <_Z12publish_datav+0xec>)
    Particle.publish("Device data", String::format("{\"Scans\":[{\"EventId\":%d,\"ReaderMode\":\"%s\",\"TimeStamp\":\"%s\",\"Identifier\":\"%s\"},{\"EventId\":%d,\"ReaderMode\":\"%s\",\"TimeStamp\":\"%s\",\"Identifier\":\"%s\"}]}", atoi(ApiData1.id), ApiData1.readerMode.c_str(),TimeStamp.c_str(),Identifier.c_str(),atoi(ApiData2.id), ApiData1.readerMode.c_str(),TimeStamp.c_str(),Identifier.c_str()));
   b5348:	6830      	ldr	r0, [r6, #0]
   b534a:	4d25      	ldr	r5, [pc, #148]	; (b53e0 <_Z12publish_datav+0xf0>)
   b534c:	f002 fe29 	bl	b7fa2 <atoi>
   b5350:	4924      	ldr	r1, [pc, #144]	; (b53e4 <_Z12publish_datav+0xf4>)
   b5352:	6a33      	ldr	r3, [r6, #32]
   b5354:	9007      	str	r0, [sp, #28]
   b5356:	6808      	ldr	r0, [r1, #0]
   b5358:	6827      	ldr	r7, [r4, #0]
   b535a:	f8d5 8000 	ldr.w	r8, [r5]
   b535e:	9306      	str	r3, [sp, #24]
   b5360:	f002 fe1f 	bl	b7fa2 <atoi>
   b5364:	6829      	ldr	r1, [r5, #0]
   b5366:	9105      	str	r1, [sp, #20]
   b5368:	6821      	ldr	r1, [r4, #0]
   b536a:	9104      	str	r1, [sp, #16]
   b536c:	6a31      	ldr	r1, [r6, #32]
   b536e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   b5372:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b5376:	e9cd 7800 	strd	r7, r8, [sp]
   b537a:	a80a      	add	r0, sp, #40	; 0x28
   b537c:	491a      	ldr	r1, [pc, #104]	; (b53e8 <_Z12publish_datav+0xf8>)
   b537e:	f002 fa03 	bl	b7788 <_ZN6String6formatEPKcz>
   b5382:	4b1a      	ldr	r3, [pc, #104]	; (b53ec <_Z12publish_datav+0xfc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b5384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5386:	781b      	ldrb	r3, [r3, #0]
   b5388:	4919      	ldr	r1, [pc, #100]	; (b53f0 <_Z12publish_datav+0x100>)
   b538a:	f88d 3000 	strb.w	r3, [sp]
   b538e:	a808      	add	r0, sp, #32
   b5390:	233c      	movs	r3, #60	; 0x3c
   b5392:	f001 fc13 	bl	b6bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b5396:	a809      	add	r0, sp, #36	; 0x24
   b5398:	f7ff fe78 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b539c:	a80a      	add	r0, sp, #40	; 0x28
   b539e:	f002 f8bb 	bl	b7518 <_ZN6StringD1Ev>
    Serial.println("Clearing String buffer");             //Clear String after publish.
   b53a2:	f002 fbe5 	bl	b7b70 <_Z16_fetch_usbserialv>
   b53a6:	4913      	ldr	r1, [pc, #76]	; (b53f4 <_Z12publish_datav+0x104>)
   b53a8:	f001 ffa9 	bl	b72fe <_ZN5Print7printlnEPKc>
    Identifier = ("");    
   b53ac:	4912      	ldr	r1, [pc, #72]	; (b53f8 <_Z12publish_datav+0x108>)
   b53ae:	4628      	mov	r0, r5
   b53b0:	f002 f954 	bl	b765c <_ZN6StringaSEPKc>
    TimeStamp = ("");
   b53b4:	4910      	ldr	r1, [pc, #64]	; (b53f8 <_Z12publish_datav+0x108>)
   b53b6:	4620      	mov	r0, r4
   b53b8:	f002 f950 	bl	b765c <_ZN6StringaSEPKc>
    RFID_counter = 0;
   b53bc:	4b0f      	ldr	r3, [pc, #60]	; (b53fc <_Z12publish_datav+0x10c>)
   b53be:	2200      	movs	r2, #0
   b53c0:	601a      	str	r2, [r3, #0]
    previous_Publish_Millis = current_Publish_Millis;
   b53c2:	4b0f      	ldr	r3, [pc, #60]	; (b5400 <_Z12publish_datav+0x110>)
   b53c4:	681a      	ldr	r2, [r3, #0]
   b53c6:	4b0f      	ldr	r3, [pc, #60]	; (b5404 <_Z12publish_datav+0x114>)
   b53c8:	601a      	str	r2, [r3, #0]
}
   b53ca:	b00e      	add	sp, #56	; 0x38
   b53cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b53d0:	000b84a8 	.word	0x000b84a8
   b53d4:	2003e664 	.word	0x2003e664
   b53d8:	2003deb8 	.word	0x2003deb8
   b53dc:	2003e084 	.word	0x2003e084
   b53e0:	2003e04c 	.word	0x2003e04c
   b53e4:	2003df78 	.word	0x2003df78
   b53e8:	000b84ba 	.word	0x000b84ba
   b53ec:	2003e094 	.word	0x2003e094
   b53f0:	000b854e 	.word	0x000b854e
   b53f4:	000b855a 	.word	0x000b855a
   b53f8:	000b8399 	.word	0x000b8399
   b53fc:	2003e060 	.word	0x2003e060
   b5400:	2003e104 	.word	0x2003e104
   b5404:	2003e190 	.word	0x2003e190

000b5408 <_Z4RFIDv>:
void RFID () {
   b5408:	b570      	push	{r4, r5, r6, lr}
if (nfc.scan()) {
   b540a:	483a      	ldr	r0, [pc, #232]	; (b54f4 <_Z4RFIDv+0xec>)
void RFID () {
   b540c:	b088      	sub	sp, #32
if (nfc.scan()) {
   b540e:	f000 fd38 	bl	b5e82 <_ZN13DFRobot_PN5324scanEv>
   b5412:	b158      	cbz	r0, b542c <_Z4RFIDv+0x24>
    if (nfc.readData(dataRead, READ_BLOCK_NO) != 1) {
   b5414:	4938      	ldr	r1, [pc, #224]	; (b54f8 <_Z4RFIDv+0xf0>)
   b5416:	4837      	ldr	r0, [pc, #220]	; (b54f4 <_Z4RFIDv+0xec>)
   b5418:	2202      	movs	r2, #2
   b541a:	f000 fde9 	bl	b5ff0 <_ZN13DFRobot_PN5328readDataEPhh>
   b541e:	2801      	cmp	r0, #1
   b5420:	d00a      	beq.n	b5438 <_Z4RFIDv+0x30>
      Serial.println("FAILED - PLEASE SCAN AGAIN!");
   b5422:	f002 fba5 	bl	b7b70 <_Z16_fetch_usbserialv>
   b5426:	4935      	ldr	r1, [pc, #212]	; (b54fc <_Z4RFIDv+0xf4>)
   b5428:	f001 ff69 	bl	b72fe <_ZN5Print7printlnEPKc>
    delay(250);
   b542c:	20fa      	movs	r0, #250	; 0xfa
}
   b542e:	b008      	add	sp, #32
   b5430:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(250);
   b5434:	f001 b9e0 	b.w	b67f8 <delay>
      String temp_UID;
   b5438:	4931      	ldr	r1, [pc, #196]	; (b5500 <_Z4RFIDv+0xf8>)
   b543a:	4d2f      	ldr	r5, [pc, #188]	; (b54f8 <_Z4RFIDv+0xf0>)
   b543c:	4668      	mov	r0, sp
   b543e:	f002 f8b6 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
   b5442:	240a      	movs	r4, #10
        dataRead[i
   b5444:	2600      	movs	r6, #0
        temp_UID += (String(dataRead[i], HEX));          
   b5446:	2210      	movs	r2, #16
   b5448:	7829      	ldrb	r1, [r5, #0]
   b544a:	eb0d 0002 	add.w	r0, sp, r2
   b544e:	f002 f917 	bl	b7680 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5452:	a904      	add	r1, sp, #16
   b5454:	4668      	mov	r0, sp
   b5456:	f002 f94f 	bl	b76f8 <_ZN6String6concatERKS_>
   b545a:	a804      	add	r0, sp, #16
   b545c:	f002 f85c 	bl	b7518 <_ZN6StringD1Ev>
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b5460:	3c01      	subs	r4, #1
        dataRead[i
   b5462:	f805 6b01 	strb.w	r6, [r5], #1
      for (int i = 0; i < BLOCK_SIZE; i++) {
   b5466:	d1ee      	bne.n	b5446 <_Z4RFIDv+0x3e>
        RealTime();
   b5468:	f7ff fcc8 	bl	b4dfc <_Z8RealTimev>
	StringSumHelper(const String &s) : String(s) {}
   b546c:	4669      	mov	r1, sp
   b546e:	a804      	add	r0, sp, #16
   b5470:	f002 f8e9 	bl	b7646 <_ZN6StringC1ERKS_>
        Identifier += ((temp_UID) + ",");
   b5474:	4923      	ldr	r1, [pc, #140]	; (b5504 <_Z4RFIDv+0xfc>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5476:	4d24      	ldr	r5, [pc, #144]	; (b5508 <_Z4RFIDv+0x100>)
   b5478:	4c24      	ldr	r4, [pc, #144]	; (b550c <_Z4RFIDv+0x104>)
   b547a:	a804      	add	r0, sp, #16
   b547c:	f002 f95d 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b5480:	4601      	mov	r1, r0
   b5482:	4628      	mov	r0, r5
   b5484:	f002 f938 	bl	b76f8 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   b5488:	a804      	add	r0, sp, #16
   b548a:	f002 f845 	bl	b7518 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   b548e:	4920      	ldr	r1, [pc, #128]	; (b5510 <_Z4RFIDv+0x108>)
   b5490:	a804      	add	r0, sp, #16
   b5492:	f002 f8d8 	bl	b7646 <_ZN6StringC1ERKS_>
        TimeStamp += (data_time +",");
   b5496:	491b      	ldr	r1, [pc, #108]	; (b5504 <_Z4RFIDv+0xfc>)
   b5498:	a804      	add	r0, sp, #16
   b549a:	f002 f94e 	bl	b773a <_ZplRK15StringSumHelperPKc>
   b549e:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b54a0:	4620      	mov	r0, r4
   b54a2:	f002 f929 	bl	b76f8 <_ZN6String6concatERKS_>
class StringSumHelper : public String
   b54a6:	a804      	add	r0, sp, #16
   b54a8:	f002 f836 	bl	b7518 <_ZN6StringD1Ev>
        Serial.print(Identifier);             //DEBUG
   b54ac:	f002 fb60 	bl	b7b70 <_Z16_fetch_usbserialv>
   b54b0:	6829      	ldr	r1, [r5, #0]
   b54b2:	f001 ff11 	bl	b72d8 <_ZN5Print5printEPKc>
        Serial.println();                     //DEBUG
   b54b6:	f002 fb5b 	bl	b7b70 <_Z16_fetch_usbserialv>
   b54ba:	f001 ff14 	bl	b72e6 <_ZN5Print7printlnEv>
        Serial.print(TimeStamp);              //DEBUG
   b54be:	f002 fb57 	bl	b7b70 <_Z16_fetch_usbserialv>
   b54c2:	6821      	ldr	r1, [r4, #0]
   b54c4:	f001 ff08 	bl	b72d8 <_ZN5Print5printEPKc>
        Serial.println();                     //DEBUG
   b54c8:	f002 fb52 	bl	b7b70 <_Z16_fetch_usbserialv>
   b54cc:	f001 ff0b 	bl	b72e6 <_ZN5Print7printlnEv>
        RFID_counter = RFID_counter + 1;     
   b54d0:	4a10      	ldr	r2, [pc, #64]	; (b5514 <_Z4RFIDv+0x10c>)
   b54d2:	6813      	ldr	r3, [r2, #0]
   b54d4:	3301      	adds	r3, #1
        if (RFID_counter == 5) {
   b54d6:	2b05      	cmp	r3, #5
        RFID_counter = RFID_counter + 1;     
   b54d8:	6013      	str	r3, [r2, #0]
        if (RFID_counter == 5) {
   b54da:	d106      	bne.n	b54ea <_Z4RFIDv+0xe2>
          Serial.println("Publish data on count");             
   b54dc:	f002 fb48 	bl	b7b70 <_Z16_fetch_usbserialv>
   b54e0:	490d      	ldr	r1, [pc, #52]	; (b5518 <_Z4RFIDv+0x110>)
   b54e2:	f001 ff0c 	bl	b72fe <_ZN5Print7printlnEPKc>
          publish_data();
   b54e6:	f7ff ff03 	bl	b52f0 <_Z12publish_datav>
      String temp_UID;
   b54ea:	4668      	mov	r0, sp
   b54ec:	f002 f814 	bl	b7518 <_ZN6StringD1Ev>
   b54f0:	e79c      	b.n	b542c <_Z4RFIDv+0x24>
   b54f2:	bf00      	nop
   b54f4:	2003e140 	.word	0x2003e140
   b54f8:	2003e108 	.word	0x2003e108
   b54fc:	000b8571 	.word	0x000b8571
   b5500:	000b8399 	.word	0x000b8399
   b5504:	000b858d 	.word	0x000b858d
   b5508:	2003e04c 	.word	0x2003e04c
   b550c:	2003e084 	.word	0x2003e084
   b5510:	2003e118 	.word	0x2003e118
   b5514:	2003e060 	.word	0x2003e060
   b5518:	000b858f 	.word	0x000b858f

000b551c <loop>:
void loop() {
   b551c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b551e:	f001 f87b 	bl	b6618 <spark_cloud_flag_connected>
        if (!connected()) {
   b5522:	b110      	cbz	r0, b552a <loop+0xe>
        return spark_sync_time(NULL);
   b5524:	2000      	movs	r0, #0
   b5526:	f001 f88f 	bl	b6648 <spark_sync_time>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b552a:	f000 fec1 	bl	b62b0 <HAL_Timer_Get_Milli_Seconds>
current_FG_Millis = millis();
   b552e:	4b37      	ldr	r3, [pc, #220]	; (b560c <loop+0xf0>)
current_EPD_Millis = millis();
   b5530:	4d37      	ldr	r5, [pc, #220]	; (b5610 <loop+0xf4>)
current_FG_Millis = millis();
   b5532:	6018      	str	r0, [r3, #0]
   b5534:	f000 febc 	bl	b62b0 <HAL_Timer_Get_Milli_Seconds>
current_EPD_Millis = millis();
   b5538:	6028      	str	r0, [r5, #0]
   b553a:	f000 feb9 	bl	b62b0 <HAL_Timer_Get_Milli_Seconds>
  if ((current_EPD_Millis - previous_EPD_Millis >= EPD_interval) && (new_end_point_STATE == 0)) {
   b553e:	4a35      	ldr	r2, [pc, #212]	; (b5614 <loop+0xf8>)
   b5540:	682b      	ldr	r3, [r5, #0]
   b5542:	6812      	ldr	r2, [r2, #0]
current_Publish_Millis = millis();  
   b5544:	4c34      	ldr	r4, [pc, #208]	; (b5618 <loop+0xfc>)
  if ((current_EPD_Millis - previous_EPD_Millis >= EPD_interval) && (new_end_point_STATE == 0)) {
   b5546:	1a9b      	subs	r3, r3, r2
   b5548:	4a34      	ldr	r2, [pc, #208]	; (b561c <loop+0x100>)
current_Publish_Millis = millis();  
   b554a:	6020      	str	r0, [r4, #0]
  if ((current_EPD_Millis - previous_EPD_Millis >= EPD_interval) && (new_end_point_STATE == 0)) {
   b554c:	6812      	ldr	r2, [r2, #0]
   b554e:	4293      	cmp	r3, r2
   b5550:	d304      	bcc.n	b555c <loop+0x40>
   b5552:	4b33      	ldr	r3, [pc, #204]	; (b5620 <loop+0x104>)
   b5554:	681b      	ldr	r3, [r3, #0]
   b5556:	b90b      	cbnz	r3, b555c <loop+0x40>
      End_Point();
   b5558:	f7ff fe08 	bl	b516c <_Z9End_Pointv>
  if ((current_Publish_Millis - previous_Publish_Millis >= Publish_interval)) {
   b555c:	4a31      	ldr	r2, [pc, #196]	; (b5624 <loop+0x108>)
   b555e:	6823      	ldr	r3, [r4, #0]
   b5560:	6812      	ldr	r2, [r2, #0]
   b5562:	1a9b      	subs	r3, r3, r2
   b5564:	4a30      	ldr	r2, [pc, #192]	; (b5628 <loop+0x10c>)
   b5566:	6812      	ldr	r2, [r2, #0]
   b5568:	4293      	cmp	r3, r2
   b556a:	d306      	bcc.n	b557a <loop+0x5e>
      Serial.println("Publish data on time"); 
   b556c:	f002 fb00 	bl	b7b70 <_Z16_fetch_usbserialv>
   b5570:	492e      	ldr	r1, [pc, #184]	; (b562c <loop+0x110>)
   b5572:	f001 fec4 	bl	b72fe <_ZN5Print7printlnEPKc>
      publish_data(); 
   b5576:	f7ff febb 	bl	b52f0 <_Z12publish_datav>
  if (Parser_STATE == 0) {
   b557a:	4b2d      	ldr	r3, [pc, #180]	; (b5630 <loop+0x114>)
   b557c:	681b      	ldr	r3, [r3, #0]
   b557e:	b933      	cbnz	r3, b558e <loop+0x72>
      ApiParser_event1();
   b5580:	f7ff fd00 	bl	b4f84 <_Z16ApiParser_event1v>
      delay(50);
   b5584:	2032      	movs	r0, #50	; 0x32
   b5586:	f001 f937 	bl	b67f8 <delay>
      ApiParser_event2();
   b558a:	f7ff fd3b 	bl	b5004 <_Z16ApiParser_event2v>
  if (Handler_STATE == 1) {    
   b558e:	4d29      	ldr	r5, [pc, #164]	; (b5634 <loop+0x118>)
   b5590:	682b      	ldr	r3, [r5, #0]
   b5592:	2b01      	cmp	r3, #1
   b5594:	d12f      	bne.n	b55f6 <loop+0xda>
        clearSession_(clearSession) {
   b5596:	2300      	movs	r3, #0
      Particle.disconnect();                                                 // Use only in SEMI_AUTOMATIC mode
   b5598:	a801      	add	r0, sp, #4
   b559a:	e9cd 3301 	strd	r3, r3, [sp, #4]
        bool clearSession) :
   b559e:	f8ad 300c 	strh.w	r3, [sp, #12]
   b55a2:	f001 f9ee 	bl	b6982 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b55a6:	f001 f837 	bl	b6618 <spark_cloud_flag_connected>
   b55aa:	4604      	mov	r4, r0
   b55ac:	b110      	cbz	r0, b55b4 <loop+0x98>
            spark_process();
   b55ae:	f001 f823 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b55b2:	e7f8      	b.n	b55a6 <loop+0x8a>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b55b4:	4e20      	ldr	r6, [pc, #128]	; (b5638 <loop+0x11c>)
   b55b6:	f001 f82f 	bl	b6618 <spark_cloud_flag_connected>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   b55ba:	6870      	ldr	r0, [r6, #4]
   b55bc:	4623      	mov	r3, r4
   b55be:	4622      	mov	r2, r4
   b55c0:	4621      	mov	r1, r4
   b55c2:	f001 f891 	bl	b66e8 <network_off>
      waitUntil(Cellular.isOff);
   b55c6:	4630      	mov	r0, r6
   b55c8:	f001 fdd0 	bl	b716c <_ZN5spark12NetworkClass5isOffEv>
   b55cc:	b910      	cbnz	r0, b55d4 <loop+0xb8>
            spark_process();
   b55ce:	f001 f813 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b55d2:	e7f8      	b.n	b55c6 <loop+0xaa>
   b55d4:	4818      	ldr	r0, [pc, #96]	; (b5638 <loop+0x11c>)
   b55d6:	f001 fdc9 	bl	b716c <_ZN5spark12NetworkClass5isOffEv>
      delay(10);
   b55da:	200a      	movs	r0, #10
   b55dc:	f001 f90c 	bl	b67f8 <delay>
      digitalWrite(LDO_EN, LOW);
   b55e0:	2100      	movs	r1, #0
   b55e2:	2017      	movs	r0, #23
   b55e4:	f002 fc27 	bl	b7e36 <digitalWrite>
      Serial.println("LDO Disconnected");
   b55e8:	f002 fac2 	bl	b7b70 <_Z16_fetch_usbserialv>
   b55ec:	4913      	ldr	r1, [pc, #76]	; (b563c <loop+0x120>)
   b55ee:	f001 fe86 	bl	b72fe <_ZN5Print7printlnEPKc>
      Handler_STATE = 0;
   b55f2:	2300      	movs	r3, #0
   b55f4:	602b      	str	r3, [r5, #0]
  if (new_end_point_STATE == 2) {
   b55f6:	4b0a      	ldr	r3, [pc, #40]	; (b5620 <loop+0x104>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	2b02      	cmp	r3, #2
   b55fc:	d101      	bne.n	b5602 <loop+0xe6>
      EPD();
   b55fe:	f7ff f9f5 	bl	b49ec <_Z3EPDv>
}
   b5602:	b004      	add	sp, #16
   b5604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  RFID();
   b5608:	f7ff befe 	b.w	b5408 <_Z4RFIDv>
   b560c:	2003e100 	.word	0x2003e100
   b5610:	2003e0fc 	.word	0x2003e0fc
   b5614:	2003e18c 	.word	0x2003e18c
   b5618:	2003e104 	.word	0x2003e104
   b561c:	2003de20 	.word	0x2003de20
   b5620:	2003e13c 	.word	0x2003e13c
   b5624:	2003e190 	.word	0x2003e190
   b5628:	2003de24 	.word	0x2003de24
   b562c:	000b85a5 	.word	0x000b85a5
   b5630:	2003e05c 	.word	0x2003e05c
   b5634:	2003e048 	.word	0x2003e048
   b5638:	2003e664 	.word	0x2003e664
   b563c:	000b85ba 	.word	0x000b85ba

000b5640 <_ZN3EpdD1Ev>:

#include <stdlib.h>
//#include "epd4in2b_V2.h"
#include "../lib/EPD4_2/src/epd4in2b_V2.h"

Epd::~Epd() {
   b5640:	b510      	push	{r4, lr}
   b5642:	4604      	mov	r4, r0
   b5644:	f000 f96f 	bl	b5926 <_ZN5EpdIfD1Ev>
};
   b5648:	4620      	mov	r0, r4
   b564a:	bd10      	pop	{r4, pc}

000b564c <_ZN3EpdC1Ev>:

Epd::Epd() {
   b564c:	b510      	push	{r4, lr}
   b564e:	4604      	mov	r4, r0
   b5650:	f000 f968 	bl	b5924 <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b5654:	2206      	movs	r2, #6
   b5656:	2305      	movs	r3, #5
   b5658:	e9c4 2302 	strd	r2, r3, [r4, #8]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b565c:	2108      	movs	r1, #8
   b565e:	2307      	movs	r3, #7
   b5660:	e9c4 1304 	strd	r1, r3, [r4, #16]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b5664:	f44f 70c8 	mov.w	r0, #400	; 0x190
   b5668:	f44f 7396 	mov.w	r3, #300	; 0x12c
   b566c:	e9c4 0300 	strd	r0, r3, [r4]
};
   b5670:	4620      	mov	r0, r4
   b5672:	bd10      	pop	{r4, pc}

000b5674 <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
   b5674:	b510      	push	{r4, lr}
   b5676:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
   b5678:	68c0      	ldr	r0, [r0, #12]
   b567a:	2100      	movs	r1, #0
   b567c:	f000 f954 	bl	b5928 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
   b5680:	4620      	mov	r0, r4
}
   b5682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
   b5686:	f000 b9a1 	b.w	b59cc <_ZN5EpdIf11SpiTransferEh>

000b568a <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
   b568a:	b510      	push	{r4, lr}
   b568c:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
   b568e:	68c0      	ldr	r0, [r0, #12]
   b5690:	2101      	movs	r1, #1
   b5692:	f000 f949 	bl	b5928 <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
   b5696:	4620      	mov	r0, r4
}
   b5698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
   b569c:	f000 b996 	b.w	b59cc <_ZN5EpdIf11SpiTransferEh>

000b56a0 <_ZN3Epd13WaitUntilIdleEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::WaitUntilIdle(void) {
   b56a0:	b510      	push	{r4, lr}
   b56a2:	4604      	mov	r4, r0
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b56a4:	6960      	ldr	r0, [r4, #20]
   b56a6:	f000 f943 	bl	b5930 <_ZN5EpdIf11DigitalReadEi>
   b56aa:	b918      	cbnz	r0, b56b4 <_ZN3Epd13WaitUntilIdleEv+0x14>
        DelayMs(100);
   b56ac:	2064      	movs	r0, #100	; 0x64
   b56ae:	f000 f942 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    while(DigitalRead(busy_pin) == 0) {      //0: busy, 1: idle
   b56b2:	e7f7      	b.n	b56a4 <_ZN3Epd13WaitUntilIdleEv+0x4>
    }      
}
   b56b4:	bd10      	pop	{r4, pc}

000b56b6 <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset. 
 *          often used to awaken the module in deep sleep, 
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
   b56b6:	b510      	push	{r4, lr}
    DigitalWrite(reset_pin, HIGH);
   b56b8:	2101      	movs	r1, #1
void Epd::Reset(void) {
   b56ba:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
   b56bc:	6880      	ldr	r0, [r0, #8]
   b56be:	f000 f933 	bl	b5928 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
   b56c2:	20c8      	movs	r0, #200	; 0xc8
   b56c4:	f000 f937 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);
   b56c8:	68a0      	ldr	r0, [r4, #8]
   b56ca:	2100      	movs	r1, #0
   b56cc:	f000 f92c 	bl	b5928 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
   b56d0:	2002      	movs	r0, #2
   b56d2:	f000 f930 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
   b56d6:	68a0      	ldr	r0, [r4, #8]
   b56d8:	2101      	movs	r1, #1
   b56da:	f000 f925 	bl	b5928 <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(200);   
}
   b56de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);   
   b56e2:	20c8      	movs	r0, #200	; 0xc8
   b56e4:	f000 b927 	b.w	b5936 <_ZN5EpdIf7DelayMsEj>

000b56e8 <_ZN3Epd4InitEv>:
int Epd::Init(void) {
   b56e8:	b538      	push	{r3, r4, r5, lr}
   b56ea:	4604      	mov	r4, r0
    if (IfInit() != 0) {
   b56ec:	f000 f942 	bl	b5974 <_ZN5EpdIf6IfInitEv>
   b56f0:	4605      	mov	r5, r0
   b56f2:	b998      	cbnz	r0, b571c <_ZN3Epd4InitEv+0x34>
    Reset();
   b56f4:	4620      	mov	r0, r4
   b56f6:	f7ff ffde 	bl	b56b6 <_ZN3Epd5ResetEv>
    SendCommand(POWER_ON);
   b56fa:	2104      	movs	r1, #4
   b56fc:	4620      	mov	r0, r4
   b56fe:	f7ff ffb9 	bl	b5674 <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b5702:	4620      	mov	r0, r4
   b5704:	f7ff ffcc 	bl	b56a0 <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(PANEL_SETTING);
   b5708:	4629      	mov	r1, r5
   b570a:	4620      	mov	r0, r4
   b570c:	f7ff ffb2 	bl	b5674 <_ZN3Epd11SendCommandEh>
    SendData(0x0F);     // LUT from OTP
   b5710:	210f      	movs	r1, #15
   b5712:	4620      	mov	r0, r4
   b5714:	f7ff ffb9 	bl	b568a <_ZN3Epd8SendDataEh>
}
   b5718:	4628      	mov	r0, r5
   b571a:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   b571c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5720:	e7fa      	b.n	b5718 <_ZN3Epd4InitEv+0x30>

000b5722 <_ZN3Epd21SetPartialWindowBlackEPKhiiii>:
}

/**
 *  @brief: transmit partial data to the black part of SRAM
 */
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b5722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5726:	4604      	mov	r4, r0
   b5728:	460f      	mov	r7, r1
    SendCommand(PARTIAL_IN);
   b572a:	2191      	movs	r1, #145	; 0x91
void Epd::SetPartialWindowBlack(const unsigned char* buffer_black, int x, int y, int w, int l) {
   b572c:	4616      	mov	r6, r2
   b572e:	4699      	mov	r9, r3
   b5730:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    SendCommand(PARTIAL_IN);
   b5734:	f7ff ff9e 	bl	b5674 <_ZN3Epd11SendCommandEh>
    SendCommand(PARTIAL_WINDOW);
   b5738:	2190      	movs	r1, #144	; 0x90
   b573a:	4620      	mov	r0, r4
    SendData(x >> 8);
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b573c:	f006 0af8 	and.w	sl, r6, #248	; 0xf8
    SendCommand(PARTIAL_WINDOW);
   b5740:	f7ff ff98 	bl	b5674 <_ZN3Epd11SendCommandEh>
    SendData(x >> 8);
   b5744:	f3c6 2107 	ubfx	r1, r6, #8, #8
   b5748:	4620      	mov	r0, r4
   b574a:	f7ff ff9e 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData(x & 0xf8);     // x should be the multiple of 8, the last 3 bit will always be ignored
   b574e:	4651      	mov	r1, sl
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ff9a 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) >> 8);
   b5756:	4651      	mov	r1, sl
   b5758:	4429      	add	r1, r5
   b575a:	3901      	subs	r1, #1
   b575c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5760:	4620      	mov	r0, r4
   b5762:	f7ff ff92 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData(((x & 0xf8) + w  - 1) | 0x07);
   b5766:	1e69      	subs	r1, r5, #1
   b5768:	4451      	add	r1, sl
   b576a:	f041 0107 	orr.w	r1, r1, #7
   b576e:	b2c9      	uxtb	r1, r1
   b5770:	4620      	mov	r0, r4
   b5772:	f7ff ff8a 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData(y >> 8);        
    SendData(y & 0xff);
   b5776:	fa5f f689 	uxtb.w	r6, r9
    SendData(y >> 8);        
   b577a:	f3c9 2107 	ubfx	r1, r9, #8, #8
   b577e:	4620      	mov	r0, r4
   b5780:	f7ff ff83 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData(y & 0xff);
   b5784:	4631      	mov	r1, r6
   b5786:	4620      	mov	r0, r4
   b5788:	f7ff ff7f 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) >> 8);        
   b578c:	eb09 0108 	add.w	r1, r9, r8
   b5790:	3901      	subs	r1, #1
   b5792:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b5796:	4620      	mov	r0, r4
   b5798:	f7ff ff77 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData((y + l - 1) & 0xff);
   b579c:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   b57a0:	4431      	add	r1, r6
   b57a2:	b2c9      	uxtb	r1, r1
   b57a4:	4620      	mov	r0, r4
   b57a6:	f7ff ff70 	bl	b568a <_ZN3Epd8SendDataEh>
    SendData(0x01);         // Gates scan both inside and outside of the partial window. (default) 
   b57aa:	2101      	movs	r1, #1
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7ff ff6c 	bl	b568a <_ZN3Epd8SendDataEh>
    DelayMs(2);
   b57b2:	2002      	movs	r0, #2
   b57b4:	f000 f8bf 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_1);
   b57b8:	2110      	movs	r1, #16
   b57ba:	4620      	mov	r0, r4
   b57bc:	f7ff ff5a 	bl	b5674 <_ZN3Epd11SendCommandEh>
    if (buffer_black != NULL) {
   b57c0:	b177      	cbz	r7, b57e0 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
        for(int i = 0; i < w  / 8 * l; i++) {
   b57c2:	2d00      	cmp	r5, #0
   b57c4:	bfb8      	it	lt
   b57c6:	3507      	addlt	r5, #7
   b57c8:	10ed      	asrs	r5, r5, #3
   b57ca:	fb08 f505 	mul.w	r5, r8, r5
   b57ce:	2600      	movs	r6, #0
   b57d0:	42b5      	cmp	r5, r6
   b57d2:	dd05      	ble.n	b57e0 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xbe>
            SendData(buffer_black[i]);  
   b57d4:	5db9      	ldrb	r1, [r7, r6]
   b57d6:	4620      	mov	r0, r4
   b57d8:	f7ff ff57 	bl	b568a <_ZN3Epd8SendDataEh>
        for(int i = 0; i < w  / 8 * l; i++) {
   b57dc:	3601      	adds	r6, #1
   b57de:	e7f7      	b.n	b57d0 <_ZN3Epd21SetPartialWindowBlackEPKhiiii+0xae>
        }  
    }
    DelayMs(2);
   b57e0:	2002      	movs	r0, #2
   b57e2:	f000 f8a8 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    SendCommand(PARTIAL_OUT);  
   b57e6:	4620      	mov	r0, r4
   b57e8:	2192      	movs	r1, #146	; 0x92
}
   b57ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    SendCommand(PARTIAL_OUT);  
   b57ee:	f7ff bf41 	b.w	b5674 <_ZN3Epd11SendCommandEh>

000b57f2 <_ZN3Epd10ClearFrameEv>:
}

/**
 * @brief: clear the frame data from the SRAM, this won't refresh the display
 */
void Epd::ClearFrame(void) {
   b57f2:	b538      	push	{r3, r4, r5, lr}
    SendCommand(DATA_START_TRANSMISSION_1);           
   b57f4:	2110      	movs	r1, #16
void Epd::ClearFrame(void) {
   b57f6:	4604      	mov	r4, r0
    SendCommand(DATA_START_TRANSMISSION_1);           
   b57f8:	f7ff ff3c 	bl	b5674 <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b57fc:	2002      	movs	r0, #2
   b57fe:	f000 f89a 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b5802:	2500      	movs	r5, #0
   b5804:	6823      	ldr	r3, [r4, #0]
   b5806:	6862      	ldr	r2, [r4, #4]
   b5808:	08db      	lsrs	r3, r3, #3
   b580a:	4353      	muls	r3, r2
   b580c:	42ab      	cmp	r3, r5
   b580e:	d905      	bls.n	b581c <_ZN3Epd10ClearFrameEv+0x2a>
        SendData(0xFF);  
   b5810:	21ff      	movs	r1, #255	; 0xff
   b5812:	4620      	mov	r0, r4
   b5814:	f7ff ff39 	bl	b568a <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b5818:	3501      	adds	r5, #1
   b581a:	e7f3      	b.n	b5804 <_ZN3Epd10ClearFrameEv+0x12>
    }  
    DelayMs(2);
   b581c:	2002      	movs	r0, #2
   b581e:	f000 f88a 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    SendCommand(DATA_START_TRANSMISSION_2);           
   b5822:	2113      	movs	r1, #19
   b5824:	4620      	mov	r0, r4
   b5826:	f7ff ff25 	bl	b5674 <_ZN3Epd11SendCommandEh>
    DelayMs(2);
   b582a:	2002      	movs	r0, #2
   b582c:	f000 f883 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    for(int i = 0; i < width / 8 * height; i++) {
   b5830:	2500      	movs	r5, #0
   b5832:	6823      	ldr	r3, [r4, #0]
   b5834:	6862      	ldr	r2, [r4, #4]
   b5836:	08db      	lsrs	r3, r3, #3
   b5838:	4353      	muls	r3, r2
   b583a:	42ab      	cmp	r3, r5
   b583c:	d905      	bls.n	b584a <_ZN3Epd10ClearFrameEv+0x58>
        SendData(0xFF);  
   b583e:	21ff      	movs	r1, #255	; 0xff
   b5840:	4620      	mov	r0, r4
   b5842:	f7ff ff22 	bl	b568a <_ZN3Epd8SendDataEh>
    for(int i = 0; i < width / 8 * height; i++) {
   b5846:	3501      	adds	r5, #1
   b5848:	e7f3      	b.n	b5832 <_ZN3Epd10ClearFrameEv+0x40>
    }  
    DelayMs(2);
}
   b584a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    DelayMs(2);
   b584e:	2002      	movs	r0, #2
   b5850:	f000 b871 	b.w	b5936 <_ZN5EpdIf7DelayMsEj>

000b5854 <_ZN3Epd12DisplayFrameEv>:

/**
 * @brief: This displays the frame data from SRAM
 */
void Epd::DisplayFrame(void) {
   b5854:	b510      	push	{r4, lr}
    SendCommand(DISPLAY_REFRESH); 
   b5856:	2112      	movs	r1, #18
void Epd::DisplayFrame(void) {
   b5858:	4604      	mov	r4, r0
    SendCommand(DISPLAY_REFRESH); 
   b585a:	f7ff ff0b 	bl	b5674 <_ZN3Epd11SendCommandEh>
    DelayMs(100);
   b585e:	2064      	movs	r0, #100	; 0x64
   b5860:	f000 f869 	bl	b5936 <_ZN5EpdIf7DelayMsEj>
    WaitUntilIdle();
   b5864:	4620      	mov	r0, r4
}
   b5866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    WaitUntilIdle();
   b586a:	f7ff bf19 	b.w	b56a0 <_ZN3Epd13WaitUntilIdleEv>

000b586e <_ZN3Epd5SleepEv>:
 * @brief: After this command is transmitted, the chip would enter the deep-sleep mode to save power. 
 *         The deep sleep mode would return to standby by hardware reset. The only one parameter is a 
 *         check code, the command would be executed if check code = 0xA5. 
 *         You can use Epd::Reset() to awaken and use Epd::Init() to initialize.
 */
void Epd::Sleep() {
   b586e:	b510      	push	{r4, lr}
    SendCommand(VCOM_AND_DATA_INTERVAL_SETTING);
   b5870:	2150      	movs	r1, #80	; 0x50
void Epd::Sleep() {
   b5872:	4604      	mov	r4, r0
    SendCommand(VCOM_AND_DATA_INTERVAL_SETTING);
   b5874:	f7ff fefe 	bl	b5674 <_ZN3Epd11SendCommandEh>
    SendData(0xF7);     // border floating
   b5878:	4620      	mov	r0, r4
   b587a:	21f7      	movs	r1, #247	; 0xf7
   b587c:	f7ff ff05 	bl	b568a <_ZN3Epd8SendDataEh>
    SendCommand(POWER_OFF);
   b5880:	2102      	movs	r1, #2
   b5882:	4620      	mov	r0, r4
   b5884:	f7ff fef6 	bl	b5674 <_ZN3Epd11SendCommandEh>
    WaitUntilIdle();
   b5888:	4620      	mov	r0, r4
   b588a:	f7ff ff09 	bl	b56a0 <_ZN3Epd13WaitUntilIdleEv>
    SendCommand(DEEP_SLEEP);
   b588e:	4620      	mov	r0, r4
   b5890:	2107      	movs	r1, #7
   b5892:	f7ff feef 	bl	b5674 <_ZN3Epd11SendCommandEh>
    SendData(0xA5);     // check code
   b5896:	4620      	mov	r0, r4
   b5898:	21a5      	movs	r1, #165	; 0xa5
}
   b589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SendData(0xA5);     // check code
   b589e:	f7ff bef4 	b.w	b568a <_ZN3Epd8SendDataEh>

000b58a2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b58a2:	4770      	bx	lr

000b58a4 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b58a4:	b510      	push	{r4, lr}
  }
   b58a6:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b58a8:	4604      	mov	r4, r0
  }
   b58aa:	f7ff f82a 	bl	b4902 <_ZdlPvj>
   b58ae:	4620      	mov	r0, r4
   b58b0:	bd10      	pop	{r4, pc}

000b58b2 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58b2:	b40e      	push	{r1, r2, r3}
   b58b4:	b503      	push	{r0, r1, lr}
   b58b6:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b58b8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b58ba:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b58be:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b58c0:	f001 fd45 	bl	b734e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b58c4:	b002      	add	sp, #8
   b58c6:	f85d eb04 	ldr.w	lr, [sp], #4
   b58ca:	b003      	add	sp, #12
   b58cc:	4770      	bx	lr
	...

000b58d0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b58d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b58d2:	4604      	mov	r4, r0
   b58d4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b58d6:	7922      	ldrb	r2, [r4, #4]
   b58d8:	68a3      	ldr	r3, [r4, #8]
   b58da:	b132      	cbz	r2, b58ea <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b58dc:	b9a3      	cbnz	r3, b5908 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b58de:	490b      	ldr	r1, [pc, #44]	; (b590c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b58e0:	b002      	add	sp, #8
   b58e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b58e6:	f001 bcf7 	b.w	b72d8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b58ea:	4a09      	ldr	r2, [pc, #36]	; (b5910 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b58ec:	7b26      	ldrb	r6, [r4, #12]
   b58ee:	4d09      	ldr	r5, [pc, #36]	; (b5914 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b58f0:	4909      	ldr	r1, [pc, #36]	; (b5918 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b58f2:	7b64      	ldrb	r4, [r4, #13]
   b58f4:	2e01      	cmp	r6, #1
   b58f6:	bf18      	it	ne
   b58f8:	4629      	movne	r1, r5
   b58fa:	e9cd 1400 	strd	r1, r4, [sp]
   b58fe:	4907      	ldr	r1, [pc, #28]	; (b591c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b5900:	f7ff ffd7 	bl	b58b2 <_ZN5Print6printfEPKcz>
  }
   b5904:	b002      	add	sp, #8
   b5906:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b5908:	4a05      	ldr	r2, [pc, #20]	; (b5920 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b590a:	e7ef      	b.n	b58ec <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b590c:	000b85dc 	.word	0x000b85dc
   b5910:	000b8399 	.word	0x000b8399
   b5914:	000b85d8 	.word	0x000b85d8
   b5918:	000b85d4 	.word	0x000b85d4
   b591c:	000b85f2 	.word	0x000b85f2
   b5920:	000b85cb 	.word	0x000b85cb

000b5924 <_ZN5EpdIfC1Ev>:
#include "../lib/EPD4_2/src/epdif.h"

#include <spi.h>

EpdIf::EpdIf() {
};
   b5924:	4770      	bx	lr

000b5926 <_ZN5EpdIfD1Ev>:

EpdIf::~EpdIf() {
};
   b5926:	4770      	bx	lr

000b5928 <_ZN5EpdIf12DigitalWriteEii>:

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
   b5928:	b2c9      	uxtb	r1, r1
   b592a:	b280      	uxth	r0, r0
   b592c:	f002 ba83 	b.w	b7e36 <digitalWrite>

000b5930 <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
   b5930:	b280      	uxth	r0, r0
   b5932:	f002 ba99 	b.w	b7e68 <digitalRead>

000b5936 <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
   b5936:	f000 bf5f 	b.w	b67f8 <delay>
	...

000b593c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b593c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b593e:	4c0b      	ldr	r4, [pc, #44]	; (b596c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5940:	7821      	ldrb	r1, [r4, #0]
   b5942:	f3bf 8f5b 	dmb	ish
   b5946:	f011 0101 	ands.w	r1, r1, #1
   b594a:	d10b      	bne.n	b5964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b594c:	4620      	mov	r0, r4
   b594e:	9101      	str	r1, [sp, #4]
   b5950:	f7fe ffd9 	bl	b4906 <__cxa_guard_acquire>
   b5954:	9901      	ldr	r1, [sp, #4]
   b5956:	b128      	cbz	r0, b5964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5958:	4805      	ldr	r0, [pc, #20]	; (b5970 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b595a:	f001 fd35 	bl	b73c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b595e:	4620      	mov	r0, r4
   b5960:	f7fe ffd6 	bl	b4910 <__cxa_guard_release>
        return instance;
    }
   b5964:	4802      	ldr	r0, [pc, #8]	; (b5970 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5966:	b002      	add	sp, #8
   b5968:	bd10      	pop	{r4, pc}
   b596a:	bf00      	nop
   b596c:	2003e654 	.word	0x2003e654
   b5970:	2003e658 	.word	0x2003e658

000b5974 <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
   b5974:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
   b5976:	2101      	movs	r1, #1
   b5978:	2008      	movs	r0, #8
   b597a:	f002 fa4b 	bl	b7e14 <pinMode>
    pinMode(RST_PIN, OUTPUT);
   b597e:	2101      	movs	r1, #1
   b5980:	2006      	movs	r0, #6
   b5982:	f002 fa47 	bl	b7e14 <pinMode>
    pinMode(DC_PIN, OUTPUT);
   b5986:	2101      	movs	r1, #1
   b5988:	2005      	movs	r0, #5
   b598a:	f002 fa43 	bl	b7e14 <pinMode>
    pinMode(BUSY_PIN, INPUT); 
   b598e:	2100      	movs	r1, #0
   b5990:	2007      	movs	r0, #7
   b5992:	f002 fa3f 	bl	b7e14 <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b5996:	f7ff ffd1 	bl	b593c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b599a:	f001 fd1f 	bl	b73dc <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
   b599e:	4b09      	ldr	r3, [pc, #36]	; (b59c4 <_ZN5EpdIf6IfInitEv+0x50>)
   b59a0:	9300      	str	r3, [sp, #0]
   b59a2:	4b09      	ldr	r3, [pc, #36]	; (b59c8 <_ZN5EpdIf6IfInitEv+0x54>)
   b59a4:	9302      	str	r3, [sp, #8]
   b59a6:	2400      	movs	r4, #0
   b59a8:	2301      	movs	r3, #1
   b59aa:	f8ad 300c 	strh.w	r3, [sp, #12]
   b59ae:	f88d 4004 	strb.w	r4, [sp, #4]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b59b2:	f7ff ffc3 	bl	b593c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59b6:	4669      	mov	r1, sp
   b59b8:	f001 fd3a 	bl	b7430 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    
    return 0;
}
   b59bc:	4620      	mov	r0, r4
   b59be:	b004      	add	sp, #16
   b59c0:	bd10      	pop	{r4, pc}
   b59c2:	bf00      	nop
   b59c4:	000b8618 	.word	0x000b8618
   b59c8:	001e8480 	.word	0x001e8480

000b59cc <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
   b59cc:	b510      	push	{r4, lr}
    digitalWrite(CS_PIN, LOW);
   b59ce:	2100      	movs	r1, #0
void EpdIf::SpiTransfer(unsigned char data) {
   b59d0:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
   b59d2:	2008      	movs	r0, #8
   b59d4:	f002 fa2f 	bl	b7e36 <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b59d8:	f7ff ffb0 	bl	b593c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b59dc:	4621      	mov	r1, r4
   b59de:	f001 fd95 	bl	b750c <_ZN8SPIClass8transferEh>
}
   b59e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
   b59e6:	2101      	movs	r1, #1
   b59e8:	2008      	movs	r0, #8
   b59ea:	f002 ba24 	b.w	b7e36 <digitalWrite>

000b59ee <_ZN5PaintC1EPhii>:

#include <avr/pgmspace.h>
//#include "epdpaint.h"
#include "../lib/EPD4_2/src/epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
   b59ee:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
   b59f0:	2400      	movs	r4, #0
   b59f2:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b59f4:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
   b59f8:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b59fa:	d008      	beq.n	b5a0e <_ZN5PaintC1EPhii+0x20>
   b59fc:	f102 0508 	add.w	r5, r2, #8
   b5a00:	4252      	negs	r2, r2
   b5a02:	f002 0107 	and.w	r1, r2, #7
   b5a06:	4622      	mov	r2, r4
   b5a08:	bf58      	it	pl
   b5a0a:	424a      	negpl	r2, r1
   b5a0c:	1aaa      	subs	r2, r5, r2
    this->height = height;
   b5a0e:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
   b5a12:	bd30      	pop	{r4, r5, pc}

000b5a14 <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
   b5a14:	4770      	bx	lr

000b5a16 <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5a16:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
   b5a18:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5a1a:	db15      	blt.n	b5a48 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5a1c:	6844      	ldr	r4, [r0, #4]
   b5a1e:	428c      	cmp	r4, r1
   b5a20:	dd12      	ble.n	b5a48 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5a22:	2a00      	cmp	r2, #0
   b5a24:	db10      	blt.n	b5a48 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b5a26:	6885      	ldr	r5, [r0, #8]
   b5a28:	4295      	cmp	r5, r2
   b5a2a:	dd0d      	ble.n	b5a48 <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b5a2c:	fb02 1204 	mla	r2, r2, r4, r1
   b5a30:	6805      	ldr	r5, [r0, #0]
   b5a32:	10d2      	asrs	r2, r2, #3
   b5a34:	f001 0107 	and.w	r1, r1, #7
   b5a38:	2480      	movs	r4, #128	; 0x80
   b5a3a:	fa44 f101 	asr.w	r1, r4, r1
   b5a3e:	56a8      	ldrsb	r0, [r5, r2]
   b5a40:	b249      	sxtb	r1, r1
        if (colored) {
   b5a42:	b113      	cbz	r3, b5a4a <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b5a44:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b5a46:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
   b5a48:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b5a4a:	ea20 0001 	bic.w	r0, r0, r1
   b5a4e:	e7fa      	b.n	b5a46 <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

000b5a50 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
   b5a50:	b570      	push	{r4, r5, r6, lr}
   b5a52:	460b      	mov	r3, r1
   b5a54:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
   b5a56:	2500      	movs	r5, #0
   b5a58:	6862      	ldr	r2, [r4, #4]
   b5a5a:	42aa      	cmp	r2, r5
   b5a5c:	dd0c      	ble.n	b5a78 <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
   b5a5e:	2600      	movs	r6, #0
   b5a60:	68a2      	ldr	r2, [r4, #8]
   b5a62:	42b2      	cmp	r2, r6
   b5a64:	dd06      	ble.n	b5a74 <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
   b5a66:	4632      	mov	r2, r6
   b5a68:	4629      	mov	r1, r5
   b5a6a:	4620      	mov	r0, r4
   b5a6c:	f7ff ffd3 	bl	b5a16 <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
   b5a70:	3601      	adds	r6, #1
   b5a72:	e7f5      	b.n	b5a60 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
   b5a74:	3501      	adds	r5, #1
   b5a76:	e7ef      	b.n	b5a58 <_ZN5Paint5ClearEi+0x8>
}
   b5a78:	bd70      	pop	{r4, r5, r6, pc}

000b5a7a <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
   b5a7a:	6800      	ldr	r0, [r0, #0]
   b5a7c:	4770      	bx	lr

000b5a7e <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
   b5a7e:	6840      	ldr	r0, [r0, #4]
   b5a80:	4770      	bx	lr

000b5a82 <_ZN5Paint9GetHeightEv>:
    this->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint::GetHeight(void) {
    return this->height;
}
   b5a82:	6880      	ldr	r0, [r0, #8]
   b5a84:	4770      	bx	lr

000b5a86 <_ZN5Paint9SetRotateEi>:
int Paint::GetRotate(void) {
    return this->rotate;
}

void Paint::SetRotate(int rotate){
    this->rotate = rotate;
   b5a86:	60c1      	str	r1, [r0, #12]
}
   b5a88:	4770      	bx	lr

000b5a8a <_ZN5Paint9DrawPixelEiii>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
   b5a8a:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
   b5a8c:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
   b5a8e:	460d      	mov	r5, r1
   b5a90:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
   b5a92:	b967      	cbnz	r7, b5aae <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5a94:	2900      	cmp	r1, #0
   b5a96:	db37      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5a98:	6847      	ldr	r7, [r0, #4]
   b5a9a:	428f      	cmp	r7, r1
   b5a9c:	dd34      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5a9e:	2a00      	cmp	r2, #0
   b5aa0:	db32      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5aa2:	6885      	ldr	r5, [r0, #8]
   b5aa4:	4295      	cmp	r5, r2
   b5aa6:	dd2f      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
   b5aa8:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
   b5aaa:	f7ff bfb4 	b.w	b5a16 <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
   b5aae:	2f01      	cmp	r7, #1
   b5ab0:	d10c      	bne.n	b5acc <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b5ab2:	2900      	cmp	r1, #0
   b5ab4:	db28      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ab6:	6882      	ldr	r2, [r0, #8]
   b5ab8:	428a      	cmp	r2, r1
   b5aba:	dd25      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5abc:	2c00      	cmp	r4, #0
   b5abe:	db23      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ac0:	6841      	ldr	r1, [r0, #4]
   b5ac2:	42a1      	cmp	r1, r4
   b5ac4:	dd20      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5ac6:	462a      	mov	r2, r5
   b5ac8:	1b09      	subs	r1, r1, r4
   b5aca:	e7ed      	b.n	b5aa8 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
   b5acc:	2f02      	cmp	r7, #2
   b5ace:	d10c      	bne.n	b5aea <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b5ad0:	2900      	cmp	r1, #0
   b5ad2:	db19      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ad4:	6841      	ldr	r1, [r0, #4]
   b5ad6:	42a9      	cmp	r1, r5
   b5ad8:	dd16      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ada:	2a00      	cmp	r2, #0
   b5adc:	db14      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5ade:	6882      	ldr	r2, [r0, #8]
   b5ae0:	42a2      	cmp	r2, r4
   b5ae2:	dd11      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5ae4:	1b12      	subs	r2, r2, r4
   b5ae6:	1b49      	subs	r1, r1, r5
   b5ae8:	e7de      	b.n	b5aa8 <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
   b5aea:	2f03      	cmp	r7, #3
   b5aec:	d10c      	bne.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b5aee:	2900      	cmp	r1, #0
   b5af0:	db0a      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5af2:	6882      	ldr	r2, [r0, #8]
   b5af4:	428a      	cmp	r2, r1
   b5af6:	dd07      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5af8:	2c00      	cmp	r4, #0
   b5afa:	db05      	blt.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
   b5afc:	6841      	ldr	r1, [r0, #4]
   b5afe:	42a1      	cmp	r1, r4
   b5b00:	dd02      	ble.n	b5b08 <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b5b02:	1b52      	subs	r2, r2, r5
   b5b04:	4621      	mov	r1, r4
   b5b06:	e7cf      	b.n	b5aa8 <_ZN5Paint9DrawPixelEiii+0x1e>
}
   b5b08:	bcf0      	pop	{r4, r5, r6, r7}
   b5b0a:	4770      	bx	lr

000b5b0c <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b5b12:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5b14:	4691      	mov	r9, r2
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b5b16:	f014 0207 	ands.w	r2, r4, #7
   b5b1a:	bf18      	it	ne
   b5b1c:	2201      	movne	r2, #1
   b5b1e:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
   b5b22:	88ec      	ldrh	r4, [r5, #6]
   b5b24:	3b20      	subs	r3, #32
   b5b26:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
   b5b28:	682c      	ldr	r4, [r5, #0]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b5b2a:	4688      	mov	r8, r1
    const unsigned char* ptr = &font->table[char_offset];
   b5b2c:	fb03 4402 	mla	r4, r3, r2, r4

    for (j = 0; j < font->Height; j++) {
   b5b30:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b5b32:	f04f 0b80 	mov.w	fp, #128	; 0x80
    for (j = 0; j < font->Height; j++) {
   b5b36:	88eb      	ldrh	r3, [r5, #6]
   b5b38:	42bb      	cmp	r3, r7
   b5b3a:	dd20      	ble.n	b5b7e <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
   b5b3c:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
   b5b3e:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
   b5b42:	88ab      	ldrh	r3, [r5, #4]
   b5b44:	42b3      	cmp	r3, r6
   b5b46:	dd15      	ble.n	b5b74 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b5b48:	7821      	ldrb	r1, [r4, #0]
   b5b4a:	f006 0a07 	and.w	sl, r6, #7
   b5b4e:	fa4b f30a 	asr.w	r3, fp, sl
   b5b52:	4219      	tst	r1, r3
   b5b54:	d008      	beq.n	b5b68 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
   b5b56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b5b58:	9201      	str	r2, [sp, #4]
   b5b5a:	eb06 0108 	add.w	r1, r6, r8
   b5b5e:	9000      	str	r0, [sp, #0]
   b5b60:	f7ff ff93 	bl	b5a8a <_ZN5Paint9DrawPixelEiii>
   b5b64:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
   b5b68:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
   b5b6c:	bf08      	it	eq
   b5b6e:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
   b5b70:	3601      	adds	r6, #1
   b5b72:	e7e6      	b.n	b5b42 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
   b5b74:	075b      	lsls	r3, r3, #29
            ptr++;
   b5b76:	bf18      	it	ne
   b5b78:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
   b5b7a:	3701      	adds	r7, #1
   b5b7c:	e7db      	b.n	b5b36 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
   b5b7e:	b003      	add	sp, #12
   b5b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5b84 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
   b5b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b88:	9f08      	ldr	r7, [sp, #32]
   b5b8a:	4606      	mov	r6, r0
   b5b8c:	460c      	mov	r4, r1
   b5b8e:	4690      	mov	r8, r2
   b5b90:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
   b5b92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b5b96:	b153      	cbz	r3, b5bae <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
   b5b98:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5b9a:	4621      	mov	r1, r4
   b5b9c:	e9cd 7200 	strd	r7, r2, [sp]
   b5ba0:	4630      	mov	r0, r6
   b5ba2:	4642      	mov	r2, r8
   b5ba4:	f7ff ffb2 	bl	b5b0c <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
   b5ba8:	88bb      	ldrh	r3, [r7, #4]
   b5baa:	441c      	add	r4, r3
    while (*p_text != 0) {
   b5bac:	e7f1      	b.n	b5b92 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
   b5bae:	b002      	add	sp, #8
   b5bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5bb4 <_ZN5Paint18DrawHorizontalLineEiiii>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
   b5bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bb6:	4606      	mov	r6, r0
   b5bb8:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
   b5bba:	460c      	mov	r4, r1
   b5bbc:	18cd      	adds	r5, r1, r3
   b5bbe:	42a5      	cmp	r5, r4
   b5bc0:	dd07      	ble.n	b5bd2 <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
   b5bc2:	4621      	mov	r1, r4
   b5bc4:	9b06      	ldr	r3, [sp, #24]
   b5bc6:	463a      	mov	r2, r7
   b5bc8:	4630      	mov	r0, r6
   b5bca:	f7ff ff5e 	bl	b5a8a <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
   b5bce:	3401      	adds	r4, #1
   b5bd0:	e7f5      	b.n	b5bbe <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
   b5bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bd4 <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
   b5bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5bd6:	4606      	mov	r6, r0
   b5bd8:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
   b5bda:	4614      	mov	r4, r2
   b5bdc:	18d5      	adds	r5, r2, r3
   b5bde:	42a5      	cmp	r5, r4
   b5be0:	dd07      	ble.n	b5bf2 <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
   b5be2:	4622      	mov	r2, r4
   b5be4:	9b06      	ldr	r3, [sp, #24]
   b5be6:	4639      	mov	r1, r7
   b5be8:	4630      	mov	r0, r6
   b5bea:	f7ff ff4e 	bl	b5a8a <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
   b5bee:	3401      	adds	r4, #1
   b5bf0:	e7f5      	b.n	b5bde <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
   b5bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5bf4 <_ZN5Paint13DrawRectangleEiiiii>:

/**
*  @brief: this draws a rectangle
*/
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5bf4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5bf8:	460f      	mov	r7, r1
   b5bfa:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
   b5bfe:	42bb      	cmp	r3, r7
   b5c00:	4619      	mov	r1, r3
   b5c02:	bfa8      	it	ge
   b5c04:	4639      	movge	r1, r7
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b5c06:	42bb      	cmp	r3, r7
   b5c08:	bfb8      	it	lt
   b5c0a:	463b      	movlt	r3, r7
   b5c0c:	4294      	cmp	r4, r2
   b5c0e:	4627      	mov	r7, r4
   b5c10:	461d      	mov	r5, r3
    min_y = y1 > y0 ? y0 : y1;
   b5c12:	bfa8      	it	ge
   b5c14:	4617      	movge	r7, r2
    max_y = y1 > y0 ? y1 : y0;
    
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b5c16:	1a5b      	subs	r3, r3, r1
   b5c18:	4294      	cmp	r4, r2
   b5c1a:	bfb8      	it	lt
   b5c1c:	4614      	movlt	r4, r2
void Paint::DrawRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5c1e:	4606      	mov	r6, r0
    DrawHorizontalLine(min_x, min_y, max_x - min_x + 1, colored);
   b5c20:	3301      	adds	r3, #1
   b5c22:	463a      	mov	r2, r7
   b5c24:	f8cd 8000 	str.w	r8, [sp]
   b5c28:	9303      	str	r3, [sp, #12]
   b5c2a:	9102      	str	r1, [sp, #8]
   b5c2c:	f7ff ffc2 	bl	b5bb4 <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawHorizontalLine(min_x, max_y, max_x - min_x + 1, colored);
   b5c30:	9b03      	ldr	r3, [sp, #12]
   b5c32:	9902      	ldr	r1, [sp, #8]
   b5c34:	f8cd 8000 	str.w	r8, [sp]
   b5c38:	4622      	mov	r2, r4
   b5c3a:	4630      	mov	r0, r6
   b5c3c:	9103      	str	r1, [sp, #12]
   b5c3e:	f7ff ffb9 	bl	b5bb4 <_ZN5Paint18DrawHorizontalLineEiiii>
    DrawVerticalLine(min_x, min_y, max_y - min_y + 1, colored);
   b5c42:	1be3      	subs	r3, r4, r7
   b5c44:	9903      	ldr	r1, [sp, #12]
   b5c46:	f8cd 8000 	str.w	r8, [sp]
   b5c4a:	3301      	adds	r3, #1
   b5c4c:	463a      	mov	r2, r7
   b5c4e:	4630      	mov	r0, r6
   b5c50:	9302      	str	r3, [sp, #8]
   b5c52:	f7ff ffbf 	bl	b5bd4 <_ZN5Paint16DrawVerticalLineEiiii>
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b5c56:	9b02      	ldr	r3, [sp, #8]
   b5c58:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5c5c:	463a      	mov	r2, r7
   b5c5e:	4629      	mov	r1, r5
   b5c60:	4630      	mov	r0, r6
}
   b5c62:	b004      	add	sp, #16
   b5c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    DrawVerticalLine(max_x, min_y, max_y - min_y + 1, colored);
   b5c68:	f7ff bfb4 	b.w	b5bd4 <_ZN5Paint16DrawVerticalLineEiiii>

000b5c6c <_ZN5Paint19DrawFilledRectangleEiiiii>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
   b5c6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c70:	428b      	cmp	r3, r1
   b5c72:	4604      	mov	r4, r0
   b5c74:	9808      	ldr	r0, [sp, #32]
   b5c76:	461e      	mov	r6, r3
   b5c78:	bfa8      	it	ge
   b5c7a:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b5c7c:	428b      	cmp	r3, r1
   b5c7e:	bfb8      	it	lt
   b5c80:	460b      	movlt	r3, r1
   b5c82:	4290      	cmp	r0, r2
   b5c84:	4680      	mov	r8, r0
   b5c86:	bfa8      	it	ge
   b5c88:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b5c8a:	4290      	cmp	r0, r2
   b5c8c:	bfac      	ite	ge
   b5c8e:	ebc8 0700 	rsbge	r7, r8, r0
   b5c92:	ebc8 0702 	rsblt	r7, r8, r2
   b5c96:	461d      	mov	r5, r3
   b5c98:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
   b5c9a:	42ae      	cmp	r6, r5
   b5c9c:	dc09      	bgt.n	b5cb2 <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b5c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5ca0:	9300      	str	r3, [sp, #0]
   b5ca2:	4631      	mov	r1, r6
   b5ca4:	463b      	mov	r3, r7
   b5ca6:	4642      	mov	r2, r8
   b5ca8:	4620      	mov	r0, r4
   b5caa:	f7ff ff93 	bl	b5bd4 <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
   b5cae:	3601      	adds	r6, #1
   b5cb0:	e7f3      	b.n	b5c9a <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
   b5cb2:	b002      	add	sp, #8
   b5cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5cb8 <_ZN7TwoWire5writeEi.isra.0>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5cb8:	6803      	ldr	r3, [r0, #0]
   b5cba:	b2c9      	uxtb	r1, r1
   b5cbc:	689b      	ldr	r3, [r3, #8]
   b5cbe:	4718      	bx	r3

000b5cc0 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b5cc0:	b510      	push	{r4, lr}
   b5cc2:	4604      	mov	r4, r0
    Wire.begin(); 
   b5cc4:	f002 f8fe 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5cc8:	f001 f96c 	bl	b6fa4 <_ZN7TwoWire5beginEv>
}
   b5ccc:	4620      	mov	r0, r4
   b5cce:	bd10      	pop	{r4, pc}

000b5cd0 <_ZN8max1720x5resetEv>:
//}


// Reset procedure
uint8_t max1720x::reset()
{
   b5cd0:	b508      	push	{r3, lr}
 	Wire.beginTransmission(MAX1720X_ADDR);
   b5cd2:	f002 f8f7 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5cd6:	2136      	movs	r1, #54	; 0x36
   b5cd8:	f001 f99a 	bl	b7010 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(MAX1720X_COMMAND_ADDR);
   b5cdc:	f002 f8f2 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5ce0:	2160      	movs	r1, #96	; 0x60
   b5ce2:	f7ff ffe9 	bl	b5cb8 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x0f);
   b5ce6:	f002 f8ed 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5cea:	210f      	movs	r1, #15
   b5cec:	f7ff ffe4 	bl	b5cb8 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x00);
   b5cf0:	f002 f8e8 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5cf4:	2100      	movs	r1, #0
   b5cf6:	f7ff ffdf 	bl	b5cb8 <_ZN7TwoWire5writeEi.isra.0>
    Wire.endTransmission();
   b5cfa:	f002 f8e3 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5cfe:	f001 f98e 	bl	b701e <_ZN7TwoWire15endTransmissionEv>
    delay(50);
   b5d02:	2032      	movs	r0, #50	; 0x32
   b5d04:	f000 fd78 	bl	b67f8 <delay>
    Wire.beginTransmission(MAX1720X_ADDR);
   b5d08:	f002 f8dc 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d0c:	2136      	movs	r1, #54	; 0x36
   b5d0e:	f001 f97f 	bl	b7010 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(MAX1720X_CONFIG2_ADDR);
   b5d12:	f002 f8d7 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d16:	21bb      	movs	r1, #187	; 0xbb
   b5d18:	f7ff ffce 	bl	b5cb8 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x01);
   b5d1c:	f002 f8d2 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d20:	2101      	movs	r1, #1
   b5d22:	f7ff ffc9 	bl	b5cb8 <_ZN7TwoWire5writeEi.isra.0>
	Wire.write(0x00);
   b5d26:	f002 f8cd 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d2a:	2100      	movs	r1, #0
   b5d2c:	f7ff ffc4 	bl	b5cb8 <_ZN7TwoWire5writeEi.isra.0>
	return Wire.endTransmission();
   b5d30:	f002 f8c8 	bl	b7ec4 <_Z19__fetch_global_Wirev>
}
   b5d34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return Wire.endTransmission();
   b5d38:	f001 b971 	b.w	b701e <_ZN7TwoWire15endTransmissionEv>

000b5d3c <_ZN7TwoWire5writeEi>:
   b5d3c:	6803      	ldr	r3, [r0, #0]
   b5d3e:	b2c9      	uxtb	r1, r1
   b5d40:	689b      	ldr	r3, [r3, #8]
   b5d42:	4718      	bx	r3

000b5d44 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b5d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b5d48:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b5d4a:	2002      	movs	r0, #2
    cmdlen++;
   b5d4c:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b5d4e:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b5d50:	f000 fd52 	bl	b67f8 <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b5d54:	f002 f8b6 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d58:	2124      	movs	r1, #36	; 0x24
   b5d5a:	f001 f959 	bl	b7010 <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b5d5e:	f002 f8b1 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d62:	2100      	movs	r1, #0
   b5d64:	f7ff ffea 	bl	b5d3c <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b5d68:	f002 f8ac 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d6c:	2100      	movs	r1, #0
   b5d6e:	f7ff ffe5 	bl	b5d3c <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b5d72:	f002 f8a7 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d76:	21ff      	movs	r1, #255	; 0xff
   b5d78:	f7ff ffe0 	bl	b5d3c <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b5d7c:	f002 f8a2 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d80:	6803      	ldr	r3, [r0, #0]
   b5d82:	4629      	mov	r1, r5
   b5d84:	689b      	ldr	r3, [r3, #8]
   b5d86:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b5d88:	f002 f89c 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d8c:	4269      	negs	r1, r5
   b5d8e:	f7ff ffd5 	bl	b5d3c <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b5d92:	f002 f897 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5d96:	21d4      	movs	r1, #212	; 0xd4
   b5d98:	f7ff ffd0 	bl	b5d3c <_ZN7TwoWire5writeEi>
   b5d9c:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b5d9e:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b5da0:	3d01      	subs	r5, #1
   b5da2:	f104 0801 	add.w	r8, r4, #1
   b5da6:	b2e4      	uxtb	r4, r4
   b5da8:	42ac      	cmp	r4, r5
   b5daa:	da0a      	bge.n	b5dc2 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b5dac:	f002 f88a 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5db0:	6803      	ldr	r3, [r0, #0]
   b5db2:	5d39      	ldrb	r1, [r7, r4]
   b5db4:	689b      	ldr	r3, [r3, #8]
   b5db6:	4798      	blx	r3
      checksum += cmd[i];
   b5db8:	5d39      	ldrb	r1, [r7, r4]
   b5dba:	440e      	add	r6, r1
   b5dbc:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b5dbe:	4644      	mov	r4, r8
   b5dc0:	e7ef      	b.n	b5da2 <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b5dc2:	f002 f87f 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5dc6:	6803      	ldr	r3, [r0, #0]
   b5dc8:	43f1      	mvns	r1, r6
   b5dca:	689b      	ldr	r3, [r3, #8]
   b5dcc:	b2c9      	uxtb	r1, r1
   b5dce:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b5dd0:	f002 f878 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b5dd4:	6803      	ldr	r3, [r0, #0]
   b5dd6:	2100      	movs	r1, #0
   b5dd8:	689b      	ldr	r3, [r3, #8]
   b5dda:	4798      	blx	r3
    Wire.endTransmission();
   b5ddc:	f002 f872 	bl	b7ec4 <_Z19__fetch_global_Wirev>
}
   b5de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b5de4:	f001 b91b 	b.w	b701e <_ZN7TwoWire15endTransmissionEv>

000b5de8 <_ZN13DFRobot_PN5328checkDCSEi>:
{
   b5de8:	b530      	push	{r4, r5, lr}
   b5dea:	4602      	mov	r2, r0
    if(!this->nfcEnable)
   b5dec:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b5df0:	b1a0      	cbz	r0, b5e1c <_ZN13DFRobot_PN5328checkDCSEi+0x34>
    for(int i = 6;i < x - 2;i++)
   b5df2:	f06f 0503 	mvn.w	r5, #3
   b5df6:	f102 000a 	add.w	r0, r2, #10
    uint32_t sum = 0;
   b5dfa:	2300      	movs	r3, #0
    for(int i = 6;i < x - 2;i++)
   b5dfc:	3902      	subs	r1, #2
   b5dfe:	1aad      	subs	r5, r5, r2
   b5e00:	182c      	adds	r4, r5, r0
   b5e02:	42a1      	cmp	r1, r4
   b5e04:	dd03      	ble.n	b5e0e <_ZN13DFRobot_PN5328checkDCSEi+0x26>
        sum += this->receiveACK[i];
   b5e06:	f810 4b01 	ldrb.w	r4, [r0], #1
   b5e0a:	4423      	add	r3, r4
    for(int i = 6;i < x - 2;i++)
   b5e0c:	e7f8      	b.n	b5e00 <_ZN13DFRobot_PN5328checkDCSEi+0x18>
    if(dcs==this->receiveACK[x - 2])
   b5e0e:	440a      	add	r2, r1
    dcs = 0xff - (sum&0xff);
   b5e10:	43db      	mvns	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b5e12:	7910      	ldrb	r0, [r2, #4]
    dcs = 0xff - (sum&0xff);
   b5e14:	b2db      	uxtb	r3, r3
    if(dcs==this->receiveACK[x - 2])
   b5e16:	1a1b      	subs	r3, r3, r0
   b5e18:	4258      	negs	r0, r3
   b5e1a:	4158      	adcs	r0, r3
}
   b5e1c:	bd30      	pop	{r4, r5, pc}

000b5e1e <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>:
{   //bool success = false;
   b5e1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5e20:	4604      	mov	r4, r0
    if(!this->nfcEnable)
   b5e22:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
   b5e26:	b350      	cbz	r0, b5e7e <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    cmdPassWord[0] = COMMAND_INDATAEXCHANGE;   /* Data Exchange Header */
   b5e28:	2040      	movs	r0, #64	; 0x40
   b5e2a:	f88d 0000 	strb.w	r0, [sp]
    cmdPassWord[1] = 1;                              /* The quantity number of the maxium card that can be detected in every research*/
   b5e2e:	2001      	movs	r0, #1
   b5e30:	f88d 0001 	strb.w	r0, [sp, #1]
    cmdPassWord[2] = 0x60;                          
   b5e34:	2060      	movs	r0, #96	; 0x60
   b5e36:	f88d 0002 	strb.w	r0, [sp, #2]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b5e3a:	6818      	ldr	r0, [r3, #0]
   b5e3c:	889b      	ldrh	r3, [r3, #4]
   b5e3e:	f8ad 3008 	strh.w	r3, [sp, #8]
    for(int i = 10;i < 14;i++) cmdPassWord[i] = id[i - 10];           // nfcUid
   b5e42:	6813      	ldr	r3, [r2, #0]
   b5e44:	f8cd 300a 	str.w	r3, [sp, #10]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b5e48:	6823      	ldr	r3, [r4, #0]
    cmdPassWord[3] = block;
   b5e4a:	f88d 1003 	strb.w	r1, [sp, #3]
    for(int i = 4;i < 10;i++) cmdPassWord[i] = st[i - 4];              // PassWord
   b5e4e:	9001      	str	r0, [sp, #4]
    this->writeCommand(cmdPassWord,14);     /*!Send a series of commands to the chip*/ 
   b5e50:	681b      	ldr	r3, [r3, #0]
   b5e52:	220e      	movs	r2, #14
   b5e54:	4669      	mov	r1, sp
   b5e56:	4620      	mov	r0, r4
   b5e58:	4798      	blx	r3
    if(!this->readAck(16))
   b5e5a:	6823      	ldr	r3, [r4, #0]
   b5e5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5e60:	685b      	ldr	r3, [r3, #4]
   b5e62:	2110      	movs	r1, #16
   b5e64:	4620      	mov	r0, r4
   b5e66:	4798      	blx	r3
   b5e68:	b148      	cbz	r0, b5e7e <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
    if(checkDCS(16) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00)   
   b5e6a:	2110      	movs	r1, #16
   b5e6c:	4620      	mov	r0, r4
   b5e6e:	f7ff ffbb 	bl	b5de8 <_ZN13DFRobot_PN5328checkDCSEi>
   b5e72:	b120      	cbz	r0, b5e7e <_ZN13DFRobot_PN53213passWordCheckEiPhS0_+0x60>
   b5e74:	8a20      	ldrh	r0, [r4, #16]
   b5e76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b5e7a:	4258      	negs	r0, r3
   b5e7c:	4158      	adcs	r0, r3
}
   b5e7e:	b004      	add	sp, #16
   b5e80:	bd10      	pop	{r4, pc}

000b5e82 <_ZN13DFRobot_PN5324scanEv>:
{   if(!this->nfcEnable)
   b5e82:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b5e84:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
   b5e88:	4604      	mov	r4, r0
   b5e8a:	b313      	cbz	r3, b5ed2 <_ZN13DFRobot_PN5324scanEv+0x50>
    cmdnfcUid[0] = COMMAND_INLISTPASSIVETARGET;
   b5e8c:	234a      	movs	r3, #74	; 0x4a
   b5e8e:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdnfcUid[1] = 1;                              // The quantity number of the maxium card that can be detected in every research
   b5e92:	2301      	movs	r3, #1
   b5e94:	f88d 3005 	strb.w	r3, [sp, #5]
    cmdnfcUid[2] = MIFARE_ISO14443A;
   b5e98:	2300      	movs	r3, #0
   b5e9a:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdnfcUid,3);
   b5e9e:	6803      	ldr	r3, [r0, #0]
   b5ea0:	2203      	movs	r2, #3
   b5ea2:	681b      	ldr	r3, [r3, #0]
   b5ea4:	a901      	add	r1, sp, #4
   b5ea6:	4798      	blx	r3
    if(!readAck(25))
   b5ea8:	6823      	ldr	r3, [r4, #0]
   b5eaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5eae:	685b      	ldr	r3, [r3, #4]
   b5eb0:	2119      	movs	r1, #25
   b5eb2:	4620      	mov	r0, r4
   b5eb4:	4798      	blx	r3
   b5eb6:	4603      	mov	r3, r0
   b5eb8:	b158      	cbz	r0, b5ed2 <_ZN13DFRobot_PN5324scanEv+0x50>
        nfcUid[i] = receiveACK[i + 19];
   b5eba:	7ea3      	ldrb	r3, [r4, #26]
   b5ebc:	7de2      	ldrb	r2, [r4, #23]
   b5ebe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    if(receiveACK[13]!=1)
   b5ec2:	7c63      	ldrb	r3, [r4, #17]
        nfcUid[i] = receiveACK[i + 19];
   b5ec4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
   b5ec8:	8b22      	ldrh	r2, [r4, #24]
   b5eca:	85e2      	strh	r2, [r4, #46]	; 0x2e
    if(receiveACK[13]!=1)
   b5ecc:	1e5a      	subs	r2, r3, #1
   b5ece:	4253      	negs	r3, r2
   b5ed0:	4153      	adcs	r3, r2
}
   b5ed2:	4618      	mov	r0, r3
   b5ed4:	b004      	add	sp, #16
   b5ed6:	bd10      	pop	{r4, pc}

000b5ed8 <_ZN13DFRobot_PN5328readDataEi>:
String DFRobot_PN532::readData(int page) {
   b5ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (page > 255)
   b5edc:	2aff      	cmp	r2, #255	; 0xff
String DFRobot_PN532::readData(int page) {
   b5ede:	b08a      	sub	sp, #40	; 0x28
   b5ee0:	4605      	mov	r5, r0
   b5ee2:	460c      	mov	r4, r1
   b5ee4:	4616      	mov	r6, r2
    if (page > 255)
   b5ee6:	dd06      	ble.n	b5ef6 <_ZN13DFRobot_PN5328readDataEi+0x1e>
        return "flase";
   b5ee8:	4939      	ldr	r1, [pc, #228]	; (b5fd0 <_ZN13DFRobot_PN5328readDataEi+0xf8>)
        return "read timeout!";
   b5eea:	f001 fb60 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
}
   b5eee:	4628      	mov	r0, r5
   b5ef0:	b00a      	add	sp, #40	; 0x28
   b5ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(!this->nfcEnable)
   b5ef6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
   b5efa:	b90b      	cbnz	r3, b5f00 <_ZN13DFRobot_PN5328readDataEi+0x28>
        return "wake up error!";
   b5efc:	4935      	ldr	r1, [pc, #212]	; (b5fd4 <_ZN13DFRobot_PN5328readDataEi+0xfc>)
   b5efe:	e7f4      	b.n	b5eea <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!scan())
   b5f00:	4608      	mov	r0, r1
   b5f02:	f7ff ffbe 	bl	b5e82 <_ZN13DFRobot_PN5324scanEv>
   b5f06:	b910      	cbnz	r0, b5f0e <_ZN13DFRobot_PN5328readDataEi+0x36>
        return "no card!";
   b5f08:	4933      	ldr	r1, [pc, #204]	; (b5fd8 <_ZN13DFRobot_PN5328readDataEi+0x100>)
        return "read timeout!";
   b5f0a:	4628      	mov	r0, r5
   b5f0c:	e7ed      	b.n	b5eea <_ZN13DFRobot_PN5328readDataEi+0x12>
    if(!passWordCheck(page,nfcUid,nfcPassword))
   b5f0e:	f104 0327 	add.w	r3, r4, #39	; 0x27
   b5f12:	f104 022d 	add.w	r2, r4, #45	; 0x2d
   b5f16:	4631      	mov	r1, r6
   b5f18:	4620      	mov	r0, r4
   b5f1a:	f7ff ff80 	bl	b5e1e <_ZN13DFRobot_PN53213passWordCheckEiPhS0_>
   b5f1e:	b908      	cbnz	r0, b5f24 <_ZN13DFRobot_PN5328readDataEi+0x4c>
        return "read error!";
   b5f20:	492e      	ldr	r1, [pc, #184]	; (b5fdc <_ZN13DFRobot_PN5328readDataEi+0x104>)
   b5f22:	e7f2      	b.n	b5f0a <_ZN13DFRobot_PN5328readDataEi+0x32>
        cmdRead[0] = COMMAND_INDATAEXCHANGE;
   b5f24:	2340      	movs	r3, #64	; 0x40
   b5f26:	f88d 3004 	strb.w	r3, [sp, #4]
        cmdRead[1] = 1;                   /* Card number */
   b5f2a:	2301      	movs	r3, #1
   b5f2c:	f88d 3005 	strb.w	r3, [sp, #5]
        cmdRead[2] = CARD_CMD_READING;     /* Mifare Read command = 0x30 */
   b5f30:	2330      	movs	r3, #48	; 0x30
   b5f32:	f88d 3006 	strb.w	r3, [sp, #6]
    writeCommand(cmdRead,4);
   b5f36:	6823      	ldr	r3, [r4, #0]
        cmdRead[3] = page; 
   b5f38:	f88d 6007 	strb.w	r6, [sp, #7]
    writeCommand(cmdRead,4);
   b5f3c:	2204      	movs	r2, #4
   b5f3e:	eb0d 0102 	add.w	r1, sp, r2
   b5f42:	681b      	ldr	r3, [r3, #0]
   b5f44:	4620      	mov	r0, r4
   b5f46:	4798      	blx	r3
    if(!readAck(32))
   b5f48:	6823      	ldr	r3, [r4, #0]
   b5f4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5f4e:	685b      	ldr	r3, [r3, #4]
   b5f50:	2120      	movs	r1, #32
   b5f52:	4620      	mov	r0, r4
   b5f54:	4798      	blx	r3
   b5f56:	b908      	cbnz	r0, b5f5c <_ZN13DFRobot_PN5328readDataEi+0x84>
        return "read timeout!";
   b5f58:	4921      	ldr	r1, [pc, #132]	; (b5fe0 <_ZN13DFRobot_PN5328readDataEi+0x108>)
   b5f5a:	e7d6      	b.n	b5f0a <_ZN13DFRobot_PN5328readDataEi+0x32>
    String dataSrt = "";
   b5f5c:	4921      	ldr	r1, [pc, #132]	; (b5fe4 <_ZN13DFRobot_PN5328readDataEi+0x10c>)
   b5f5e:	a802      	add	r0, sp, #8
   b5f60:	f001 fb25 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
    if(checkDCS(32) == 1 && receiveACK[12] == 0x41 && receiveACK[13] == 0x00){
   b5f64:	2120      	movs	r1, #32
   b5f66:	4620      	mov	r0, r4
   b5f68:	f7ff ff3e 	bl	b5de8 <_ZN13DFRobot_PN5328checkDCSEi>
   b5f6c:	b330      	cbz	r0, b5fbc <_ZN13DFRobot_PN5328readDataEi+0xe4>
   b5f6e:	8a23      	ldrh	r3, [r4, #16]
   b5f70:	2b41      	cmp	r3, #65	; 0x41
   b5f72:	d123      	bne.n	b5fbc <_ZN13DFRobot_PN5328readDataEi+0xe4>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5f74:	4f1c      	ldr	r7, [pc, #112]	; (b5fe8 <_ZN13DFRobot_PN5328readDataEi+0x110>)
   b5f76:	f8df 8074 	ldr.w	r8, [pc, #116]	; b5fec <_ZN13DFRobot_PN5328readDataEi+0x114>
   b5f7a:	3412      	adds	r4, #18
   b5f7c:	2600      	movs	r6, #0
            blockData[i] = receiveACK[i + 14];
   b5f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5f82:	77a1      	strb	r1, [r4, #30]
            if(receiveACK[i+14]<=0x0f){
   b5f84:	290f      	cmp	r1, #15
   b5f86:	d821      	bhi.n	b5fcc <_ZN13DFRobot_PN5328readDataEi+0xf4>
   b5f88:	4639      	mov	r1, r7
   b5f8a:	a802      	add	r0, sp, #8
   b5f8c:	f001 fbb8 	bl	b7700 <_ZN6String6concatEPKc>
                dataSrt += String(receiveACK[i + 14],HEX);
   b5f90:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   b5f94:	2210      	movs	r2, #16
                dataSrt += String(receiveACK[i + 14],HEX);
   b5f96:	a806      	add	r0, sp, #24
   b5f98:	f001 fb72 	bl	b7680 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5f9c:	a906      	add	r1, sp, #24
   b5f9e:	a802      	add	r0, sp, #8
   b5fa0:	f001 fbaa 	bl	b76f8 <_ZN6String6concatERKS_>
   b5fa4:	a806      	add	r0, sp, #24
   b5fa6:	f001 fab7 	bl	b7518 <_ZN6StringD1Ev>
            if(i<15) dataSrt += " ";
   b5faa:	2e0f      	cmp	r6, #15
   b5fac:	d003      	beq.n	b5fb6 <_ZN13DFRobot_PN5328readDataEi+0xde>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   b5fae:	4641      	mov	r1, r8
   b5fb0:	a802      	add	r0, sp, #8
   b5fb2:	f001 fba5 	bl	b7700 <_ZN6String6concatEPKc>
        for(int i = 0; i<16; i++)
   b5fb6:	3601      	adds	r6, #1
   b5fb8:	2e10      	cmp	r6, #16
   b5fba:	d1e0      	bne.n	b5f7e <_ZN13DFRobot_PN5328readDataEi+0xa6>
    return dataSrt;
   b5fbc:	a902      	add	r1, sp, #8
   b5fbe:	4628      	mov	r0, r5
   b5fc0:	f001 fb27 	bl	b7612 <_ZN6StringC1EOS_>
    String dataSrt = "";
   b5fc4:	a802      	add	r0, sp, #8
   b5fc6:	f001 faa7 	bl	b7518 <_ZN6StringD1Ev>
   b5fca:	e790      	b.n	b5eee <_ZN13DFRobot_PN5328readDataEi+0x16>
                dataSrt += String(receiveACK[i + 14],HEX);
   b5fcc:	2210      	movs	r2, #16
   b5fce:	e7e2      	b.n	b5f96 <_ZN13DFRobot_PN5328readDataEi+0xbe>
   b5fd0:	000bbbae 	.word	0x000bbbae
   b5fd4:	000bbb96 	.word	0x000bbb96
   b5fd8:	000bbba5 	.word	0x000bbba5
   b5fdc:	000bbbb4 	.word	0x000bbbb4
   b5fe0:	000bbbc0 	.word	0x000bbbc0
   b5fe4:	000b8399 	.word	0x000b8399
   b5fe8:	000bbb94 	.word	0x000bbb94
   b5fec:	000b8398 	.word	0x000b8398

000b5ff0 <_ZN13DFRobot_PN5328readDataEPhh>:
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b5ff0:	b530      	push	{r4, r5, lr}
    if(!this->nfcEnable)
   b5ff2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
uint8_t DFRobot_PN532::readData(uint8_t *buffer,uint8_t block){
   b5ff6:	b085      	sub	sp, #20
   b5ff8:	4604      	mov	r4, r0
   b5ffa:	460d      	mov	r5, r1
    if(!this->nfcEnable)
   b5ffc:	2b00      	cmp	r3, #0
   b5ffe:	d039      	beq.n	b6074 <_ZN13DFRobot_PN5328readDataEPhh+0x84>
    String error = this->readData(block);
   b6000:	4601      	mov	r1, r0
   b6002:	4668      	mov	r0, sp
   b6004:	f7ff ff68 	bl	b5ed8 <_ZN13DFRobot_PN5328readDataEi>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b6008:	491b      	ldr	r1, [pc, #108]	; (b6078 <_ZN13DFRobot_PN5328readDataEPhh+0x88>)
   b600a:	4668      	mov	r0, sp
   b600c:	f001 fbaa 	bl	b7764 <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b6010:	b130      	cbz	r0, b6020 <_ZN13DFRobot_PN5328readDataEPhh+0x30>
        return -1;
   b6012:	24ff      	movs	r4, #255	; 0xff
    String error = this->readData(block);
   b6014:	4668      	mov	r0, sp
   b6016:	f001 fa7f 	bl	b7518 <_ZN6StringD1Ev>
}
   b601a:	4620      	mov	r0, r4
   b601c:	b005      	add	sp, #20
   b601e:	bd30      	pop	{r4, r5, pc}
   b6020:	4916      	ldr	r1, [pc, #88]	; (b607c <_ZN13DFRobot_PN5328readDataEPhh+0x8c>)
   b6022:	4668      	mov	r0, sp
   b6024:	f001 fb9e 	bl	b7764 <_ZNK6String6equalsEPKc>
    if(error == "no card!" || error == "read error!" || error =="unknown error!"
   b6028:	2800      	cmp	r0, #0
   b602a:	d1f2      	bne.n	b6012 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b602c:	4914      	ldr	r1, [pc, #80]	; (b6080 <_ZN13DFRobot_PN5328readDataEPhh+0x90>)
   b602e:	4668      	mov	r0, sp
   b6030:	f001 fb98 	bl	b7764 <_ZNK6String6equalsEPKc>
   b6034:	2800      	cmp	r0, #0
   b6036:	d1ec      	bne.n	b6012 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b6038:	4912      	ldr	r1, [pc, #72]	; (b6084 <_ZN13DFRobot_PN5328readDataEPhh+0x94>)
   b603a:	4668      	mov	r0, sp
   b603c:	f001 fb92 	bl	b7764 <_ZNK6String6equalsEPKc>
                        || error == "read timeout!" || error == "wake up error!" ||error =="flase")
   b6040:	2800      	cmp	r0, #0
   b6042:	d1e6      	bne.n	b6012 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b6044:	4910      	ldr	r1, [pc, #64]	; (b6088 <_ZN13DFRobot_PN5328readDataEPhh+0x98>)
   b6046:	4668      	mov	r0, sp
   b6048:	f001 fb8c 	bl	b7764 <_ZNK6String6equalsEPKc>
   b604c:	2800      	cmp	r0, #0
   b604e:	d1e0      	bne.n	b6012 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
   b6050:	490e      	ldr	r1, [pc, #56]	; (b608c <_ZN13DFRobot_PN5328readDataEPhh+0x9c>)
   b6052:	4668      	mov	r0, sp
   b6054:	f001 fb86 	bl	b7764 <_ZNK6String6equalsEPKc>
   b6058:	2800      	cmp	r0, #0
   b605a:	d1da      	bne.n	b6012 <_ZN13DFRobot_PN5328readDataEPhh+0x22>
    memcpy(buffer,blockData,16);
   b605c:	f104 0331 	add.w	r3, r4, #49	; 0x31
   b6060:	4629      	mov	r1, r5
   b6062:	3441      	adds	r4, #65	; 0x41
   b6064:	f853 2b04 	ldr.w	r2, [r3], #4
   b6068:	f841 2b04 	str.w	r2, [r1], #4
   b606c:	42a3      	cmp	r3, r4
   b606e:	d1f9      	bne.n	b6064 <_ZN13DFRobot_PN5328readDataEPhh+0x74>
    return  1;
   b6070:	2401      	movs	r4, #1
   b6072:	e7cf      	b.n	b6014 <_ZN13DFRobot_PN5328readDataEPhh+0x24>
        return -1;
   b6074:	24ff      	movs	r4, #255	; 0xff
   b6076:	e7d0      	b.n	b601a <_ZN13DFRobot_PN5328readDataEPhh+0x2a>
   b6078:	000bbba5 	.word	0x000bbba5
   b607c:	000bbbb4 	.word	0x000bbbb4
   b6080:	000bbbce 	.word	0x000bbbce
   b6084:	000bbbc0 	.word	0x000bbbc0
   b6088:	000bbb96 	.word	0x000bbb96
   b608c:	000bbbae 	.word	0x000bbbae

000b6090 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b6090:	b538      	push	{r3, r4, r5, lr}
   b6092:	4604      	mov	r4, r0
   b6094:	4b06      	ldr	r3, [pc, #24]	; (b60b0 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b6096:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b609a:	4608      	mov	r0, r1
   b609c:	4615      	mov	r5, r2
   b609e:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b60a0:	2100      	movs	r1, #0
   b60a2:	f001 feb7 	bl	b7e14 <pinMode>
    _mode = mode;
   b60a6:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b60aa:	4620      	mov	r0, r4
   b60ac:	bd38      	pop	{r3, r4, r5, pc}
   b60ae:	bf00      	nop
   b60b0:	000bbbe8 	.word	0x000bbbe8

000b60b4 <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b60b4:	b538      	push	{r3, r4, r5, lr}
   b60b6:	4605      	mov	r5, r0
   b60b8:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b60ba:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b60be:	f001 fed3 	bl	b7e68 <digitalRead>
   b60c2:	b130      	cbz	r0, b60d2 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b60c4:	3c01      	subs	r4, #1
   b60c6:	b2a4      	uxth	r4, r4
   b60c8:	b12c      	cbz	r4, b60d6 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b60ca:	200a      	movs	r0, #10
   b60cc:	f000 fb94 	bl	b67f8 <delay>
    while(digitalRead(_irq)!=0){
   b60d0:	e7f3      	b.n	b60ba <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b60d2:	2001      	movs	r0, #1
}
   b60d4:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b60d6:	4620      	mov	r0, r4
   b60d8:	e7fc      	b.n	b60d4 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b60da <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b60da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b60dc:	2300      	movs	r3, #0
   b60de:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b60e2:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b60e6:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b60ea:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b60ee:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b60f2:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b60f4:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b60f6:	4604      	mov	r4, r0
   b60f8:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b60fa:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b60fe:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b6102:	d141      	bne.n	b6188 <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b6104:	f7ff ffd6 	bl	b60b4 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b6108:	b910      	cbnz	r0, b6110 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b610a:	2000      	movs	r0, #0
}
   b610c:	b003      	add	sp, #12
   b610e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b6110:	f001 fed8 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b6114:	2208      	movs	r2, #8
   b6116:	2124      	movs	r1, #36	; 0x24
   b6118:	f000 ff73 	bl	b7002 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b611c:	f001 fed2 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b6120:	6803      	ldr	r3, [r0, #0]
   b6122:	695b      	ldr	r3, [r3, #20]
   b6124:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b6126:	1d26      	adds	r6, r4, #4
   b6128:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b612c:	2001      	movs	r0, #1
   b612e:	f000 fb63 	bl	b67f8 <delay>
        receiveACK[i]= Wire.read();
   b6132:	f001 fec7 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b6136:	6803      	ldr	r3, [r0, #0]
   b6138:	695b      	ldr	r3, [r3, #20]
   b613a:	4798      	blx	r3
   b613c:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b6140:	42be      	cmp	r6, r7
   b6142:	d1f3      	bne.n	b612c <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b6144:	4620      	mov	r0, r4
   b6146:	f7ff ffb5 	bl	b60b4 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b614a:	2800      	cmp	r0, #0
   b614c:	d0dd      	beq.n	b610a <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b614e:	f001 feb9 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b6152:	1f2a      	subs	r2, r5, #4
   b6154:	2124      	movs	r1, #36	; 0x24
   b6156:	f000 ff54 	bl	b7002 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b615a:	f001 feb3 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b615e:	6803      	ldr	r3, [r0, #0]
   b6160:	695b      	ldr	r3, [r3, #20]
   b6162:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b6164:	f06f 0709 	mvn.w	r7, #9
   b6168:	3d06      	subs	r5, #6
   b616a:	1b3f      	subs	r7, r7, r4
   b616c:	19bb      	adds	r3, r7, r6
   b616e:	429d      	cmp	r5, r3
   b6170:	dd49      	ble.n	b6206 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b6172:	2001      	movs	r0, #1
   b6174:	f000 fb40 	bl	b67f8 <delay>
        receiveACK[6 + i] = Wire.read();
   b6178:	f001 fea4 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b617c:	6803      	ldr	r3, [r0, #0]
   b617e:	695b      	ldr	r3, [r3, #20]
   b6180:	4798      	blx	r3
   b6182:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b6186:	e7f1      	b.n	b616c <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b6188:	2b00      	cmp	r3, #0
   b618a:	d13c      	bne.n	b6206 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b618c:	201e      	movs	r0, #30
   b618e:	f000 fb33 	bl	b67f8 <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b6192:	f001 fe97 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b6196:	2208      	movs	r2, #8
   b6198:	2124      	movs	r1, #36	; 0x24
   b619a:	f000 ff32 	bl	b7002 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b619e:	f001 fe91 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b61a2:	6803      	ldr	r3, [r0, #0]
   b61a4:	695b      	ldr	r3, [r3, #20]
   b61a6:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b61a8:	1d26      	adds	r6, r4, #4
   b61aa:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b61ae:	2001      	movs	r0, #1
   b61b0:	f000 fb22 	bl	b67f8 <delay>
        receiveACK[i]= Wire.read();
   b61b4:	f001 fe86 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b61b8:	6803      	ldr	r3, [r0, #0]
   b61ba:	695b      	ldr	r3, [r3, #20]
   b61bc:	4798      	blx	r3
   b61be:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b61c2:	42be      	cmp	r6, r7
   b61c4:	d1f3      	bne.n	b61ae <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b61c6:	201e      	movs	r0, #30
   b61c8:	f000 fb16 	bl	b67f8 <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b61cc:	f001 fe7a 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b61d0:	1f2a      	subs	r2, r5, #4
   b61d2:	2124      	movs	r1, #36	; 0x24
   b61d4:	f000 ff15 	bl	b7002 <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b61d8:	f001 fe74 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b61dc:	6803      	ldr	r3, [r0, #0]
   b61de:	695b      	ldr	r3, [r3, #20]
   b61e0:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b61e2:	f06f 0709 	mvn.w	r7, #9
   b61e6:	3d06      	subs	r5, #6
   b61e8:	1b3f      	subs	r7, r7, r4
   b61ea:	19bb      	adds	r3, r7, r6
   b61ec:	429d      	cmp	r5, r3
   b61ee:	dd0a      	ble.n	b6206 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b61f0:	2001      	movs	r0, #1
   b61f2:	f000 fb01 	bl	b67f8 <delay>
        receiveACK[6 + i] = Wire.read();
   b61f6:	f001 fe65 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b61fa:	6803      	ldr	r3, [r0, #0]
   b61fc:	695b      	ldr	r3, [r3, #20]
   b61fe:	4798      	blx	r3
   b6200:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b6204:	e7f1      	b.n	b61ea <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b6206:	2206      	movs	r2, #6
   b6208:	1d21      	adds	r1, r4, #4
   b620a:	4668      	mov	r0, sp
   b620c:	f001 ff37 	bl	b807e <strncmp>
   b6210:	fab0 f080 	clz	r0, r0
   b6214:	0940      	lsrs	r0, r0, #5
   b6216:	e779      	b.n	b610c <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b6218 <_ZN17DFRobot_PN532_IIC5beginEv>:
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b6218:	b537      	push	{r0, r1, r2, r4, r5, lr}
    this->nfcPassword[0] = 0xff;
   b621a:	23ff      	movs	r3, #255	; 0xff
   b621c:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
    this->nfcPassword[1] = 0xff;
   b6220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool DFRobot_PN532_IIC::begin(void) {   //nfc Module initialization  
   b6224:	4604      	mov	r4, r0
    this->nfcPassword[3] = 0xff;
    this->nfcPassword[4] = 0xff;
    this->nfcPassword[5] = 0xff;
    unsigned char cmdWrite[4];
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
    cmdWrite[1] = 0x01; // normal mode;
   b6226:	2501      	movs	r5, #1
    this->nfcPassword[1] = 0xff;
   b6228:	6283      	str	r3, [r0, #40]	; 0x28
    this->nfcPassword[5] = 0xff;
   b622a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    cmdWrite[0] = COMMAND_SAMCONFIGURATION;
   b622e:	2314      	movs	r3, #20
   b6230:	f88d 3004 	strb.w	r3, [sp, #4]
    cmdWrite[2] = 0x14; // timeout 50ms * 20 = 1 second
   b6234:	f88d 3006 	strb.w	r3, [sp, #6]
    cmdWrite[1] = 0x01; // normal mode;
   b6238:	f88d 5005 	strb.w	r5, [sp, #5]
    cmdWrite[3] = 0x01; // use IRQ pin!
   b623c:	f88d 5007 	strb.w	r5, [sp, #7]
    Wire.begin();
   b6240:	f001 fe40 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b6244:	f000 feae 	bl	b6fa4 <_ZN7TwoWire5beginEv>
    nfcEnable = true;
    writeCommand(cmdWrite,4);
   b6248:	6823      	ldr	r3, [r4, #0]
    nfcEnable = true;
   b624a:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    writeCommand(cmdWrite,4);
   b624e:	2204      	movs	r2, #4
   b6250:	eb0d 0102 	add.w	r1, sp, r2
   b6254:	681b      	ldr	r3, [r3, #0]
   b6256:	4620      	mov	r0, r4
   b6258:	4798      	blx	r3
    delay(10);
   b625a:	200a      	movs	r0, #10
   b625c:	f000 facc 	bl	b67f8 <delay>
    
    if(readAck(14)!= 1){
   b6260:	6823      	ldr	r3, [r4, #0]
   b6262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6266:	685b      	ldr	r3, [r3, #4]
   b6268:	210e      	movs	r1, #14
   b626a:	4620      	mov	r0, r4
   b626c:	4798      	blx	r3
   b626e:	b120      	cbz	r0, b627a <_ZN17DFRobot_PN532_IIC5beginEv+0x62>
        
        return false;
    }
    return  ( receiveACK[12] == 0x15);
   b6270:	7c20      	ldrb	r0, [r4, #16]
   b6272:	f1a0 0315 	sub.w	r3, r0, #21
   b6276:	4258      	negs	r0, r3
   b6278:	4158      	adcs	r0, r3
}
   b627a:	b003      	add	sp, #12
   b627c:	bd30      	pop	{r4, r5, pc}
	...

000b6280 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6280:	b508      	push	{r3, lr}
   b6282:	4b02      	ldr	r3, [pc, #8]	; (b628c <os_mutex_recursive_create+0xc>)
   b6284:	681b      	ldr	r3, [r3, #0]
   b6286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6288:	9301      	str	r3, [sp, #4]
   b628a:	bd08      	pop	{r3, pc}
   b628c:	00030248 	.word	0x00030248

000b6290 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, hal_watchdog_reset_flagged_deprecated, bool(void))
DYNALIB_FN(17, hal_core, hal_watchdog_refresh_deprecated, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   b6290:	b508      	push	{r3, lr}
   b6292:	4b02      	ldr	r3, [pc, #8]	; (b629c <HAL_Core_Runtime_Info+0xc>)
   b6294:	681b      	ldr	r3, [r3, #0]
   b6296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6298:	9301      	str	r3, [sp, #4]
   b629a:	bd08      	pop	{r3, pc}
   b629c:	00030234 	.word	0x00030234

000b62a0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b62a0:	b508      	push	{r3, lr}
   b62a2:	4b02      	ldr	r3, [pc, #8]	; (b62ac <HAL_RNG_GetRandomNumber+0xc>)
   b62a4:	681b      	ldr	r3, [r3, #0]
   b62a6:	685b      	ldr	r3, [r3, #4]
   b62a8:	9301      	str	r3, [sp, #4]
   b62aa:	bd08      	pop	{r3, pc}
   b62ac:	00030218 	.word	0x00030218

000b62b0 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b62b0:	b508      	push	{r3, lr}
   b62b2:	4b02      	ldr	r3, [pc, #8]	; (b62bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   b62b4:	681b      	ldr	r3, [r3, #0]
   b62b6:	695b      	ldr	r3, [r3, #20]
   b62b8:	9301      	str	r3, [sp, #4]
   b62ba:	bd08      	pop	{r3, pc}
   b62bc:	00030218 	.word	0x00030218

000b62c0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b62c0:	b508      	push	{r3, lr}
   b62c2:	4b02      	ldr	r3, [pc, #8]	; (b62cc <hal_rtc_time_is_valid+0xc>)
   b62c4:	681b      	ldr	r3, [r3, #0]
   b62c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b62c8:	9301      	str	r3, [sp, #4]
   b62ca:	bd08      	pop	{r3, pc}
   b62cc:	00030218 	.word	0x00030218

000b62d0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b62d0:	b508      	push	{r3, lr}
   b62d2:	4b02      	ldr	r3, [pc, #8]	; (b62dc <hal_rtc_get_time+0xc>)
   b62d4:	681b      	ldr	r3, [r3, #0]
   b62d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b62d8:	9301      	str	r3, [sp, #4]
   b62da:	bd08      	pop	{r3, pc}
   b62dc:	00030218 	.word	0x00030218

000b62e0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b62e0:	b508      	push	{r3, lr}
   b62e2:	4b02      	ldr	r3, [pc, #8]	; (b62ec <hal_gpio_mode+0xc>)
   b62e4:	681b      	ldr	r3, [r3, #0]
   b62e6:	689b      	ldr	r3, [r3, #8]
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	bd08      	pop	{r3, pc}
   b62ec:	0003022c 	.word	0x0003022c

000b62f0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b62f0:	b508      	push	{r3, lr}
   b62f2:	4b02      	ldr	r3, [pc, #8]	; (b62fc <hal_gpio_get_mode+0xc>)
   b62f4:	681b      	ldr	r3, [r3, #0]
   b62f6:	68db      	ldr	r3, [r3, #12]
   b62f8:	9301      	str	r3, [sp, #4]
   b62fa:	bd08      	pop	{r3, pc}
   b62fc:	0003022c 	.word	0x0003022c

000b6300 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6300:	b508      	push	{r3, lr}
   b6302:	4b02      	ldr	r3, [pc, #8]	; (b630c <hal_gpio_write+0xc>)
   b6304:	681b      	ldr	r3, [r3, #0]
   b6306:	691b      	ldr	r3, [r3, #16]
   b6308:	9301      	str	r3, [sp, #4]
   b630a:	bd08      	pop	{r3, pc}
   b630c:	0003022c 	.word	0x0003022c

000b6310 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6310:	b508      	push	{r3, lr}
   b6312:	4b02      	ldr	r3, [pc, #8]	; (b631c <hal_gpio_read+0xc>)
   b6314:	681b      	ldr	r3, [r3, #0]
   b6316:	695b      	ldr	r3, [r3, #20]
   b6318:	9301      	str	r3, [sp, #4]
   b631a:	bd08      	pop	{r3, pc}
   b631c:	0003022c 	.word	0x0003022c

000b6320 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6320:	b508      	push	{r3, lr}
   b6322:	4b02      	ldr	r3, [pc, #8]	; (b632c <hal_i2c_begin+0xc>)
   b6324:	681b      	ldr	r3, [r3, #0]
   b6326:	68db      	ldr	r3, [r3, #12]
   b6328:	9301      	str	r3, [sp, #4]
   b632a:	bd08      	pop	{r3, pc}
   b632c:	00030228 	.word	0x00030228

000b6330 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6330:	b508      	push	{r3, lr}
   b6332:	4b02      	ldr	r3, [pc, #8]	; (b633c <hal_i2c_begin_transmission+0xc>)
   b6334:	681b      	ldr	r3, [r3, #0]
   b6336:	699b      	ldr	r3, [r3, #24]
   b6338:	9301      	str	r3, [sp, #4]
   b633a:	bd08      	pop	{r3, pc}
   b633c:	00030228 	.word	0x00030228

000b6340 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6340:	b508      	push	{r3, lr}
   b6342:	4b02      	ldr	r3, [pc, #8]	; (b634c <hal_i2c_end_transmission+0xc>)
   b6344:	681b      	ldr	r3, [r3, #0]
   b6346:	69db      	ldr	r3, [r3, #28]
   b6348:	9301      	str	r3, [sp, #4]
   b634a:	bd08      	pop	{r3, pc}
   b634c:	00030228 	.word	0x00030228

000b6350 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6350:	b508      	push	{r3, lr}
   b6352:	4b02      	ldr	r3, [pc, #8]	; (b635c <hal_i2c_write+0xc>)
   b6354:	681b      	ldr	r3, [r3, #0]
   b6356:	6a1b      	ldr	r3, [r3, #32]
   b6358:	9301      	str	r3, [sp, #4]
   b635a:	bd08      	pop	{r3, pc}
   b635c:	00030228 	.word	0x00030228

000b6360 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6360:	b508      	push	{r3, lr}
   b6362:	4b02      	ldr	r3, [pc, #8]	; (b636c <hal_i2c_available+0xc>)
   b6364:	681b      	ldr	r3, [r3, #0]
   b6366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6368:	9301      	str	r3, [sp, #4]
   b636a:	bd08      	pop	{r3, pc}
   b636c:	00030228 	.word	0x00030228

000b6370 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6370:	b508      	push	{r3, lr}
   b6372:	4b02      	ldr	r3, [pc, #8]	; (b637c <hal_i2c_read+0xc>)
   b6374:	681b      	ldr	r3, [r3, #0]
   b6376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6378:	9301      	str	r3, [sp, #4]
   b637a:	bd08      	pop	{r3, pc}
   b637c:	00030228 	.word	0x00030228

000b6380 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6380:	b508      	push	{r3, lr}
   b6382:	4b02      	ldr	r3, [pc, #8]	; (b638c <hal_i2c_peek+0xc>)
   b6384:	681b      	ldr	r3, [r3, #0]
   b6386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6388:	9301      	str	r3, [sp, #4]
   b638a:	bd08      	pop	{r3, pc}
   b638c:	00030228 	.word	0x00030228

000b6390 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6390:	b508      	push	{r3, lr}
   b6392:	4b02      	ldr	r3, [pc, #8]	; (b639c <hal_i2c_flush+0xc>)
   b6394:	681b      	ldr	r3, [r3, #0]
   b6396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6398:	9301      	str	r3, [sp, #4]
   b639a:	bd08      	pop	{r3, pc}
   b639c:	00030228 	.word	0x00030228

000b63a0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b63a0:	b508      	push	{r3, lr}
   b63a2:	4b02      	ldr	r3, [pc, #8]	; (b63ac <hal_i2c_is_enabled+0xc>)
   b63a4:	681b      	ldr	r3, [r3, #0]
   b63a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b63a8:	9301      	str	r3, [sp, #4]
   b63aa:	bd08      	pop	{r3, pc}
   b63ac:	00030228 	.word	0x00030228

000b63b0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b63b0:	b508      	push	{r3, lr}
   b63b2:	4b02      	ldr	r3, [pc, #8]	; (b63bc <hal_i2c_init+0xc>)
   b63b4:	681b      	ldr	r3, [r3, #0]
   b63b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b63b8:	9301      	str	r3, [sp, #4]
   b63ba:	bd08      	pop	{r3, pc}
   b63bc:	00030228 	.word	0x00030228

000b63c0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b63c0:	b508      	push	{r3, lr}
   b63c2:	4b02      	ldr	r3, [pc, #8]	; (b63cc <hal_i2c_request_ex+0xc>)
   b63c4:	681b      	ldr	r3, [r3, #0]
   b63c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b63c8:	9301      	str	r3, [sp, #4]
   b63ca:	bd08      	pop	{r3, pc}
   b63cc:	00030228 	.word	0x00030228

000b63d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b63d0:	b508      	push	{r3, lr}
   b63d2:	4b02      	ldr	r3, [pc, #8]	; (b63dc <inet_inet_ntop+0xc>)
   b63d4:	681b      	ldr	r3, [r3, #0]
   b63d6:	695b      	ldr	r3, [r3, #20]
   b63d8:	9301      	str	r3, [sp, #4]
   b63da:	bd08      	pop	{r3, pc}
   b63dc:	00030264 	.word	0x00030264

000b63e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b63e0:	b508      	push	{r3, lr}
   b63e2:	4b02      	ldr	r3, [pc, #8]	; (b63ec <netdb_freeaddrinfo+0xc>)
   b63e4:	681b      	ldr	r3, [r3, #0]
   b63e6:	689b      	ldr	r3, [r3, #8]
   b63e8:	9301      	str	r3, [sp, #4]
   b63ea:	bd08      	pop	{r3, pc}
   b63ec:	00030268 	.word	0x00030268

000b63f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <netdb_getaddrinfo+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	68db      	ldr	r3, [r3, #12]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	00030268 	.word	0x00030268

000b6400 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <hal_spi_begin+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	681b      	ldr	r3, [r3, #0]
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030230 	.word	0x00030230

000b6410 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <hal_spi_transfer+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	695b      	ldr	r3, [r3, #20]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030230 	.word	0x00030230

000b6420 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <hal_spi_init+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	69db      	ldr	r3, [r3, #28]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030230 	.word	0x00030230

000b6430 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <hal_spi_is_enabled+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	6a1b      	ldr	r3, [r3, #32]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030230 	.word	0x00030230

000b6440 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <hal_spi_info+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030230 	.word	0x00030230

000b6450 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <hal_spi_set_settings+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030230 	.word	0x00030230

000b6460 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <hal_spi_acquire+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030230 	.word	0x00030230

000b6470 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <hal_spi_release+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030230 	.word	0x00030230

000b6480 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <hal_usart_write+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	68db      	ldr	r3, [r3, #12]
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	0003023c 	.word	0x0003023c

000b6490 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <hal_usart_available+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	691b      	ldr	r3, [r3, #16]
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	0003023c 	.word	0x0003023c

000b64a0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <hal_usart_read+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	695b      	ldr	r3, [r3, #20]
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	0003023c 	.word	0x0003023c

000b64b0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <hal_usart_peek+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	699b      	ldr	r3, [r3, #24]
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	0003023c 	.word	0x0003023c

000b64c0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <hal_usart_flush+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	69db      	ldr	r3, [r3, #28]
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	0003023c 	.word	0x0003023c

000b64d0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <hal_usart_is_enabled+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	6a1b      	ldr	r3, [r3, #32]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	0003023c 	.word	0x0003023c

000b64e0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <hal_usart_available_data_for_write+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	0003023c 	.word	0x0003023c

000b64f0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <hal_usart_init_ex+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	0003023c 	.word	0x0003023c

000b6500 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <HAL_USB_USART_Init+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	681b      	ldr	r3, [r3, #0]
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003024c 	.word	0x0003024c

000b6510 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <HAL_USB_USART_Begin+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	685b      	ldr	r3, [r3, #4]
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003024c 	.word	0x0003024c

000b6520 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <HAL_USB_USART_Available_Data+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	691b      	ldr	r3, [r3, #16]
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	0003024c 	.word	0x0003024c

000b6530 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	695b      	ldr	r3, [r3, #20]
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	0003024c 	.word	0x0003024c

000b6540 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6540:	b508      	push	{r3, lr}
   b6542:	4b02      	ldr	r3, [pc, #8]	; (b654c <HAL_USB_USART_Receive_Data+0xc>)
   b6544:	681b      	ldr	r3, [r3, #0]
   b6546:	699b      	ldr	r3, [r3, #24]
   b6548:	9301      	str	r3, [sp, #4]
   b654a:	bd08      	pop	{r3, pc}
   b654c:	0003024c 	.word	0x0003024c

000b6550 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6550:	b508      	push	{r3, lr}
   b6552:	4b02      	ldr	r3, [pc, #8]	; (b655c <HAL_USB_USART_Send_Data+0xc>)
   b6554:	681b      	ldr	r3, [r3, #0]
   b6556:	69db      	ldr	r3, [r3, #28]
   b6558:	9301      	str	r3, [sp, #4]
   b655a:	bd08      	pop	{r3, pc}
   b655c:	0003024c 	.word	0x0003024c

000b6560 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6560:	b508      	push	{r3, lr}
   b6562:	4b02      	ldr	r3, [pc, #8]	; (b656c <HAL_USB_USART_Flush_Data+0xc>)
   b6564:	681b      	ldr	r3, [r3, #0]
   b6566:	6a1b      	ldr	r3, [r3, #32]
   b6568:	9301      	str	r3, [sp, #4]
   b656a:	bd08      	pop	{r3, pc}
   b656c:	0003024c 	.word	0x0003024c

000b6570 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b6570:	b508      	push	{r3, lr}
   b6572:	4b02      	ldr	r3, [pc, #8]	; (b657c <system_mode+0xc>)
   b6574:	681b      	ldr	r3, [r3, #0]
   b6576:	681b      	ldr	r3, [r3, #0]
   b6578:	9301      	str	r3, [sp, #4]
   b657a:	bd08      	pop	{r3, pc}
   b657c:	00030220 	.word	0x00030220

000b6580 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6580:	b508      	push	{r3, lr}
   b6582:	4b02      	ldr	r3, [pc, #8]	; (b658c <set_system_mode+0xc>)
   b6584:	681b      	ldr	r3, [r3, #0]
   b6586:	685b      	ldr	r3, [r3, #4]
   b6588:	9301      	str	r3, [sp, #4]
   b658a:	bd08      	pop	{r3, pc}
   b658c:	00030220 	.word	0x00030220

000b6590 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6590:	b508      	push	{r3, lr}
   b6592:	4b02      	ldr	r3, [pc, #8]	; (b659c <system_delay_ms+0xc>)
   b6594:	681b      	ldr	r3, [r3, #0]
   b6596:	695b      	ldr	r3, [r3, #20]
   b6598:	9301      	str	r3, [sp, #4]
   b659a:	bd08      	pop	{r3, pc}
   b659c:	00030220 	.word	0x00030220

000b65a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b65a0:	b508      	push	{r3, lr}
   b65a2:	4b02      	ldr	r3, [pc, #8]	; (b65ac <application_thread_current+0xc>)
   b65a4:	681b      	ldr	r3, [r3, #0]
   b65a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b65a8:	9301      	str	r3, [sp, #4]
   b65aa:	bd08      	pop	{r3, pc}
   b65ac:	00030220 	.word	0x00030220

000b65b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b65b0:	b508      	push	{r3, lr}
   b65b2:	4b02      	ldr	r3, [pc, #8]	; (b65bc <application_thread_invoke+0xc>)
   b65b4:	681b      	ldr	r3, [r3, #0]
   b65b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b65b8:	9301      	str	r3, [sp, #4]
   b65ba:	bd08      	pop	{r3, pc}
   b65bc:	00030220 	.word	0x00030220

000b65c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b65c0:	b508      	push	{r3, lr}
   b65c2:	4b02      	ldr	r3, [pc, #8]	; (b65cc <system_thread_get_state+0xc>)
   b65c4:	681b      	ldr	r3, [r3, #0]
   b65c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b65c8:	9301      	str	r3, [sp, #4]
   b65ca:	bd08      	pop	{r3, pc}
   b65cc:	00030220 	.word	0x00030220

000b65d0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b65d0:	b508      	push	{r3, lr}
   b65d2:	4b03      	ldr	r3, [pc, #12]	; (b65e0 <system_ctrl_set_app_request_handler+0x10>)
   b65d4:	681b      	ldr	r3, [r3, #0]
   b65d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b65da:	9301      	str	r3, [sp, #4]
   b65dc:	bd08      	pop	{r3, pc}
   b65de:	0000      	.short	0x0000
   b65e0:	00030220 	.word	0x00030220

000b65e4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b03      	ldr	r3, [pc, #12]	; (b65f4 <system_ctrl_set_result+0x10>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b65ee:	9301      	str	r3, [sp, #4]
   b65f0:	bd08      	pop	{r3, pc}
   b65f2:	0000      	.short	0x0000
   b65f4:	00030220 	.word	0x00030220

000b65f8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b65f8:	b508      	push	{r3, lr}
   b65fa:	4b02      	ldr	r3, [pc, #8]	; (b6604 <spark_process+0xc>)
   b65fc:	681b      	ldr	r3, [r3, #0]
   b65fe:	689b      	ldr	r3, [r3, #8]
   b6600:	9301      	str	r3, [sp, #4]
   b6602:	bd08      	pop	{r3, pc}
   b6604:	00030244 	.word	0x00030244

000b6608 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b6608:	b508      	push	{r3, lr}
   b660a:	4b02      	ldr	r3, [pc, #8]	; (b6614 <spark_cloud_flag_connect+0xc>)
   b660c:	681b      	ldr	r3, [r3, #0]
   b660e:	68db      	ldr	r3, [r3, #12]
   b6610:	9301      	str	r3, [sp, #4]
   b6612:	bd08      	pop	{r3, pc}
   b6614:	00030244 	.word	0x00030244

000b6618 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b6618:	b508      	push	{r3, lr}
   b661a:	4b02      	ldr	r3, [pc, #8]	; (b6624 <spark_cloud_flag_connected+0xc>)
   b661c:	681b      	ldr	r3, [r3, #0]
   b661e:	695b      	ldr	r3, [r3, #20]
   b6620:	9301      	str	r3, [sp, #4]
   b6622:	bd08      	pop	{r3, pc}
   b6624:	00030244 	.word	0x00030244

000b6628 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b6628:	b508      	push	{r3, lr}
   b662a:	4b02      	ldr	r3, [pc, #8]	; (b6634 <spark_send_event+0xc>)
   b662c:	681b      	ldr	r3, [r3, #0]
   b662e:	6a1b      	ldr	r3, [r3, #32]
   b6630:	9301      	str	r3, [sp, #4]
   b6632:	bd08      	pop	{r3, pc}
   b6634:	00030244 	.word	0x00030244

000b6638 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b6638:	b508      	push	{r3, lr}
   b663a:	4b02      	ldr	r3, [pc, #8]	; (b6644 <spark_subscribe+0xc>)
   b663c:	681b      	ldr	r3, [r3, #0]
   b663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6640:	9301      	str	r3, [sp, #4]
   b6642:	bd08      	pop	{r3, pc}
   b6644:	00030244 	.word	0x00030244

000b6648 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   b6648:	b508      	push	{r3, lr}
   b664a:	4b02      	ldr	r3, [pc, #8]	; (b6654 <spark_sync_time+0xc>)
   b664c:	681b      	ldr	r3, [r3, #0]
   b664e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6650:	9301      	str	r3, [sp, #4]
   b6652:	bd08      	pop	{r3, pc}
   b6654:	00030244 	.word	0x00030244

000b6658 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b6658:	b508      	push	{r3, lr}
   b665a:	4b02      	ldr	r3, [pc, #8]	; (b6664 <spark_sync_time_pending+0xc>)
   b665c:	681b      	ldr	r3, [r3, #0]
   b665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6660:	9301      	str	r3, [sp, #4]
   b6662:	bd08      	pop	{r3, pc}
   b6664:	00030244 	.word	0x00030244

000b6668 <spark_set_connection_property>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   b6668:	b508      	push	{r3, lr}
   b666a:	4b02      	ldr	r3, [pc, #8]	; (b6674 <spark_set_connection_property+0xc>)
   b666c:	681b      	ldr	r3, [r3, #0]
   b666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6670:	9301      	str	r3, [sp, #4]
   b6672:	bd08      	pop	{r3, pc}
   b6674:	00030244 	.word	0x00030244

000b6678 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6678:	b508      	push	{r3, lr}
   b667a:	4b02      	ldr	r3, [pc, #8]	; (b6684 <spark_set_random_seed_from_cloud_handler+0xc>)
   b667c:	681b      	ldr	r3, [r3, #0]
   b667e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6680:	9301      	str	r3, [sp, #4]
   b6682:	bd08      	pop	{r3, pc}
   b6684:	00030244 	.word	0x00030244

000b6688 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b6688:	b508      	push	{r3, lr}
   b668a:	4b02      	ldr	r3, [pc, #8]	; (b6694 <spark_cloud_disconnect+0xc>)
   b668c:	681b      	ldr	r3, [r3, #0]
   b668e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6690:	9301      	str	r3, [sp, #4]
   b6692:	bd08      	pop	{r3, pc}
   b6694:	00030244 	.word	0x00030244

000b6698 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6698:	b508      	push	{r3, lr}
   b669a:	4b02      	ldr	r3, [pc, #8]	; (b66a4 <network_connect+0xc>)
   b669c:	681b      	ldr	r3, [r3, #0]
   b669e:	685b      	ldr	r3, [r3, #4]
   b66a0:	9301      	str	r3, [sp, #4]
   b66a2:	bd08      	pop	{r3, pc}
   b66a4:	00030240 	.word	0x00030240

000b66a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b66a8:	b508      	push	{r3, lr}
   b66aa:	4b02      	ldr	r3, [pc, #8]	; (b66b4 <network_connecting+0xc>)
   b66ac:	681b      	ldr	r3, [r3, #0]
   b66ae:	689b      	ldr	r3, [r3, #8]
   b66b0:	9301      	str	r3, [sp, #4]
   b66b2:	bd08      	pop	{r3, pc}
   b66b4:	00030240 	.word	0x00030240

000b66b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b66b8:	b508      	push	{r3, lr}
   b66ba:	4b02      	ldr	r3, [pc, #8]	; (b66c4 <network_disconnect+0xc>)
   b66bc:	681b      	ldr	r3, [r3, #0]
   b66be:	68db      	ldr	r3, [r3, #12]
   b66c0:	9301      	str	r3, [sp, #4]
   b66c2:	bd08      	pop	{r3, pc}
   b66c4:	00030240 	.word	0x00030240

000b66c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b66c8:	b508      	push	{r3, lr}
   b66ca:	4b02      	ldr	r3, [pc, #8]	; (b66d4 <network_ready+0xc>)
   b66cc:	681b      	ldr	r3, [r3, #0]
   b66ce:	691b      	ldr	r3, [r3, #16]
   b66d0:	9301      	str	r3, [sp, #4]
   b66d2:	bd08      	pop	{r3, pc}
   b66d4:	00030240 	.word	0x00030240

000b66d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b66d8:	b508      	push	{r3, lr}
   b66da:	4b02      	ldr	r3, [pc, #8]	; (b66e4 <network_on+0xc>)
   b66dc:	681b      	ldr	r3, [r3, #0]
   b66de:	695b      	ldr	r3, [r3, #20]
   b66e0:	9301      	str	r3, [sp, #4]
   b66e2:	bd08      	pop	{r3, pc}
   b66e4:	00030240 	.word	0x00030240

000b66e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b02      	ldr	r3, [pc, #8]	; (b66f4 <network_off+0xc>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	699b      	ldr	r3, [r3, #24]
   b66f0:	9301      	str	r3, [sp, #4]
   b66f2:	bd08      	pop	{r3, pc}
   b66f4:	00030240 	.word	0x00030240

000b66f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b66f8:	b508      	push	{r3, lr}
   b66fa:	4b02      	ldr	r3, [pc, #8]	; (b6704 <network_listen+0xc>)
   b66fc:	681b      	ldr	r3, [r3, #0]
   b66fe:	69db      	ldr	r3, [r3, #28]
   b6700:	9301      	str	r3, [sp, #4]
   b6702:	bd08      	pop	{r3, pc}
   b6704:	00030240 	.word	0x00030240

000b6708 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6708:	b508      	push	{r3, lr}
   b670a:	4b02      	ldr	r3, [pc, #8]	; (b6714 <network_listening+0xc>)
   b670c:	681b      	ldr	r3, [r3, #0]
   b670e:	6a1b      	ldr	r3, [r3, #32]
   b6710:	9301      	str	r3, [sp, #4]
   b6712:	bd08      	pop	{r3, pc}
   b6714:	00030240 	.word	0x00030240

000b6718 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6718:	b508      	push	{r3, lr}
   b671a:	4b02      	ldr	r3, [pc, #8]	; (b6724 <network_set_listen_timeout+0xc>)
   b671c:	681b      	ldr	r3, [r3, #0]
   b671e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6720:	9301      	str	r3, [sp, #4]
   b6722:	bd08      	pop	{r3, pc}
   b6724:	00030240 	.word	0x00030240

000b6728 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6728:	b508      	push	{r3, lr}
   b672a:	4b02      	ldr	r3, [pc, #8]	; (b6734 <network_get_listen_timeout+0xc>)
   b672c:	681b      	ldr	r3, [r3, #0]
   b672e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6730:	9301      	str	r3, [sp, #4]
   b6732:	bd08      	pop	{r3, pc}
   b6734:	00030240 	.word	0x00030240

000b6738 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6738:	b508      	push	{r3, lr}
   b673a:	4b02      	ldr	r3, [pc, #8]	; (b6744 <network_is_on+0xc>)
   b673c:	681b      	ldr	r3, [r3, #0]
   b673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6740:	9301      	str	r3, [sp, #4]
   b6742:	bd08      	pop	{r3, pc}
   b6744:	00030240 	.word	0x00030240

000b6748 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6748:	b508      	push	{r3, lr}
   b674a:	4b02      	ldr	r3, [pc, #8]	; (b6754 <network_is_off+0xc>)
   b674c:	681b      	ldr	r3, [r3, #0]
   b674e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6750:	9301      	str	r3, [sp, #4]
   b6752:	bd08      	pop	{r3, pc}
   b6754:	00030240 	.word	0x00030240

000b6758 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6758:	b508      	push	{r3, lr}
   b675a:	4b02      	ldr	r3, [pc, #8]	; (b6764 <malloc+0xc>)
   b675c:	681b      	ldr	r3, [r3, #0]
   b675e:	681b      	ldr	r3, [r3, #0]
   b6760:	9301      	str	r3, [sp, #4]
   b6762:	bd08      	pop	{r3, pc}
   b6764:	0003021c 	.word	0x0003021c

000b6768 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6768:	b508      	push	{r3, lr}
   b676a:	4b02      	ldr	r3, [pc, #8]	; (b6774 <free+0xc>)
   b676c:	681b      	ldr	r3, [r3, #0]
   b676e:	685b      	ldr	r3, [r3, #4]
   b6770:	9301      	str	r3, [sp, #4]
   b6772:	bd08      	pop	{r3, pc}
   b6774:	0003021c 	.word	0x0003021c

000b6778 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6778:	b508      	push	{r3, lr}
   b677a:	4b02      	ldr	r3, [pc, #8]	; (b6784 <realloc+0xc>)
   b677c:	681b      	ldr	r3, [r3, #0]
   b677e:	689b      	ldr	r3, [r3, #8]
   b6780:	9301      	str	r3, [sp, #4]
   b6782:	bd08      	pop	{r3, pc}
   b6784:	0003021c 	.word	0x0003021c

000b6788 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6788:	b508      	push	{r3, lr}
   b678a:	4b02      	ldr	r3, [pc, #8]	; (b6794 <vsnprintf+0xc>)
   b678c:	681b      	ldr	r3, [r3, #0]
   b678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6790:	9301      	str	r3, [sp, #4]
   b6792:	bd08      	pop	{r3, pc}
   b6794:	0003021c 	.word	0x0003021c

000b6798 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b6798:	b508      	push	{r3, lr}
   b679a:	4b02      	ldr	r3, [pc, #8]	; (b67a4 <abort+0xc>)
   b679c:	681b      	ldr	r3, [r3, #0]
   b679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67a0:	9301      	str	r3, [sp, #4]
   b67a2:	bd08      	pop	{r3, pc}
   b67a4:	0003021c 	.word	0x0003021c

000b67a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b67a8:	b508      	push	{r3, lr}
   b67aa:	4b02      	ldr	r3, [pc, #8]	; (b67b4 <_malloc_r+0xc>)
   b67ac:	681b      	ldr	r3, [r3, #0]
   b67ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67b0:	9301      	str	r3, [sp, #4]
   b67b2:	bd08      	pop	{r3, pc}
   b67b4:	0003021c 	.word	0x0003021c

000b67b8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b67b8:	b508      	push	{r3, lr}
   b67ba:	4b02      	ldr	r3, [pc, #8]	; (b67c4 <__errno+0xc>)
   b67bc:	681b      	ldr	r3, [r3, #0]
   b67be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b67c0:	9301      	str	r3, [sp, #4]
   b67c2:	bd08      	pop	{r3, pc}
   b67c4:	0003021c 	.word	0x0003021c

000b67c8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b67c8:	b508      	push	{r3, lr}
   b67ca:	4b02      	ldr	r3, [pc, #8]	; (b67d4 <__assert_func+0xc>)
   b67cc:	681b      	ldr	r3, [r3, #0]
   b67ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67d0:	9301      	str	r3, [sp, #4]
   b67d2:	bd08      	pop	{r3, pc}
   b67d4:	0003021c 	.word	0x0003021c

000b67d8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b67d8:	b508      	push	{r3, lr}
   b67da:	4b02      	ldr	r3, [pc, #8]	; (b67e4 <newlib_impure_ptr_callback+0xc>)
   b67dc:	681b      	ldr	r3, [r3, #0]
   b67de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67e0:	9301      	str	r3, [sp, #4]
   b67e2:	bd08      	pop	{r3, pc}
   b67e4:	0003021c 	.word	0x0003021c

000b67e8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b67e8:	b508      	push	{r3, lr}
   b67ea:	4b02      	ldr	r3, [pc, #8]	; (b67f4 <localtime_r+0xc>)
   b67ec:	681b      	ldr	r3, [r3, #0]
   b67ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b67f0:	9301      	str	r3, [sp, #4]
   b67f2:	bd08      	pop	{r3, pc}
   b67f4:	0003021c 	.word	0x0003021c

000b67f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b67f8:	2100      	movs	r1, #0
   b67fa:	f7ff bec9 	b.w	b6590 <system_delay_ms>

000b67fe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b67fe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b6800:	6883      	ldr	r3, [r0, #8]
   b6802:	4604      	mov	r4, r0
   b6804:	b90b      	cbnz	r3, b680a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b6806:	f001 fbc3 	bl	b7f90 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b680a:	68c3      	ldr	r3, [r0, #12]
   b680c:	4798      	blx	r3
      if (_M_manager)
   b680e:	68a3      	ldr	r3, [r4, #8]
   b6810:	b11b      	cbz	r3, b681a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6812:	2203      	movs	r2, #3
   b6814:	4621      	mov	r1, r4
   b6816:	4620      	mov	r0, r4
   b6818:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b681a:	4620      	mov	r0, r4
   b681c:	2110      	movs	r1, #16
}
   b681e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b6822:	f7fe b86e 	b.w	b4902 <_ZdlPvj>

000b6826 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b6826:	b510      	push	{r4, lr}
      if (_M_manager)
   b6828:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b682a:	4604      	mov	r4, r0
      if (_M_manager)
   b682c:	b113      	cbz	r3, b6834 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b682e:	2203      	movs	r2, #3
   b6830:	4601      	mov	r1, r0
   b6832:	4798      	blx	r3
    }
   b6834:	4620      	mov	r0, r4
   b6836:	bd10      	pop	{r4, pc}

000b6838 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b6838:	b513      	push	{r0, r1, r4, lr}
   b683a:	460b      	mov	r3, r1
   b683c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b683e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b6842:	466c      	mov	r4, sp
   b6844:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b6848:	e893 0003 	ldmia.w	r3, {r0, r1}
   b684c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b6850:	e894 0003 	ldmia.w	r4, {r0, r1}
   b6854:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b6858:	b002      	add	sp, #8
   b685a:	bd10      	pop	{r4, pc}

000b685c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b685c:	4802      	ldr	r0, [pc, #8]	; (b6868 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b685e:	2300      	movs	r3, #0
   b6860:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6862:	f7ff bd0d 	b.w	b6280 <os_mutex_recursive_create>
   b6866:	bf00      	nop
   b6868:	2003e660 	.word	0x2003e660

000b686c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b686c:	2200      	movs	r2, #0
   b686e:	6840      	ldr	r0, [r0, #4]
   b6870:	4611      	mov	r1, r2
   b6872:	f7ff bf29 	b.w	b66c8 <network_ready>

000b6876 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b6876:	2200      	movs	r2, #0
   b6878:	6840      	ldr	r0, [r0, #4]
   b687a:	4611      	mov	r1, r2
   b687c:	f7ff bf44 	b.w	b6708 <network_listening>

000b6880 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6880:	2200      	movs	r2, #0
   b6882:	6840      	ldr	r0, [r0, #4]
   b6884:	4611      	mov	r1, r2
   b6886:	f7ff bf4f 	b.w	b6728 <network_get_listen_timeout>

000b688a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b688a:	6840      	ldr	r0, [r0, #4]
   b688c:	2200      	movs	r2, #0
   b688e:	f7ff bf43 	b.w	b6718 <network_set_listen_timeout>

000b6892 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6892:	6840      	ldr	r0, [r0, #4]
   b6894:	2200      	movs	r2, #0
   b6896:	f081 0101 	eor.w	r1, r1, #1
   b689a:	f7ff bf2d 	b.w	b66f8 <network_listen>

000b689e <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b689e:	2300      	movs	r3, #0
   b68a0:	6840      	ldr	r0, [r0, #4]
   b68a2:	461a      	mov	r2, r3
   b68a4:	4619      	mov	r1, r3
   b68a6:	f7ff bf1f 	b.w	b66e8 <network_off>

000b68aa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b68aa:	2200      	movs	r2, #0
   b68ac:	6840      	ldr	r0, [r0, #4]
   b68ae:	4611      	mov	r1, r2
   b68b0:	f7ff befa 	b.w	b66a8 <network_connecting>

000b68b4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b68b4:	6840      	ldr	r0, [r0, #4]
   b68b6:	2200      	movs	r2, #0
   b68b8:	2102      	movs	r1, #2
   b68ba:	f7ff befd 	b.w	b66b8 <network_disconnect>

000b68be <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b68be:	2300      	movs	r3, #0
   b68c0:	6840      	ldr	r0, [r0, #4]
   b68c2:	461a      	mov	r2, r3
   b68c4:	f7ff bee8 	b.w	b6698 <network_connect>

000b68c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b68c8:	4b08      	ldr	r3, [pc, #32]	; (b68ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b68ca:	b510      	push	{r4, lr}
   b68cc:	2428      	movs	r4, #40	; 0x28
   b68ce:	4622      	mov	r2, r4
   b68d0:	4618      	mov	r0, r3
   b68d2:	2100      	movs	r1, #0
   b68d4:	f001 fb77 	bl	b7fc6 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b68d8:	4b05      	ldr	r3, [pc, #20]	; (b68f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b68da:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b68dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b68e0:	6042      	str	r2, [r0, #4]
   b68e2:	2204      	movs	r2, #4
   b68e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b68e6:	4a03      	ldr	r2, [pc, #12]	; (b68f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b68e8:	601a      	str	r2, [r3, #0]
   b68ea:	bd10      	pop	{r4, pc}
   b68ec:	2003e66c 	.word	0x2003e66c
   b68f0:	2003e664 	.word	0x2003e664
   b68f4:	000bbbf8 	.word	0x000bbbf8

000b68f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b68f8:	4770      	bx	lr

000b68fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b68fa:	2000      	movs	r0, #0
   b68fc:	4770      	bx	lr

000b68fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b68fe:	b510      	push	{r4, lr}
   b6900:	2110      	movs	r1, #16
   b6902:	4604      	mov	r4, r0
   b6904:	f7fd fffd 	bl	b4902 <_ZdlPvj>
   b6908:	4620      	mov	r0, r4
   b690a:	bd10      	pop	{r4, pc}

000b690c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b690c:	b508      	push	{r3, lr}
      { delete this; }
   b690e:	f7ff fff6 	bl	b68fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6912:	bd08      	pop	{r3, pc}

000b6914 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b6914:	b530      	push	{r4, r5, lr}
        type_(type) {
   b6916:	2200      	movs	r2, #0
   b6918:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b691c:	6002      	str	r2, [r0, #0]
   b691e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6920:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b6922:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b6924:	680c      	ldr	r4, [r1, #0]
   b6926:	8085      	strh	r5, [r0, #4]
   b6928:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b692a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b692c:	bd30      	pop	{r4, r5, pc}

000b692e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b692e:	b510      	push	{r4, lr}
   b6930:	4604      	mov	r4, r0
    free((void*)msg_);
   b6932:	6800      	ldr	r0, [r0, #0]
   b6934:	f7ff ff18 	bl	b6768 <free>
}
   b6938:	4620      	mov	r0, r4
   b693a:	bd10      	pop	{r4, pc}

000b693c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b693c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b693e:	68c4      	ldr	r4, [r0, #12]
   b6940:	b1f4      	cbz	r4, b6980 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b6942:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b6944:	2b02      	cmp	r3, #2
   b6946:	d103      	bne.n	b6950 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b6948:	f104 000c 	add.w	r0, r4, #12
   b694c:	f7ff ffef 	bl	b692e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b6950:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b6952:	b135      	cbz	r5, b6962 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b6954:	4628      	mov	r0, r5
   b6956:	f7ff ff66 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
   b695a:	2110      	movs	r1, #16
   b695c:	4628      	mov	r0, r5
   b695e:	f7fd ffd0 	bl	b4902 <_ZdlPvj>
   b6962:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b6964:	b135      	cbz	r5, b6974 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b6966:	4628      	mov	r0, r5
   b6968:	f7ff ff5d 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
   b696c:	2110      	movs	r1, #16
   b696e:	4628      	mov	r0, r5
   b6970:	f7fd ffc7 	bl	b4902 <_ZdlPvj>
   b6974:	4620      	mov	r0, r4
   b6976:	2114      	movs	r1, #20
   b6978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b697c:	f7fd bfc1 	b.w	b4902 <_ZdlPvj>
   b6980:	bd38      	pop	{r3, r4, r5, pc}

000b6982 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b6982:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b6984:	230c      	movs	r3, #12
   b6986:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b698a:	6803      	ldr	r3, [r0, #0]
   b698c:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b6990:	7a03      	ldrb	r3, [r0, #8]
   b6992:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b6996:	6843      	ldr	r3, [r0, #4]
   b6998:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b699a:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b699c:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b699e:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b69a2:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b69a4:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b69a8:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b69ac:	f7ff fe6c 	bl	b6688 <spark_cloud_disconnect>
}
   b69b0:	b005      	add	sp, #20
   b69b2:	f85d fb04 	ldr.w	pc, [sp], #4

000b69b6 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
   b69b6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b69b8:	220c      	movs	r2, #12
   b69ba:	f8ad 2004 	strh.w	r2, [sp, #4]
    opts.flags = flags_;
   b69be:	6802      	ldr	r2, [r0, #0]
   b69c0:	f88d 2006 	strb.w	r2, [sp, #6]
    opts.graceful = graceful_;
   b69c4:	7a02      	ldrb	r2, [r0, #8]
   b69c6:	f88d 2007 	strb.w	r2, [sp, #7]
    opts.timeout = timeout_;
   b69ca:	6842      	ldr	r2, [r0, #4]
   b69cc:	9202      	str	r2, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b69ce:	2300      	movs	r3, #0
    opts.clear_session = clearSession_;
   b69d0:	7a42      	ldrb	r2, [r0, #9]
   b69d2:	f88d 200c 	strb.w	r2, [sp, #12]
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b69d6:	4619      	mov	r1, r3
   b69d8:	aa01      	add	r2, sp, #4
   b69da:	2002      	movs	r0, #2
    spark_cloud_disconnect_options opts = {};
   b69dc:	f8ad 300d 	strh.w	r3, [sp, #13]
   b69e0:	f88d 300f 	strb.w	r3, [sp, #15]
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
   b69e4:	f7ff fe40 	bl	b6668 <spark_set_connection_property>
}
   b69e8:	b005      	add	sp, #20
   b69ea:	f85d fb04 	ldr.w	pc, [sp], #4

000b69ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b69ee:	680b      	ldr	r3, [r1, #0]
   b69f0:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b69f2:	684b      	ldr	r3, [r1, #4]
   b69f4:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b69f6:	b113      	cbz	r3, b69fe <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b69f8:	685a      	ldr	r2, [r3, #4]
   b69fa:	3201      	adds	r2, #1
   b69fc:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b69fe:	4770      	bx	lr

000b6a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b6a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6a02:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b6a04:	4668      	mov	r0, sp
   b6a06:	460d      	mov	r5, r1
   b6a08:	f7ff fff1 	bl	b69ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a0c:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6a0e:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6a10:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b6a12:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b6a14:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6a16:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b6a18:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b6a1a:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b6a1c:	f7fe fb36 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b6a20:	b135      	cbz	r5, b6a30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b6a22:	1d28      	adds	r0, r5, #4
   b6a24:	f7fe fb32 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6a28:	2108      	movs	r1, #8
   b6a2a:	4628      	mov	r0, r5
   b6a2c:	f7fd ff69 	bl	b4902 <_ZdlPvj>
        return p;
    }
   b6a30:	4620      	mov	r0, r4
   b6a32:	b003      	add	sp, #12
   b6a34:	bd30      	pop	{r4, r5, pc}

000b6a36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b6a36:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6a38:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a3a:	b90a      	cbnz	r2, b6a40 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b6a3c:	f001 faa8 	bl	b7f90 <_ZSt25__throw_bad_function_callv>
    }
   b6a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a44:	68c3      	ldr	r3, [r0, #12]
   b6a46:	4718      	bx	r3

000b6a48 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6a48:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6a4a:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b6a4c:	f100 0110 	add.w	r1, r0, #16
   b6a50:	f7ff fff1 	bl	b6a36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b6a54:	bd08      	pop	{r3, pc}

000b6a56 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b6a56:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b6a58:	b510      	push	{r4, lr}
      if (_M_empty())
   b6a5a:	b90a      	cbnz	r2, b6a60 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b6a5c:	f001 fa98 	bl	b7f90 <_ZSt25__throw_bad_function_callv>
    }
   b6a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b6a64:	68c3      	ldr	r3, [r0, #12]
   b6a66:	4718      	bx	r3

000b6a68 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6a68:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b6a6a:	6800      	ldr	r0, [r0, #0]
   b6a6c:	f100 0110 	add.w	r1, r0, #16
   b6a70:	f7ff fff1 	bl	b6a56 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b6a74:	bd08      	pop	{r3, pc}
	...

000b6a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6a78:	b538      	push	{r3, r4, r5, lr}
   b6a7a:	2300      	movs	r3, #0
   b6a7c:	4604      	mov	r4, r0
   b6a7e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6a80:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6a82:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6a84:	f7fd ff39 	bl	b48fa <_Znwj>
   b6a88:	b128      	cbz	r0, b6a96 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b6a8a:	2301      	movs	r3, #1
   b6a8c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6a90:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b6a92:	6003      	str	r3, [r0, #0]
   b6a94:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6a96:	6020      	str	r0, [r4, #0]
	}
   b6a98:	4620      	mov	r0, r4
   b6a9a:	bd38      	pop	{r3, r4, r5, pc}
   b6a9c:	000bbc34 	.word	0x000bbc34

000b6aa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b6aa0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6aa2:	2300      	movs	r3, #0
   b6aa4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6aa6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6aa8:	4604      	mov	r4, r0
   b6aaa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6aac:	b12b      	cbz	r3, b6aba <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6aae:	2202      	movs	r2, #2
   b6ab0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6ab2:	68eb      	ldr	r3, [r5, #12]
   b6ab4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6ab6:	68ab      	ldr	r3, [r5, #8]
   b6ab8:	60a3      	str	r3, [r4, #8]
    }
   b6aba:	4620      	mov	r0, r4
   b6abc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b6ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6ac2:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6ac4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b6ac6:	4668      	mov	r0, sp
   b6ac8:	f7ff ff24 	bl	b6914 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6acc:	f04f 0302 	mov.w	r3, #2
   b6ad0:	e8d4 2f4f 	ldrexb	r2, [r4]
   b6ad4:	2a00      	cmp	r2, #0
   b6ad6:	d103      	bne.n	b6ae0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b6ad8:	e8c4 3f41 	strexb	r1, r3, [r4]
   b6adc:	2900      	cmp	r1, #0
   b6ade:	d1f7      	bne.n	b6ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b6ae0:	d125      	bne.n	b6b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b6ae2:	f104 050c 	add.w	r5, r4, #12
   b6ae6:	4669      	mov	r1, sp
   b6ae8:	4628      	mov	r0, r5
   b6aea:	f7ff ff13 	bl	b6914 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b6aee:	f3bf 8f5b 	dmb	ish
   b6af2:	2301      	movs	r3, #1
   b6af4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6af6:	2000      	movs	r0, #0
   b6af8:	f104 0308 	add.w	r3, r4, #8
   b6afc:	f3bf 8f5b 	dmb	ish
   b6b00:	e853 6f00 	ldrex	r6, [r3]
   b6b04:	e843 0200 	strex	r2, r0, [r3]
   b6b08:	2a00      	cmp	r2, #0
   b6b0a:	d1f9      	bne.n	b6b00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b6b0c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6b10:	b16e      	cbz	r6, b6b2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b6b12:	f7ff fd45 	bl	b65a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6b16:	b178      	cbz	r0, b6b38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6b18:	4629      	mov	r1, r5
   b6b1a:	4630      	mov	r0, r6
   b6b1c:	f7ff ff8b 	bl	b6a36 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b6b20:	4630      	mov	r0, r6
   b6b22:	f7ff fe80 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6b26:	2110      	movs	r1, #16
   b6b28:	4630      	mov	r0, r6
   b6b2a:	f7fd feea 	bl	b4902 <_ZdlPvj>
        p_->setError(std::move(error));
   b6b2e:	4668      	mov	r0, sp
   b6b30:	f7ff fefd 	bl	b692e <_ZN8particle5ErrorD1Ev>
    }
   b6b34:	b009      	add	sp, #36	; 0x24
   b6b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6b38:	4631      	mov	r1, r6
   b6b3a:	a802      	add	r0, sp, #8
   b6b3c:	f7ff ffb0 	bl	b6aa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6b40:	68e0      	ldr	r0, [r4, #12]
   b6b42:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6b46:	b108      	cbz	r0, b6b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b6b48:	f001 fa7c 	bl	b8044 <strdup>
        type_(type) {
   b6b4c:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6b4e:	2010      	movs	r0, #16
   b6b50:	f8ad 501c 	strh.w	r5, [sp, #28]
   b6b54:	f7fd fed1 	bl	b48fa <_Znwj>
   b6b58:	4605      	mov	r5, r0
   b6b5a:	b1e8      	cbz	r0, b6b98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b6b5c:	2700      	movs	r7, #0
   b6b5e:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b60:	2018      	movs	r0, #24
   b6b62:	f7fd feca 	bl	b48fa <_Znwj>
   b6b66:	4604      	mov	r4, r0
   b6b68:	b188      	cbz	r0, b6b8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b6b6a:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b6b6c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6b6e:	a802      	add	r0, sp, #8
   b6b70:	f7ff fe62 	bl	b6838 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b74:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b6b76:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b78:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6b7a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6b7c:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6b7e:	a906      	add	r1, sp, #24
   b6b80:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6b82:	60e3      	str	r3, [r4, #12]
   b6b84:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b6b88:	9205      	str	r2, [sp, #20]
   b6b8a:	f7ff fec3 	bl	b6914 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b6b8e:	4b08      	ldr	r3, [pc, #32]	; (b6bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b6b90:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6b92:	4b08      	ldr	r3, [pc, #32]	; (b6bb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6b94:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6b96:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b6b98:	a806      	add	r0, sp, #24
   b6b9a:	f7ff fec8 	bl	b692e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6b9e:	a802      	add	r0, sp, #8
   b6ba0:	f7ff fe41 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6ba4:	2200      	movs	r2, #0
   b6ba6:	4629      	mov	r1, r5
   b6ba8:	4803      	ldr	r0, [pc, #12]	; (b6bb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b6baa:	f7ff fd01 	bl	b65b0 <application_thread_invoke>
   b6bae:	e7b7      	b.n	b6b20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b6bb0:	000b6a49 	.word	0x000b6a49
   b6bb4:	000b6ccd 	.word	0x000b6ccd
   b6bb8:	000b67ff 	.word	0x000b67ff

000b6bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b6bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bc0:	b08b      	sub	sp, #44	; 0x2c
   b6bc2:	4605      	mov	r5, r0
   b6bc4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6bc8:	460f      	mov	r7, r1
   b6bca:	4690      	mov	r8, r2
   b6bcc:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6bce:	f7ff fd23 	bl	b6618 <spark_cloud_flag_connected>
   b6bd2:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b6bd4:	4683      	mov	fp, r0
   b6bd6:	bb38      	cbnz	r0, b6c28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b6bd8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b6bdc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6bde:	a905      	add	r1, sp, #20
   b6be0:	4630      	mov	r0, r6
   b6be2:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6be6:	f7ff fe95 	bl	b6914 <_ZN8particle5ErrorC1EOS0_>
   b6bea:	2014      	movs	r0, #20
   b6bec:	f7fd fe85 	bl	b48fa <_Znwj>
   b6bf0:	4604      	mov	r4, r0
   b6bf2:	b148      	cbz	r0, b6c08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b6bf4:	2302      	movs	r3, #2
   b6bf6:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6bf8:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6bfa:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6bfe:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b6c00:	4631      	mov	r1, r6
   b6c02:	300c      	adds	r0, #12
   b6c04:	f7ff fe86 	bl	b6914 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c08:	4628      	mov	r0, r5
	: __shared_count(__p)
   b6c0a:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c0c:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b6c10:	f7ff ff32 	bl	b6a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b6c14:	4630      	mov	r0, r6
   b6c16:	f7ff fe8a 	bl	b692e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b6c1a:	a805      	add	r0, sp, #20
   b6c1c:	f7ff fe87 	bl	b692e <_ZN8particle5ErrorD1Ev>
}
   b6c20:	4628      	mov	r0, r5
   b6c22:	b00b      	add	sp, #44	; 0x2c
   b6c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b6c28:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b6c2a:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b6c2c:	2014      	movs	r0, #20
   b6c2e:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b6c32:	9307      	str	r3, [sp, #28]
   b6c34:	f7fd fe61 	bl	b48fa <_Znwj>
   b6c38:	4601      	mov	r1, r0
   b6c3a:	b118      	cbz	r0, b6c44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b6c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b6c40:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b6c42:	7044      	strb	r4, [r0, #1]
   b6c44:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6c46:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b6c48:	f7ff ff16 	bl	b6a78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b6c4c:	4b1e      	ldr	r3, [pc, #120]	; (b6cc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b6c4e:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b6c50:	2008      	movs	r0, #8
   b6c52:	f7fd fe52 	bl	b48fa <_Znwj>
   b6c56:	4604      	mov	r4, r0
   b6c58:	b110      	cbz	r0, b6c60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b6c5a:	a903      	add	r1, sp, #12
   b6c5c:	f7ff fec7 	bl	b69ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6c60:	9600      	str	r6, [sp, #0]
   b6c62:	fa5f f38a 	uxtb.w	r3, sl
   b6c66:	464a      	mov	r2, r9
   b6c68:	4641      	mov	r1, r8
   b6c6a:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b6c6c:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b6c6e:	f7ff fcdb 	bl	b6628 <spark_send_event>
   b6c72:	b9b8      	cbnz	r0, b6ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b6c74:	9b03      	ldr	r3, [sp, #12]
   b6c76:	785b      	ldrb	r3, [r3, #1]
   b6c78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b6c7c:	b993      	cbnz	r3, b6ca4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b6c7e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b6c82:	a905      	add	r1, sp, #20
   b6c84:	a803      	add	r0, sp, #12
   b6c86:	9205      	str	r2, [sp, #20]
   b6c88:	f8ad 3018 	strh.w	r3, [sp, #24]
   b6c8c:	f7ff ff18 	bl	b6ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6c90:	a805      	add	r0, sp, #20
   b6c92:	f7ff fe4c 	bl	b692e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b6c96:	a805      	add	r0, sp, #20
   b6c98:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6c9a:	f7ff feb1 	bl	b6a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b6c9e:	a806      	add	r0, sp, #24
   b6ca0:	f7fe f9f4 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6ca4:	a903      	add	r1, sp, #12
   b6ca6:	a805      	add	r0, sp, #20
   b6ca8:	f7ff fea1 	bl	b69ee <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6cac:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b6cae:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b6cb0:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b6cb2:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b6cb4:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b6cb6:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b6cb8:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b6cba:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b6cbc:	f7fe f9e6 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b6cc0:	a804      	add	r0, sp, #16
   b6cc2:	f7fe f9e3 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b6cc6:	e7ab      	b.n	b6c20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b6cc8:	000b6d49 	.word	0x000b6d49

000b6ccc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6ccc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cd0:	4605      	mov	r5, r0
	switch (__op)
   b6cd2:	d103      	bne.n	b6cdc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6cd4:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6cd6:	6003      	str	r3, [r0, #0]
      }
   b6cd8:	2000      	movs	r0, #0
   b6cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b6cdc:	2a02      	cmp	r2, #2
   b6cde:	d010      	beq.n	b6d02 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b6ce0:	2a03      	cmp	r2, #3
   b6ce2:	d1f9      	bne.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6ce4:	6804      	ldr	r4, [r0, #0]
   b6ce6:	2c00      	cmp	r4, #0
   b6ce8:	d0f6      	beq.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b6cea:	f104 0010 	add.w	r0, r4, #16
   b6cee:	f7ff fe1e 	bl	b692e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b6cf2:	4620      	mov	r0, r4
   b6cf4:	f7ff fd97 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6cf8:	2118      	movs	r1, #24
   b6cfa:	4620      	mov	r0, r4
   b6cfc:	f7fd fe01 	bl	b4902 <_ZdlPvj>
   b6d00:	e7ea      	b.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6d02:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b6d04:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6d06:	f7fd fdf8 	bl	b48fa <_Znwj>
   b6d0a:	4604      	mov	r4, r0
   b6d0c:	b150      	cbz	r0, b6d24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b6d0e:	4631      	mov	r1, r6
   b6d10:	f7ff fec6 	bl	b6aa0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b6d14:	6930      	ldr	r0, [r6, #16]
   b6d16:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6d1a:	b108      	cbz	r0, b6d20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b6d1c:	f001 f992 	bl	b8044 <strdup>
        type_(type) {
   b6d20:	6120      	str	r0, [r4, #16]
   b6d22:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b6d24:	602c      	str	r4, [r5, #0]
	}
   b6d26:	e7d7      	b.n	b6cd8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b6d28 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b6d28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b6d2a:	2300      	movs	r3, #0
   b6d2c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6d2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b6d30:	4604      	mov	r4, r0
   b6d32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b6d34:	b12b      	cbz	r3, b6d42 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6d36:	2202      	movs	r2, #2
   b6d38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6d3a:	68eb      	ldr	r3, [r5, #12]
   b6d3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6d3e:	68ab      	ldr	r3, [r5, #8]
   b6d40:	60a3      	str	r3, [r4, #8]
    }
   b6d42:	4620      	mov	r0, r4
   b6d44:	bd38      	pop	{r3, r4, r5, pc}
	...

000b6d48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b6d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6d4a:	b089      	sub	sp, #36	; 0x24
   b6d4c:	4604      	mov	r4, r0
   b6d4e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b6d50:	a801      	add	r0, sp, #4
   b6d52:	4611      	mov	r1, r2
   b6d54:	f7ff fe54 	bl	b6a00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b6d58:	b1a4      	cbz	r4, b6d84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b6d5a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b6d5c:	b11d      	cbz	r5, b6d66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b6d5e:	4628      	mov	r0, r5
   b6d60:	f001 f970 	bl	b8044 <strdup>
   b6d64:	4605      	mov	r5, r0
   b6d66:	a801      	add	r0, sp, #4
   b6d68:	a903      	add	r1, sp, #12
        type_(type) {
   b6d6a:	9503      	str	r5, [sp, #12]
   b6d6c:	f8ad 4010 	strh.w	r4, [sp, #16]
   b6d70:	f7ff fea6 	bl	b6ac0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b6d74:	a803      	add	r0, sp, #12
   b6d76:	f7ff fdda 	bl	b692e <_ZN8particle5ErrorD1Ev>
   b6d7a:	a802      	add	r0, sp, #8
   b6d7c:	f7fe f986 	bl	b508c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6d80:	b009      	add	sp, #36	; 0x24
   b6d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b6d84:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b6d86:	2301      	movs	r3, #1
   b6d88:	e8d5 2f4f 	ldrexb	r2, [r5]
   b6d8c:	2a00      	cmp	r2, #0
   b6d8e:	d103      	bne.n	b6d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b6d90:	e8c5 3f41 	strexb	r1, r3, [r5]
   b6d94:	2900      	cmp	r1, #0
   b6d96:	d1f7      	bne.n	b6d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b6d98:	d1ef      	bne.n	b6d7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b6d9a:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b6d9c:	f3bf 8f5b 	dmb	ish
   b6da0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b6da2:	1d2b      	adds	r3, r5, #4
   b6da4:	f3bf 8f5b 	dmb	ish
   b6da8:	e853 6f00 	ldrex	r6, [r3]
   b6dac:	e843 4200 	strex	r2, r4, [r3]
   b6db0:	2a00      	cmp	r2, #0
   b6db2:	d1f9      	bne.n	b6da8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b6db4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b6db8:	2e00      	cmp	r6, #0
   b6dba:	d0de      	beq.n	b6d7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b6dbc:	4620      	mov	r0, r4
   b6dbe:	f7ff fbef 	bl	b65a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b6dc2:	4607      	mov	r7, r0
   b6dc4:	b160      	cbz	r0, b6de0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b6dc6:	f105 010c 	add.w	r1, r5, #12
   b6dca:	4630      	mov	r0, r6
   b6dcc:	f7ff fe43 	bl	b6a56 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b6dd0:	4630      	mov	r0, r6
   b6dd2:	f7ff fd28 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b6dd6:	2110      	movs	r1, #16
   b6dd8:	4630      	mov	r0, r6
   b6dda:	f7fd fd92 	bl	b4902 <_ZdlPvj>
   b6dde:	e7cc      	b.n	b6d7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b6de0:	4631      	mov	r1, r6
   b6de2:	a803      	add	r0, sp, #12
   b6de4:	f7ff ffa0 	bl	b6d28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6de8:	7b2b      	ldrb	r3, [r5, #12]
   b6dea:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b6dee:	2010      	movs	r0, #16
   b6df0:	f7fd fd83 	bl	b48fa <_Znwj>
   b6df4:	4605      	mov	r5, r0
   b6df6:	b1d0      	cbz	r0, b6e2e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b6df8:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6dfa:	2014      	movs	r0, #20
   b6dfc:	f7fd fd7d 	bl	b48fa <_Znwj>
   b6e00:	4604      	mov	r4, r0
   b6e02:	b178      	cbz	r0, b6e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b6e04:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b6e06:	4601      	mov	r1, r0
   b6e08:	a803      	add	r0, sp, #12
   b6e0a:	f7ff fd15 	bl	b6838 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e0e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b6e10:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e12:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b6e14:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b6e16:	9205      	str	r2, [sp, #20]
   b6e18:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b6e1a:	60e3      	str	r3, [r4, #12]
   b6e1c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b6e20:	9206      	str	r2, [sp, #24]
   b6e22:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b6e24:	4b06      	ldr	r3, [pc, #24]	; (b6e40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b6e26:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b6e28:	4b06      	ldr	r3, [pc, #24]	; (b6e44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6e2a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b6e2c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b6e2e:	a803      	add	r0, sp, #12
   b6e30:	f7ff fcf9 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b6e34:	2200      	movs	r2, #0
   b6e36:	4629      	mov	r1, r5
   b6e38:	4803      	ldr	r0, [pc, #12]	; (b6e48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b6e3a:	f7ff fbb9 	bl	b65b0 <application_thread_invoke>
   b6e3e:	e7c7      	b.n	b6dd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b6e40:	000b6a69 	.word	0x000b6a69
   b6e44:	000b6e4d 	.word	0x000b6e4d
   b6e48:	000b67ff 	.word	0x000b67ff

000b6e4c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b6e4c:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6e4e:	b570      	push	{r4, r5, r6, lr}
   b6e50:	4604      	mov	r4, r0
	switch (__op)
   b6e52:	d103      	bne.n	b6e5c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b6e54:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b6e56:	6003      	str	r3, [r0, #0]
      }
   b6e58:	2000      	movs	r0, #0
   b6e5a:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b6e5c:	2a02      	cmp	r2, #2
   b6e5e:	d00c      	beq.n	b6e7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b6e60:	2a03      	cmp	r2, #3
   b6e62:	d1f9      	bne.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b6e64:	6804      	ldr	r4, [r0, #0]
   b6e66:	2c00      	cmp	r4, #0
   b6e68:	d0f6      	beq.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b6e6a:	4620      	mov	r0, r4
   b6e6c:	f7ff fcdb 	bl	b6826 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b6e70:	2114      	movs	r1, #20
   b6e72:	4620      	mov	r0, r4
   b6e74:	f7fd fd45 	bl	b4902 <_ZdlPvj>
   b6e78:	e7ee      	b.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e7a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b6e7c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e7e:	f7fd fd3c 	bl	b48fa <_Znwj>
   b6e82:	4605      	mov	r5, r0
   b6e84:	b120      	cbz	r0, b6e90 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b6e86:	4631      	mov	r1, r6
   b6e88:	f7ff ff4e 	bl	b6d28 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b6e8c:	7c33      	ldrb	r3, [r6, #16]
   b6e8e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b6e90:	6025      	str	r5, [r4, #0]
	}
   b6e92:	e7e1      	b.n	b6e58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b6e94 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6e94:	2200      	movs	r2, #0
   b6e96:	6840      	ldr	r0, [r0, #4]
   b6e98:	4611      	mov	r1, r2
   b6e9a:	f7ff bc35 	b.w	b6708 <network_listening>

000b6e9e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6e9e:	2200      	movs	r2, #0
   b6ea0:	6840      	ldr	r0, [r0, #4]
   b6ea2:	4611      	mov	r1, r2
   b6ea4:	f7ff bc40 	b.w	b6728 <network_get_listen_timeout>

000b6ea8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ea8:	6840      	ldr	r0, [r0, #4]
   b6eaa:	2200      	movs	r2, #0
   b6eac:	f7ff bc34 	b.w	b6718 <network_set_listen_timeout>

000b6eb0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6eb0:	6840      	ldr	r0, [r0, #4]
   b6eb2:	2200      	movs	r2, #0
   b6eb4:	f081 0101 	eor.w	r1, r1, #1
   b6eb8:	f7ff bc1e 	b.w	b66f8 <network_listen>

000b6ebc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6ebc:	2300      	movs	r3, #0
   b6ebe:	6840      	ldr	r0, [r0, #4]
   b6ec0:	461a      	mov	r2, r3
   b6ec2:	4619      	mov	r1, r3
   b6ec4:	f7ff bc10 	b.w	b66e8 <network_off>

000b6ec8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ec8:	2300      	movs	r3, #0
   b6eca:	6840      	ldr	r0, [r0, #4]
   b6ecc:	461a      	mov	r2, r3
   b6ece:	4619      	mov	r1, r3
   b6ed0:	f7ff bc02 	b.w	b66d8 <network_on>

000b6ed4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6ed4:	2200      	movs	r2, #0
   b6ed6:	6840      	ldr	r0, [r0, #4]
   b6ed8:	4611      	mov	r1, r2
   b6eda:	f7ff bbf5 	b.w	b66c8 <network_ready>

000b6ede <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6ede:	2200      	movs	r2, #0
   b6ee0:	6840      	ldr	r0, [r0, #4]
   b6ee2:	4611      	mov	r1, r2
   b6ee4:	f7ff bbe0 	b.w	b66a8 <network_connecting>

000b6ee8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ee8:	6840      	ldr	r0, [r0, #4]
   b6eea:	2200      	movs	r2, #0
   b6eec:	2102      	movs	r1, #2
   b6eee:	f7ff bbe3 	b.w	b66b8 <network_disconnect>

000b6ef2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6ef2:	2300      	movs	r3, #0
   b6ef4:	6840      	ldr	r0, [r0, #4]
   b6ef6:	461a      	mov	r2, r3
   b6ef8:	f7ff bbce 	b.w	b6698 <network_connect>

000b6efc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b6efc:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6efe:	2203      	movs	r2, #3
   b6f00:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6f02:	4a02      	ldr	r2, [pc, #8]	; (b6f0c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f04:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f06:	4770      	bx	lr
   b6f08:	2003e694 	.word	0x2003e694
   b6f0c:	000bbc50 	.word	0x000bbc50

000b6f10 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6f10:	4770      	bx	lr

000b6f12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f14:	4606      	mov	r6, r0
   b6f16:	4615      	mov	r5, r2
   b6f18:	460c      	mov	r4, r1
   b6f1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6f1c:	42bc      	cmp	r4, r7
   b6f1e:	d006      	beq.n	b6f2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6f20:	6833      	ldr	r3, [r6, #0]
   b6f22:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6f26:	689b      	ldr	r3, [r3, #8]
   b6f28:	4630      	mov	r0, r6
   b6f2a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6f2c:	e7f6      	b.n	b6f1c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6f2e:	4628      	mov	r0, r5
   b6f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f32 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6f32:	7c00      	ldrb	r0, [r0, #16]
   b6f34:	2200      	movs	r2, #0
   b6f36:	f7ff ba0b 	b.w	b6350 <hal_i2c_write>

000b6f3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6f3a:	7c00      	ldrb	r0, [r0, #16]
   b6f3c:	2100      	movs	r1, #0
   b6f3e:	f7ff ba0f 	b.w	b6360 <hal_i2c_available>

000b6f42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6f42:	7c00      	ldrb	r0, [r0, #16]
   b6f44:	2100      	movs	r1, #0
   b6f46:	f7ff ba13 	b.w	b6370 <hal_i2c_read>

000b6f4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6f4a:	7c00      	ldrb	r0, [r0, #16]
   b6f4c:	2100      	movs	r1, #0
   b6f4e:	f7ff ba17 	b.w	b6380 <hal_i2c_peek>

000b6f52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6f52:	7c00      	ldrb	r0, [r0, #16]
   b6f54:	2100      	movs	r1, #0
   b6f56:	f7ff ba1b 	b.w	b6390 <hal_i2c_flush>

000b6f5a <_ZN7TwoWireD0Ev>:
   b6f5a:	b510      	push	{r4, lr}
   b6f5c:	2114      	movs	r1, #20
   b6f5e:	4604      	mov	r4, r0
   b6f60:	f7fd fccf 	bl	b4902 <_ZdlPvj>
   b6f64:	4620      	mov	r0, r4
   b6f66:	bd10      	pop	{r4, pc}

000b6f68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f68:	b538      	push	{r3, r4, r5, lr}
   b6f6a:	4604      	mov	r4, r0
   b6f6c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f72:	2200      	movs	r2, #0
   b6f74:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f78:	4b09      	ldr	r3, [pc, #36]	; (b6fa0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b6f7a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f7c:	4608      	mov	r0, r1
   b6f7e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6f80:	4629      	mov	r1, r5
   b6f82:	f7ff fa15 	bl	b63b0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f86:	30bf      	adds	r0, #191	; 0xbf
   b6f88:	d108      	bne.n	b6f9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b6f8a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6f8c:	07db      	lsls	r3, r3, #31
   b6f8e:	d505      	bpl.n	b6f9c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6f90:	6868      	ldr	r0, [r5, #4]
   b6f92:	f7ff fbe9 	bl	b6768 <free>
    free(conf.tx_buffer);
   b6f96:	68e8      	ldr	r0, [r5, #12]
   b6f98:	f7ff fbe6 	bl	b6768 <free>
}
   b6f9c:	4620      	mov	r0, r4
   b6f9e:	bd38      	pop	{r3, r4, r5, pc}
   b6fa0:	000bbc8c 	.word	0x000bbc8c

000b6fa4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6fa4:	2300      	movs	r3, #0
   b6fa6:	7c00      	ldrb	r0, [r0, #16]
   b6fa8:	461a      	mov	r2, r3
   b6faa:	4619      	mov	r1, r3
   b6fac:	f7ff b9b8 	b.w	b6320 <hal_i2c_begin>

000b6fb0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6fb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6fb2:	2200      	movs	r2, #0
   b6fb4:	2314      	movs	r3, #20
   b6fb6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b6fba:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b6fbe:	780b      	ldrb	r3, [r1, #0]
   b6fc0:	f88d 3008 	strb.w	r3, [sp, #8]
   b6fc4:	684b      	ldr	r3, [r1, #4]
   b6fc6:	9303      	str	r3, [sp, #12]
   b6fc8:	68cb      	ldr	r3, [r1, #12]
   b6fca:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b6fcc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b6fce:	7a0b      	ldrb	r3, [r1, #8]
   b6fd0:	9305      	str	r3, [sp, #20]
   b6fd2:	a901      	add	r1, sp, #4
   b6fd4:	f7ff f9f4 	bl	b63c0 <hal_i2c_request_ex>
}
   b6fd8:	b007      	add	sp, #28
   b6fda:	f85d fb04 	ldr.w	pc, [sp], #4

000b6fde <_ZN7TwoWire11requestFromEhjh>:
{
   b6fde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6fe0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6fe2:	f88d 1000 	strb.w	r1, [sp]
   b6fe6:	f04f 0164 	mov.w	r1, #100	; 0x64
   b6fea:	9103      	str	r1, [sp, #12]
   b6fec:	bf18      	it	ne
   b6fee:	2301      	movne	r3, #1
   b6ff0:	4669      	mov	r1, sp
    size_ = size;
   b6ff2:	9201      	str	r2, [sp, #4]
   b6ff4:	f88d 3008 	strb.w	r3, [sp, #8]
   b6ff8:	f7ff ffda 	bl	b6fb0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b6ffc:	b005      	add	sp, #20
   b6ffe:	f85d fb04 	ldr.w	pc, [sp], #4

000b7002 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b7002:	2301      	movs	r3, #1
   b7004:	f7ff bfeb 	b.w	b6fde <_ZN7TwoWire11requestFromEhjh>

000b7008 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7008:	7c00      	ldrb	r0, [r0, #16]
   b700a:	2200      	movs	r2, #0
   b700c:	f7ff b990 	b.w	b6330 <hal_i2c_begin_transmission>

000b7010 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7010:	b2c9      	uxtb	r1, r1
   b7012:	f7ff bff9 	b.w	b7008 <_ZN7TwoWire17beginTransmissionEh>

000b7016 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7016:	7c00      	ldrb	r0, [r0, #16]
   b7018:	2200      	movs	r2, #0
   b701a:	f7ff b991 	b.w	b6340 <hal_i2c_end_transmission>

000b701e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b701e:	2101      	movs	r1, #1
   b7020:	f7ff bff9 	b.w	b7016 <_ZN7TwoWire15endTransmissionEh>

000b7024 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7024:	4770      	bx	lr

000b7026 <_ZN9IPAddressD0Ev>:
   b7026:	b510      	push	{r4, lr}
   b7028:	2118      	movs	r1, #24
   b702a:	4604      	mov	r4, r0
   b702c:	f7fd fc69 	bl	b4902 <_ZdlPvj>
   b7030:	4620      	mov	r0, r4
   b7032:	bd10      	pop	{r4, pc}

000b7034 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7034:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7036:	7d03      	ldrb	r3, [r0, #20]
   b7038:	2b06      	cmp	r3, #6
{
   b703a:	b08d      	sub	sp, #52	; 0x34
   b703c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b703e:	f100 0704 	add.w	r7, r0, #4
   b7042:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7046:	d012      	beq.n	b706e <_ZNK9IPAddress7printToER5Print+0x3a>
   b7048:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b704c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7050:	220a      	movs	r2, #10
   b7052:	4630      	mov	r0, r6
   b7054:	f000 f95d 	bl	b7312 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7058:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b705a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b705c:	d019      	beq.n	b7092 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b705e:	2c00      	cmp	r4, #0
   b7060:	d0f4      	beq.n	b704c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b7062:	212e      	movs	r1, #46	; 0x2e
   b7064:	4630      	mov	r0, r6
   b7066:	f000 f93b 	bl	b72e0 <_ZN5Print5printEc>
   b706a:	4404      	add	r4, r0
   b706c:	e7ee      	b.n	b704c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b706e:	232f      	movs	r3, #47	; 0x2f
   b7070:	466a      	mov	r2, sp
   b7072:	4639      	mov	r1, r7
   b7074:	200a      	movs	r0, #10
		buf[0] = 0;
   b7076:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b707a:	f7ff f9a9 	bl	b63d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b707e:	4668      	mov	r0, sp
   b7080:	f7fd fbf8 	bl	b4874 <strlen>
   b7084:	6833      	ldr	r3, [r6, #0]
   b7086:	4602      	mov	r2, r0
   b7088:	68db      	ldr	r3, [r3, #12]
   b708a:	4669      	mov	r1, sp
   b708c:	4630      	mov	r0, r6
   b708e:	4798      	blx	r3
   b7090:	4604      	mov	r4, r0
    }
    return n;
}
   b7092:	4620      	mov	r0, r4
   b7094:	b00d      	add	sp, #52	; 0x34
   b7096:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7098 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7098:	b510      	push	{r4, lr}
   b709a:	4b05      	ldr	r3, [pc, #20]	; (b70b0 <_ZN9IPAddressC1Ev+0x18>)
   b709c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b709e:	2211      	movs	r2, #17
   b70a0:	f840 3b04 	str.w	r3, [r0], #4
   b70a4:	2100      	movs	r1, #0
   b70a6:	f000 ff8e 	bl	b7fc6 <memset>
}
   b70aa:	4620      	mov	r0, r4
   b70ac:	bd10      	pop	{r4, pc}
   b70ae:	bf00      	nop
   b70b0:	000bbcb4 	.word	0x000bbcb4

000b70b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b70b4:	4603      	mov	r3, r0
   b70b6:	4a07      	ldr	r2, [pc, #28]	; (b70d4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b70b8:	b510      	push	{r4, lr}
   b70ba:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b70be:	f101 0210 	add.w	r2, r1, #16
   b70c2:	f851 4b04 	ldr.w	r4, [r1], #4
   b70c6:	f843 4b04 	str.w	r4, [r3], #4
   b70ca:	4291      	cmp	r1, r2
   b70cc:	d1f9      	bne.n	b70c2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b70ce:	780a      	ldrb	r2, [r1, #0]
   b70d0:	701a      	strb	r2, [r3, #0]
}
   b70d2:	bd10      	pop	{r4, pc}
   b70d4:	000bbcb4 	.word	0x000bbcb4

000b70d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b70d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b70da:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b70de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b70e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b70e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b70ea:	2304      	movs	r3, #4
   b70ec:	6041      	str	r1, [r0, #4]
   b70ee:	7503      	strb	r3, [r0, #20]
}
   b70f0:	bd10      	pop	{r4, pc}
	...

000b70f4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b70f4:	b507      	push	{r0, r1, r2, lr}
   b70f6:	4b06      	ldr	r3, [pc, #24]	; (b7110 <_ZN9IPAddressC1EPKh+0x1c>)
   b70f8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b70fa:	78cb      	ldrb	r3, [r1, #3]
   b70fc:	9300      	str	r3, [sp, #0]
   b70fe:	788b      	ldrb	r3, [r1, #2]
   b7100:	784a      	ldrb	r2, [r1, #1]
   b7102:	7809      	ldrb	r1, [r1, #0]
   b7104:	f7ff ffe8 	bl	b70d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7108:	b003      	add	sp, #12
   b710a:	f85d fb04 	ldr.w	pc, [sp], #4
   b710e:	bf00      	nop
   b7110:	000bbcb4 	.word	0x000bbcb4

000b7114 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7114:	4b01      	ldr	r3, [pc, #4]	; (b711c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7116:	4a02      	ldr	r2, [pc, #8]	; (b7120 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7118:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b711a:	4770      	bx	lr
   b711c:	2003e69c 	.word	0x2003e69c
   b7120:	000bbcc0 	.word	0x000bbcc0

000b7124 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7124:	2300      	movs	r3, #0
   b7126:	6840      	ldr	r0, [r0, #4]
   b7128:	461a      	mov	r2, r3
   b712a:	f7ff bab5 	b.w	b6698 <network_connect>

000b712e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b712e:	6840      	ldr	r0, [r0, #4]
   b7130:	2200      	movs	r2, #0
   b7132:	2102      	movs	r1, #2
   b7134:	f7ff bac0 	b.w	b66b8 <network_disconnect>

000b7138 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7138:	2200      	movs	r2, #0
   b713a:	6840      	ldr	r0, [r0, #4]
   b713c:	4611      	mov	r1, r2
   b713e:	f7ff bab3 	b.w	b66a8 <network_connecting>

000b7142 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7142:	2200      	movs	r2, #0
   b7144:	6840      	ldr	r0, [r0, #4]
   b7146:	4611      	mov	r1, r2
   b7148:	f7ff babe 	b.w	b66c8 <network_ready>

000b714c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b714c:	2300      	movs	r3, #0
   b714e:	6840      	ldr	r0, [r0, #4]
   b7150:	461a      	mov	r2, r3
   b7152:	4619      	mov	r1, r3
   b7154:	f7ff bac0 	b.w	b66d8 <network_on>

000b7158 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7158:	2300      	movs	r3, #0
   b715a:	6840      	ldr	r0, [r0, #4]
   b715c:	461a      	mov	r2, r3
   b715e:	4619      	mov	r1, r3
   b7160:	f7ff bac2 	b.w	b66e8 <network_off>

000b7164 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7164:	6840      	ldr	r0, [r0, #4]
   b7166:	2100      	movs	r1, #0
   b7168:	f7ff bae6 	b.w	b6738 <network_is_on>

000b716c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b716c:	6840      	ldr	r0, [r0, #4]
   b716e:	2100      	movs	r1, #0
   b7170:	f7ff baea 	b.w	b6748 <network_is_off>

000b7174 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7174:	6840      	ldr	r0, [r0, #4]
   b7176:	2200      	movs	r2, #0
   b7178:	f081 0101 	eor.w	r1, r1, #1
   b717c:	f7ff babc 	b.w	b66f8 <network_listen>

000b7180 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7180:	6840      	ldr	r0, [r0, #4]
   b7182:	2200      	movs	r2, #0
   b7184:	f7ff bac8 	b.w	b6718 <network_set_listen_timeout>

000b7188 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7188:	2200      	movs	r2, #0
   b718a:	6840      	ldr	r0, [r0, #4]
   b718c:	4611      	mov	r1, r2
   b718e:	f7ff bacb 	b.w	b6728 <network_get_listen_timeout>

000b7192 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7192:	2200      	movs	r2, #0
   b7194:	6840      	ldr	r0, [r0, #4]
   b7196:	4611      	mov	r1, r2
   b7198:	f7ff bab6 	b.w	b6708 <network_listening>

000b719c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b719c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b71a0:	b095      	sub	sp, #84	; 0x54
   b71a2:	4614      	mov	r4, r2
   b71a4:	460d      	mov	r5, r1
   b71a6:	4607      	mov	r7, r0
    IPAddress addr;
   b71a8:	f7ff ff76 	bl	b7098 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b71ac:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b71ae:	221c      	movs	r2, #28
   b71b0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b71b2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b71b4:	f000 ff07 	bl	b7fc6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b71b8:	2340      	movs	r3, #64	; 0x40
   b71ba:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b71bc:	4620      	mov	r0, r4
   b71be:	466b      	mov	r3, sp
   b71c0:	aa0c      	add	r2, sp, #48	; 0x30
   b71c2:	2100      	movs	r1, #0
   b71c4:	f7ff f914 	bl	b63f0 <netdb_getaddrinfo>
    if (!r) {
   b71c8:	4604      	mov	r4, r0
   b71ca:	2800      	cmp	r0, #0
   b71cc:	d14b      	bne.n	b7266 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71ce:	4602      	mov	r2, r0
   b71d0:	2101      	movs	r1, #1
   b71d2:	6868      	ldr	r0, [r5, #4]
   b71d4:	f7ff fa78 	bl	b66c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71d8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71da:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71dc:	4622      	mov	r2, r4
   b71de:	6868      	ldr	r0, [r5, #4]
   b71e0:	f7ff fa72 	bl	b66c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71e4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71e6:	4681      	mov	r9, r0
        bool ok = false;
   b71e8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71ea:	2e00      	cmp	r6, #0
   b71ec:	d03b      	beq.n	b7266 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b71ee:	2900      	cmp	r1, #0
   b71f0:	d139      	bne.n	b7266 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b71f2:	6873      	ldr	r3, [r6, #4]
   b71f4:	2b02      	cmp	r3, #2
   b71f6:	d003      	beq.n	b7200 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b71f8:	2b0a      	cmp	r3, #10
   b71fa:	d011      	beq.n	b7220 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71fc:	69f6      	ldr	r6, [r6, #28]
   b71fe:	e7f4      	b.n	b71ea <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7200:	f1b8 0f00 	cmp.w	r8, #0
   b7204:	d0fa      	beq.n	b71fc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7206:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7208:	a806      	add	r0, sp, #24
   b720a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b720c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b720e:	f7ff ff71 	bl	b70f4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7214:	1d3c      	adds	r4, r7, #4
   b7216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7218:	682b      	ldr	r3, [r5, #0]
   b721a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b721c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b721e:	e7ed      	b.n	b71fc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7220:	f1b9 0f00 	cmp.w	r9, #0
   b7224:	d0ea      	beq.n	b71fc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7226:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7228:	2210      	movs	r2, #16
   b722a:	a801      	add	r0, sp, #4
   b722c:	f000 fecb 	bl	b7fc6 <memset>
                    a.v = 6;
   b7230:	2306      	movs	r3, #6
   b7232:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7236:	ad01      	add	r5, sp, #4
   b7238:	f104 0308 	add.w	r3, r4, #8
   b723c:	3418      	adds	r4, #24
   b723e:	6818      	ldr	r0, [r3, #0]
   b7240:	6859      	ldr	r1, [r3, #4]
   b7242:	462a      	mov	r2, r5
   b7244:	c203      	stmia	r2!, {r0, r1}
   b7246:	3308      	adds	r3, #8
   b7248:	42a3      	cmp	r3, r4
   b724a:	4615      	mov	r5, r2
   b724c:	d1f7      	bne.n	b723e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b724e:	a901      	add	r1, sp, #4
   b7250:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7252:	ad07      	add	r5, sp, #28
   b7254:	f7ff ff2e 	bl	b70b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b725a:	1d3c      	adds	r4, r7, #4
   b725c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b725e:	682b      	ldr	r3, [r5, #0]
   b7260:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7262:	4649      	mov	r1, r9
   b7264:	e7ca      	b.n	b71fc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b7266:	9800      	ldr	r0, [sp, #0]
   b7268:	f7ff f8ba 	bl	b63e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b726c:	4638      	mov	r0, r7
   b726e:	b015      	add	sp, #84	; 0x54
   b7270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7274 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7274:	4b02      	ldr	r3, [pc, #8]	; (b7280 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b7276:	4a03      	ldr	r2, [pc, #12]	; (b7284 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7278:	601a      	str	r2, [r3, #0]
   b727a:	2200      	movs	r2, #0
   b727c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b727e:	4770      	bx	lr
   b7280:	2003e6a0 	.word	0x2003e6a0
   b7284:	000bbccc 	.word	0x000bbccc

000b7288 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b728a:	4606      	mov	r6, r0
   b728c:	460d      	mov	r5, r1
  size_t n = 0;
   b728e:	188f      	adds	r7, r1, r2
   b7290:	2400      	movs	r4, #0
  while (size--) {
   b7292:	42bd      	cmp	r5, r7
   b7294:	d00c      	beq.n	b72b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b7296:	6833      	ldr	r3, [r6, #0]
   b7298:	f815 1b01 	ldrb.w	r1, [r5], #1
   b729c:	689b      	ldr	r3, [r3, #8]
   b729e:	4630      	mov	r0, r6
   b72a0:	4798      	blx	r3
     if (chunk>=0)
   b72a2:	1e03      	subs	r3, r0, #0
   b72a4:	db01      	blt.n	b72aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b72a6:	441c      	add	r4, r3
  while (size--) {
   b72a8:	e7f3      	b.n	b7292 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b72aa:	2c00      	cmp	r4, #0
   b72ac:	bf08      	it	eq
   b72ae:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b72b0:	4620      	mov	r0, r4
   b72b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b72b4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b72b4:	b513      	push	{r0, r1, r4, lr}
   b72b6:	4604      	mov	r4, r0
    }
   b72b8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b72ba:	b159      	cbz	r1, b72d4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b72bc:	9101      	str	r1, [sp, #4]
   b72be:	f7fd fad9 	bl	b4874 <strlen>
   b72c2:	6823      	ldr	r3, [r4, #0]
   b72c4:	9901      	ldr	r1, [sp, #4]
   b72c6:	68db      	ldr	r3, [r3, #12]
   b72c8:	4602      	mov	r2, r0
   b72ca:	4620      	mov	r0, r4
    }
   b72cc:	b002      	add	sp, #8
   b72ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b72d2:	4718      	bx	r3
    }
   b72d4:	b002      	add	sp, #8
   b72d6:	bd10      	pop	{r4, pc}

000b72d8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b72d8:	b508      	push	{r3, lr}
  return write(str);
   b72da:	f7ff ffeb 	bl	b72b4 <_ZN5Print5writeEPKc>
}
   b72de:	bd08      	pop	{r3, pc}

000b72e0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b72e0:	6803      	ldr	r3, [r0, #0]
   b72e2:	689b      	ldr	r3, [r3, #8]
   b72e4:	4718      	bx	r3

000b72e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b72e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b72e8:	210d      	movs	r1, #13
{
   b72ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   b72ec:	f7ff fff8 	bl	b72e0 <_ZN5Print5printEc>
  n += print('\n');
   b72f0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b72f2:	4604      	mov	r4, r0
  n += print('\n');
   b72f4:	4628      	mov	r0, r5
   b72f6:	f7ff fff3 	bl	b72e0 <_ZN5Print5printEc>
  return n;
}
   b72fa:	4420      	add	r0, r4
   b72fc:	bd38      	pop	{r3, r4, r5, pc}

000b72fe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b72fe:	b538      	push	{r3, r4, r5, lr}
   b7300:	4605      	mov	r5, r0
  return write(str);
   b7302:	f7ff ffd7 	bl	b72b4 <_ZN5Print5writeEPKc>
   b7306:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7308:	4628      	mov	r0, r5
   b730a:	f7ff ffec 	bl	b72e6 <_ZN5Print7printlnEv>
  return n;
}
   b730e:	4420      	add	r0, r4
   b7310:	bd38      	pop	{r3, r4, r5, pc}

000b7312 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7312:	b530      	push	{r4, r5, lr}
   b7314:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7316:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7318:	2a01      	cmp	r2, #1
  *str = '\0';
   b731a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b731e:	bf98      	it	ls
   b7320:	220a      	movls	r2, #10
   b7322:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7324:	460d      	mov	r5, r1
   b7326:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b732a:	fb01 5312 	mls	r3, r1, r2, r5
   b732e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7332:	2b09      	cmp	r3, #9
   b7334:	bf94      	ite	ls
   b7336:	3330      	addls	r3, #48	; 0x30
   b7338:	3337      	addhi	r3, #55	; 0x37
   b733a:	b2db      	uxtb	r3, r3
  } while(n);
   b733c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b733e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7342:	d9ef      	bls.n	b7324 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7344:	4621      	mov	r1, r4
   b7346:	f7ff ffb5 	bl	b72b4 <_ZN5Print5writeEPKc>
}
   b734a:	b00b      	add	sp, #44	; 0x2c
   b734c:	bd30      	pop	{r4, r5, pc}

000b734e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b734e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7352:	b086      	sub	sp, #24
   b7354:	af00      	add	r7, sp, #0
   b7356:	4605      	mov	r5, r0
   b7358:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b735a:	1d38      	adds	r0, r7, #4
   b735c:	2114      	movs	r1, #20
{
   b735e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7360:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7362:	f7ff fa11 	bl	b6788 <vsnprintf>

    if (n<bufsize)
   b7366:	2813      	cmp	r0, #19
   b7368:	d80e      	bhi.n	b7388 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b736a:	1d39      	adds	r1, r7, #4
   b736c:	4628      	mov	r0, r5
   b736e:	f7ff ffa1 	bl	b72b4 <_ZN5Print5writeEPKc>
   b7372:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7374:	b11e      	cbz	r6, b737e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7376:	4628      	mov	r0, r5
   b7378:	f7ff ffb5 	bl	b72e6 <_ZN5Print7printlnEv>
   b737c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b737e:	4620      	mov	r0, r4
   b7380:	3718      	adds	r7, #24
   b7382:	46bd      	mov	sp, r7
   b7384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7388:	f100 0308 	add.w	r3, r0, #8
   b738c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7390:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7392:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7396:	4622      	mov	r2, r4
   b7398:	1c41      	adds	r1, r0, #1
   b739a:	683b      	ldr	r3, [r7, #0]
   b739c:	4668      	mov	r0, sp
   b739e:	f7ff f9f3 	bl	b6788 <vsnprintf>
  return write(str);
   b73a2:	4669      	mov	r1, sp
   b73a4:	4628      	mov	r0, r5
   b73a6:	f7ff ff85 	bl	b72b4 <_ZN5Print5writeEPKc>
   b73aa:	4604      	mov	r4, r0
   b73ac:	46c5      	mov	sp, r8
   b73ae:	e7e1      	b.n	b7374 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b73b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b73b0:	4b01      	ldr	r3, [pc, #4]	; (b73b8 <_GLOBAL__sub_I_RGB+0x8>)
   b73b2:	2200      	movs	r2, #0
   b73b4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b73b6:	4770      	bx	lr
   b73b8:	2003e6a8 	.word	0x2003e6a8

000b73bc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b73bc:	2100      	movs	r1, #0
   b73be:	f7ff b857 	b.w	b6470 <hal_spi_release>

000b73c2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b73c2:	2100      	movs	r1, #0
   b73c4:	f7ff b84c 	b.w	b6460 <hal_spi_acquire>

000b73c8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b73c8:	b510      	push	{r4, lr}
   b73ca:	4604      	mov	r4, r0
   b73cc:	4608      	mov	r0, r1
{
    _spi = spi;
   b73ce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b73d0:	f7ff f826 	bl	b6420 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b73d4:	2300      	movs	r3, #0
   b73d6:	6063      	str	r3, [r4, #4]
}
   b73d8:	4620      	mov	r0, r4
   b73da:	bd10      	pop	{r4, pc}

000b73dc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b73dc:	b513      	push	{r0, r1, r4, lr}
   b73de:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b73e0:	7800      	ldrb	r0, [r0, #0]
   b73e2:	f7ff ffee 	bl	b73c2 <_ZN8SPIClass4lockEv.isra.0>
   b73e6:	b958      	cbnz	r0, b7400 <_ZN8SPIClass5beginEv+0x24>
   b73e8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b73ea:	9001      	str	r0, [sp, #4]
   b73ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b73f0:	f7ff f806 	bl	b6400 <hal_spi_begin>
        unlock();
   b73f4:	9801      	ldr	r0, [sp, #4]
    }
}
   b73f6:	b002      	add	sp, #8
   b73f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b73fc:	f7ff bfde 	b.w	b73bc <_ZN8SPIClass6unlockEv.isra.0>
   b7400:	b002      	add	sp, #8
   b7402:	bd10      	pop	{r4, pc}

000b7404 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7404:	0840      	lsrs	r0, r0, #1
{
   b7406:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7408:	6018      	str	r0, [r3, #0]
   b740a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b740c:	6818      	ldr	r0, [r3, #0]
   b740e:	4288      	cmp	r0, r1
   b7410:	b2e5      	uxtb	r5, r4
   b7412:	d906      	bls.n	b7422 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7414:	3401      	adds	r4, #1
   b7416:	2c08      	cmp	r4, #8
   b7418:	d002      	beq.n	b7420 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b741a:	0840      	lsrs	r0, r0, #1
   b741c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b741e:	e7f5      	b.n	b740c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7420:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7424:	5d5b      	ldrb	r3, [r3, r5]
   b7426:	7013      	strb	r3, [r2, #0]
}
   b7428:	bd30      	pop	{r4, r5, pc}
   b742a:	bf00      	nop
   b742c:	000bbd00 	.word	0x000bbd00

000b7430 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7434:	4606      	mov	r6, r0
   b7436:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7438:	7800      	ldrb	r0, [r0, #0]
{
   b743a:	460c      	mov	r4, r1
    CHECK(lock());
   b743c:	f7ff ffc1 	bl	b73c2 <_ZN8SPIClass4lockEv.isra.0>
   b7440:	2800      	cmp	r0, #0
   b7442:	db1b      	blt.n	b747c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7444:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7446:	2214      	movs	r2, #20
   b7448:	2100      	movs	r1, #0
   b744a:	a809      	add	r0, sp, #36	; 0x24
   b744c:	f000 fdbb 	bl	b7fc6 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7450:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7452:	2200      	movs	r2, #0
   b7454:	a909      	add	r1, sp, #36	; 0x24
   b7456:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7458:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b745c:	f7fe fff0 	bl	b6440 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7460:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7464:	b113      	cbz	r3, b746c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7466:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b746a:	b155      	cbz	r5, b7482 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b746c:	2700      	movs	r7, #0
   b746e:	46b9      	mov	r9, r7
   b7470:	46b8      	mov	r8, r7
   b7472:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7474:	7923      	ldrb	r3, [r4, #4]
   b7476:	b15d      	cbz	r5, b7490 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7478:	b1c3      	cbz	r3, b74ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b747a:	2000      	movs	r0, #0
}
   b747c:	b00f      	add	sp, #60	; 0x3c
   b747e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7482:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7486:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b748a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b748e:	e7f1      	b.n	b7474 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7490:	2b00      	cmp	r3, #0
   b7492:	d135      	bne.n	b7500 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7494:	68a3      	ldr	r3, [r4, #8]
   b7496:	4543      	cmp	r3, r8
   b7498:	d108      	bne.n	b74ac <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b749a:	f88d 9020 	strb.w	r9, [sp, #32]
   b749e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74a6:	89a3      	ldrh	r3, [r4, #12]
   b74a8:	429a      	cmp	r2, r3
   b74aa:	d0e6      	beq.n	b747a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b74ac:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b74ae:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b74b0:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b74b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   b74b6:	ab04      	add	r3, sp, #16
   b74b8:	f10d 020f 	add.w	r2, sp, #15
   b74bc:	f7ff ffa2 	bl	b7404 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b74c0:	7921      	ldrb	r1, [r4, #4]
   b74c2:	b985      	cbnz	r5, b74e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b74c4:	b989      	cbnz	r1, b74ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74c6:	68a3      	ldr	r3, [r4, #8]
   b74c8:	4543      	cmp	r3, r8
   b74ca:	d30e      	bcc.n	b74ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b74cc:	f88d 9020 	strb.w	r9, [sp, #32]
   b74d0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74d8:	89a3      	ldrh	r3, [r4, #12]
   b74da:	429a      	cmp	r2, r3
   b74dc:	d105      	bne.n	b74ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b74de:	9b04      	ldr	r3, [sp, #16]
   b74e0:	4543      	cmp	r3, r8
   b74e2:	d102      	bne.n	b74ea <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74e4:	e7c9      	b.n	b747a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b74e6:	2900      	cmp	r1, #0
   b74e8:	d1f9      	bne.n	b74de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b74ea:	2300      	movs	r3, #0
   b74ec:	9301      	str	r3, [sp, #4]
   b74ee:	7b63      	ldrb	r3, [r4, #13]
   b74f0:	9300      	str	r3, [sp, #0]
   b74f2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b74f6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b74f8:	7830      	ldrb	r0, [r6, #0]
   b74fa:	f7fe ffa9 	bl	b6450 <hal_spi_set_settings>
   b74fe:	e7bc      	b.n	b747a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7500:	e9cd 5500 	strd	r5, r5, [sp]
   b7504:	462b      	mov	r3, r5
   b7506:	462a      	mov	r2, r5
   b7508:	2101      	movs	r1, #1
   b750a:	e7f5      	b.n	b74f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b750c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b750c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b750e:	7800      	ldrb	r0, [r0, #0]
   b7510:	f7fe ff7e 	bl	b6410 <hal_spi_transfer>
}
   b7514:	b2c0      	uxtb	r0, r0
   b7516:	bd08      	pop	{r3, pc}

000b7518 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7518:	b510      	push	{r4, lr}
   b751a:	4604      	mov	r4, r0
{
	free(buffer);
   b751c:	6800      	ldr	r0, [r0, #0]
   b751e:	f7ff f923 	bl	b6768 <free>
}
   b7522:	4620      	mov	r0, r4
   b7524:	bd10      	pop	{r4, pc}

000b7526 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7526:	b510      	push	{r4, lr}
   b7528:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b752a:	6800      	ldr	r0, [r0, #0]
   b752c:	b108      	cbz	r0, b7532 <_ZN6String10invalidateEv+0xc>
   b752e:	f7ff f91b 	bl	b6768 <free>
	buffer = NULL;
   b7532:	2300      	movs	r3, #0
	capacity = len = 0;
   b7534:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7538:	6023      	str	r3, [r4, #0]
}
   b753a:	bd10      	pop	{r4, pc}

000b753c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b753c:	b538      	push	{r3, r4, r5, lr}
   b753e:	4604      	mov	r4, r0
   b7540:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7542:	6800      	ldr	r0, [r0, #0]
   b7544:	3101      	adds	r1, #1
   b7546:	f7ff f917 	bl	b6778 <realloc>
	if (newbuffer) {
   b754a:	b110      	cbz	r0, b7552 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b754c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7550:	2001      	movs	r0, #1
	}
	return 0;
}
   b7552:	bd38      	pop	{r3, r4, r5, pc}

000b7554 <_ZN6String7reserveEj>:
{
   b7554:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7556:	6803      	ldr	r3, [r0, #0]
{
   b7558:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b755a:	b123      	cbz	r3, b7566 <_ZN6String7reserveEj+0x12>
   b755c:	6843      	ldr	r3, [r0, #4]
   b755e:	428b      	cmp	r3, r1
   b7560:	d301      	bcc.n	b7566 <_ZN6String7reserveEj+0x12>
   b7562:	2001      	movs	r0, #1
}
   b7564:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7566:	4620      	mov	r0, r4
   b7568:	f7ff ffe8 	bl	b753c <_ZN6String12changeBufferEj>
   b756c:	2800      	cmp	r0, #0
   b756e:	d0f9      	beq.n	b7564 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7570:	68a3      	ldr	r3, [r4, #8]
   b7572:	2b00      	cmp	r3, #0
   b7574:	d1f5      	bne.n	b7562 <_ZN6String7reserveEj+0xe>
   b7576:	6822      	ldr	r2, [r4, #0]
   b7578:	7013      	strb	r3, [r2, #0]
   b757a:	e7f2      	b.n	b7562 <_ZN6String7reserveEj+0xe>

000b757c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b757c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b757e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7580:	4611      	mov	r1, r2
   b7582:	9201      	str	r2, [sp, #4]
{
   b7584:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7586:	f7ff ffe5 	bl	b7554 <_ZN6String7reserveEj>
   b758a:	9a01      	ldr	r2, [sp, #4]
   b758c:	b928      	cbnz	r0, b759a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b758e:	4620      	mov	r0, r4
   b7590:	f7ff ffc9 	bl	b7526 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7594:	4620      	mov	r0, r4
   b7596:	b003      	add	sp, #12
   b7598:	bd30      	pop	{r4, r5, pc}
	len = length;
   b759a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b759c:	4629      	mov	r1, r5
   b759e:	6820      	ldr	r0, [r4, #0]
   b75a0:	f000 fd03 	bl	b7faa <memcpy>
	buffer[len] = 0;
   b75a4:	6822      	ldr	r2, [r4, #0]
   b75a6:	68a3      	ldr	r3, [r4, #8]
   b75a8:	2100      	movs	r1, #0
   b75aa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b75ac:	e7f2      	b.n	b7594 <_ZN6String4copyEPKcj+0x18>

000b75ae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b75ae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b75b0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b75b2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b75b6:	4604      	mov	r4, r0
	len = 0;
   b75b8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b75ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b75bc:	b141      	cbz	r1, b75d0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b75be:	4608      	mov	r0, r1
   b75c0:	9101      	str	r1, [sp, #4]
   b75c2:	f7fd f957 	bl	b4874 <strlen>
   b75c6:	9901      	ldr	r1, [sp, #4]
   b75c8:	4602      	mov	r2, r0
   b75ca:	4620      	mov	r0, r4
   b75cc:	f7ff ffd6 	bl	b757c <_ZN6String4copyEPKcj>
}
   b75d0:	4620      	mov	r0, r4
   b75d2:	b002      	add	sp, #8
   b75d4:	bd10      	pop	{r4, pc}

000b75d6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b75d6:	b538      	push	{r3, r4, r5, lr}
   b75d8:	4605      	mov	r5, r0
	if (buffer) {
   b75da:	6800      	ldr	r0, [r0, #0]
{
   b75dc:	460c      	mov	r4, r1
	if (buffer) {
   b75de:	b170      	cbz	r0, b75fe <_ZN6String4moveERS_+0x28>
		if (capacity >= rhs.len && rhs.buffer) {
   b75e0:	686a      	ldr	r2, [r5, #4]
   b75e2:	688b      	ldr	r3, [r1, #8]
   b75e4:	429a      	cmp	r2, r3
   b75e6:	d308      	bcc.n	b75fa <_ZN6String4moveERS_+0x24>
   b75e8:	6809      	ldr	r1, [r1, #0]
   b75ea:	b131      	cbz	r1, b75fa <_ZN6String4moveERS_+0x24>
			strcpy(buffer, rhs.buffer);
   b75ec:	f000 fd22 	bl	b8034 <strcpy>
			len = rhs.len;
   b75f0:	68a3      	ldr	r3, [r4, #8]
   b75f2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b75f4:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b75f6:	60a3      	str	r3, [r4, #8]
}
   b75f8:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b75fa:	f7ff f8b5 	bl	b6768 <free>
	buffer = rhs.buffer;
   b75fe:	6823      	ldr	r3, [r4, #0]
   b7600:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b7602:	6863      	ldr	r3, [r4, #4]
   b7604:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b7606:	68a3      	ldr	r3, [r4, #8]
   b7608:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b760a:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b760c:	e9c4 3300 	strd	r3, r3, [r4]
   b7610:	e7f1      	b.n	b75f6 <_ZN6String4moveERS_+0x20>

000b7612 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b7612:	b510      	push	{r4, lr}
	buffer = NULL;
   b7614:	2300      	movs	r3, #0
	capacity = 0;
   b7616:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b761a:	4604      	mov	r4, r0
	len = 0;
   b761c:	6083      	str	r3, [r0, #8]
	flags = 0;
   b761e:	7303      	strb	r3, [r0, #12]
	move(rval);
   b7620:	f7ff ffd9 	bl	b75d6 <_ZN6String4moveERS_>
}
   b7624:	4620      	mov	r0, r4
   b7626:	bd10      	pop	{r4, pc}

000b7628 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b7628:	4288      	cmp	r0, r1
{
   b762a:	b510      	push	{r4, lr}
   b762c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b762e:	d005      	beq.n	b763c <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b7630:	680b      	ldr	r3, [r1, #0]
   b7632:	b12b      	cbz	r3, b7640 <_ZN6StringaSERKS_+0x18>
   b7634:	688a      	ldr	r2, [r1, #8]
   b7636:	4619      	mov	r1, r3
   b7638:	f7ff ffa0 	bl	b757c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b763c:	4620      	mov	r0, r4
   b763e:	bd10      	pop	{r4, pc}
	else invalidate();
   b7640:	f7ff ff71 	bl	b7526 <_ZN6String10invalidateEv>
   b7644:	e7fa      	b.n	b763c <_ZN6StringaSERKS_+0x14>

000b7646 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b7646:	b510      	push	{r4, lr}
	buffer = NULL;
   b7648:	2300      	movs	r3, #0
String::String(const String &value)
   b764a:	4604      	mov	r4, r0
	capacity = 0;
   b764c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b7650:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7652:	7303      	strb	r3, [r0, #12]
	*this = value;
   b7654:	f7ff ffe8 	bl	b7628 <_ZN6StringaSERKS_>
}
   b7658:	4620      	mov	r0, r4
   b765a:	bd10      	pop	{r4, pc}

000b765c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b765c:	b513      	push	{r0, r1, r4, lr}
   b765e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7660:	b159      	cbz	r1, b767a <_ZN6StringaSEPKc+0x1e>
   b7662:	4608      	mov	r0, r1
   b7664:	9101      	str	r1, [sp, #4]
   b7666:	f7fd f905 	bl	b4874 <strlen>
   b766a:	9901      	ldr	r1, [sp, #4]
   b766c:	4602      	mov	r2, r0
   b766e:	4620      	mov	r0, r4
   b7670:	f7ff ff84 	bl	b757c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7674:	4620      	mov	r0, r4
   b7676:	b002      	add	sp, #8
   b7678:	bd10      	pop	{r4, pc}
	else invalidate();
   b767a:	f7ff ff54 	bl	b7526 <_ZN6String10invalidateEv>
   b767e:	e7f9      	b.n	b7674 <_ZN6StringaSEPKc+0x18>

000b7680 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
   b7680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7682:	4604      	mov	r4, r0
	buffer = NULL;
   b7684:	2300      	movs	r3, #0
	capacity = 0;
   b7686:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b768a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b768c:	7323      	strb	r3, [r4, #12]
String::String(unsigned char value, unsigned char base)
   b768e:	4608      	mov	r0, r1
	utoa(value, buf, base);
   b7690:	a901      	add	r1, sp, #4
   b7692:	f000 fadf 	bl	b7c54 <utoa>
	*this = buf;
   b7696:	a901      	add	r1, sp, #4
   b7698:	4620      	mov	r0, r4
   b769a:	f7ff ffdf 	bl	b765c <_ZN6StringaSEPKc>
}
   b769e:	4620      	mov	r0, r4
   b76a0:	b004      	add	sp, #16
   b76a2:	bd10      	pop	{r4, pc}

000b76a4 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b76a4:	b510      	push	{r4, lr}
   b76a6:	4604      	mov	r4, r0
   b76a8:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b76aa:	2300      	movs	r3, #0
	capacity = 0;
   b76ac:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b76b0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b76b2:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b76b4:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b76b6:	a901      	add	r1, sp, #4
   b76b8:	f000 fab6 	bl	b7c28 <itoa>
	*this = buf;
   b76bc:	a901      	add	r1, sp, #4
   b76be:	4620      	mov	r0, r4
   b76c0:	f7ff ffcc 	bl	b765c <_ZN6StringaSEPKc>
}
   b76c4:	4620      	mov	r0, r4
   b76c6:	b00a      	add	sp, #40	; 0x28
   b76c8:	bd10      	pop	{r4, pc}

000b76ca <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b76ca:	b570      	push	{r4, r5, r6, lr}
   b76cc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b76ce:	460e      	mov	r6, r1
   b76d0:	b909      	cbnz	r1, b76d6 <_ZN6String6concatEPKcj+0xc>
   b76d2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b76d4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b76d6:	b16a      	cbz	r2, b76f4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b76d8:	6884      	ldr	r4, [r0, #8]
   b76da:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b76dc:	4621      	mov	r1, r4
   b76de:	f7ff ff39 	bl	b7554 <_ZN6String7reserveEj>
   b76e2:	2800      	cmp	r0, #0
   b76e4:	d0f5      	beq.n	b76d2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b76e6:	6828      	ldr	r0, [r5, #0]
   b76e8:	68ab      	ldr	r3, [r5, #8]
   b76ea:	4631      	mov	r1, r6
   b76ec:	4418      	add	r0, r3
   b76ee:	f000 fca1 	bl	b8034 <strcpy>
	len = newlen;
   b76f2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b76f4:	2001      	movs	r0, #1
   b76f6:	e7ed      	b.n	b76d4 <_ZN6String6concatEPKcj+0xa>

000b76f8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b76f8:	688a      	ldr	r2, [r1, #8]
   b76fa:	6809      	ldr	r1, [r1, #0]
   b76fc:	f7ff bfe5 	b.w	b76ca <_ZN6String6concatEPKcj>

000b7700 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   b7700:	b513      	push	{r0, r1, r4, lr}
   b7702:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   b7704:	4608      	mov	r0, r1
	if (!cstr) return 0;
   b7706:	b151      	cbz	r1, b771e <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   b7708:	9101      	str	r1, [sp, #4]
   b770a:	f7fd f8b3 	bl	b4874 <strlen>
   b770e:	9901      	ldr	r1, [sp, #4]
   b7710:	4602      	mov	r2, r0
   b7712:	4620      	mov	r0, r4
}
   b7714:	b002      	add	sp, #8
   b7716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   b771a:	f7ff bfd6 	b.w	b76ca <_ZN6String6concatEPKcj>
}
   b771e:	b002      	add	sp, #8
   b7720:	bd10      	pop	{r4, pc}

000b7722 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b7722:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b7724:	688a      	ldr	r2, [r1, #8]
   b7726:	6809      	ldr	r1, [r1, #0]
{
   b7728:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b772a:	f7ff ffce 	bl	b76ca <_ZN6String6concatEPKcj>
   b772e:	b910      	cbnz	r0, b7736 <_ZplRK15StringSumHelperRK6String+0x14>
   b7730:	4620      	mov	r0, r4
   b7732:	f7ff fef8 	bl	b7526 <_ZN6String10invalidateEv>
	return a;
}
   b7736:	4620      	mov	r0, r4
   b7738:	bd10      	pop	{r4, pc}

000b773a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b773a:	b513      	push	{r0, r1, r4, lr}
   b773c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b773e:	b929      	cbnz	r1, b774c <_ZplRK15StringSumHelperPKc+0x12>
   b7740:	4620      	mov	r0, r4
   b7742:	f7ff fef0 	bl	b7526 <_ZN6String10invalidateEv>
	return a;
}
   b7746:	4620      	mov	r0, r4
   b7748:	b002      	add	sp, #8
   b774a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b774c:	4608      	mov	r0, r1
   b774e:	9101      	str	r1, [sp, #4]
   b7750:	f7fd f890 	bl	b4874 <strlen>
   b7754:	9901      	ldr	r1, [sp, #4]
   b7756:	4602      	mov	r2, r0
   b7758:	4620      	mov	r0, r4
   b775a:	f7ff ffb6 	bl	b76ca <_ZN6String6concatEPKcj>
   b775e:	2800      	cmp	r0, #0
   b7760:	d0ee      	beq.n	b7740 <_ZplRK15StringSumHelperPKc+0x6>
   b7762:	e7f0      	b.n	b7746 <_ZplRK15StringSumHelperPKc+0xc>

000b7764 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b7764:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7766:	6882      	ldr	r2, [r0, #8]
   b7768:	b93a      	cbnz	r2, b777a <_ZNK6String6equalsEPKc+0x16>
   b776a:	b121      	cbz	r1, b7776 <_ZNK6String6equalsEPKc+0x12>
   b776c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b776e:	fab0 f080 	clz	r0, r0
   b7772:	0940      	lsrs	r0, r0, #5
   b7774:	e000      	b.n	b7778 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7776:	2001      	movs	r0, #1
}
   b7778:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b777a:	6800      	ldr	r0, [r0, #0]
   b777c:	b909      	cbnz	r1, b7782 <_ZNK6String6equalsEPKc+0x1e>
   b777e:	7800      	ldrb	r0, [r0, #0]
   b7780:	e7f5      	b.n	b776e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7782:	f7fd f86d 	bl	b4860 <strcmp>
   b7786:	e7f2      	b.n	b776e <_ZNK6String6equalsEPKc+0xa>

000b7788 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b7788:	b40e      	push	{r1, r2, r3}
   b778a:	b570      	push	{r4, r5, r6, lr}
   b778c:	b087      	sub	sp, #28
   b778e:	ad0b      	add	r5, sp, #44	; 0x2c
   b7790:	4604      	mov	r4, r0
   b7792:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b7796:	9201      	str	r2, [sp, #4]
   b7798:	462b      	mov	r3, r5
   b779a:	2105      	movs	r1, #5
   b779c:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b779e:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b77a0:	f7fe fff2 	bl	b6788 <vsnprintf>
    va_end(marker);

    String result;
   b77a4:	490b      	ldr	r1, [pc, #44]	; (b77d4 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b77a6:	4606      	mov	r6, r0
    String result;
   b77a8:	4620      	mov	r0, r4
   b77aa:	f7ff ff00 	bl	b75ae <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b77ae:	4631      	mov	r1, r6
   b77b0:	4620      	mov	r0, r4
   b77b2:	f7ff fecf 	bl	b7554 <_ZN6String7reserveEj>
    if (result.buffer) {
   b77b6:	6820      	ldr	r0, [r4, #0]
   b77b8:	b130      	cbz	r0, b77c8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b77ba:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b77bc:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b77be:	462b      	mov	r3, r5
   b77c0:	1c71      	adds	r1, r6, #1
   b77c2:	f7fe ffe1 	bl	b6788 <vsnprintf>
        va_end(marker);
        result.len = n;
   b77c6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b77c8:	4620      	mov	r0, r4
   b77ca:	b007      	add	sp, #28
   b77cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b77d0:	b003      	add	sp, #12
   b77d2:	4770      	bx	lr
   b77d4:	000b8399 	.word	0x000b8399

000b77d8 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   b77d8:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   b77da:	2420      	movs	r4, #32
{
   b77dc:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   b77de:	4622      	mov	r2, r4
   b77e0:	2100      	movs	r1, #0
   b77e2:	4668      	mov	r0, sp
   b77e4:	f000 fbef 	bl	b7fc6 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   b77e8:	2100      	movs	r1, #0
   b77ea:	4668      	mov	r0, sp
    info.size = sizeof(info);
   b77ec:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   b77f0:	f7fe fd4e 	bl	b6290 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   b77f4:	9801      	ldr	r0, [sp, #4]
   b77f6:	b008      	add	sp, #32
   b77f8:	bd10      	pop	{r4, pc}
	...

000b77fc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b77fc:	4b05      	ldr	r3, [pc, #20]	; (b7814 <_GLOBAL__sub_I_System+0x18>)
   b77fe:	2202      	movs	r2, #2
   b7800:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7802:	4b05      	ldr	r3, [pc, #20]	; (b7818 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7804:	4a05      	ldr	r2, [pc, #20]	; (b781c <_GLOBAL__sub_I_System+0x20>)
   b7806:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7808:	2000      	movs	r0, #0
   b780a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b780e:	f7fe beb7 	b.w	b6580 <set_system_mode>
   b7812:	bf00      	nop
   b7814:	2003e6c4 	.word	0x2003e6c4
   b7818:	2003e6b8 	.word	0x2003e6b8
   b781c:	ffff0000 	.word	0xffff0000

000b7820 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   b7820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   b7824:	4a15      	ldr	r2, [pc, #84]	; (b787c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   b7826:	f8df 8060 	ldr.w	r8, [pc, #96]	; b7888 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   b782a:	e9d2 6300 	ldrd	r6, r3, [r2]
   b782e:	1980      	adds	r0, r0, r6
   b7830:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   b7834:	4b12      	ldr	r3, [pc, #72]	; (b7880 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   b7836:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   b783a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   b783e:	1986      	adds	r6, r0, r6
   b7840:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   b7844:	42bb      	cmp	r3, r7
   b7846:	bf08      	it	eq
   b7848:	42b2      	cmpeq	r2, r6
{
   b784a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   b784c:	d013      	beq.n	b7876 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   b784e:	a903      	add	r1, sp, #12
   b7850:	4668      	mov	r0, sp
   b7852:	e9cd 6700 	strd	r6, r7, [sp]
   b7856:	f7fe ffc7 	bl	b67e8 <localtime_r>
	calendar_time.tm_year += 1900;
   b785a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b785c:	4d09      	ldr	r5, [pc, #36]	; (b7884 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   b785e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7862:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   b7864:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b786a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b786c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   b786e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   b7872:	6823      	ldr	r3, [r4, #0]
   b7874:	602b      	str	r3, [r5, #0]
    }
}
   b7876:	b00c      	add	sp, #48	; 0x30
   b7878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b787c:	2003e6f8 	.word	0x2003e6f8
   b7880:	2003e6f0 	.word	0x2003e6f0
   b7884:	2003e6cc 	.word	0x2003e6cc
   b7888:	2003e700 	.word	0x2003e700

000b788c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b788c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b788e:	2000      	movs	r0, #0
   b7890:	f7fe fee2 	bl	b6658 <spark_sync_time_pending>
   b7894:	b128      	cbz	r0, b78a2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7896:	f7fe febf 	bl	b6618 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b789a:	f080 0001 	eor.w	r0, r0, #1
   b789e:	b2c0      	uxtb	r0, r0
    }
   b78a0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b78a2:	2001      	movs	r0, #1
   b78a4:	e7fc      	b.n	b78a0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000b78a8 <_ZN9TimeClass12hourFormat12Ex>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   b78a8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78aa:	f7ff ffb9 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
	if(calendar_time_cache.tm_hour == 0)
   b78ae:	4b04      	ldr	r3, [pc, #16]	; (b78c0 <_ZN9TimeClass12hourFormat12Ex+0x18>)
   b78b0:	6898      	ldr	r0, [r3, #8]
   b78b2:	b118      	cbz	r0, b78bc <_ZN9TimeClass12hourFormat12Ex+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   b78b4:	280c      	cmp	r0, #12
   b78b6:	dd00      	ble.n	b78ba <_ZN9TimeClass12hourFormat12Ex+0x12>
		return calendar_time_cache.tm_hour - 12 ;
   b78b8:	380c      	subs	r0, #12
	else
		return calendar_time_cache.tm_hour ;
}
   b78ba:	bd08      	pop	{r3, pc}
		return 12;	//midnight
   b78bc:	200c      	movs	r0, #12
   b78be:	e7fc      	b.n	b78ba <_ZN9TimeClass12hourFormat12Ex+0x12>
   b78c0:	2003e6cc 	.word	0x2003e6cc

000b78c4 <_ZN9TimeClass4isPMEx>:
	return isPM(now());
}

/* returns true the given time is PM */
uint8_t TimeClass::isPM(time_t t)
{
   b78c4:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78c6:	f7ff ffab 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
   b78ca:	4b03      	ldr	r3, [pc, #12]	; (b78d8 <_ZN9TimeClass4isPMEx+0x14>)
	return (hour(t) >= 12);
   b78cc:	6898      	ldr	r0, [r3, #8]
}
   b78ce:	280b      	cmp	r0, #11
   b78d0:	bfd4      	ite	le
   b78d2:	2000      	movle	r0, #0
   b78d4:	2001      	movgt	r0, #1
   b78d6:	bd08      	pop	{r3, pc}
   b78d8:	2003e6cc 	.word	0x2003e6cc

000b78dc <_ZN9TimeClass6minuteEx>:
	return minute(now());
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
   b78dc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78de:	f7ff ff9f 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_min;
}
   b78e2:	4b01      	ldr	r3, [pc, #4]	; (b78e8 <_ZN9TimeClass6minuteEx+0xc>)
   b78e4:	6858      	ldr	r0, [r3, #4]
   b78e6:	bd08      	pop	{r3, pc}
   b78e8:	2003e6cc 	.word	0x2003e6cc

000b78ec <_ZN9TimeClass6secondEx>:
	return second(now());
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
   b78ec:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78ee:	f7ff ff97 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_sec;
}
   b78f2:	4b01      	ldr	r3, [pc, #4]	; (b78f8 <_ZN9TimeClass6secondEx+0xc>)
   b78f4:	6818      	ldr	r0, [r3, #0]
   b78f6:	bd08      	pop	{r3, pc}
   b78f8:	2003e6cc 	.word	0x2003e6cc

000b78fc <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   b78fc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   b78fe:	f7ff ff8f 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   b7902:	4b02      	ldr	r3, [pc, #8]	; (b790c <_ZN9TimeClass5monthEx+0x10>)
   b7904:	6918      	ldr	r0, [r3, #16]
}
   b7906:	3001      	adds	r0, #1
   b7908:	bd08      	pop	{r3, pc}
   b790a:	bf00      	nop
   b790c:	2003e6cc 	.word	0x2003e6cc

000b7910 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b7910:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   b7914:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   b791c:	b508      	push	{r3, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
   b791e:	d411      	bmi.n	b7944 <_ZN9TimeClass4zoneEf+0x34>
   b7920:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   b7924:	eeb4 0ae7 	vcmpe.f32	s0, s15
   b7928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b792c:	dc0a      	bgt.n	b7944 <_ZN9TimeClass4zoneEf+0x34>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   b792e:	eddf 7a06 	vldr	s15, [pc, #24]	; b7948 <_ZN9TimeClass4zoneEf+0x38>
   b7932:	ee60 7a27 	vmul.f32	s15, s0, s15
   b7936:	ee17 0a90 	vmov	r0, s15
   b793a:	f7fc ff5d 	bl	b47f8 <__aeabi_f2lz>
   b793e:	4b03      	ldr	r3, [pc, #12]	; (b794c <_ZN9TimeClass4zoneEf+0x3c>)
   b7940:	e9c3 0100 	strd	r0, r1, [r3]
}
   b7944:	bd08      	pop	{r3, pc}
   b7946:	bf00      	nop
   b7948:	45610000 	.word	0x45610000
   b794c:	2003e6f8 	.word	0x2003e6f8

000b7950 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   b7950:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   b7952:	2000      	movs	r0, #0
   b7954:	f7fe fcb4 	bl	b62c0 <hal_rtc_time_is_valid>
    if (rtcstate)
   b7958:	4604      	mov	r4, r0
   b795a:	b9a0      	cbnz	r0, b7986 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   b795c:	f7fe fe08 	bl	b6570 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   b7960:	2801      	cmp	r0, #1
   b7962:	d110      	bne.n	b7986 <_ZN9TimeClass7isValidEv+0x36>
   b7964:	4620      	mov	r0, r4
   b7966:	f7fe fe2b 	bl	b65c0 <system_thread_get_state>
   b796a:	b960      	cbnz	r0, b7986 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   b796c:	f7ff ff8e 	bl	b788c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b7970:	b910      	cbnz	r0, b7978 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   b7972:	f7fe fe41 	bl	b65f8 <spark_process>
        while (_while() && !_condition()) {
   b7976:	e7f9      	b.n	b796c <_ZN9TimeClass7isValidEv+0x1c>
   b7978:	f7ff ff88 	bl	b788c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   b797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   b7980:	2000      	movs	r0, #0
   b7982:	f7fe bc9d 	b.w	b62c0 <hal_rtc_time_is_valid>
}
   b7986:	4620      	mov	r0, r4
   b7988:	bd10      	pop	{r4, pc}

000b798a <_ZN9TimeClass3nowEv>:
{
   b798a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   b798c:	f7ff ffe0 	bl	b7950 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   b7990:	2210      	movs	r2, #16
   b7992:	2100      	movs	r1, #0
   b7994:	4668      	mov	r0, sp
   b7996:	f000 fb16 	bl	b7fc6 <memset>
    hal_rtc_get_time(&tv, nullptr);
   b799a:	2100      	movs	r1, #0
   b799c:	4668      	mov	r0, sp
   b799e:	f7fe fc97 	bl	b62d0 <hal_rtc_get_time>
}
   b79a2:	9800      	ldr	r0, [sp, #0]
   b79a4:	b005      	add	sp, #20
   b79a6:	f85d fb04 	ldr.w	pc, [sp], #4

000b79aa <_ZN9TimeClass4isPMEv>:
{
   b79aa:	b508      	push	{r3, lr}
	return isPM(now());
   b79ac:	f7ff ffed 	bl	b798a <_ZN9TimeClass3nowEv>
}
   b79b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return isPM(now());
   b79b4:	17c1      	asrs	r1, r0, #31
   b79b6:	f7ff bf85 	b.w	b78c4 <_ZN9TimeClass4isPMEx>
	...

000b79bc <_ZN9TimeClass3dayEv>:
{
   b79bc:	b508      	push	{r3, lr}
	return day(now());
   b79be:	f7ff ffe4 	bl	b798a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79c2:	17c1      	asrs	r1, r0, #31
   b79c4:	f7ff ff2c 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
}
   b79c8:	4b01      	ldr	r3, [pc, #4]	; (b79d0 <_ZN9TimeClass3dayEv+0x14>)
   b79ca:	68d8      	ldr	r0, [r3, #12]
   b79cc:	bd08      	pop	{r3, pc}
   b79ce:	bf00      	nop
   b79d0:	2003e6cc 	.word	0x2003e6cc

000b79d4 <_ZN9TimeClass5monthEv>:
{
   b79d4:	b508      	push	{r3, lr}
	return month(now());
   b79d6:	f7ff ffd8 	bl	b798a <_ZN9TimeClass3nowEv>
}
   b79da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   b79de:	17c1      	asrs	r1, r0, #31
   b79e0:	f7ff bf8c 	b.w	b78fc <_ZN9TimeClass5monthEx>

000b79e4 <_ZN9TimeClass4yearEv>:
{
   b79e4:	b508      	push	{r3, lr}
	return year(now());
   b79e6:	f7ff ffd0 	bl	b798a <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   b79ea:	17c1      	asrs	r1, r0, #31
   b79ec:	f7ff ff18 	bl	b7820 <_ZL22Refresh_UnixTime_Cachex>
}
   b79f0:	4b01      	ldr	r3, [pc, #4]	; (b79f8 <_ZN9TimeClass4yearEv+0x14>)
   b79f2:	6958      	ldr	r0, [r3, #20]
   b79f4:	bd08      	pop	{r3, pc}
   b79f6:	bf00      	nop
   b79f8:	2003e6cc 	.word	0x2003e6cc

000b79fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b79fc:	4b02      	ldr	r3, [pc, #8]	; (b7a08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b79fe:	681a      	ldr	r2, [r3, #0]
   b7a00:	4b02      	ldr	r3, [pc, #8]	; (b7a0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7a02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7a04:	4770      	bx	lr
   b7a06:	bf00      	nop
   b7a08:	2003de4c 	.word	0x2003de4c
   b7a0c:	2003e6c8 	.word	0x2003e6c8

000b7a10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7a10:	4770      	bx	lr

000b7a12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7a12:	7441      	strb	r1, [r0, #17]
}
   b7a14:	4770      	bx	lr

000b7a16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7a16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7a18:	7c00      	ldrb	r0, [r0, #16]
   b7a1a:	f7fe fd61 	bl	b64e0 <hal_usart_available_data_for_write>
}
   b7a1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a22:	bd08      	pop	{r3, pc}

000b7a24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7a24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7a26:	7c00      	ldrb	r0, [r0, #16]
   b7a28:	f7fe fd32 	bl	b6490 <hal_usart_available>
}
   b7a2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7a30:	bd08      	pop	{r3, pc}

000b7a32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7a32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7a34:	7c00      	ldrb	r0, [r0, #16]
   b7a36:	f7fe fd3b 	bl	b64b0 <hal_usart_peek>
}
   b7a3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a3e:	bd08      	pop	{r3, pc}

000b7a40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7a40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7a42:	7c00      	ldrb	r0, [r0, #16]
   b7a44:	f7fe fd2c 	bl	b64a0 <hal_usart_read>
}
   b7a48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7a4c:	bd08      	pop	{r3, pc}

000b7a4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7a4e:	7c00      	ldrb	r0, [r0, #16]
   b7a50:	f7fe bd36 	b.w	b64c0 <hal_usart_flush>

000b7a54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a56:	7c45      	ldrb	r5, [r0, #17]
{
   b7a58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a5a:	b12d      	cbz	r5, b7a68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7a5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7a5e:	b003      	add	sp, #12
   b7a60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7a64:	f7fe bd0c 	b.w	b6480 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7a68:	7c00      	ldrb	r0, [r0, #16]
   b7a6a:	9101      	str	r1, [sp, #4]
   b7a6c:	f7fe fd38 	bl	b64e0 <hal_usart_available_data_for_write>
   b7a70:	2800      	cmp	r0, #0
   b7a72:	9901      	ldr	r1, [sp, #4]
   b7a74:	dcf2      	bgt.n	b7a5c <_ZN11USARTSerial5writeEh+0x8>
}
   b7a76:	4628      	mov	r0, r5
   b7a78:	b003      	add	sp, #12
   b7a7a:	bd30      	pop	{r4, r5, pc}

000b7a7c <_ZN11USARTSerialD0Ev>:
   b7a7c:	b510      	push	{r4, lr}
   b7a7e:	2114      	movs	r1, #20
   b7a80:	4604      	mov	r4, r0
   b7a82:	f7fc ff3e 	bl	b4902 <_ZdlPvj>
   b7a86:	4620      	mov	r0, r4
   b7a88:	bd10      	pop	{r4, pc}
	...

000b7a8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7a8c:	b510      	push	{r4, lr}
   b7a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7a92:	4604      	mov	r4, r0
   b7a94:	4608      	mov	r0, r1
   b7a96:	4611      	mov	r1, r2
   b7a98:	2200      	movs	r2, #0
   b7a9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7a9e:	4b04      	ldr	r3, [pc, #16]	; (b7ab0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7aa0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7aa2:	2301      	movs	r3, #1
  _serial = serial;
   b7aa4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7aa6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7aa8:	f7fe fd22 	bl	b64f0 <hal_usart_init_ex>
}
   b7aac:	4620      	mov	r0, r4
   b7aae:	bd10      	pop	{r4, pc}
   b7ab0:	000bbd2c 	.word	0x000bbd2c

000b7ab4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7ab4:	7441      	strb	r1, [r0, #17]
}
   b7ab6:	4770      	bx	lr

000b7ab8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ab8:	4770      	bx	lr

000b7aba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7aba:	4770      	bx	lr

000b7abc <_ZN9USBSerial4readEv>:
{
   b7abc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7abe:	2100      	movs	r1, #0
   b7ac0:	7c00      	ldrb	r0, [r0, #16]
   b7ac2:	f7fe fd3d 	bl	b6540 <HAL_USB_USART_Receive_Data>
}
   b7ac6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7aca:	bd08      	pop	{r3, pc}

000b7acc <_ZN9USBSerial4peekEv>:
{
   b7acc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7ace:	2101      	movs	r1, #1
   b7ad0:	7c00      	ldrb	r0, [r0, #16]
   b7ad2:	f7fe fd35 	bl	b6540 <HAL_USB_USART_Receive_Data>
}
   b7ad6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7ada:	bd08      	pop	{r3, pc}

000b7adc <_ZN9USBSerial17availableForWriteEv>:
{
   b7adc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7ade:	7c00      	ldrb	r0, [r0, #16]
   b7ae0:	f7fe fd26 	bl	b6530 <HAL_USB_USART_Available_Data_For_Write>
}
   b7ae4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7ae8:	bd08      	pop	{r3, pc}

000b7aea <_ZN9USBSerial9availableEv>:
{
   b7aea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7aec:	7c00      	ldrb	r0, [r0, #16]
   b7aee:	f7fe fd17 	bl	b6520 <HAL_USB_USART_Available_Data>
}
   b7af2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7af6:	bd08      	pop	{r3, pc}

000b7af8 <_ZN9USBSerial5writeEh>:
{
   b7af8:	b513      	push	{r0, r1, r4, lr}
   b7afa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7afc:	7c00      	ldrb	r0, [r0, #16]
{
   b7afe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7b00:	f7fe fd16 	bl	b6530 <HAL_USB_USART_Available_Data_For_Write>
   b7b04:	2800      	cmp	r0, #0
   b7b06:	9901      	ldr	r1, [sp, #4]
   b7b08:	dc01      	bgt.n	b7b0e <_ZN9USBSerial5writeEh+0x16>
   b7b0a:	7c60      	ldrb	r0, [r4, #17]
   b7b0c:	b120      	cbz	r0, b7b18 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7b0e:	7c20      	ldrb	r0, [r4, #16]
   b7b10:	f7fe fd1e 	bl	b6550 <HAL_USB_USART_Send_Data>
   b7b14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7b18:	b002      	add	sp, #8
   b7b1a:	bd10      	pop	{r4, pc}

000b7b1c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7b1c:	7c00      	ldrb	r0, [r0, #16]
   b7b1e:	f7fe bd1f 	b.w	b6560 <HAL_USB_USART_Flush_Data>

000b7b22 <_ZN9USBSerialD0Ev>:
   b7b22:	b510      	push	{r4, lr}
   b7b24:	2114      	movs	r1, #20
   b7b26:	4604      	mov	r4, r0
   b7b28:	f7fc feeb 	bl	b4902 <_ZdlPvj>
   b7b2c:	4620      	mov	r0, r4
   b7b2e:	bd10      	pop	{r4, pc}

000b7b30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7b30:	b510      	push	{r4, lr}
   b7b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7b36:	4604      	mov	r4, r0
   b7b38:	4608      	mov	r0, r1
   b7b3a:	2100      	movs	r1, #0
   b7b3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7b40:	4b04      	ldr	r3, [pc, #16]	; (b7b54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7b42:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7b44:	2301      	movs	r3, #1
  _serial = serial;
   b7b46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7b48:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7b4a:	4611      	mov	r1, r2
   b7b4c:	f7fe fcd8 	bl	b6500 <HAL_USB_USART_Init>
}
   b7b50:	4620      	mov	r0, r4
   b7b52:	bd10      	pop	{r4, pc}
   b7b54:	000bbd5c 	.word	0x000bbd5c

000b7b58 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7b58:	7c00      	ldrb	r0, [r0, #16]
   b7b5a:	2200      	movs	r2, #0
   b7b5c:	f7fe bcd8 	b.w	b6510 <HAL_USB_USART_Begin>

000b7b60 <_Z19acquireSerialBufferv>:
{
   b7b60:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7b62:	2214      	movs	r2, #20
{
   b7b64:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7b66:	2100      	movs	r1, #0
   b7b68:	f000 fa2d 	bl	b7fc6 <memset>
}
   b7b6c:	4620      	mov	r0, r4
   b7b6e:	bd10      	pop	{r4, pc}

000b7b70 <_Z16_fetch_usbserialv>:
{
   b7b70:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b72:	4c0f      	ldr	r4, [pc, #60]	; (b7bb0 <_Z16_fetch_usbserialv+0x40>)
{
   b7b74:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7b76:	a803      	add	r0, sp, #12
   b7b78:	f7ff fff2 	bl	b7b60 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7b7c:	7821      	ldrb	r1, [r4, #0]
   b7b7e:	f3bf 8f5b 	dmb	ish
   b7b82:	f011 0101 	ands.w	r1, r1, #1
   b7b86:	d10f      	bne.n	b7ba8 <_Z16_fetch_usbserialv+0x38>
   b7b88:	4620      	mov	r0, r4
   b7b8a:	9101      	str	r1, [sp, #4]
   b7b8c:	f7fc febb 	bl	b4906 <__cxa_guard_acquire>
   b7b90:	9901      	ldr	r1, [sp, #4]
   b7b92:	b148      	cbz	r0, b7ba8 <_Z16_fetch_usbserialv+0x38>
   b7b94:	aa03      	add	r2, sp, #12
   b7b96:	4807      	ldr	r0, [pc, #28]	; (b7bb4 <_Z16_fetch_usbserialv+0x44>)
   b7b98:	f7ff ffca 	bl	b7b30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7b9c:	4620      	mov	r0, r4
   b7b9e:	f7fc feb7 	bl	b4910 <__cxa_guard_release>
   b7ba2:	4805      	ldr	r0, [pc, #20]	; (b7bb8 <_Z16_fetch_usbserialv+0x48>)
   b7ba4:	f000 f9f7 	bl	b7f96 <atexit>
	return _usbserial;
}
   b7ba8:	4802      	ldr	r0, [pc, #8]	; (b7bb4 <_Z16_fetch_usbserialv+0x44>)
   b7baa:	b008      	add	sp, #32
   b7bac:	bd10      	pop	{r4, pc}
   b7bae:	bf00      	nop
   b7bb0:	2003e708 	.word	0x2003e708
   b7bb4:	2003e70c 	.word	0x2003e70c
   b7bb8:	000b7ab9 	.word	0x000b7ab9

000b7bbc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b7bbc:	b510      	push	{r4, lr}
   b7bbe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b7bc0:	f7fc fe58 	bl	b4874 <strlen>
   b7bc4:	3801      	subs	r0, #1
   b7bc6:	1823      	adds	r3, r4, r0
   b7bc8:	4620      	mov	r0, r4
	while(i<j){
   b7bca:	4283      	cmp	r3, r0
   b7bcc:	d906      	bls.n	b7bdc <_Z11str_reversePc+0x20>
		c = *i;
   b7bce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b7bd0:	7819      	ldrb	r1, [r3, #0]
   b7bd2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b7bd6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b7bda:	e7f6      	b.n	b7bca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b7bdc:	bd10      	pop	{r4, pc}

000b7bde <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b7bde:	b570      	push	{r4, r5, r6, lr}
   b7be0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b7be2:	1e91      	subs	r1, r2, #2
   b7be4:	2922      	cmp	r1, #34	; 0x22
   b7be6:	d81d      	bhi.n	b7c24 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b7be8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b7bea:	b930      	cbnz	r0, b7bfa <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b7bec:	4423      	add	r3, r4
            *ptr++ = '0';
   b7bee:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b7bf0:	429d      	cmp	r5, r3
   b7bf2:	d210      	bcs.n	b7c16 <ultoa+0x38>
            *ptr++ = '0';
   b7bf4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b7bf8:	e7fa      	b.n	b7bf0 <ultoa+0x12>
            result.quot = a/radix;
   b7bfa:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b7bfe:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b7c02:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b7c04:	2809      	cmp	r0, #9
                *ptr += '0';
   b7c06:	bf94      	ite	ls
   b7c08:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b7c0a:	3157      	addhi	r1, #87	; 0x57
   b7c0c:	b2c9      	uxtb	r1, r1
   b7c0e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b7c12:	4630      	mov	r0, r6
	while(a){
   b7c14:	e7e9      	b.n	b7bea <ultoa+0xc>

	*ptr = '\0';
   b7c16:	2300      	movs	r3, #0
	str_reverse(buffer);
   b7c18:	4620      	mov	r0, r4
	*ptr = '\0';
   b7c1a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b7c1c:	f7ff ffce 	bl	b7bbc <_Z11str_reversePc>
	return buffer;
   b7c20:	4620      	mov	r0, r4
}
   b7c22:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b7c24:	2000      	movs	r0, #0
   b7c26:	e7fc      	b.n	b7c22 <ultoa+0x44>

000b7c28 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7c28:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b7c2a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b7c2c:	460c      	mov	r4, r1
   b7c2e:	4615      	mov	r5, r2
	if(a<0){
   b7c30:	da0e      	bge.n	b7c50 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b7c36:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b7c3a:	bf14      	ite	ne
   b7c3c:	4258      	negne	r0, r3
   b7c3e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b7c40:	2301      	movs	r3, #1
		*buffer = '-';
   b7c42:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b7c44:	462a      	mov	r2, r5
   b7c46:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b7c48:	f7ff ffc9 	bl	b7bde <ultoa>
	}
	return buffer;
}
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b7c50:	2301      	movs	r3, #1
   b7c52:	e7f9      	b.n	b7c48 <itoa+0x20>

000b7c54 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   b7c54:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   b7c56:	2301      	movs	r3, #1
   b7c58:	f7ff ffc1 	bl	b7bde <ultoa>
}
   b7c5c:	bd08      	pop	{r3, pc}
	...

000b7c60 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7c60:	4b01      	ldr	r3, [pc, #4]	; (b7c68 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7c62:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7c64:	4770      	bx	lr
   b7c66:	bf00      	nop
   b7c68:	2003de50 	.word	0x2003de50

000b7c6c <serialEventRun>:
{
   b7c6c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7c6e:	4b0b      	ldr	r3, [pc, #44]	; (b7c9c <serialEventRun+0x30>)
   b7c70:	b143      	cbz	r3, b7c84 <serialEventRun+0x18>
   b7c72:	f7ff ff7d 	bl	b7b70 <_Z16_fetch_usbserialv>
   b7c76:	6803      	ldr	r3, [r0, #0]
   b7c78:	691b      	ldr	r3, [r3, #16]
   b7c7a:	4798      	blx	r3
   b7c7c:	2800      	cmp	r0, #0
   b7c7e:	dd01      	ble.n	b7c84 <serialEventRun+0x18>
        serialEvent();
   b7c80:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7c84:	4b06      	ldr	r3, [pc, #24]	; (b7ca0 <serialEventRun+0x34>)
   b7c86:	b143      	cbz	r3, b7c9a <serialEventRun+0x2e>
   b7c88:	f000 f95c 	bl	b7f44 <_Z22__fetch_global_Serial1v>
   b7c8c:	6803      	ldr	r3, [r0, #0]
   b7c8e:	691b      	ldr	r3, [r3, #16]
   b7c90:	4798      	blx	r3
   b7c92:	2800      	cmp	r0, #0
   b7c94:	dd01      	ble.n	b7c9a <serialEventRun+0x2e>
        serialEvent1();
   b7c96:	f3af 8000 	nop.w
}
   b7c9a:	bd08      	pop	{r3, pc}
	...

000b7ca4 <_post_loop>:
{
   b7ca4:	b508      	push	{r3, lr}
	serialEventRun();
   b7ca6:	f7ff ffe1 	bl	b7c6c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7caa:	f7fe fb01 	bl	b62b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7cae:	4b01      	ldr	r3, [pc, #4]	; (b7cb4 <_post_loop+0x10>)
   b7cb0:	6018      	str	r0, [r3, #0]
}
   b7cb2:	bd08      	pop	{r3, pc}
   b7cb4:	2003e728 	.word	0x2003e728

000b7cb8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cb8:	4805      	ldr	r0, [pc, #20]	; (b7cd0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7cba:	4a06      	ldr	r2, [pc, #24]	; (b7cd4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7cbc:	4906      	ldr	r1, [pc, #24]	; (b7cd8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7cbe:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7cc0:	1a12      	subs	r2, r2, r0
   b7cc2:	f000 f972 	bl	b7faa <memcpy>
    __backup_sram_signature = signature;
   b7cc6:	4b05      	ldr	r3, [pc, #20]	; (b7cdc <_Z33system_initialize_user_backup_ramv+0x24>)
   b7cc8:	4a05      	ldr	r2, [pc, #20]	; (b7ce0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7cca:	601a      	str	r2, [r3, #0]
}
   b7ccc:	bd08      	pop	{r3, pc}
   b7cce:	bf00      	nop
   b7cd0:	2003f400 	.word	0x2003f400
   b7cd4:	2003f404 	.word	0x2003f404
   b7cd8:	000bc034 	.word	0x000bc034
   b7cdc:	2003f400 	.word	0x2003f400
   b7ce0:	9a271c1e 	.word	0x9a271c1e

000b7ce4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7ce4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7ce6:	2300      	movs	r3, #0
   b7ce8:	9300      	str	r3, [sp, #0]
   b7cea:	461a      	mov	r2, r3
   b7cec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7cf0:	f7fe fc78 	bl	b65e4 <system_ctrl_set_result>
}
   b7cf4:	b003      	add	sp, #12
   b7cf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7cfc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7cfc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7cfe:	8843      	ldrh	r3, [r0, #2]
   b7d00:	2b0a      	cmp	r3, #10
   b7d02:	d008      	beq.n	b7d16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7d04:	2b50      	cmp	r3, #80	; 0x50
   b7d06:	d10b      	bne.n	b7d20 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7d08:	4b09      	ldr	r3, [pc, #36]	; (b7d30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7d0a:	681b      	ldr	r3, [r3, #0]
   b7d0c:	b14b      	cbz	r3, b7d22 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7d0e:	b003      	add	sp, #12
   b7d10:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7d14:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7d16:	f7ff ffe5 	bl	b7ce4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7d1a:	b003      	add	sp, #12
   b7d1c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7d20:	2300      	movs	r3, #0
   b7d22:	9300      	str	r3, [sp, #0]
   b7d24:	461a      	mov	r2, r3
   b7d26:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7d2a:	f7fe fc5b 	bl	b65e4 <system_ctrl_set_result>
}
   b7d2e:	e7f4      	b.n	b7d1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7d30:	2003e724 	.word	0x2003e724

000b7d34 <module_user_init_hook>:
{
   b7d34:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7d36:	4812      	ldr	r0, [pc, #72]	; (b7d80 <module_user_init_hook+0x4c>)
   b7d38:	2100      	movs	r1, #0
   b7d3a:	f7fe fd4d 	bl	b67d8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7d3e:	4b11      	ldr	r3, [pc, #68]	; (b7d84 <module_user_init_hook+0x50>)
   b7d40:	681a      	ldr	r2, [r3, #0]
   b7d42:	4b11      	ldr	r3, [pc, #68]	; (b7d88 <module_user_init_hook+0x54>)
   b7d44:	429a      	cmp	r2, r3
   b7d46:	4b11      	ldr	r3, [pc, #68]	; (b7d8c <module_user_init_hook+0x58>)
   b7d48:	bf0c      	ite	eq
   b7d4a:	2201      	moveq	r2, #1
   b7d4c:	2200      	movne	r2, #0
   b7d4e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7d50:	d001      	beq.n	b7d56 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7d52:	f7ff ffb1 	bl	b7cb8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7d56:	f7fe faa3 	bl	b62a0 <HAL_RNG_GetRandomNumber>
   b7d5a:	4604      	mov	r4, r0
    srand(seed);
   b7d5c:	f000 f93c 	bl	b7fd8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7d60:	4b0b      	ldr	r3, [pc, #44]	; (b7d90 <module_user_init_hook+0x5c>)
   b7d62:	b113      	cbz	r3, b7d6a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7d64:	4620      	mov	r0, r4
   b7d66:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7d6a:	2100      	movs	r1, #0
   b7d6c:	4808      	ldr	r0, [pc, #32]	; (b7d90 <module_user_init_hook+0x5c>)
   b7d6e:	f7fe fc83 	bl	b6678 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7d76:	4807      	ldr	r0, [pc, #28]	; (b7d94 <module_user_init_hook+0x60>)
   b7d78:	2100      	movs	r1, #0
   b7d7a:	f7fe bc29 	b.w	b65d0 <system_ctrl_set_app_request_handler>
   b7d7e:	bf00      	nop
   b7d80:	000b7c61 	.word	0x000b7c61
   b7d84:	2003f400 	.word	0x2003f400
   b7d88:	9a271c1e 	.word	0x9a271c1e
   b7d8c:	2003e720 	.word	0x2003e720
   b7d90:	00000000 	.word	0x00000000
   b7d94:	000b7cfd 	.word	0x000b7cfd

000b7d98 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b7d98:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b7d9a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7d9c:	d902      	bls.n	b7da4 <pinAvailable+0xc>
    return false;
   b7d9e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7da0:	b002      	add	sp, #8
   b7da2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7da4:	f1a0 030b 	sub.w	r3, r0, #11
   b7da8:	2b02      	cmp	r3, #2
   b7daa:	d81a      	bhi.n	b7de2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7dac:	4c17      	ldr	r4, [pc, #92]	; (b7e0c <pinAvailable+0x74>)
   b7dae:	7821      	ldrb	r1, [r4, #0]
   b7db0:	f3bf 8f5b 	dmb	ish
   b7db4:	f011 0101 	ands.w	r1, r1, #1
   b7db8:	d10b      	bne.n	b7dd2 <pinAvailable+0x3a>
   b7dba:	4620      	mov	r0, r4
   b7dbc:	9101      	str	r1, [sp, #4]
   b7dbe:	f7fc fda2 	bl	b4906 <__cxa_guard_acquire>
   b7dc2:	9901      	ldr	r1, [sp, #4]
   b7dc4:	b128      	cbz	r0, b7dd2 <pinAvailable+0x3a>
   b7dc6:	4812      	ldr	r0, [pc, #72]	; (b7e10 <pinAvailable+0x78>)
   b7dc8:	f7ff fafe 	bl	b73c8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7dcc:	4620      	mov	r0, r4
   b7dce:	f7fc fd9f 	bl	b4910 <__cxa_guard_release>
   b7dd2:	4b0f      	ldr	r3, [pc, #60]	; (b7e10 <pinAvailable+0x78>)
   b7dd4:	7818      	ldrb	r0, [r3, #0]
   b7dd6:	f7fe fb2b 	bl	b6430 <hal_spi_is_enabled>
   b7dda:	2800      	cmp	r0, #0
   b7ddc:	d1df      	bne.n	b7d9e <pinAvailable+0x6>
  return true; // 'pin' is available
   b7dde:	2001      	movs	r0, #1
   b7de0:	e7de      	b.n	b7da0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7de2:	2801      	cmp	r0, #1
   b7de4:	d809      	bhi.n	b7dfa <pinAvailable+0x62>
   b7de6:	f000 f86d 	bl	b7ec4 <_Z19__fetch_global_Wirev>
   b7dea:	2100      	movs	r1, #0
   b7dec:	7c00      	ldrb	r0, [r0, #16]
   b7dee:	f7fe fad7 	bl	b63a0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7df2:	f080 0001 	eor.w	r0, r0, #1
   b7df6:	b2c0      	uxtb	r0, r0
   b7df8:	e7d2      	b.n	b7da0 <pinAvailable+0x8>
   b7dfa:	3809      	subs	r0, #9
   b7dfc:	2801      	cmp	r0, #1
   b7dfe:	d8ee      	bhi.n	b7dde <pinAvailable+0x46>
   b7e00:	f000 f8a0 	bl	b7f44 <_Z22__fetch_global_Serial1v>
   b7e04:	7c00      	ldrb	r0, [r0, #16]
   b7e06:	f7fe fb63 	bl	b64d0 <hal_usart_is_enabled>
   b7e0a:	e7f2      	b.n	b7df2 <pinAvailable+0x5a>
   b7e0c:	2003e654 	.word	0x2003e654
   b7e10:	2003e658 	.word	0x2003e658

000b7e14 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e14:	2825      	cmp	r0, #37	; 0x25
{
   b7e16:	b538      	push	{r3, r4, r5, lr}
   b7e18:	4604      	mov	r4, r0
   b7e1a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7e1c:	d80a      	bhi.n	b7e34 <pinMode+0x20>
   b7e1e:	29ff      	cmp	r1, #255	; 0xff
   b7e20:	d008      	beq.n	b7e34 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7e22:	f7ff ffb9 	bl	b7d98 <pinAvailable>
   b7e26:	b128      	cbz	r0, b7e34 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b7e28:	4629      	mov	r1, r5
   b7e2a:	4620      	mov	r0, r4
}
   b7e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b7e30:	f7fe ba56 	b.w	b62e0 <hal_gpio_mode>
}
   b7e34:	bd38      	pop	{r3, r4, r5, pc}

000b7e36 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b7e36:	b538      	push	{r3, r4, r5, lr}
   b7e38:	4604      	mov	r4, r0
   b7e3a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b7e3c:	f7fe fa58 	bl	b62f0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7e40:	28ff      	cmp	r0, #255	; 0xff
   b7e42:	d010      	beq.n	b7e66 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7e44:	2806      	cmp	r0, #6
   b7e46:	d804      	bhi.n	b7e52 <digitalWrite+0x1c>
   b7e48:	234d      	movs	r3, #77	; 0x4d
   b7e4a:	fa23 f000 	lsr.w	r0, r3, r0
   b7e4e:	07c3      	lsls	r3, r0, #31
   b7e50:	d409      	bmi.n	b7e66 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7e52:	4620      	mov	r0, r4
   b7e54:	f7ff ffa0 	bl	b7d98 <pinAvailable>
   b7e58:	b128      	cbz	r0, b7e66 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b7e5a:	4629      	mov	r1, r5
   b7e5c:	4620      	mov	r0, r4
}
   b7e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b7e62:	f7fe ba4d 	b.w	b6300 <hal_gpio_write>
}
   b7e66:	bd38      	pop	{r3, r4, r5, pc}

000b7e68 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b7e68:	b510      	push	{r4, lr}
   b7e6a:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b7e6c:	f7fe fa40 	bl	b62f0 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b7e70:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b7e72:	b2db      	uxtb	r3, r3
   b7e74:	2b01      	cmp	r3, #1
   b7e76:	d908      	bls.n	b7e8a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b7e78:	4620      	mov	r0, r4
   b7e7a:	f7ff ff8d 	bl	b7d98 <pinAvailable>
   b7e7e:	b120      	cbz	r0, b7e8a <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b7e80:	4620      	mov	r0, r4
}
   b7e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b7e86:	f7fe ba43 	b.w	b6310 <hal_gpio_read>
}
   b7e8a:	2000      	movs	r0, #0
   b7e8c:	bd10      	pop	{r4, pc}

000b7e8e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7e8e:	4770      	bx	lr

000b7e90 <_Z17acquireWireBufferv>:
{
   b7e90:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7e92:	4b0a      	ldr	r3, [pc, #40]	; (b7ebc <_Z17acquireWireBufferv+0x2c>)
   b7e94:	6003      	str	r3, [r0, #0]
   b7e96:	2301      	movs	r3, #1
{
   b7e98:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7e9a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7e9c:	4908      	ldr	r1, [pc, #32]	; (b7ec0 <_Z17acquireWireBufferv+0x30>)
   b7e9e:	2020      	movs	r0, #32
   b7ea0:	f000 f874 	bl	b7f8c <_ZnajRKSt9nothrow_t>
	};
   b7ea4:	2520      	movs	r5, #32
   b7ea6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7ea8:	4905      	ldr	r1, [pc, #20]	; (b7ec0 <_Z17acquireWireBufferv+0x30>)
	};
   b7eaa:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7eac:	4628      	mov	r0, r5
   b7eae:	f000 f86d 	bl	b7f8c <_ZnajRKSt9nothrow_t>
	};
   b7eb2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7eb6:	4620      	mov	r0, r4
   b7eb8:	bd38      	pop	{r3, r4, r5, pc}
   b7eba:	bf00      	nop
   b7ebc:	00010018 	.word	0x00010018
   b7ec0:	000bbd84 	.word	0x000bbd84

000b7ec4 <_Z19__fetch_global_Wirev>:
{
   b7ec4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ec6:	4d0e      	ldr	r5, [pc, #56]	; (b7f00 <_Z19__fetch_global_Wirev+0x3c>)
   b7ec8:	7829      	ldrb	r1, [r5, #0]
   b7eca:	f3bf 8f5b 	dmb	ish
   b7ece:	f011 0401 	ands.w	r4, r1, #1
{
   b7ed2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7ed4:	d111      	bne.n	b7efa <_Z19__fetch_global_Wirev+0x36>
   b7ed6:	4628      	mov	r0, r5
   b7ed8:	f7fc fd15 	bl	b4906 <__cxa_guard_acquire>
   b7edc:	b168      	cbz	r0, b7efa <_Z19__fetch_global_Wirev+0x36>
   b7ede:	4668      	mov	r0, sp
   b7ee0:	f7ff ffd6 	bl	b7e90 <_Z17acquireWireBufferv>
   b7ee4:	466a      	mov	r2, sp
   b7ee6:	4621      	mov	r1, r4
   b7ee8:	4806      	ldr	r0, [pc, #24]	; (b7f04 <_Z19__fetch_global_Wirev+0x40>)
   b7eea:	f7ff f83d 	bl	b6f68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7eee:	4628      	mov	r0, r5
   b7ef0:	f7fc fd0e 	bl	b4910 <__cxa_guard_release>
   b7ef4:	4804      	ldr	r0, [pc, #16]	; (b7f08 <_Z19__fetch_global_Wirev+0x44>)
   b7ef6:	f000 f84e 	bl	b7f96 <atexit>
	return wire;
}
   b7efa:	4802      	ldr	r0, [pc, #8]	; (b7f04 <_Z19__fetch_global_Wirev+0x40>)
   b7efc:	b007      	add	sp, #28
   b7efe:	bd30      	pop	{r4, r5, pc}
   b7f00:	2003e72c 	.word	0x2003e72c
   b7f04:	2003e730 	.word	0x2003e730
   b7f08:	000b7e8f 	.word	0x000b7e8f

000b7f0c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f0c:	4770      	bx	lr
	...

000b7f10 <_Z20acquireSerial1Bufferv>:
{
   b7f10:	b538      	push	{r3, r4, r5, lr}
   b7f12:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7f14:	2514      	movs	r5, #20
   b7f16:	462a      	mov	r2, r5
   b7f18:	2100      	movs	r1, #0
   b7f1a:	f000 f854 	bl	b7fc6 <memset>
   b7f1e:	8025      	strh	r5, [r4, #0]
   b7f20:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f22:	4907      	ldr	r1, [pc, #28]	; (b7f40 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7f24:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f26:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7f28:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f2a:	f000 f82f 	bl	b7f8c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f2e:	4904      	ldr	r1, [pc, #16]	; (b7f40 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7f30:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7f32:	4628      	mov	r0, r5
   b7f34:	f000 f82a 	bl	b7f8c <_ZnajRKSt9nothrow_t>
    };
   b7f38:	60e0      	str	r0, [r4, #12]
}
   b7f3a:	4620      	mov	r0, r4
   b7f3c:	bd38      	pop	{r3, r4, r5, pc}
   b7f3e:	bf00      	nop
   b7f40:	000bbd84 	.word	0x000bbd84

000b7f44 <_Z22__fetch_global_Serial1v>:
{
   b7f44:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f46:	4d0e      	ldr	r5, [pc, #56]	; (b7f80 <_Z22__fetch_global_Serial1v+0x3c>)
   b7f48:	7829      	ldrb	r1, [r5, #0]
   b7f4a:	f3bf 8f5b 	dmb	ish
   b7f4e:	f011 0401 	ands.w	r4, r1, #1
{
   b7f52:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7f54:	d111      	bne.n	b7f7a <_Z22__fetch_global_Serial1v+0x36>
   b7f56:	4628      	mov	r0, r5
   b7f58:	f7fc fcd5 	bl	b4906 <__cxa_guard_acquire>
   b7f5c:	b168      	cbz	r0, b7f7a <_Z22__fetch_global_Serial1v+0x36>
   b7f5e:	a801      	add	r0, sp, #4
   b7f60:	f7ff ffd6 	bl	b7f10 <_Z20acquireSerial1Bufferv>
   b7f64:	aa01      	add	r2, sp, #4
   b7f66:	4621      	mov	r1, r4
   b7f68:	4806      	ldr	r0, [pc, #24]	; (b7f84 <_Z22__fetch_global_Serial1v+0x40>)
   b7f6a:	f7ff fd8f 	bl	b7a8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7f6e:	4628      	mov	r0, r5
   b7f70:	f7fc fcce 	bl	b4910 <__cxa_guard_release>
   b7f74:	4804      	ldr	r0, [pc, #16]	; (b7f88 <_Z22__fetch_global_Serial1v+0x44>)
   b7f76:	f000 f80e 	bl	b7f96 <atexit>
    return serial1;
}
   b7f7a:	4802      	ldr	r0, [pc, #8]	; (b7f84 <_Z22__fetch_global_Serial1v+0x40>)
   b7f7c:	b007      	add	sp, #28
   b7f7e:	bd30      	pop	{r4, r5, pc}
   b7f80:	2003e744 	.word	0x2003e744
   b7f84:	2003e748 	.word	0x2003e748
   b7f88:	000b7f0d 	.word	0x000b7f0d

000b7f8c <_ZnajRKSt9nothrow_t>:
   b7f8c:	f7fc bcb7 	b.w	b48fe <_Znaj>

000b7f90 <_ZSt25__throw_bad_function_callv>:
   b7f90:	b508      	push	{r3, lr}
   b7f92:	f7fe fc01 	bl	b6798 <abort>

000b7f96 <atexit>:
   b7f96:	2300      	movs	r3, #0
   b7f98:	4601      	mov	r1, r0
   b7f9a:	461a      	mov	r2, r3
   b7f9c:	4618      	mov	r0, r3
   b7f9e:	f000 b97d 	b.w	b829c <__register_exitproc>

000b7fa2 <atoi>:
   b7fa2:	220a      	movs	r2, #10
   b7fa4:	2100      	movs	r1, #0
   b7fa6:	f000 b96f 	b.w	b8288 <strtol>

000b7faa <memcpy>:
   b7faa:	440a      	add	r2, r1
   b7fac:	4291      	cmp	r1, r2
   b7fae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7fb2:	d100      	bne.n	b7fb6 <memcpy+0xc>
   b7fb4:	4770      	bx	lr
   b7fb6:	b510      	push	{r4, lr}
   b7fb8:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7fc0:	4291      	cmp	r1, r2
   b7fc2:	d1f9      	bne.n	b7fb8 <memcpy+0xe>
   b7fc4:	bd10      	pop	{r4, pc}

000b7fc6 <memset>:
   b7fc6:	4402      	add	r2, r0
   b7fc8:	4603      	mov	r3, r0
   b7fca:	4293      	cmp	r3, r2
   b7fcc:	d100      	bne.n	b7fd0 <memset+0xa>
   b7fce:	4770      	bx	lr
   b7fd0:	f803 1b01 	strb.w	r1, [r3], #1
   b7fd4:	e7f9      	b.n	b7fca <memset+0x4>
	...

000b7fd8 <srand>:
   b7fd8:	b538      	push	{r3, r4, r5, lr}
   b7fda:	4b10      	ldr	r3, [pc, #64]	; (b801c <srand+0x44>)
   b7fdc:	681d      	ldr	r5, [r3, #0]
   b7fde:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7fe0:	4604      	mov	r4, r0
   b7fe2:	b9b3      	cbnz	r3, b8012 <srand+0x3a>
   b7fe4:	2018      	movs	r0, #24
   b7fe6:	f7fe fbb7 	bl	b6758 <malloc>
   b7fea:	4602      	mov	r2, r0
   b7fec:	63a8      	str	r0, [r5, #56]	; 0x38
   b7fee:	b920      	cbnz	r0, b7ffa <srand+0x22>
   b7ff0:	4b0b      	ldr	r3, [pc, #44]	; (b8020 <srand+0x48>)
   b7ff2:	480c      	ldr	r0, [pc, #48]	; (b8024 <srand+0x4c>)
   b7ff4:	2142      	movs	r1, #66	; 0x42
   b7ff6:	f7fe fbe7 	bl	b67c8 <__assert_func>
   b7ffa:	490b      	ldr	r1, [pc, #44]	; (b8028 <srand+0x50>)
   b7ffc:	4b0b      	ldr	r3, [pc, #44]	; (b802c <srand+0x54>)
   b7ffe:	e9c0 1300 	strd	r1, r3, [r0]
   b8002:	4b0b      	ldr	r3, [pc, #44]	; (b8030 <srand+0x58>)
   b8004:	6083      	str	r3, [r0, #8]
   b8006:	230b      	movs	r3, #11
   b8008:	8183      	strh	r3, [r0, #12]
   b800a:	2100      	movs	r1, #0
   b800c:	2001      	movs	r0, #1
   b800e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8012:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8014:	2200      	movs	r2, #0
   b8016:	611c      	str	r4, [r3, #16]
   b8018:	615a      	str	r2, [r3, #20]
   b801a:	bd38      	pop	{r3, r4, r5, pc}
   b801c:	2003de50 	.word	0x2003de50
   b8020:	000bbd85 	.word	0x000bbd85
   b8024:	000bbd9c 	.word	0x000bbd9c
   b8028:	abcd330e 	.word	0xabcd330e
   b802c:	e66d1234 	.word	0xe66d1234
   b8030:	0005deec 	.word	0x0005deec

000b8034 <strcpy>:
   b8034:	4603      	mov	r3, r0
   b8036:	f811 2b01 	ldrb.w	r2, [r1], #1
   b803a:	f803 2b01 	strb.w	r2, [r3], #1
   b803e:	2a00      	cmp	r2, #0
   b8040:	d1f9      	bne.n	b8036 <strcpy+0x2>
   b8042:	4770      	bx	lr

000b8044 <strdup>:
   b8044:	4b02      	ldr	r3, [pc, #8]	; (b8050 <strdup+0xc>)
   b8046:	4601      	mov	r1, r0
   b8048:	6818      	ldr	r0, [r3, #0]
   b804a:	f000 b803 	b.w	b8054 <_strdup_r>
   b804e:	bf00      	nop
   b8050:	2003de50 	.word	0x2003de50

000b8054 <_strdup_r>:
   b8054:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8056:	4604      	mov	r4, r0
   b8058:	4608      	mov	r0, r1
   b805a:	460d      	mov	r5, r1
   b805c:	f7fc fc0a 	bl	b4874 <strlen>
   b8060:	1c42      	adds	r2, r0, #1
   b8062:	4611      	mov	r1, r2
   b8064:	4620      	mov	r0, r4
   b8066:	9201      	str	r2, [sp, #4]
   b8068:	f7fe fb9e 	bl	b67a8 <_malloc_r>
   b806c:	4604      	mov	r4, r0
   b806e:	b118      	cbz	r0, b8078 <_strdup_r+0x24>
   b8070:	9a01      	ldr	r2, [sp, #4]
   b8072:	4629      	mov	r1, r5
   b8074:	f7ff ff99 	bl	b7faa <memcpy>
   b8078:	4620      	mov	r0, r4
   b807a:	b003      	add	sp, #12
   b807c:	bd30      	pop	{r4, r5, pc}

000b807e <strncmp>:
   b807e:	b510      	push	{r4, lr}
   b8080:	b17a      	cbz	r2, b80a2 <strncmp+0x24>
   b8082:	4603      	mov	r3, r0
   b8084:	3901      	subs	r1, #1
   b8086:	1884      	adds	r4, r0, r2
   b8088:	f813 0b01 	ldrb.w	r0, [r3], #1
   b808c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b8090:	4290      	cmp	r0, r2
   b8092:	d101      	bne.n	b8098 <strncmp+0x1a>
   b8094:	42a3      	cmp	r3, r4
   b8096:	d101      	bne.n	b809c <strncmp+0x1e>
   b8098:	1a80      	subs	r0, r0, r2
   b809a:	bd10      	pop	{r4, pc}
   b809c:	2800      	cmp	r0, #0
   b809e:	d1f3      	bne.n	b8088 <strncmp+0xa>
   b80a0:	e7fa      	b.n	b8098 <strncmp+0x1a>
   b80a2:	4610      	mov	r0, r2
   b80a4:	e7f9      	b.n	b809a <strncmp+0x1c>

000b80a6 <strncpy>:
   b80a6:	b510      	push	{r4, lr}
   b80a8:	3901      	subs	r1, #1
   b80aa:	4603      	mov	r3, r0
   b80ac:	b132      	cbz	r2, b80bc <strncpy+0x16>
   b80ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b80b2:	f803 4b01 	strb.w	r4, [r3], #1
   b80b6:	3a01      	subs	r2, #1
   b80b8:	2c00      	cmp	r4, #0
   b80ba:	d1f7      	bne.n	b80ac <strncpy+0x6>
   b80bc:	441a      	add	r2, r3
   b80be:	2100      	movs	r1, #0
   b80c0:	4293      	cmp	r3, r2
   b80c2:	d100      	bne.n	b80c6 <strncpy+0x20>
   b80c4:	bd10      	pop	{r4, pc}
   b80c6:	f803 1b01 	strb.w	r1, [r3], #1
   b80ca:	e7f9      	b.n	b80c0 <strncpy+0x1a>

000b80cc <strtok>:
   b80cc:	4b16      	ldr	r3, [pc, #88]	; (b8128 <strtok+0x5c>)
   b80ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b80d0:	681e      	ldr	r6, [r3, #0]
   b80d2:	6db4      	ldr	r4, [r6, #88]	; 0x58
   b80d4:	4605      	mov	r5, r0
   b80d6:	b9fc      	cbnz	r4, b8118 <strtok+0x4c>
   b80d8:	2050      	movs	r0, #80	; 0x50
   b80da:	9101      	str	r1, [sp, #4]
   b80dc:	f7fe fb3c 	bl	b6758 <malloc>
   b80e0:	9901      	ldr	r1, [sp, #4]
   b80e2:	65b0      	str	r0, [r6, #88]	; 0x58
   b80e4:	4602      	mov	r2, r0
   b80e6:	b920      	cbnz	r0, b80f2 <strtok+0x26>
   b80e8:	4b10      	ldr	r3, [pc, #64]	; (b812c <strtok+0x60>)
   b80ea:	4811      	ldr	r0, [pc, #68]	; (b8130 <strtok+0x64>)
   b80ec:	2157      	movs	r1, #87	; 0x57
   b80ee:	f7fe fb6b 	bl	b67c8 <__assert_func>
   b80f2:	e9c0 4400 	strd	r4, r4, [r0]
   b80f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   b80fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
   b80fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
   b8102:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
   b8106:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
   b810a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
   b810e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
   b8112:	6184      	str	r4, [r0, #24]
   b8114:	7704      	strb	r4, [r0, #28]
   b8116:	6244      	str	r4, [r0, #36]	; 0x24
   b8118:	6db2      	ldr	r2, [r6, #88]	; 0x58
   b811a:	2301      	movs	r3, #1
   b811c:	4628      	mov	r0, r5
   b811e:	b002      	add	sp, #8
   b8120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8124:	f000 b806 	b.w	b8134 <__strtok_r>
   b8128:	2003de50 	.word	0x2003de50
   b812c:	000bbd85 	.word	0x000bbd85
   b8130:	000bbdf5 	.word	0x000bbdf5

000b8134 <__strtok_r>:
   b8134:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8136:	b908      	cbnz	r0, b813c <__strtok_r+0x8>
   b8138:	6810      	ldr	r0, [r2, #0]
   b813a:	b188      	cbz	r0, b8160 <__strtok_r+0x2c>
   b813c:	4604      	mov	r4, r0
   b813e:	4620      	mov	r0, r4
   b8140:	f814 5b01 	ldrb.w	r5, [r4], #1
   b8144:	460f      	mov	r7, r1
   b8146:	f817 6b01 	ldrb.w	r6, [r7], #1
   b814a:	b91e      	cbnz	r6, b8154 <__strtok_r+0x20>
   b814c:	b965      	cbnz	r5, b8168 <__strtok_r+0x34>
   b814e:	6015      	str	r5, [r2, #0]
   b8150:	4628      	mov	r0, r5
   b8152:	e005      	b.n	b8160 <__strtok_r+0x2c>
   b8154:	42b5      	cmp	r5, r6
   b8156:	d1f6      	bne.n	b8146 <__strtok_r+0x12>
   b8158:	2b00      	cmp	r3, #0
   b815a:	d1f0      	bne.n	b813e <__strtok_r+0xa>
   b815c:	6014      	str	r4, [r2, #0]
   b815e:	7003      	strb	r3, [r0, #0]
   b8160:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b8162:	461c      	mov	r4, r3
   b8164:	e00c      	b.n	b8180 <__strtok_r+0x4c>
   b8166:	b915      	cbnz	r5, b816e <__strtok_r+0x3a>
   b8168:	f814 3b01 	ldrb.w	r3, [r4], #1
   b816c:	460e      	mov	r6, r1
   b816e:	f816 5b01 	ldrb.w	r5, [r6], #1
   b8172:	42ab      	cmp	r3, r5
   b8174:	d1f7      	bne.n	b8166 <__strtok_r+0x32>
   b8176:	2b00      	cmp	r3, #0
   b8178:	d0f3      	beq.n	b8162 <__strtok_r+0x2e>
   b817a:	2300      	movs	r3, #0
   b817c:	f804 3c01 	strb.w	r3, [r4, #-1]
   b8180:	6014      	str	r4, [r2, #0]
   b8182:	e7ed      	b.n	b8160 <__strtok_r+0x2c>

000b8184 <_strtol_l.constprop.0>:
   b8184:	2b01      	cmp	r3, #1
   b8186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b818a:	d001      	beq.n	b8190 <_strtol_l.constprop.0+0xc>
   b818c:	2b24      	cmp	r3, #36	; 0x24
   b818e:	d906      	bls.n	b819e <_strtol_l.constprop.0+0x1a>
   b8190:	f7fe fb12 	bl	b67b8 <__errno>
   b8194:	2316      	movs	r3, #22
   b8196:	6003      	str	r3, [r0, #0]
   b8198:	2000      	movs	r0, #0
   b819a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b819e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8284 <_strtol_l.constprop.0+0x100>
   b81a2:	460d      	mov	r5, r1
   b81a4:	462e      	mov	r6, r5
   b81a6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b81aa:	f814 700c 	ldrb.w	r7, [r4, ip]
   b81ae:	f017 0708 	ands.w	r7, r7, #8
   b81b2:	d1f7      	bne.n	b81a4 <_strtol_l.constprop.0+0x20>
   b81b4:	2c2d      	cmp	r4, #45	; 0x2d
   b81b6:	d132      	bne.n	b821e <_strtol_l.constprop.0+0x9a>
   b81b8:	782c      	ldrb	r4, [r5, #0]
   b81ba:	2701      	movs	r7, #1
   b81bc:	1cb5      	adds	r5, r6, #2
   b81be:	2b00      	cmp	r3, #0
   b81c0:	d05b      	beq.n	b827a <_strtol_l.constprop.0+0xf6>
   b81c2:	2b10      	cmp	r3, #16
   b81c4:	d109      	bne.n	b81da <_strtol_l.constprop.0+0x56>
   b81c6:	2c30      	cmp	r4, #48	; 0x30
   b81c8:	d107      	bne.n	b81da <_strtol_l.constprop.0+0x56>
   b81ca:	782c      	ldrb	r4, [r5, #0]
   b81cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b81d0:	2c58      	cmp	r4, #88	; 0x58
   b81d2:	d14d      	bne.n	b8270 <_strtol_l.constprop.0+0xec>
   b81d4:	786c      	ldrb	r4, [r5, #1]
   b81d6:	2310      	movs	r3, #16
   b81d8:	3502      	adds	r5, #2
   b81da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b81de:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b81e2:	f04f 0c00 	mov.w	ip, #0
   b81e6:	fbb8 f9f3 	udiv	r9, r8, r3
   b81ea:	4666      	mov	r6, ip
   b81ec:	fb03 8a19 	mls	sl, r3, r9, r8
   b81f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b81f4:	f1be 0f09 	cmp.w	lr, #9
   b81f8:	d816      	bhi.n	b8228 <_strtol_l.constprop.0+0xa4>
   b81fa:	4674      	mov	r4, lr
   b81fc:	42a3      	cmp	r3, r4
   b81fe:	dd24      	ble.n	b824a <_strtol_l.constprop.0+0xc6>
   b8200:	f1bc 0f00 	cmp.w	ip, #0
   b8204:	db1e      	blt.n	b8244 <_strtol_l.constprop.0+0xc0>
   b8206:	45b1      	cmp	r9, r6
   b8208:	d31c      	bcc.n	b8244 <_strtol_l.constprop.0+0xc0>
   b820a:	d101      	bne.n	b8210 <_strtol_l.constprop.0+0x8c>
   b820c:	45a2      	cmp	sl, r4
   b820e:	db19      	blt.n	b8244 <_strtol_l.constprop.0+0xc0>
   b8210:	fb06 4603 	mla	r6, r6, r3, r4
   b8214:	f04f 0c01 	mov.w	ip, #1
   b8218:	f815 4b01 	ldrb.w	r4, [r5], #1
   b821c:	e7e8      	b.n	b81f0 <_strtol_l.constprop.0+0x6c>
   b821e:	2c2b      	cmp	r4, #43	; 0x2b
   b8220:	bf04      	itt	eq
   b8222:	782c      	ldrbeq	r4, [r5, #0]
   b8224:	1cb5      	addeq	r5, r6, #2
   b8226:	e7ca      	b.n	b81be <_strtol_l.constprop.0+0x3a>
   b8228:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b822c:	f1be 0f19 	cmp.w	lr, #25
   b8230:	d801      	bhi.n	b8236 <_strtol_l.constprop.0+0xb2>
   b8232:	3c37      	subs	r4, #55	; 0x37
   b8234:	e7e2      	b.n	b81fc <_strtol_l.constprop.0+0x78>
   b8236:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b823a:	f1be 0f19 	cmp.w	lr, #25
   b823e:	d804      	bhi.n	b824a <_strtol_l.constprop.0+0xc6>
   b8240:	3c57      	subs	r4, #87	; 0x57
   b8242:	e7db      	b.n	b81fc <_strtol_l.constprop.0+0x78>
   b8244:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8248:	e7e6      	b.n	b8218 <_strtol_l.constprop.0+0x94>
   b824a:	f1bc 0f00 	cmp.w	ip, #0
   b824e:	da05      	bge.n	b825c <_strtol_l.constprop.0+0xd8>
   b8250:	2322      	movs	r3, #34	; 0x22
   b8252:	6003      	str	r3, [r0, #0]
   b8254:	4646      	mov	r6, r8
   b8256:	b942      	cbnz	r2, b826a <_strtol_l.constprop.0+0xe6>
   b8258:	4630      	mov	r0, r6
   b825a:	e79e      	b.n	b819a <_strtol_l.constprop.0+0x16>
   b825c:	b107      	cbz	r7, b8260 <_strtol_l.constprop.0+0xdc>
   b825e:	4276      	negs	r6, r6
   b8260:	2a00      	cmp	r2, #0
   b8262:	d0f9      	beq.n	b8258 <_strtol_l.constprop.0+0xd4>
   b8264:	f1bc 0f00 	cmp.w	ip, #0
   b8268:	d000      	beq.n	b826c <_strtol_l.constprop.0+0xe8>
   b826a:	1e69      	subs	r1, r5, #1
   b826c:	6011      	str	r1, [r2, #0]
   b826e:	e7f3      	b.n	b8258 <_strtol_l.constprop.0+0xd4>
   b8270:	2430      	movs	r4, #48	; 0x30
   b8272:	2b00      	cmp	r3, #0
   b8274:	d1b1      	bne.n	b81da <_strtol_l.constprop.0+0x56>
   b8276:	2308      	movs	r3, #8
   b8278:	e7af      	b.n	b81da <_strtol_l.constprop.0+0x56>
   b827a:	2c30      	cmp	r4, #48	; 0x30
   b827c:	d0a5      	beq.n	b81ca <_strtol_l.constprop.0+0x46>
   b827e:	230a      	movs	r3, #10
   b8280:	e7ab      	b.n	b81da <_strtol_l.constprop.0+0x56>
   b8282:	bf00      	nop
   b8284:	000bbe51 	.word	0x000bbe51

000b8288 <strtol>:
   b8288:	4613      	mov	r3, r2
   b828a:	460a      	mov	r2, r1
   b828c:	4601      	mov	r1, r0
   b828e:	4802      	ldr	r0, [pc, #8]	; (b8298 <strtol+0x10>)
   b8290:	6800      	ldr	r0, [r0, #0]
   b8292:	f7ff bf77 	b.w	b8184 <_strtol_l.constprop.0>
   b8296:	bf00      	nop
   b8298:	2003de50 	.word	0x2003de50

000b829c <__register_exitproc>:
   b829c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b82a0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b835c <__register_exitproc+0xc0>
   b82a4:	4606      	mov	r6, r0
   b82a6:	f8d8 0000 	ldr.w	r0, [r8]
   b82aa:	461f      	mov	r7, r3
   b82ac:	460d      	mov	r5, r1
   b82ae:	4691      	mov	r9, r2
   b82b0:	f000 f856 	bl	b8360 <__retarget_lock_acquire_recursive>
   b82b4:	4b25      	ldr	r3, [pc, #148]	; (b834c <__register_exitproc+0xb0>)
   b82b6:	681c      	ldr	r4, [r3, #0]
   b82b8:	b934      	cbnz	r4, b82c8 <__register_exitproc+0x2c>
   b82ba:	4c25      	ldr	r4, [pc, #148]	; (b8350 <__register_exitproc+0xb4>)
   b82bc:	601c      	str	r4, [r3, #0]
   b82be:	4b25      	ldr	r3, [pc, #148]	; (b8354 <__register_exitproc+0xb8>)
   b82c0:	b113      	cbz	r3, b82c8 <__register_exitproc+0x2c>
   b82c2:	681b      	ldr	r3, [r3, #0]
   b82c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b82c8:	6863      	ldr	r3, [r4, #4]
   b82ca:	2b1f      	cmp	r3, #31
   b82cc:	dd07      	ble.n	b82de <__register_exitproc+0x42>
   b82ce:	f8d8 0000 	ldr.w	r0, [r8]
   b82d2:	f000 f847 	bl	b8364 <__retarget_lock_release_recursive>
   b82d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b82da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b82de:	b34e      	cbz	r6, b8334 <__register_exitproc+0x98>
   b82e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b82e4:	b988      	cbnz	r0, b830a <__register_exitproc+0x6e>
   b82e6:	4b1c      	ldr	r3, [pc, #112]	; (b8358 <__register_exitproc+0xbc>)
   b82e8:	b923      	cbnz	r3, b82f4 <__register_exitproc+0x58>
   b82ea:	f8d8 0000 	ldr.w	r0, [r8]
   b82ee:	f000 f838 	bl	b8362 <__retarget_lock_release>
   b82f2:	e7f0      	b.n	b82d6 <__register_exitproc+0x3a>
   b82f4:	f44f 7084 	mov.w	r0, #264	; 0x108
   b82f8:	f7fe fa2e 	bl	b6758 <malloc>
   b82fc:	2800      	cmp	r0, #0
   b82fe:	d0f4      	beq.n	b82ea <__register_exitproc+0x4e>
   b8300:	2300      	movs	r3, #0
   b8302:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8306:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b830a:	6863      	ldr	r3, [r4, #4]
   b830c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8310:	2201      	movs	r2, #1
   b8312:	409a      	lsls	r2, r3
   b8314:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8318:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b831c:	4313      	orrs	r3, r2
   b831e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8322:	2e02      	cmp	r6, #2
   b8324:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8328:	bf02      	ittt	eq
   b832a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b832e:	4313      	orreq	r3, r2
   b8330:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8334:	6863      	ldr	r3, [r4, #4]
   b8336:	f8d8 0000 	ldr.w	r0, [r8]
   b833a:	1c5a      	adds	r2, r3, #1
   b833c:	3302      	adds	r3, #2
   b833e:	6062      	str	r2, [r4, #4]
   b8340:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8344:	f000 f80e 	bl	b8364 <__retarget_lock_release_recursive>
   b8348:	2000      	movs	r0, #0
   b834a:	e7c6      	b.n	b82da <__register_exitproc+0x3e>
   b834c:	2003e7e8 	.word	0x2003e7e8
   b8350:	2003e75c 	.word	0x2003e75c
   b8354:	00000000 	.word	0x00000000
   b8358:	000b6759 	.word	0x000b6759
   b835c:	2003deb4 	.word	0x2003deb4

000b8360 <__retarget_lock_acquire_recursive>:
   b8360:	4770      	bx	lr

000b8362 <__retarget_lock_release>:
   b8362:	4770      	bx	lr

000b8364 <__retarget_lock_release_recursive>:
   b8364:	4770      	bx	lr

000b8366 <link_code_end>:
	...

000b8368 <dynalib_user>:
   b8368:	4885 000b 48c1 000b 48e9 000b 48ed 000b     .H...H...H...H..
   b8378:	0000 0000 007c 7055 6164 6974 676e 4520     ....|.Updating E
   b8388:	502d 7061 7265 4420 7369 6c70 7961 0a0d     -Paper Display..
   b8398:	0020 6146 6c69 6465 7420 206f 6e69 7469      .Failed to init
   b83a8:	6169 696c 657a 6420 7369 6c70 7961 5400     ialize display.T
   b83b8:	5449 454c 5300 6174 7472 0020 6954 656d     ITLE.Start .Time
   b83c8:	4500 646e 2020 0020 4142 5454 5245 2059     .End   .BATTERY 
   b83d8:	0025 6954 656d 5a20 6e6f 0065 4e49 5453     %.Time Zone.INST
   b83e8:	5552 5443 524f 003a 7453 7261 6873 7069     RUCTOR:.Starship
   b83f8:	4920 5446 2033 202d 5700 6168 2074 6f74      IFT3 - .What to
   b8408:	6520 7078 6365 2074 6600 6f72 206d 6874      expect .from th
   b8418:	2065 656e 7478 0020 6c66 6769 7468 7420     e next .flight t
   b8428:	7365 0074 3025 6932 4100 004d 4d50 2d00     est.%02i.AM.PM.-
   b8438:	5400 4300 6c61 696c 676e 4520 646e 5020     .T.Calling End P
   b8448:	696f 746e 6620 6e75 7463 6f69 2e6e 2e2e     oint function...
   b8458:	6600 6572 2065 656d 6f6d 7972 203a 4900     .free memory: .I
   b8468:	2046 7453 7461 6d65 6e65 2074 7865 6365     F Statement exec
   b8478:	7475 6e69 0067 6f68 6b6f 722d 7365 6f70     uting.hook-respo
   b8488:	736e 2f65 6567 5f74 6164 6174 4900 696e     nse/get_data.Ini
   b8498:	6974 6c61 7a69 6e69 2067 4e50 3335 0032     tializing PN532.
   b84a8:	6553 646e 6e69 2067 4652 4449 6420 7461     Sending RFID dat
   b84b8:	0061 227b 6353 6e61 2273 5b3a 227b 7645     a.{"Scans":[{"Ev
   b84c8:	6e65 4974 2264 253a 2c64 5222 6165 6564     entId":%d,"Reade
   b84d8:	4d72 646f 2265 223a 7325 2c22 5422 6d69     rMode":"%s","Tim
   b84e8:	5365 6174 706d 3a22 2522 2273 222c 6449     eStamp":"%s","Id
   b84f8:	6e65 6974 6966 7265 3a22 2522 2273 2c7d     entifier":"%s"},
   b8508:	227b 7645 6e65 4974 2264 253a 2c64 5222     {"EventId":%d,"R
   b8518:	6165 6564 4d72 646f 2265 223a 7325 2c22     eaderMode":"%s",
   b8528:	5422 6d69 5365 6174 706d 3a22 2522 2273     "TimeStamp":"%s"
   b8538:	222c 6449 6e65 6974 6966 7265 3a22 2522     ,"Identifier":"%
   b8548:	2273 5d7d 007d 6544 6976 6563 6420 7461     s"}]}.Device dat
   b8558:	0061 6c43 6165 6972 676e 5320 7274 6e69     a.Clearing Strin
   b8568:	2067 7562 6666 7265 4600 4941 454c 2044     g buffer.FAILED 
   b8578:	202d 4c50 4145 4553 5320 4143 204e 4741     - PLEASE SCAN AG
   b8588:	4941 214e 2c00 5000 6275 696c 6873 6420     AIN!.,.Publish d
   b8598:	7461 2061 6e6f 6320 756f 746e 5000 6275     ata on count.Pub
   b85a8:	696c 6873 6420 7461 2061 6e6f 7420 6d69     lish data on tim
   b85b8:	0065 444c 204f 6944 6373 6e6f 656e 7463     e.LDO Disconnect
   b85c8:	6465 6400 6665 7561 746c 0020 534d 0042     ed.default .MSB.
   b85d8:	534c 0042 533c 4950 6553 7474 6e69 7367     LSB.<SPISettings
   b85e8:	6420 6665 7561 746c 003e 533c 4950 6553      default>.<SPISe
   b85f8:	7474 6e69 7367 2520 2573 2075 7325 4d20     ttings %s%u %s M
   b8608:	444f 2545 3e75 0000                         ODE%u>..

000b8610 <_ZTVN8particle11SPISettingsE>:
	...
   b8618:	58d1 000b 58a3 000b 58a5 000b               .X...X...X..

000b8624 <_ZL12Font16_Table>:
	...
   b8644:	0000 000c 000c 000c 000c 000c 000c 000c     ................
   b8654:	000c 0000 000c 0000 0000 0000 0000 0000     ................
   b8664:	0000 0000 c01d c01d 8008 8008 8008 0000     ................
	...
   b8684:	0000 800d 800d 800d 800d c03f 001b c03f     ..........?...?.
   b8694:	001b 001b 001b 001b 0000 0000 0000 0000     ................
   b86a4:	0004 801f 8031 8031 0038 001e 000f 8003     ....1.1.8.......
   b86b4:	8031 8031 003f 0004 0004 0000 0000 0000     1.1.?...........
   b86c4:	0000 0018 0024 0024 c018 8007 001e 8031     ....$.$.......1.
   b86d4:	4002 4002 8001 0000 0000 0000 0000 0000     .@.@............
   b86e4:	0000 0000 000f 0018 0018 0018 000c 801d     ................
   b86f4:	0037 0033 801d 0000 0000 0000 0000 0000     7.3.............
   b8704:	0000 0000 0007 0007 0002 0002 0002 0000     ................
	...
   b8724:	0000 0003 0003 0006 000e 000c 000c 000c     ................
   b8734:	000c 000e 0006 0003 0003 0000 0000 0000     ................
   b8744:	0000 0018 0018 000c 0006 0006 0006 0006     ................
   b8754:	0006 0006 000c 001c 0018 0000 0000 0000     ................
   b8764:	0000 0006 0006 c03f c03f 000f 801f 8019     ......?.?.......
	...
   b8788:	0000 0004 0004 0004 803f 0004 0004 0004     ........?.......
	...
   b87b4:	0000 0006 0004 000c 0008 0008 0000 0000     ................
	...
   b87d0:	803f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   b87f4:	0000 000c 000c 0000 0000 0000 0000 0000     ................
   b8804:	c000 c000 8001 8001 0003 0003 0006 000c     ................
   b8814:	000c 0018 0018 0030 0030 0000 0000 0000     ......0.0.......
   b8824:	0000 000e 001b 8031 8031 8031 8031 8031     ......1.1.1.1.1.
   b8834:	8031 001b 000e 0000 0000 0000 0000 0000     1...............
   b8844:	0000 0006 003e 0006 0006 0006 0006 0006     ....>...........
   b8854:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
   b8864:	0000 000f 8019 8031 8031 0003 0006 000c     ......1.1.......
   b8874:	0018 0030 803f 0000 0000 0000 0000 0000     ..0.?...........
   b8884:	0000 003f 8061 8001 0003 001f 8003 8001     ..?.a...........
   b8894:	8001 8061 003f 0000 0000 0000 0000 0000     ..a.?...........
   b88a4:	0000 0007 0007 000f 000b 001b 0013 0033     ..............3.
   b88b4:	803f 0003 800f 0000 0000 0000 0000 0000     ?...............
   b88c4:	0000 801f 0018 0018 0018 001f 8011 8001     ................
   b88d4:	8001 8021 001f 0000 0000 0000 0000 0000     ..!.............
   b88e4:	0000 8007 001c 0018 0030 0037 8039 8031     ........0.7.9.1.
   b88f4:	8031 8019 000f 0000 0000 0000 0000 0000     1...............
   b8904:	0000 007f 0043 0003 0006 0006 0006 0006     ....C...........
   b8914:	000c 000c 000c 0000 0000 0000 0000 0000     ................
   b8924:	0000 001f 8031 8031 8031 001f 8031 8031     ....1.1.1...1.1.
   b8934:	8031 8031 001f 0000 0000 0000 0000 0000     1.1.............
   b8944:	0000 001e 0033 8031 8031 8033 801d 8001     ....3.1.1.3.....
   b8954:	0003 0007 003c 0000 0000 0000 0000 0000     ....<...........
	...
   b896c:	000c 000c 0000 0000 0000 000c 000c 0000     ................
	...
   b898c:	0003 0003 0000 0000 0000 0006 0004 0008     ................
   b899c:	0008 0000 0000 0000 0000 0000 c000 0003     ................
   b89ac:	0004 0018 0060 0018 0004 0003 c000 0000     ....`...........
	...
   b89cc:	0000 c07f 0000 c07f 0000 0000 0000 0000     ................
	...
   b89e8:	0060 0018 0004 0003 c000 0003 0004 0018     `...............
   b89f8:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
   b8a08:	001f 8031 8031 8001 0007 000c 000c 0000     ..1.1...........
   b8a18:	000c 0000 0000 0000 0000 0000 0000 000e     ................
   b8a28:	0011 0021 0021 0027 0029 0029 0027 0020     ..!.!.'.).).'. .
   b8a38:	0011 000e 0000 0000 0000 0000 0000 0000     ................
   b8a48:	003f 000f 0009 8019 8019 801f c030 c030     ?...........0.0.
   b8a58:	e079 0000 0000 0000 0000 0000 0000 0000     y...............
   b8a68:	007f 8031 8031 8031 003f 8031 8031 8031     ..1.1.1.?.1.1.1.
   b8a78:	007f 0000 0000 0000 0000 0000 0000 0000     ................
   b8a88:	401f c030 4060 0060 0060 0060 4060 8030     .@0.`@`.`.`.`@0.
   b8a98:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8aa8:	007f 8031 c030 c030 c030 c030 c030 8031     ..1.0.0.0.0.0.1.
   b8ab8:	007f 0000 0000 0000 0000 0000 0000 0000     ................
   b8ac8:	807f 8030 8030 0032 003e 0032 8030 8030     ..0.0.2.>.2.0.0.
   b8ad8:	807f 0000 0000 0000 0000 0000 0000 0000     ................
   b8ae8:	c07f 4030 4030 0032 003e 0032 0030 0030     ..0@0@2.>.2.0.0.
   b8af8:	007c 0000 0000 0000 0000 0000 0000 0000     |...............
   b8b08:	801e 8031 8060 0060 0060 c067 8061 8031     ..1.`.`.`.g.a.1.
   b8b18:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8b28:	c07b 8031 8031 8031 803f 8031 8031 8031     {.1.1.1.?.1.1.1.
   b8b38:	c07b 0000 0000 0000 0000 0000 0000 0000     {...............
   b8b48:	c03f 0006 0006 0006 0006 0006 0006 0006     ?...............
   b8b58:	c03f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b8b68:	c01f 0003 0003 0003 0003 0063 0063 0063     ..........c.c.c.
   b8b78:	003e 0000 0000 0000 0000 0000 0000 0000     >...............
   b8b88:	c07b 8031 0033 0036 003c 003e 0033 8031     {.1.3.6.<.>.3.1.
   b8b98:	c079 0000 0000 0000 0000 0000 0000 0000     y...............
   b8ba8:	007e 0018 0018 0018 0018 4018 4018 4018     ~..........@.@.@
   b8bb8:	c07f 0000 0000 0000 0000 0000 0000 0000     ................
   b8bc8:	e0e0 c060 c071 c07b c06a c06e c064 c060     ..`.q.{.j.n.d.`.
   b8bd8:	e0fb 0000 0000 0000 0000 0000 0000 0000     ................
   b8be8:	c073 8031 8039 803d 8035 8037 8033 8031     s.1.9.=.5.7.3.1.
   b8bf8:	8079 0000 0000 0000 0000 0000 0000 0000     y...............
   b8c08:	001f 8031 c060 c060 c060 c060 c060 8031     ..1.`.`.`.`.`.1.
   b8c18:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8c28:	007f 8031 8031 8031 8031 003f 0030 0030     ..1.1.1.1.?.0.0.
   b8c38:	007e 0000 0000 0000 0000 0000 0000 0000     ~...............
   b8c48:	001f 8031 c060 c060 c060 c060 c060 8031     ..1.`.`.`.`.`.1.
   b8c58:	001f c00c 801f 0000 0000 0000 0000 0000     ................
   b8c68:	007f 8031 8031 8031 003e 0033 8031 8031     ..1.1.1.>.3.1.1.
   b8c78:	e07c 0000 0000 0000 0000 0000 0000 0000     |...............
   b8c88:	801f 8031 8031 0038 001f 8003 8031 8031     ..1.1.8.....1.1.
   b8c98:	003f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b8ca8:	807f 804c 804c 804c 000c 000c 000c 000c     ..L.L.L.........
   b8cb8:	003f 0000 0000 0000 0000 0000 0000 0000     ?...............
   b8cc8:	c07b 8031 8031 8031 8031 8031 8031 8031     {.1.1.1.1.1.1.1.
   b8cd8:	001f 0000 0000 0000 0000 0000 0000 0000     ................
   b8ce8:	c07b 8031 8031 001b 001b 001b 000a 000e     {.1.1...........
   b8cf8:	000e 0000 0000 0000 0000 0000 0000 0000     ................
   b8d08:	e0fb c060 c064 c06e c06e 802a 803b 803b     ..`.d.n.n.*.;.;.
   b8d18:	8031 0000 0000 0000 0000 0000 0000 0000     1...............
   b8d28:	c07b 8031 001b 000e 000e 000e 001b 8031     {.1...........1.
   b8d38:	c07b 0000 0000 0000 0000 0000 0000 0000     {...............
   b8d48:	e079 c030 8019 000f 0006 0006 0006 0006     y.0.............
   b8d58:	801f 0000 0000 0000 0000 0000 0000 0000     ................
   b8d68:	803f 8021 0023 0006 0004 000c 8018 8030     ?.!.#.........0.
   b8d78:	803f 0000 0000 0000 0000 0000 0000 8007     ?...............
   b8d88:	0006 0006 0006 0006 0006 0006 0006 0006     ................
   b8d98:	0006 0006 8007 0000 0000 0000 0030 0030     ............0.0.
   b8da8:	0018 0018 000c 000c 0006 0003 0003 8001     ................
   b8db8:	8001 c000 c000 0000 0000 0000 0000 001e     ................
   b8dc8:	0006 0006 0006 0006 0006 0006 0006 0006     ................
   b8dd8:	0006 0006 001e 0000 0000 0000 0004 000a     ................
   b8de8:	000a 0011 8020 8020 0000 0000 0000 0000     .... . .........
	...
   b8e20:	0000 e0ff 0008 0004 0002 0000 0000 0000     ................
	...
   b8e4c:	001f 8001 8001 801f 8031 8033 c01d 0000     ........1.3.....
	...
   b8e64:	0000 0070 0030 0030 0037 8039 c030 c030     ..p.0.0.7.9.0.0.
   b8e74:	c030 8039 0077 0000 0000 0000 0000 0000     0.9.w...........
	...
   b8e8c:	801e 8031 8060 0060 8060 8031 001f 0000     ..1.`.`.`.1.....
	...
   b8ea4:	0000 8003 8001 8001 801d 8033 8061 8061     ..........3.a.a.
   b8eb4:	8061 8033 c01d 0000 0000 0000 0000 0000     a.3.............
	...
   b8ecc:	001f 8031 c060 c07f 0060 c030 801f 0000     ..1.`...`.0.....
	...
   b8ee4:	0000 e007 000c 000c 803f 000c 000c 000c     ........?.......
   b8ef4:	000c 000c 803f 0000 0000 0000 0000 0000     ....?...........
	...
   b8f0c:	c01d 8033 8061 8061 8061 8033 801d 8001     ..3.a.a.a.3.....
   b8f1c:	8001 001f 0000 0000 0000 0070 0030 0030     ..........p.0.0.
   b8f2c:	0037 8039 8031 8031 8031 8031 c07b 0000     7.9.1.1.1.1.{...
	...
   b8f44:	0000 0006 0006 0000 001e 0006 0006 0006     ................
   b8f54:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
   b8f64:	0000 0006 0006 0000 003f 0003 0003 0003     ........?.......
   b8f74:	0003 0003 0003 0003 0003 003e 0000 0000     ..........>.....
   b8f84:	0000 0070 0030 0030 8037 0036 003c 003c     ..p.0.0.7.6.<.<.
   b8f94:	0036 0033 c077 0000 0000 0000 0000 0000     6.3.w...........
   b8fa4:	0000 001e 0006 0006 0006 0006 0006 0006     ................
   b8fb4:	0006 0006 c03f 0000 0000 0000 0000 0000     ....?...........
	...
   b8fcc:	807f c036 c036 c036 c036 c036 e076 0000     ..6.6.6.6.6.v...
	...
   b8fec:	0077 8039 8031 8031 8031 8031 c07b 0000     w.9.1.1.1.1.{...
	...
   b900c:	001f 8031 c060 c060 c060 8031 001f 0000     ..1.`.`.`.1.....
	...
   b902c:	0077 8039 c030 c030 c030 8039 0037 0030     w.9.0.0.0.9.7.0.
   b903c:	0030 007c 0000 0000 0000 0000 0000 0000     0.|.............
   b904c:	c01d 8033 8061 8061 8061 8033 801d 8001     ..3.a.a.a.3.....
   b905c:	8001 c007 0000 0000 0000 0000 0000 0000     ................
   b906c:	807b c01c 0018 0018 0018 0018 007f 0000     {...............
	...
   b908c:	801f 8031 003c 001f 8003 8031 003f 0000     ..1.<.....1.?...
	...
   b90a4:	0000 0018 0018 0018 007f 0018 0018 0018     ................
   b90b4:	0018 8018 000f 0000 0000 0000 0000 0000     ................
	...
   b90cc:	8073 8031 8031 8031 8031 8033 c01d 0000     s.1.1.1.1.3.....
	...
   b90ec:	c07b 8031 8031 001b 001b 000e 000e 0000     {.1.1...........
	...
   b910c:	e0f1 c060 c064 c06e 803b 803b 8031 0000     ..`.d.n.;.;.1...
	...
   b912c:	c07b 001b 000e 000e 000e 001b c07b 0000     {...........{...
	...
   b914c:	e079 c030 8019 8019 000b 000f 0006 0006     y.0.............
   b915c:	000c 003e 0000 0000 0000 0000 0000 0000     ..>.............
   b916c:	803f 8021 0003 000e 0018 8030 803f 0000     ?.!.......0.?...
	...
   b9184:	0000 0006 000c 000c 000c 000c 000c 0018     ................
   b9194:	000c 000c 000c 000c 0006 0000 0000 0000     ................
   b91a4:	0000 0006 0006 0006 0006 0006 0006 0006     ................
   b91b4:	0006 0006 0006 0006 0006 0000 0000 0000     ................
   b91c4:	0000 000c 0006 0006 0006 0006 0006 0003     ................
   b91d4:	0006 0006 0006 0006 000c 0000 0000 0000     ................
	...
   b91ec:	0000 0018 8024 0003 0000 0000 0000 0000     ....$...........
	...

000b9204 <_ZL12Font20_Table>:
	...
   b922c:	0000 0007 0007 0007 0007 0007 0007 0007     ................
   b923c:	0002 0002 0000 0000 0007 0007 0000 0000     ................
	...
   b9258:	e01c e01c e01c 4008 4008 4008 0000 0000     .......@.@.@....
	...
   b927c:	c00c c00c c00c c00c c00c f03f f03f c00c     ..........?.?...
   b928c:	c00c f03f f03f c00c c00c c00c c00c c00c     ..?.?...........
	...
   b92a4:	0003 0003 e007 e00f 6018 0018 001f c00f     .........`......
   b92b4:	e000 6018 6018 c01f 801f 0003 0003 0003     ...`.`..........
	...
   b92cc:	0000 001c 0022 0022 0022 601c e001 800f     ...."."."..`....
   b92dc:	003c c031 2002 2002 2002 c001 0000 0000     <.1.. . . ......
	...
   b92f8:	0000 e003 e00f 000c 000c 0006 300f f01f     .............0..
   b9308:	e019 c018 f01f b007 0000 0000 0000 0000     ................
	...
   b9320:	8003 8003 8003 0001 0001 0001 0000 0000     ................
	...
   b9344:	0000 c000 c000 8001 8001 8001 0003 0003     ................
   b9354:	0003 0003 0003 0003 8001 8001 8001 c000     ................
   b9364:	c000 0000 0000 0000 0000 000c 000c 0006     ................
   b9374:	0006 0006 0003 0003 0003 0003 0003 0003     ................
   b9384:	0006 0006 0006 000c 000c 0000 0000 0000     ................
   b9394:	0000 0003 0003 0003 601b e01f 8007 8007     .........`......
   b93a4:	c00f c00c 0000 0000 0000 0000 0000 0000     ................
	...
   b93c0:	0000 0003 0003 0003 0003 f03f f03f 0003     ..........?.?...
   b93d0:	0003 0003 0003 0000 0000 0000 0000 0000     ................
	...
   b93f8:	0000 8003 0003 0003 0006 0006 0004 0000     ................
	...
   b9418:	0000 e03f e03f 0000 0000 0000 0000 0000     ..?.?...........
	...
   b9448:	0000 8003 8003 8003 0000 0000 0000 0000     ................
   b9458:	0000 0000 6000 6000 c000 c000 c000 8001     .....`.`........
   b9468:	8001 0003 0003 0006 0006 000c 000c 000c     ................
   b9478:	0018 0018 0000 0000 0000 0000 0000 800f     ................
   b9488:	c01f c018 6030 6030 6030 6030 6030 6030     ....0`0`0`0`0`0`
   b9498:	6030 c018 c01f 800f 0000 0000 0000 0000     0`..............
   b94a8:	0000 0000 0000 0003 001f 001f 0003 0003     ................
   b94b8:	0003 0003 0003 0003 0003 0003 e01f e01f     ................
	...
   b94d4:	0000 800f c01f e038 6030 6000 c000 8001     ......8.0`.`....
   b94e4:	0003 0006 000c 0018 e03f e03f 0000 0000     ........?.?.....
	...
   b94fc:	0000 800f c03f e030 6000 e000 c007 c007     ....?.0..`......
   b950c:	e000 6000 6000 e060 c07f 803f 0000 0000     ...`.``...?.....
	...
   b9524:	0000 c001 c003 c003 c006 c00c c00c c018     ................
   b9534:	c030 e03f e03f c000 e003 e003 0000 0000     0.?.?...........
	...
   b954c:	0000 c01f c01f 0018 0018 801f c01f e018     ................
   b955c:	6000 6000 6000 e030 c03f 801f 0000 0000     .`.`.`0.?.......
	...
   b9574:	0000 e003 e00f 001e 0018 0038 8037 c03f     ..........8.7.?.
   b9584:	e038 6030 6030 e018 c01f 8007 0000 0000     8.0`0`..........
	...
   b959c:	0000 e03f e03f 6030 6000 c000 c000 c000     ..?.?.0`.`......
   b95ac:	8001 8001 8001 0003 0003 0003 0000 0000     ................
	...
   b95c4:	0000 800f c01f e038 6030 e038 c01f c01f     ......8.0`8.....
   b95d4:	e038 6030 6030 e038 c01f 800f 0000 0000     8.0`0`8.........
	...
   b95ec:	0000 000f c01f c038 6030 6030 e038 e01f     ......8.0`0`8...
   b95fc:	600f e000 c000 c003 803f 003e 0000 0000     .`......?.>.....
	...
   b961c:	0000 8003 8003 8003 0000 0000 0000 8003     ................
   b962c:	8003 8003 0000 0000 0000 0000 0000 0000     ................
	...
   b9644:	0000 c001 c001 c001 0000 0000 0000 8003     ................
   b9654:	0003 0006 0006 0004 0000 0000 0000 0000     ................
   b9664:	0000 0000 0000 3000 f000 c003 0007 001c     .......0........
   b9674:	0078 001c 0007 c003 f000 3000 0000 0000     x..........0....
	...
   b9694:	0000 f07f f07f 0000 0000 f07f f07f 0000     ................
	...
   b96b8:	0000 0030 003c 000f 8003 e000 7800 e000     ..0.<........x..
   b96c8:	8003 000f 003c 0030 0000 0000 0000 0000     ....<.0.........
	...
   b96e0:	800f c01f 6018 6018 6000 c001 8003 0003     .....`.`.`......
   b96f0:	0000 0000 0007 0007 0000 0000 0000 0000     ................
   b9700:	0000 0000 0000 8003 800c 4008 4010 4010     ...........@.@.@
   b9710:	c011 4012 4012 4012 c011 0010 0008 4008     ...@.@.@.......@
   b9720:	8007 0000 0000 0000 0000 0000 0000 0000     ................
   b9730:	801f 801f 8003 c006 c006 c00c 600c e01f     .............`..
   b9740:	e01f 3030 7878 7878 0000 0000 0000 0000     ..00xxxx........
	...
   b9758:	803f c03f 6018 6018 e018 c01f e01f 7018     ?.?..`.`.......p
   b9768:	3018 3018 f03f e03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b9780:	b007 f00f 701c 3038 0030 0030 0030 0030     .....p800.0.0.0.
   b9790:	3038 701c e00f c007 0000 0000 0000 0000     80.p............
	...
   b97a8:	807f c07f e030 7030 3030 3030 3030 3030     ....0.0p00000000
   b97b8:	7030 e030 c07f 807f 0000 0000 0000 0000     0p0.............
	...
   b97d0:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b97e0:	3018 3018 f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b97f8:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b9808:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b9820:	b007 f01f 7018 3030 0030 0030 f831 f831     .....p000.0.1.1.
   b9830:	3030 3018 f01f c007 0000 0000 0000 0000     00.0............
	...
   b9848:	f03c f03c 6018 6018 6018 e01f e01f 6018     <.<..`.`.`.....`
   b9858:	6018 6018 f03c f03c 0000 0000 0000 0000     .`.`<.<.........
	...
   b9870:	e01f e01f 0003 0003 0003 0003 0003 0003     ................
   b9880:	0003 0003 e01f e01f 0000 0000 0000 0000     ................
	...
   b9898:	f803 f803 6000 6000 6000 6000 6030 6030     .....`.`.`.`0`0`
   b98a8:	6030 e030 c03f 800f 0000 0000 0000 0000     0`0.?...........
	...
   b98c0:	f83e f83e e018 8019 001b 001f 801d c018     >.>.............
   b98d0:	c018 6018 783e 383e 0000 0000 0000 0000     ...`>x>8........
	...
   b98e8:	003f 003f 000c 000c 000c 000c 000c 300c     ?.?............0
   b98f8:	300c 300c f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b9910:	7878 7878 7038 f03c b034 b037 b037 3033     xxxx8p<.4.7.7.30
   b9920:	3033 3030 f87c f87c 0000 0000 0000 0000     3000|.|.........
	...
   b9938:	f039 f03d 601c 601e 601e 601b 601b e019     9.=..`.`.`.`.`..
   b9948:	e019 e018 e03e 603e 0000 0000 0000 0000     ....>.>`........
	...
   b9960:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b9970:	7038 e01c c00f 8007 0000 0000 0000 0000     8p..............
	...
   b9988:	c03f e03f 7018 3018 3018 7018 e01f c01f     ?.?..p.0.0.p....
   b9998:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b99b0:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b99c0:	7038 e01c c00f 8007 b007 f00f e00c 0000     8p..............
	...
   b99d8:	c03f e03f 7018 3018 7018 e01f c01f e018     ?.?..p.0.p......
   b99e8:	6018 7018 383e 183e 0000 0000 0000 0000     .`.p>8>.........
	...
   b9a00:	b00f f01f 7038 3030 0038 801f e007 7000     ....8p008......p
   b9a10:	3030 7038 e03f c037 0000 0000 0000 0000     008p?.7.........
	...
   b9a28:	f03f f03f 3033 3033 3033 0003 0003 0003     ?.?.303030......
   b9a38:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b9a50:	f03c f03c 6018 6018 6018 6018 6018 6018     <.<..`.`.`.`.`.`
   b9a60:	6018 e01c c00f 8007 0000 0000 0000 0000     .`..............
	...
   b9a78:	f078 f078 6030 6030 c018 c018 800d 800d     x.x.0`0`........
   b9a88:	800d 0007 0007 0007 0000 0000 0000 0000     ................
	...
   b9aa0:	7c7c 7c7c 1830 9833 9833 9833 d836 d016     ||||0.3.3.3.6...
   b9ab0:	701c 701c 701c 3018 0000 0000 0000 0000     .p.p.p.0........
	...
   b9ac8:	f078 f078 6030 c018 800d 0007 0007 800d     x.x.0`..........
   b9ad8:	c018 6030 f078 f078 0000 0000 0000 0000     ..0`x.x.........
	...
   b9af0:	f03c f03c 6018 c00c 8007 8007 0003 0003     <.<..`..........
   b9b00:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b9b18:	e01f e01f 6018 c018 8001 0003 0003 0006     .....`..........
   b9b28:	600c 6018 e01f e01f 0000 0000 0000 0000     .`.`............
   b9b38:	0000 0000 0000 c003 c003 0003 0003 0003     ................
   b9b48:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b9b58:	0003 c003 c003 0000 0000 0000 0018 0018     ................
   b9b68:	000c 000c 000c 0006 0006 0003 0003 8001     ................
   b9b78:	8001 c000 c000 c000 6000 6000 0000 0000     .........`.`....
   b9b88:	0000 0000 0000 000f 000f 0003 0003 0003     ................
   b9b98:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b9ba8:	0003 000f 000f 0000 0000 0000 0000 0002     ................
   b9bb8:	0007 800d c018 6030 2020 0000 0000 0000     ......0`  ......
	...
   b9c00:	fcff fcff 0000 0004 0003 8000 0000 0000     ................
	...
   b9c34:	0000 c00f e01f 6000 e00f e01f 6038 e030     .......`....8`0.
   b9c44:	f03f 701f 0000 0000 0000 0000 0000 0000     ?..p............
   b9c54:	0000 0070 0070 0030 0030 8037 e03f 6038     ..p.p.0.0.7.?.8`
   b9c64:	3030 3030 3030 6038 e07f 8077 0000 0000     0000008`..w.....
	...
   b9c84:	0000 b007 f01f 3018 3030 0030 0030 3038     .......0000.0.80
   b9c94:	f01f c00f 0000 0000 0000 0000 0000 0000     ................
   b9ca4:	0000 7000 7000 3000 3000 b007 f01f 7018     ...p.p.0.0.....p
   b9cb4:	3030 3030 3030 7038 f81f b807 0000 0000     0000008p........
	...
   b9cd4:	0000 8007 e01f 6018 f03f f03f 0030 3018     .......`?.?.0..0
   b9ce4:	f01f c007 0000 0000 0000 0000 0000 0000     ................
   b9cf4:	0000 f003 f007 0006 0006 e01f e01f 0006     ................
   b9d04:	0006 0006 0006 0006 e01f e01f 0000 0000     ................
	...
   b9d24:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b9d34:	f01f b007 3000 7000 e00f c00f 0000 0000     .....0.p........
   b9d44:	0000 0038 0038 0018 0018 c01b e01f 601c     ..8.8..........`
   b9d54:	6018 6018 6018 6018 f03c f03c 0000 0000     .`.`.`.`<.<.....
	...
   b9d6c:	0000 0003 0003 0000 0000 001f 001f 0003     ................
   b9d7c:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b9d94:	0000 0003 0003 0000 0000 c01f c01f c000     ................
   b9da4:	c000 c000 c000 c000 c000 c000 c000 c001     ................
   b9db4:	803f 003f 0000 0000 0000 0038 0038 0018     ?.?.......8.8...
   b9dc4:	0018 e01b e01b 001b 001e 001e 001b 8019     ................
   b9dd4:	f039 f039 0000 0000 0000 0000 0000 0000     9.9.............
   b9de4:	0000 001f 001f 0003 0003 0003 0003 0003     ................
   b9df4:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b9e14:	0000 e07e f07f 3033 3033 3033 3033 3033     ..~...3030303030
   b9e24:	b87b b87b 0000 0000 0000 0000 0000 0000     {.{.............
	...
   b9e3c:	0000 c03b e03f 601c 6018 6018 6018 6018     ..;.?..`.`.`.`.`
   b9e4c:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b9e64:	0000 8007 e01f 6018 3030 3030 3030 6018     .......`000000.`
   b9e74:	e01f 8007 0000 0000 0000 0000 0000 0000     ................
	...
   b9e8c:	0000 8077 e07f 6038 3030 3030 3030 6038     ..w...8`0000008`
   b9e9c:	e03f 8037 0030 0030 007c 007c 0000 0000     ?.7.0.0.|.|.....
	...
   b9eb4:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b9ec4:	f01f b007 3000 3000 f800 f800 0000 0000     .....0.0........
	...
   b9edc:	0000 e03c f03d 300f 000e 000c 000c 000c     ..<.=..0........
   b9eec:	c03f c03f 0000 0000 0000 0000 0000 0000     ?.?.............
	...
   b9f04:	0000 e007 e01f 6018 001e c00f e001 6018     .......`.......`
   b9f14:	e01f 801f 0000 0000 0000 0000 0000 0000     ................
   b9f24:	0000 0000 000c 000c 000c e03f e03f 000c     ..........?.?...
   b9f34:	000c 000c 000c 300c f00f c007 0000 0000     .......0........
	...
   b9f54:	0000 e038 e038 6018 6018 6018 6018 e018     ..8.8..`.`.`.`..
   b9f64:	f01f 700f 0000 0000 0000 0000 0000 0000     ...p............
	...
   b9f7c:	0000 f078 f078 6030 c018 c018 800d 800d     ..x.x.0`........
   b9f8c:	0007 0007 0000 0000 0000 0000 0000 0000     ................
	...
   b9fa4:	0000 f078 f078 6032 6032 e037 c01d c01d     ..x.x.2`2`7.....
   b9fb4:	c018 c018 0000 0000 0000 0000 0000 0000     ................
	...
   b9fcc:	0000 f03c f03c c00c 8007 0003 8007 c00c     ..<.<...........
   b9fdc:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b9ff4:	0000 f078 f078 6030 c018 c018 800d 800f     ..x.x.0`........
   ba004:	0007 0006 0006 000c 007f 007f 0000 0000     ................
	...
   ba01c:	0000 e01f e01f c018 8001 0003 0006 600c     ...............`
   ba02c:	e01f e01f 0000 0000 0000 0000 0000 0000     ................
   ba03c:	0000 c001 c003 0003 0003 0003 0003 0003     ................
   ba04c:	0007 000e 0007 0003 0003 0003 0003 c003     ................
   ba05c:	c001 0000 0000 0000 0000 0003 0003 0003     ................
   ba06c:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   ba07c:	0003 0003 0003 0003 0003 0000 0000 0000     ................
   ba08c:	0000 001c 001e 0006 0006 0006 0006 0006     ................
   ba09c:	0007 8003 0007 0006 0006 0006 0006 001e     ................
   ba0ac:	001c 0000 0000 0000 0000 0000 0000 0000     ................
   ba0bc:	0000 0000 000e 303f f033 e001 0000 0000     ......?03.......
	...

000ba0dc <_ZL12Font24_Table>:
	...
   ba128:	0000 8003 0300 0080 8003 0300 0080 8003     ................
   ba138:	0300 0080 8003 0300 0080 8003 0100 0000     ................
   ba148:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
   ba174:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
   ba184:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
   ba1b8:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
   ba1c8:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
   ba1d8:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
   ba1e8:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
   ba1f8:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
   ba208:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
   ba218:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
   ba228:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
   ba248:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
   ba258:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
   ba268:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
   ba298:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
   ba2a8:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
   ba2b8:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
   ba2dc:	0300 0080 8003 0300 0080 0001 0100 0000     ................
   ba2ec:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
   ba320:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
   ba330:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
   ba340:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
   ba350:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
   ba368:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
   ba378:	0700 0000 8003 0300 0080 8003 0300 0080     ................
   ba388:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
   ba398:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
   ba3b0:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
   ba3c0:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
   ba400:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
   ba410:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
   ba420:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
   ba464:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
   ba474:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
   ba49c:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
   ba4f4:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   ba514:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
   ba524:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
   ba534:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
   ba544:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
   ba560:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
   ba570:	1800 0018 1818 1800 0018 1818 1800 0018     ................
   ba580:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
   ba5a8:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
   ba5b8:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   ba5c8:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
   ba5f0:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
   ba600:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
   ba610:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
   ba638:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
   ba648:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
   ba658:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
   ba680:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
   ba690:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
   ba6a0:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
   ba6c8:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
   ba6d8:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
   ba6e8:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
   ba710:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
   ba720:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
   ba730:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
   ba758:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
   ba768:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
   ba778:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
   ba7a0:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
   ba7b0:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
   ba7c0:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
   ba7e8:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
   ba7f8:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
   ba808:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
   ba83c:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   ba854:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   ba884:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
   ba89c:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
   ba8c8:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
   ba8d8:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
   ba8e8:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
   ba918:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
   ba928:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   ba958:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
   ba968:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
   ba978:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
   ba99c:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
   ba9ac:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
   ba9bc:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
   ba9e0:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
   ba9f0:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
   baa00:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
   baa10:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
   baa2c:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
   baa3c:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
   baa4c:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
   baa74:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   baa84:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
   baa94:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
   baabc:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   baacc:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
   baadc:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
   bab04:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
   bab14:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
   bab24:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
   bab4c:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
   bab5c:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
   bab6c:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
   bab94:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
   baba4:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
   babb4:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   babdc:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   babec:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
   babfc:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
   bac24:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   bac34:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
   bac44:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   bac6c:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
   bac7c:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bac8c:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
   bacb4:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
   bacc4:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
   bacd4:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
   bacfc:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
   bad0c:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
   bad1c:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
   bad44:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
   bad54:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
   bad64:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
   bad8c:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
   bad9c:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
   badac:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
   badd4:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
   bade4:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
   badf4:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
   bae1c:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   bae2c:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   bae3c:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
   bae64:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
   bae74:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
   bae84:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   baeac:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   baebc:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   baecc:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
   baedc:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
   baef4:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   baf04:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
   baf14:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
   baf3c:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
   baf4c:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
   baf5c:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
   baf84:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
   baf94:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
   bafa4:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   bafcc:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   bafdc:	1818 1800 0018 1818 1800 0018 1818 1800     ................
   bafec:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
   bb014:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
   bb024:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
   bb034:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
   bb05c:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
   bb06c:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
   bb07c:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
   bb0a4:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
   bb0b4:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
   bb0c4:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
   bb0ec:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
   bb0fc:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
   bb10c:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   bb134:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
   bb144:	c018 0100 0080 0003 0600 0018 180c 1800     ................
   bb154:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
   bb178:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
   bb188:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb198:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bb1a8:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
   bb1b8:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
   bb1c8:	000e 0600 0000 0006 0300 0000 0003 0100     ................
   bb1d8:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
   bb1e8:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
   bb208:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
   bb218:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb228:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bb238:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
   bb250:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
   bb260:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
   bb2d4:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
   bb2e4:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
   bb334:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
   bb344:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
   bb354:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb370:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
   bb380:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
   bb390:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
   bb3c4:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
   bb3d4:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
   bb3e4:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb400:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
   bb410:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
   bb420:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
   bb454:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
   bb464:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
   bb474:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb490:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
   bb4a0:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
   bb4b0:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
   bb4e4:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   bb4f4:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   bb504:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
   bb514:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
   bb524:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
   bb534:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
   bb544:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   bb568:	0000 8001 0100 0080 0000 0000 0000 801f     ................
   bb578:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
   bb588:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   bb5b0:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
   bb5c0:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
   bb5d0:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
   bb5e0:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
   bb5f8:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
   bb608:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
   bb618:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
   bb640:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
   bb650:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bb660:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   bb694:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
   bb6a4:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
   bb6b4:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb6dc:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
   bb6ec:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
   bb6fc:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
   bb724:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
   bb734:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
   bb744:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb76c:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
   bb77c:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
   bb78c:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
   bb7b4:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   bb7c4:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   bb7d4:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
   bb7e4:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb7fc:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
   bb80c:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
   bb81c:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   bb844:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
   bb854:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
   bb864:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb880:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
   bb890:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
   bb8a0:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
   bb8d4:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
   bb8e4:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
   bb8f4:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb91c:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
   bb92c:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
   bb93c:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bb964:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
   bb974:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
   bb984:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
   bb9ac:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
   bb9bc:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
   bb9cc:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
   bb9f4:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
   bba04:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
   bba14:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
   bba24:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bba3c:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
   bba4c:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
   bba5c:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   bba78:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
   bba88:	0100 0080 8001 0100 0080 8003 0700 0000     ................
   bba98:	8003 0100 0080 8001 0100 0080 8001 0100     ................
   bbaa8:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
   bbac0:	0000 8001 0100 0080 8001 0100 0080 8001     ................
   bbad0:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   bbae0:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   bbaf0:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
   bbb08:	0000 0007 0700 0080 8001 0100 0080 8001     ................
   bbb18:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
   bbb28:	c001 0100 0080 8001 0100 0080 8001 0100     ................
   bbb38:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
   bbb64:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...
   bbb94:	0030 6177 656b 7520 2070 7265 6f72 2172     0.wake up error!
   bbba4:	6e00 206f 6163 6472 0021 6c66 7361 0065     .no card!.flase.
   bbbb4:	6572 6461 6520 7272 726f 0021 6572 6461     read error!.read
   bbbc4:	7420 6d69 6f65 7475 0021 6e75 6e6b 776f      timeout!.unknow
   bbbd4:	206e 7265 6f72 2172 0000 0000               n error!....

000bbbe0 <_ZTV17DFRobot_PN532_IIC>:
	...
   bbbe8:	5d45 000b 60db 000b                         E]...`..

000bbbf0 <_ZTVN5spark13CellularClassE>:
	...
   bbbf8:	68bf 000b 68b5 000b 68ab 000b 686d 000b     .h...h...h..mh..
   bbc08:	495d 000b 689f 000b 7165 000b 716d 000b     ]I...h..eq..mq..
   bbc18:	6893 000b 688b 000b 6881 000b 6877 000b     .h...h...h..wh..
   bbc28:	719d 000b                                   .q..

000bbc2c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bbc34:	68f9 000b 68ff 000b 693d 000b 690d 000b     .h...h..=i...i..
   bbc44:	68fb 000b                                   .h..

000bbc48 <_ZTVN5spark13EthernetClassE>:
	...
   bbc50:	6ef3 000b 6ee9 000b 6edf 000b 6ed5 000b     .n...n...n...n..
   bbc60:	6ec9 000b 6ebd 000b 7165 000b 716d 000b     .n...n..eq..mq..
   bbc70:	6eb1 000b 6ea9 000b 6e9f 000b 6e95 000b     .n...n...n...n..
   bbc80:	719d 000b                                   .q..

000bbc84 <_ZTV7TwoWire>:
	...
   bbc8c:	6f11 000b 6f5b 000b 6f33 000b 6f13 000b     .o..[o..3o...o..
   bbc9c:	6f3b 000b 6f43 000b 6f4b 000b 6f53 000b     ;o..Co..Ko..So..

000bbcac <_ZTV9IPAddress>:
	...
   bbcb4:	7035 000b 7025 000b 7027 000b 7061 0070     5p..%p..'p..app.

000bbcc4 <_ZTVN5spark12NetworkClassE>:
	...
   bbccc:	7125 000b 712f 000b 7139 000b 7143 000b     %q../q..9q..Cq..
   bbcdc:	714d 000b 7159 000b 7165 000b 716d 000b     Mq..Yq..eq..mq..
   bbcec:	7175 000b 7181 000b 7189 000b 7193 000b     uq...q...q...q..
   bbcfc:	719d 000b                                   .q..

000bbd00 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bbd00:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   bbd10:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   bbd20:	6d69 0065                                   ime.

000bbd24 <_ZTV11USARTSerial>:
	...
   bbd2c:	7a11 000b 7a7d 000b 7a55 000b 7289 000b     .z..}z..Uz...r..
   bbd3c:	7a25 000b 7a41 000b 7a33 000b 7a4f 000b     %z..Az..3z..Oz..
   bbd4c:	7a13 000b 7a17 000b                         .z...z..

000bbd54 <_ZTV9USBSerial>:
	...
   bbd5c:	7abb 000b 7b23 000b 7af9 000b 7289 000b     .z..#{...z...r..
   bbd6c:	7aeb 000b 7abd 000b 7acd 000b 7b1d 000b     .z...z...z...{..
   bbd7c:	7add 000b 7ab5 000b                         .z...z..

000bbd84 <_ZSt7nothrow>:
   bbd84:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   bbd94:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   bbda4:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   bbdb4:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   bbdc4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   bbdd4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   bbde4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   bbdf4:	2f00 6d74 2f70 656a 6b6e 6e69 2d73 4347     ./tmp/jenkins-GC
   bbe04:	2d43 3031 702d 7069 6c65 6e69 2d65 3834     C-10-pipeline-48
   bbe14:	325f 3230 3130 3231 5f34 3631 3630 3831     _20201124_160618
   bbe24:	3630 3933 732f 6372 6e2f 7765 696c 2f62     0639/src/newlib/
   bbe34:	656e 6c77 6269 6c2f 6269 2f63 7473 6972     newlib/libc/stri
   bbe44:	676e 732f 7274 6f74 2e6b 0063               ng/strtok.c.

000bbe50 <_ctype_>:
   bbe50:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   bbe60:	2020 2020 2020 2020 2020 2020 2020 2020                     
   bbe70:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   bbe80:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   bbe90:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   bbea0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   bbeb0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   bbec0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   bbed0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000bbf51 <link_const_data_end>:
   bbf51:	00          	.byte	0x00
	...

000bbf54 <link_constructors_location>:
   bbf54:	000b50b9 	.word	0x000b50b9
   bbf58:	000b685d 	.word	0x000b685d
   bbf5c:	000b68c9 	.word	0x000b68c9
   bbf60:	000b6efd 	.word	0x000b6efd
   bbf64:	000b7115 	.word	0x000b7115
   bbf68:	000b7275 	.word	0x000b7275
   bbf6c:	000b73b1 	.word	0x000b73b1
   bbf70:	000b77fd 	.word	0x000b77fd
   bbf74:	000b79fd 	.word	0x000b79fd
