
/Users/friedl/Desktop/Projects/PN532_RFID/target/5.5.0/bsom/PN532_RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005088  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b90a4  000b90a4  000090a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000007c  2003ba30  000b90c8  0000ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00002d44  2003baac  2003baac  0001baac  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b9144  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b9148  000b9148  00019148  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b914e  000b914e  0001914e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b9172  000b9172  00019172  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00149fff  00000000  00000000  00019176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00015276  00000000  00000000  00163175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003d615  00000000  00000000  001783eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002da0  00000000  00000000  001b5a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000ac48  00000000  00000000  001b87a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d825  00000000  00000000  001c33e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00048376  00000000  00000000  00200c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014163a  00000000  00000000  00248f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00008248  00000000  00000000  0038a5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f85d 	bl	b60fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f002 f865 	bl	b6118 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003ba30 	.word	0x2003ba30
   b4058:	000b90c8 	.word	0x000b90c8
   b405c:	2003baac 	.word	0x2003baac
   b4060:	2003baac 	.word	0x2003baac
   b4064:	2003e7f0 	.word	0x2003e7f0

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 ff11 	bl	b5e94 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b9080 	.word	0x000b9080
   b408c:	000b90a4 	.word	0x000b90a4

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b814 	b.w	b40bc <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f995 	bl	b43c4 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 beb1 	b.w	b5e04 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f001 b90d 	b.w	b52c0 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f001 b913 	b.w	b52d0 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr
	...

000b40bc <setup>:
/////--  MAX17201 Fuel Gauge declarations --/////
char msgFG[64];
max1720x gauge;


void setup() {
   b40bc:	b508      	push	{r3, lr}

Serial.begin(115200);
   b40be:	f001 fe59 	bl	b5d74 <_Z16_fetch_usbserialv>
   b40c2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40c6:	f001 fe49 	bl	b5d5c <_ZN9USBSerial5beginEl>
//delay(2000);                                      // Waits for the initial measurements to be made

// pinMode(D23, OUTPUT);
// digitalWrite(D23, LOW);

Serial.println();
   b40ca:	f001 fe53 	bl	b5d74 <_Z16_fetch_usbserialv>
   b40ce:	f001 fba8 	bl	b5822 <_ZN5Print7printlnEv>
Serial.print("Initializing e-Paper display");
   b40d2:	f001 fe4f 	bl	b5d74 <_Z16_fetch_usbserialv>
   b40d6:	490c      	ldr	r1, [pc, #48]	; (b4108 <setup+0x4c>)
   b40d8:	f001 fb9c 	bl	b5814 <_ZN5Print5printEPKc>
if (epd.Init() != 0) { 
   b40dc:	480b      	ldr	r0, [pc, #44]	; (b410c <setup+0x50>)
   b40de:	f000 fa36 	bl	b454e <_ZN3Epd4InitEv>
   b40e2:	b130      	cbz	r0, b40f2 <setup+0x36>
  Serial.print("Failed to initialize display");
   b40e4:	f001 fe46 	bl	b5d74 <_Z16_fetch_usbserialv>
 Serial.println();
 Serial.println("Waiting for a card......");  

//I2C_Scanner();

}
   b40e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.print("Failed to initialize display");
   b40ec:	4908      	ldr	r1, [pc, #32]	; (b4110 <setup+0x54>)
   b40ee:	f001 bb91 	b.w	b5814 <_ZN5Print5printEPKc>
 Serial.println();
   b40f2:	f001 fe3f 	bl	b5d74 <_Z16_fetch_usbserialv>
   b40f6:	f001 fb94 	bl	b5822 <_ZN5Print7printlnEv>
 Serial.println("Waiting for a card......");  
   b40fa:	f001 fe3b 	bl	b5d74 <_Z16_fetch_usbserialv>
}
   b40fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 Serial.println("Waiting for a card......");  
   b4102:	4904      	ldr	r1, [pc, #16]	; (b4114 <setup+0x58>)
   b4104:	f001 bb99 	b.w	b583a <_ZN5Print7printlnEPKc>
   b4108:	000b629c 	.word	0x000b629c
   b410c:	2003bb2c 	.word	0x2003bb2c
   b4110:	000b62b9 	.word	0x000b62b9
   b4114:	000b62d6 	.word	0x000b62d6

000b4118 <_Z3EPDv>:


//////////////////// E-PAPER START //////////////////////


void EPD() {
   b4118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  Serial.println("Constructing message for display...");

  VAR1 = "Dining Room";
   b411c:	4e91      	ldr	r6, [pc, #580]	; (b4364 <_Z3EPDv+0x24c>)
  VAR2 = "Mars here we come";
   b411e:	f8df b294 	ldr.w	fp, [pc, #660]	; b43b4 <_Z3EPDv+0x29c>
  VAR3 = "10:00";
   b4122:	f8df a294 	ldr.w	sl, [pc, #660]	; b43b8 <_Z3EPDv+0x2a0>
  VAR4 = "12:00";
   b4126:	f8df 9294 	ldr.w	r9, [pc, #660]	; b43bc <_Z3EPDv+0x2a4>
  VAR5 = "Stevie";
  VAR6 = "Wonder";
  SCAN = "ERROR";
   b412a:	f8df 8294 	ldr.w	r8, [pc, #660]	; b43c0 <_Z3EPDv+0x2a8>
  
  epd.display_NUM(EPD_3IN52_WHITE);
   b412e:	4d8e      	ldr	r5, [pc, #568]	; (b4368 <_Z3EPDv+0x250>)

  Paint paint(image, 240, 360);     // width should be the multiple of 8   
  paint.SetRotate(3);               // Top right (0,0)
  paint.Clear(UNCOLORED);

  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
   b4130:	4f8e      	ldr	r7, [pc, #568]	; (b436c <_Z3EPDv+0x254>)
void EPD() {
   b4132:	b095      	sub	sp, #84	; 0x54
  Serial.println("Constructing message for display...");
   b4134:	f001 fe1e 	bl	b5d74 <_Z16_fetch_usbserialv>
   b4138:	498d      	ldr	r1, [pc, #564]	; (b4370 <_Z3EPDv+0x258>)
   b413a:	f001 fb7e 	bl	b583a <_ZN5Print7printlnEPKc>
  VAR1 = "Dining Room";
   b413e:	498d      	ldr	r1, [pc, #564]	; (b4374 <_Z3EPDv+0x25c>)
   b4140:	4630      	mov	r0, r6
   b4142:	f001 fd00 	bl	b5b46 <_ZN6StringaSEPKc>
  VAR2 = "Mars here we come";
   b4146:	498c      	ldr	r1, [pc, #560]	; (b4378 <_Z3EPDv+0x260>)
   b4148:	4658      	mov	r0, fp
   b414a:	f001 fcfc 	bl	b5b46 <_ZN6StringaSEPKc>
  VAR3 = "10:00";
   b414e:	498b      	ldr	r1, [pc, #556]	; (b437c <_Z3EPDv+0x264>)
   b4150:	4650      	mov	r0, sl
   b4152:	f001 fcf8 	bl	b5b46 <_ZN6StringaSEPKc>
  VAR4 = "12:00";
   b4156:	498a      	ldr	r1, [pc, #552]	; (b4380 <_Z3EPDv+0x268>)
   b4158:	4648      	mov	r0, r9
   b415a:	f001 fcf4 	bl	b5b46 <_ZN6StringaSEPKc>
  VAR5 = "Stevie";
   b415e:	4989      	ldr	r1, [pc, #548]	; (b4384 <_Z3EPDv+0x26c>)
   b4160:	4889      	ldr	r0, [pc, #548]	; (b4388 <_Z3EPDv+0x270>)
   b4162:	f001 fcf0 	bl	b5b46 <_ZN6StringaSEPKc>
  VAR6 = "Wonder";
   b4166:	4989      	ldr	r1, [pc, #548]	; (b438c <_Z3EPDv+0x274>)
   b4168:	4889      	ldr	r0, [pc, #548]	; (b4390 <_Z3EPDv+0x278>)
   b416a:	f001 fcec 	bl	b5b46 <_ZN6StringaSEPKc>
  SCAN = "ERROR";
   b416e:	4989      	ldr	r1, [pc, #548]	; (b4394 <_Z3EPDv+0x27c>)
   b4170:	4640      	mov	r0, r8
   b4172:	f001 fce8 	bl	b5b46 <_ZN6StringaSEPKc>
  epd.display_NUM(EPD_3IN52_WHITE);
   b4176:	21ff      	movs	r1, #255	; 0xff
   b4178:	4628      	mov	r0, r5
   b417a:	f000 fb2b 	bl	b47d4 <_ZN3Epd11display_NUMEh>
  epd.lut_GC();
   b417e:	4628      	mov	r0, r5
   b4180:	f000 fa72 	bl	b4668 <_ZN3Epd6lut_GCEv>
  epd.Clear();
   b4184:	4628      	mov	r0, r5
   b4186:	f000 fb94 	bl	b48b2 <_ZN3Epd5ClearEv>
  epd.refresh();
   b418a:	4628      	mov	r0, r5
   b418c:	f000 fa5b 	bl	b4646 <_ZN3Epd7refreshEv>
  delay(500);
   b4190:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4194:	f001 f8c4 	bl	b5320 <delay>
  epd.SendCommand(0x50);
   b4198:	4628      	mov	r0, r5
   b419a:	2150      	movs	r1, #80	; 0x50
   b419c:	f000 f98b 	bl	b44b6 <_ZN3Epd11SendCommandEh>
  epd.SendData(0x17);
   b41a0:	4628      	mov	r0, r5
   b41a2:	2117      	movs	r1, #23
   b41a4:	f000 f992 	bl	b44cc <_ZN3Epd8SendDataEh>
  Paint paint(image, 240, 360);     // width should be the multiple of 8   
   b41a8:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b41ac:	22f0      	movs	r2, #240	; 0xf0
   b41ae:	497a      	ldr	r1, [pc, #488]	; (b4398 <_Z3EPDv+0x280>)
   b41b0:	a804      	add	r0, sp, #16
   b41b2:	f000 fc46 	bl	b4a42 <_ZN5PaintC1EPhii>
  paint.SetRotate(3);               // Top right (0,0)
   b41b6:	a804      	add	r0, sp, #16
   b41b8:	2103      	movs	r1, #3
   b41ba:	f000 fc8e 	bl	b4ada <_ZN5Paint9SetRotateEi>
  paint.Clear(UNCOLORED);
   b41be:	a804      	add	r0, sp, #16
   b41c0:	2101      	movs	r1, #1
  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
   b41c2:	2400      	movs	r4, #0
  paint.Clear(UNCOLORED);
   b41c4:	f000 fc6e 	bl	b4aa4 <_ZN5Paint5ClearEi>
  paint.DrawStringAt(5, 5, "ROOM: ", &Font20, COLORED);
   b41c8:	2205      	movs	r2, #5
   b41ca:	4611      	mov	r1, r2
   b41cc:	4b73      	ldr	r3, [pc, #460]	; (b439c <_Z3EPDv+0x284>)
   b41ce:	9401      	str	r4, [sp, #4]
   b41d0:	a804      	add	r0, sp, #16
   b41d2:	9700      	str	r7, [sp, #0]
   b41d4:	f000 fd00 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 5, String(VAR1), &Font24, COLORED);
   b41d8:	4631      	mov	r1, r6
   b41da:	a810      	add	r0, sp, #64	; 0x40
   b41dc:	4e70      	ldr	r6, [pc, #448]	; (b43a0 <_Z3EPDv+0x288>)
   b41de:	f001 fca7 	bl	b5b30 <_ZN6StringC1ERKS_>
   b41e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b41e4:	9600      	str	r6, [sp, #0]
   b41e6:	2205      	movs	r2, #5
   b41e8:	2164      	movs	r1, #100	; 0x64
   b41ea:	a804      	add	r0, sp, #16
   b41ec:	9401      	str	r4, [sp, #4]
   b41ee:	f000 fcf3 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b41f2:	a810      	add	r0, sp, #64	; 0x40
   b41f4:	f001 fc2e 	bl	b5a54 <_ZN6StringD1Ev>

  paint.DrawStringAt(5, 35, "TITLE: ", &Font20, COLORED);
   b41f8:	4b6a      	ldr	r3, [pc, #424]	; (b43a4 <_Z3EPDv+0x28c>)
   b41fa:	2223      	movs	r2, #35	; 0x23
   b41fc:	a804      	add	r0, sp, #16
   b41fe:	e9cd 7400 	strd	r7, r4, [sp]
   b4202:	2105      	movs	r1, #5
   b4204:	f000 fce8 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 35, String(VAR2), &Font24, COLORED);
   b4208:	4659      	mov	r1, fp
   b420a:	a810      	add	r0, sp, #64	; 0x40
   b420c:	f001 fc90 	bl	b5b30 <_ZN6StringC1ERKS_>
   b4210:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4212:	e9cd 6400 	strd	r6, r4, [sp]
   b4216:	2223      	movs	r2, #35	; 0x23
   b4218:	2164      	movs	r1, #100	; 0x64
   b421a:	a804      	add	r0, sp, #16
   b421c:	f000 fcdc 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4220:	a810      	add	r0, sp, #64	; 0x40
   b4222:	f001 fc17 	bl	b5a54 <_ZN6StringD1Ev>

  paint.DrawStringAt(5, 65, "TIME: ", &Font20, COLORED);
   b4226:	4b60      	ldr	r3, [pc, #384]	; (b43a8 <_Z3EPDv+0x290>)
   b4228:	2241      	movs	r2, #65	; 0x41
   b422a:	a804      	add	r0, sp, #16
   b422c:	e9cd 7400 	strd	r7, r4, [sp]
   b4230:	2105      	movs	r1, #5
   b4232:	f000 fcd1 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(100, 65, String(VAR3) + " - " + String(VAR4), &Font24, COLORED);
   b4236:	4651      	mov	r1, sl
   b4238:	a808      	add	r0, sp, #32
   b423a:	f001 fc79 	bl	b5b30 <_ZN6StringC1ERKS_>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   b423e:	a908      	add	r1, sp, #32
   b4240:	a80c      	add	r0, sp, #48	; 0x30
   b4242:	f001 fc75 	bl	b5b30 <_ZN6StringC1ERKS_>
   b4246:	4959      	ldr	r1, [pc, #356]	; (b43ac <_Z3EPDv+0x294>)
   b4248:	a80c      	add	r0, sp, #48	; 0x30
   b424a:	f001 fcb1 	bl	b5bb0 <_ZplRK15StringSumHelperPKc>
   b424e:	4649      	mov	r1, r9
   b4250:	4682      	mov	sl, r0
   b4252:	a810      	add	r0, sp, #64	; 0x40
   b4254:	f001 fc6c 	bl	b5b30 <_ZN6StringC1ERKS_>
   b4258:	a910      	add	r1, sp, #64	; 0x40
   b425a:	4650      	mov	r0, sl
   b425c:	f001 fc9c 	bl	b5b98 <_ZplRK15StringSumHelperRK6String>
   b4260:	e9cd 6400 	strd	r6, r4, [sp]
   b4264:	2241      	movs	r2, #65	; 0x41
   b4266:	6803      	ldr	r3, [r0, #0]
   b4268:	2164      	movs	r1, #100	; 0x64
   b426a:	a804      	add	r0, sp, #16
   b426c:	f000 fcb4 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4270:	a810      	add	r0, sp, #64	; 0x40
   b4272:	f001 fbef 	bl	b5a54 <_ZN6StringD1Ev>
class StringSumHelper : public String
   b4276:	a80c      	add	r0, sp, #48	; 0x30
   b4278:	f001 fbec 	bl	b5a54 <_ZN6StringD1Ev>
   b427c:	a808      	add	r0, sp, #32
   b427e:	f001 fbe9 	bl	b5a54 <_ZN6StringD1Ev>

  paint.DrawHorizontalLine(0,136,360,COLORED);
   b4282:	4621      	mov	r1, r4
   b4284:	a804      	add	r0, sp, #16
   b4286:	9400      	str	r4, [sp, #0]
   b4288:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b428c:	2288      	movs	r2, #136	; 0x88
   b428e:	f000 fcbb 	bl	b4c08 <_ZN5Paint18DrawHorizontalLineEiiii>
  paint.DrawVerticalLine(180,136,104,COLORED);
    
  paint.DrawFilledRectangle(0,145,170,240, COLORED);
   b4292:	f04f 0af0 	mov.w	sl, #240	; 0xf0
  paint.DrawVerticalLine(180,136,104,COLORED);
   b4296:	a804      	add	r0, sp, #16
   b4298:	9400      	str	r4, [sp, #0]
   b429a:	2368      	movs	r3, #104	; 0x68
   b429c:	2288      	movs	r2, #136	; 0x88
   b429e:	21b4      	movs	r1, #180	; 0xb4
   b42a0:	f000 fcc2 	bl	b4c28 <_ZN5Paint16DrawVerticalLineEiiii>
  paint.DrawStringAt(5, 155, "SPEAKER: ", &Font20, UNCOLORED);
   b42a4:	f04f 0901 	mov.w	r9, #1
  paint.DrawFilledRectangle(0,145,170,240, COLORED);
   b42a8:	4621      	mov	r1, r4
   b42aa:	a804      	add	r0, sp, #16
   b42ac:	9401      	str	r4, [sp, #4]
   b42ae:	f8cd a000 	str.w	sl, [sp]
   b42b2:	23aa      	movs	r3, #170	; 0xaa
   b42b4:	2291      	movs	r2, #145	; 0x91
   b42b6:	f000 fcc7 	bl	b4c48 <_ZN5Paint19DrawFilledRectangleEiiiii>
  paint.DrawStringAt(5, 155, "SPEAKER: ", &Font20, UNCOLORED);
   b42ba:	a804      	add	r0, sp, #16
   b42bc:	e9cd 7900 	strd	r7, r9, [sp]
   b42c0:	4b3b      	ldr	r3, [pc, #236]	; (b43b0 <_Z3EPDv+0x298>)
   b42c2:	229b      	movs	r2, #155	; 0x9b
   b42c4:	2105      	movs	r1, #5
   b42c6:	f000 fc87 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(5, 185, (VAR5), &Font24, UNCOLORED);
   b42ca:	e9cd 6900 	strd	r6, r9, [sp]
   b42ce:	4b2e      	ldr	r3, [pc, #184]	; (b4388 <_Z3EPDv+0x270>)
   b42d0:	a804      	add	r0, sp, #16
   b42d2:	681b      	ldr	r3, [r3, #0]
   b42d4:	22b9      	movs	r2, #185	; 0xb9
   b42d6:	2105      	movs	r1, #5
   b42d8:	f000 fc7e 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
  paint.DrawStringAt(5, 215, (VAR6), &Font24, UNCOLORED);
   b42dc:	e9cd 6900 	strd	r6, r9, [sp]
   b42e0:	4b2b      	ldr	r3, [pc, #172]	; (b4390 <_Z3EPDv+0x278>)
   b42e2:	a804      	add	r0, sp, #16
   b42e4:	681b      	ldr	r3, [r3, #0]
   b42e6:	22d7      	movs	r2, #215	; 0xd7
   b42e8:	2105      	movs	r1, #5
   b42ea:	f000 fc75 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>

  paint.DrawFilledRectangle(190,145,360,240, COLORED);   
   b42ee:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b42f2:	2291      	movs	r2, #145	; 0x91
   b42f4:	a804      	add	r0, sp, #16
   b42f6:	e9cd a400 	strd	sl, r4, [sp]
   b42fa:	21be      	movs	r1, #190	; 0xbe
   b42fc:	f000 fca4 	bl	b4c48 <_ZN5Paint19DrawFilledRectangleEiiiii>
  paint.DrawStringAt(200, 180, String(SCAN), &Font24, UNCOLORED);      //This should be printed from the scan function 
   b4300:	4641      	mov	r1, r8
   b4302:	a810      	add	r0, sp, #64	; 0x40
   b4304:	f001 fc14 	bl	b5b30 <_ZN6StringC1ERKS_>
   b4308:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b430a:	22b4      	movs	r2, #180	; 0xb4
   b430c:	21c8      	movs	r1, #200	; 0xc8
   b430e:	e9cd 6900 	strd	r6, r9, [sp]
   b4312:	a804      	add	r0, sp, #16
   b4314:	f000 fc60 	bl	b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>
   b4318:	a810      	add	r0, sp, #64	; 0x40
   b431a:	f001 fb9b 	bl	b5a54 <_ZN6StringD1Ev>

  epd.display_part(paint.GetImage(), 0, 0, paint.GetWidth(), paint.GetHeight());  // (Y, X)
   b431e:	a804      	add	r0, sp, #16
   b4320:	f000 fbd5 	bl	b4ace <_ZN5Paint8GetImageEv>
   b4324:	9003      	str	r0, [sp, #12]
   b4326:	a804      	add	r0, sp, #16
   b4328:	f000 fbd3 	bl	b4ad2 <_ZN5Paint8GetWidthEv>
   b432c:	4606      	mov	r6, r0
   b432e:	a804      	add	r0, sp, #16
   b4330:	f000 fbd1 	bl	b4ad6 <_ZN5Paint9GetHeightEv>
   b4334:	9903      	ldr	r1, [sp, #12]
   b4336:	4623      	mov	r3, r4
   b4338:	4622      	mov	r2, r4
   b433a:	e9cd 6000 	strd	r6, r0, [sp]
   b433e:	4628      	mov	r0, r5
   b4340:	f000 fa0c 	bl	b475c <_ZN3Epd12display_partEPhjjjj>
  epd.refresh();
   b4344:	4628      	mov	r0, r5
   b4346:	f000 f97e 	bl	b4646 <_ZN3Epd7refreshEv>
  delay(25);
   b434a:	2019      	movs	r0, #25
   b434c:	f000 ffe8 	bl	b5320 <delay>
  epd.sleep();
   b4350:	4628      	mov	r0, r5
   b4352:	f000 fac8 	bl	b48e6 <_ZN3Epd5sleepEv>
  Paint paint(image, 240, 360);     // width should be the multiple of 8   
   b4356:	a804      	add	r0, sp, #16
   b4358:	f000 fb86 	bl	b4a68 <_ZN5PaintD1Ev>
  // epd.DisplayFrame(IMAGE_BLACK, IMAGE_RED);

  // /* Deep sleep */
  // epd.Sleep();

}
   b435c:	b015      	add	sp, #84	; 0x54
   b435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4362:	bf00      	nop
   b4364:	2003bac8 	.word	0x2003bac8
   b4368:	2003bb2c 	.word	0x2003bb2c
   b436c:	2003ba30 	.word	0x2003ba30
   b4370:	000b62ef 	.word	0x000b62ef
   b4374:	000b6313 	.word	0x000b6313
   b4378:	000b631f 	.word	0x000b631f
   b437c:	000b6331 	.word	0x000b6331
   b4380:	000b6337 	.word	0x000b6337
   b4384:	000b633d 	.word	0x000b633d
   b4388:	2003bb08 	.word	0x2003bb08
   b438c:	000b6344 	.word	0x000b6344
   b4390:	2003bb18 	.word	0x2003bb18
   b4394:	000b634b 	.word	0x000b634b
   b4398:	2003bb49 	.word	0x2003bb49
   b439c:	000b6351 	.word	0x000b6351
   b43a0:	2003ba38 	.word	0x2003ba38
   b43a4:	000b6358 	.word	0x000b6358
   b43a8:	000b6360 	.word	0x000b6360
   b43ac:	000b6367 	.word	0x000b6367
   b43b0:	000b636b 	.word	0x000b636b
   b43b4:	2003bad8 	.word	0x2003bad8
   b43b8:	2003bae8 	.word	0x2003bae8
   b43bc:	2003baf8 	.word	0x2003baf8
   b43c0:	2003baac 	.word	0x2003baac

000b43c4 <loop>:

//////////////////// E-PAPER END //////////////////// 

void loop() {
   b43c4:	b508      	push	{r3, lr}

  //I2C_Scanner();
  //Fuel_Gauge();
  EPD();
   b43c6:	f7ff fea7 	bl	b4118 <_Z3EPDv>
  //RFID();
  delay(10000);
  
}
   b43ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10000);
   b43ce:	f242 7010 	movw	r0, #10000	; 0x2710
   b43d2:	f000 bfa5 	b.w	b5320 <delay>
	...

000b43d8 <_GLOBAL__sub_I_SystemMode>:
}
   b43d8:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b43da:	4b1d      	ldr	r3, [pc, #116]	; (b4450 <_GLOBAL__sub_I_SystemMode+0x78>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b43dc:	4a1d      	ldr	r2, [pc, #116]	; (b4454 <_GLOBAL__sub_I_SystemMode+0x7c>)
   b43de:	2400      	movs	r4, #0
   b43e0:	701c      	strb	r4, [r3, #0]
   b43e2:	4b1d      	ldr	r3, [pc, #116]	; (b4458 <_GLOBAL__sub_I_SystemMode+0x80>)
   b43e4:	2501      	movs	r5, #1
   b43e6:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b43e8:	4b1c      	ldr	r3, [pc, #112]	; (b445c <_GLOBAL__sub_I_SystemMode+0x84>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b43ea:	2002      	movs	r0, #2
    SleepResult() {}
   b43ec:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b43ee:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b43f2:	f000 fed1 	bl	b5198 <set_system_mode>
SYSTEM_THREAD(ENABLED);
   b43f6:	4621      	mov	r1, r4
   b43f8:	4628      	mov	r0, r5
   b43fa:	f000 fedd 	bl	b51b8 <system_thread_set_state>
Epd epd;
   b43fe:	4818      	ldr	r0, [pc, #96]	; (b4460 <_GLOBAL__sub_I_SystemMode+0x88>)
   b4400:	f000 f844 	bl	b448c <_ZN3EpdC1Ev>
String VAR1;
   b4404:	4917      	ldr	r1, [pc, #92]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4406:	4818      	ldr	r0, [pc, #96]	; (b4468 <_GLOBAL__sub_I_SystemMode+0x90>)
   b4408:	f001 fb6f 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
String VAR2;
   b440c:	4915      	ldr	r1, [pc, #84]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b440e:	4817      	ldr	r0, [pc, #92]	; (b446c <_GLOBAL__sub_I_SystemMode+0x94>)
   b4410:	f001 fb6b 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
String VAR3;
   b4414:	4913      	ldr	r1, [pc, #76]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4416:	4816      	ldr	r0, [pc, #88]	; (b4470 <_GLOBAL__sub_I_SystemMode+0x98>)
   b4418:	f001 fb67 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
String VAR4;
   b441c:	4911      	ldr	r1, [pc, #68]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b441e:	4815      	ldr	r0, [pc, #84]	; (b4474 <_GLOBAL__sub_I_SystemMode+0x9c>)
   b4420:	f001 fb63 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
String VAR5;
   b4424:	490f      	ldr	r1, [pc, #60]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4426:	4814      	ldr	r0, [pc, #80]	; (b4478 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4428:	f001 fb5f 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
String VAR6;
   b442c:	490d      	ldr	r1, [pc, #52]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b442e:	4813      	ldr	r0, [pc, #76]	; (b447c <_GLOBAL__sub_I_SystemMode+0xa4>)
   b4430:	f001 fb5b 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
String SCAN;
   b4434:	490b      	ldr	r1, [pc, #44]	; (b4464 <_GLOBAL__sub_I_SystemMode+0x8c>)
   b4436:	4812      	ldr	r0, [pc, #72]	; (b4480 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4438:	f001 fb57 	bl	b5aea <_ZN6StringC1EPK19__FlashStringHelper>
DFRobot_PN532_IIC  nfc(PN532_IRQ, POLLING);
   b443c:	4622      	mov	r2, r4
   b443e:	4811      	ldr	r0, [pc, #68]	; (b4484 <_GLOBAL__sub_I_SystemMode+0xac>)
   b4440:	2102      	movs	r1, #2
   b4442:	f000 fc85 	bl	b4d50 <_ZN17DFRobot_PN532_IICC1Ehh>
}
   b4446:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
max1720x gauge;
   b444a:	480f      	ldr	r0, [pc, #60]	; (b4488 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b444c:	f000 bc22 	b.w	b4c94 <_ZN8max1720xC1Ev>
   b4450:	2003bb28 	.word	0x2003bb28
   b4454:	ffff0000 	.word	0xffff0000
   b4458:	2003bb29 	.word	0x2003bb29
   b445c:	2003babc 	.word	0x2003babc
   b4460:	2003bb2c 	.word	0x2003bb2c
   b4464:	000b639e 	.word	0x000b639e
   b4468:	2003bac8 	.word	0x2003bac8
   b446c:	2003bad8 	.word	0x2003bad8
   b4470:	2003bae8 	.word	0x2003bae8
   b4474:	2003baf8 	.word	0x2003baf8
   b4478:	2003bb08 	.word	0x2003bb08
   b447c:	2003bb18 	.word	0x2003bb18
   b4480:	2003baac 	.word	0x2003baac
   b4484:	2003e644 	.word	0x2003e644
   b4488:	2003bb48 	.word	0x2003bb48

000b448c <_ZN3EpdC1Ev>:
};

Epd::~Epd() {
};

Epd::Epd() {
   b448c:	b510      	push	{r4, lr}
   b448e:	4604      	mov	r4, r0
   b4490:	f000 fa74 	bl	b497c <_ZN5EpdIfC1Ev>
    reset_pin = RST_PIN;
    dc_pin = DC_PIN;
   b4494:	2204      	movs	r2, #4
   b4496:	2302      	movs	r3, #2
   b4498:	e9c4 2300 	strd	r2, r3, [r4]
    cs_pin = CS_PIN;
    busy_pin = BUSY_PIN;
   b449c:	2108      	movs	r1, #8
   b449e:	2303      	movs	r3, #3
   b44a0:	e9c4 1302 	strd	r1, r3, [r4, #8]
    width = EPD_WIDTH;
    height = EPD_HEIGHT;
   b44a4:	20f0      	movs	r0, #240	; 0xf0
   b44a6:	f44f 73b4 	mov.w	r3, #360	; 0x168
   b44aa:	e9c4 0304 	strd	r0, r3, [r4, #16]
    EPD_3IN52_Flag = 0;
   b44ae:	2300      	movs	r3, #0
   b44b0:	7623      	strb	r3, [r4, #24]
};
   b44b2:	4620      	mov	r0, r4
   b44b4:	bd10      	pop	{r4, pc}

000b44b6 <_ZN3Epd11SendCommandEh>:
}

/**
 *  @brief: basic function for sending commands
 */
void Epd::SendCommand(unsigned char command) {
   b44b6:	b510      	push	{r4, lr}
   b44b8:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, LOW);
   b44ba:	6840      	ldr	r0, [r0, #4]
   b44bc:	2100      	movs	r1, #0
   b44be:	f000 fa5e 	bl	b497e <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(command);
   b44c2:	4620      	mov	r0, r4
}
   b44c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(command);
   b44c8:	f000 baaa 	b.w	b4a20 <_ZN5EpdIf11SpiTransferEh>

000b44cc <_ZN3Epd8SendDataEh>:

/**
 *  @brief: basic function for sending data
 */
void Epd::SendData(unsigned char data) {
   b44cc:	b510      	push	{r4, lr}
   b44ce:	460c      	mov	r4, r1
    DigitalWrite(dc_pin, HIGH);
   b44d0:	6840      	ldr	r0, [r0, #4]
   b44d2:	2101      	movs	r1, #1
   b44d4:	f000 fa53 	bl	b497e <_ZN5EpdIf12DigitalWriteEii>
    SpiTransfer(data);
   b44d8:	4620      	mov	r0, r4
}
   b44da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SpiTransfer(data);
   b44de:	f000 ba9f 	b.w	b4a20 <_ZN5EpdIf11SpiTransferEh>
	...

000b44e4 <_ZN3Epd8ReadBusyEv>:

/**
 *  @brief: Wait until the busy_pin goes HIGH
 */
void Epd::ReadBusy(void) {
   b44e4:	b510      	push	{r4, lr}
   b44e6:	4604      	mov	r4, r0
    Serial.print("e-Paper busy \r\n ");
   b44e8:	f001 fc44 	bl	b5d74 <_Z16_fetch_usbserialv>
   b44ec:	4909      	ldr	r1, [pc, #36]	; (b4514 <_ZN3Epd8ReadBusyEv+0x30>)
   b44ee:	f001 f991 	bl	b5814 <_ZN5Print5printEPKc>
    UBYTE busy;
    do {
        busy = DigitalRead(busy_pin);
   b44f2:	68e0      	ldr	r0, [r4, #12]
   b44f4:	f000 fa47 	bl	b4986 <_ZN5EpdIf11DigitalReadEi>
    } while(busy);    
   b44f8:	b2c0      	uxtb	r0, r0
   b44fa:	2800      	cmp	r0, #0
   b44fc:	d1f9      	bne.n	b44f2 <_ZN3Epd8ReadBusyEv+0xe>
    DelayMs(200);
   b44fe:	20c8      	movs	r0, #200	; 0xc8
   b4500:	f000 fa44 	bl	b498c <_ZN5EpdIf7DelayMsEj>
    Serial.print("e-Paper busy release \r\n ");
   b4504:	f001 fc36 	bl	b5d74 <_Z16_fetch_usbserialv>
}
   b4508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.print("e-Paper busy release \r\n ");
   b450c:	4902      	ldr	r1, [pc, #8]	; (b4518 <_ZN3Epd8ReadBusyEv+0x34>)
   b450e:	f001 b981 	b.w	b5814 <_ZN5Print5printEPKc>
   b4512:	bf00      	nop
   b4514:	000b6375 	.word	0x000b6375
   b4518:	000b6386 	.word	0x000b6386

000b451c <_ZN3Epd5ResetEv>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see Epd::Sleep();
 */
void Epd::Reset(void) {
   b451c:	b510      	push	{r4, lr}
    DigitalWrite(reset_pin, HIGH);
   b451e:	2101      	movs	r1, #1
void Epd::Reset(void) {
   b4520:	4604      	mov	r4, r0
    DigitalWrite(reset_pin, HIGH);
   b4522:	6800      	ldr	r0, [r0, #0]
   b4524:	f000 fa2b 	bl	b497e <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(20);    
   b4528:	2014      	movs	r0, #20
   b452a:	f000 fa2f 	bl	b498c <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, LOW);                //module reset    
   b452e:	6820      	ldr	r0, [r4, #0]
   b4530:	2100      	movs	r1, #0
   b4532:	f000 fa24 	bl	b497e <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(2);
   b4536:	2002      	movs	r0, #2
   b4538:	f000 fa28 	bl	b498c <_ZN5EpdIf7DelayMsEj>
    DigitalWrite(reset_pin, HIGH);
   b453c:	6820      	ldr	r0, [r4, #0]
   b453e:	2101      	movs	r1, #1
   b4540:	f000 fa1d 	bl	b497e <_ZN5EpdIf12DigitalWriteEii>
    DelayMs(20);    
}
   b4544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(20);    
   b4548:	2014      	movs	r0, #20
   b454a:	f000 ba1f 	b.w	b498c <_ZN5EpdIf7DelayMsEj>

000b454e <_ZN3Epd4InitEv>:
int Epd::Init(void) {
   b454e:	b538      	push	{r3, r4, r5, lr}
   b4550:	4604      	mov	r4, r0
    if (IfInit() != 0) {
   b4552:	f000 fa39 	bl	b49c8 <_ZN5EpdIf6IfInitEv>
   b4556:	4605      	mov	r5, r0
   b4558:	2800      	cmp	r0, #0
   b455a:	d171      	bne.n	b4640 <_ZN3Epd4InitEv+0xf2>
    Reset();
   b455c:	4620      	mov	r0, r4
   b455e:	f7ff ffdd 	bl	b451c <_ZN3Epd5ResetEv>
    SendCommand(0x00);		// panel setting   PSR
   b4562:	4629      	mov	r1, r5
   b4564:	4620      	mov	r0, r4
    EPD_3IN52_Flag = 0;
   b4566:	7625      	strb	r5, [r4, #24]
    SendCommand(0x00);		// panel setting   PSR
   b4568:	f7ff ffa5 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0xFF);			// RES1 RES0 REG KW/R     UD    SHL   SHD_N  RST_N	
   b456c:	21ff      	movs	r1, #255	; 0xff
   b456e:	4620      	mov	r0, r4
   b4570:	f7ff ffac 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x01);			// x x x VCMZ TS_AUTO TIGE NORG VC_LUTZ
   b4574:	2101      	movs	r1, #1
   b4576:	4620      	mov	r0, r4
   b4578:	f7ff ffa8 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x01);		// POWER SETTING   PWR
   b457c:	2101      	movs	r1, #1
   b457e:	4620      	mov	r0, r4
   b4580:	f7ff ff99 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0x03);			//  x x x x x x VDS_EN VDG_EN	
   b4584:	2103      	movs	r1, #3
   b4586:	4620      	mov	r0, r4
   b4588:	f7ff ffa0 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x10);			//  x x x VCOM_SLWE VGH[3:0]   VGH=20V, VGL=-20V	
   b458c:	2110      	movs	r1, #16
   b458e:	4620      	mov	r0, r4
   b4590:	f7ff ff9c 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x3F);			//  x x VSH[5:0]	VSH = 15V
   b4594:	213f      	movs	r1, #63	; 0x3f
   b4596:	4620      	mov	r0, r4
   b4598:	f7ff ff98 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x3F);			//  x x VSL[5:0]	VSL=-15V
   b459c:	213f      	movs	r1, #63	; 0x3f
   b459e:	4620      	mov	r0, r4
   b45a0:	f7ff ff94 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x03);			//  OPTEN VDHR[6:0]  VHDR=6.4V
   b45a4:	2103      	movs	r1, #3
   b45a6:	4620      	mov	r0, r4
   b45a8:	f7ff ff90 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x06);		// booster soft start   BTST 
   b45ac:	2106      	movs	r1, #6
   b45ae:	4620      	mov	r0, r4
   b45b0:	f7ff ff81 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0x37);			//  BT_PHA[7:0]  	
   b45b4:	2137      	movs	r1, #55	; 0x37
   b45b6:	4620      	mov	r0, r4
   b45b8:	f7ff ff88 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x3D);			//  BT_PHB[7:0]	
   b45bc:	213d      	movs	r1, #61	; 0x3d
   b45be:	4620      	mov	r0, r4
   b45c0:	f7ff ff84 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x3D);			//  x x BT_PHC[5:0]	
   b45c4:	213d      	movs	r1, #61	; 0x3d
   b45c6:	4620      	mov	r0, r4
   b45c8:	f7ff ff80 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x60);		// TCON setting			TCON 
   b45cc:	2160      	movs	r1, #96	; 0x60
   b45ce:	4620      	mov	r0, r4
   b45d0:	f7ff ff71 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0x22);			// S2G[3:0] G2S[3:0]   non-overlap = 12		
   b45d4:	2122      	movs	r1, #34	; 0x22
   b45d6:	4620      	mov	r0, r4
   b45d8:	f7ff ff78 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x82);		// VCOM_DC setting		VDCS 
   b45dc:	2182      	movs	r1, #130	; 0x82
   b45de:	4620      	mov	r0, r4
   b45e0:	f7ff ff69 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0x07);			// x  VDCS[6:0]	VCOM_DC value= -1.9v    00~3f,0x12=-1.9v
   b45e4:	2107      	movs	r1, #7
   b45e6:	4620      	mov	r0, r4
   b45e8:	f7ff ff70 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x30);			 
   b45ec:	2130      	movs	r1, #48	; 0x30
   b45ee:	4620      	mov	r0, r4
   b45f0:	f7ff ff61 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0x09);		
   b45f4:	2109      	movs	r1, #9
   b45f6:	4620      	mov	r0, r4
   b45f8:	f7ff ff68 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0xe3);		// power saving			PWS 
   b45fc:	21e3      	movs	r1, #227	; 0xe3
   b45fe:	4620      	mov	r0, r4
   b4600:	f7ff ff59 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0x88);			// VCOM_W[3:0] SD_W[3:0]
   b4604:	2188      	movs	r1, #136	; 0x88
   b4606:	4620      	mov	r0, r4
   b4608:	f7ff ff60 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x61);		// resoultion setting 
   b460c:	2161      	movs	r1, #97	; 0x61
   b460e:	4620      	mov	r0, r4
   b4610:	f7ff ff51 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0xf0);			//  HRES[7:3] 0 0 0	
   b4614:	21f0      	movs	r1, #240	; 0xf0
   b4616:	4620      	mov	r0, r4
   b4618:	f7ff ff58 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x01);			//  x x x x x x x VRES[8]	
   b461c:	2101      	movs	r1, #1
   b461e:	4620      	mov	r0, r4
   b4620:	f7ff ff54 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendData(0x68);			//  VRES[7:0]
   b4624:	2168      	movs	r1, #104	; 0x68
   b4626:	4620      	mov	r0, r4
   b4628:	f7ff ff50 	bl	b44cc <_ZN3Epd8SendDataEh>
    SendCommand(0x50);			
   b462c:	2150      	movs	r1, #80	; 0x50
   b462e:	4620      	mov	r0, r4
   b4630:	f7ff ff41 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0xB7);		
   b4634:	21b7      	movs	r1, #183	; 0xb7
   b4636:	4620      	mov	r0, r4
   b4638:	f7ff ff48 	bl	b44cc <_ZN3Epd8SendDataEh>
}
   b463c:	4628      	mov	r0, r5
   b463e:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   b4640:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4644:	e7fa      	b.n	b463c <_ZN3Epd4InitEv+0xee>

000b4646 <_ZN3Epd7refreshEv>:
        SendData(EPD_3IN52_lut_wb[count]);
    }
}

void Epd::refresh(void)
{
   b4646:	b510      	push	{r4, lr}
    SendCommand(0x17);
   b4648:	2117      	movs	r1, #23
{
   b464a:	4604      	mov	r4, r0
    SendCommand(0x17);
   b464c:	f7ff ff33 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0xA5);
   b4650:	4620      	mov	r0, r4
   b4652:	21a5      	movs	r1, #165	; 0xa5
   b4654:	f7ff ff3a 	bl	b44cc <_ZN3Epd8SendDataEh>
    ReadBusy();
   b4658:	4620      	mov	r0, r4
   b465a:	f7ff ff43 	bl	b44e4 <_ZN3Epd8ReadBusyEv>
    DelayMs(200);
}
   b465e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    DelayMs(200);
   b4662:	20c8      	movs	r0, #200	; 0xc8
   b4664:	f000 b992 	b.w	b498c <_ZN5EpdIf7DelayMsEj>

000b4668 <_ZN3Epd6lut_GCEv>:

// LUT download
void Epd::lut_GC(void)
{
   b4668:	b570      	push	{r4, r5, r6, lr}
    UBYTE count;
    SendCommand(0x20);        // vcom
   b466a:	2120      	movs	r1, #32
{
   b466c:	4604      	mov	r4, r0
    SendCommand(0x20);        // vcom
   b466e:	f7ff ff22 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 56 ; count++)
   b4672:	4e35      	ldr	r6, [pc, #212]	; (b4748 <_ZN3Epd6lut_GCEv+0xe0>)
    SendCommand(0x20);        // vcom
   b4674:	2538      	movs	r5, #56	; 0x38
    {
        SendData(EPD_3IN52_lut_R20_GC[count]);
   b4676:	f816 1b01 	ldrb.w	r1, [r6], #1
   b467a:	4620      	mov	r0, r4
    for(count = 0; count < 56 ; count++)
   b467c:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R20_GC[count]);
   b467e:	f7ff ff25 	bl	b44cc <_ZN3Epd8SendDataEh>
    for(count = 0; count < 56 ; count++)
   b4682:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4686:	d1f6      	bne.n	b4676 <_ZN3Epd6lut_GCEv+0xe>
    }
        
    SendCommand(0x21);        // red not use
   b4688:	2121      	movs	r1, #33	; 0x21
   b468a:	4620      	mov	r0, r4
   b468c:	f7ff ff13 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 42 ; count++)
   b4690:	4e2e      	ldr	r6, [pc, #184]	; (b474c <_ZN3Epd6lut_GCEv+0xe4>)
    SendCommand(0x21);        // red not use
   b4692:	252a      	movs	r5, #42	; 0x2a
    {
        SendData(EPD_3IN52_lut_R21_GC[count]);
   b4694:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4698:	4620      	mov	r0, r4
    for(count = 0; count < 42 ; count++)
   b469a:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R21_GC[count]);
   b469c:	f7ff ff16 	bl	b44cc <_ZN3Epd8SendDataEh>
    for(count = 0; count < 42 ; count++)
   b46a0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b46a4:	d1f6      	bne.n	b4694 <_ZN3Epd6lut_GCEv+0x2c>
    }
        
    SendCommand(0x24);        // bb b
   b46a6:	2124      	movs	r1, #36	; 0x24
   b46a8:	4620      	mov	r0, r4
   b46aa:	f7ff ff04 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    for(count = 0; count < 42 ; count++)
   b46ae:	4e28      	ldr	r6, [pc, #160]	; (b4750 <_ZN3Epd6lut_GCEv+0xe8>)
    SendCommand(0x24);        // bb b
   b46b0:	252a      	movs	r5, #42	; 0x2a
    {
        SendData(EPD_3IN52_lut_R24_GC[count]);
   b46b2:	f816 1b01 	ldrb.w	r1, [r6], #1
   b46b6:	4620      	mov	r0, r4
    for(count = 0; count < 42 ; count++)
   b46b8:	3d01      	subs	r5, #1
        SendData(EPD_3IN52_lut_R24_GC[count]);
   b46ba:	f7ff ff07 	bl	b44cc <_ZN3Epd8SendDataEh>
    for(count = 0; count < 42 ; count++)
   b46be:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b46c2:	d1f6      	bne.n	b46b2 <_ZN3Epd6lut_GCEv+0x4a>
    }
    
    if(EPD_3IN52_Flag == 0)
   b46c4:	7e23      	ldrb	r3, [r4, #24]
    {
        SendCommand(0x22);    // bw r
   b46c6:	2122      	movs	r1, #34	; 0x22
   b46c8:	4620      	mov	r0, r4
    if(EPD_3IN52_Flag == 0)
   b46ca:	b9f3      	cbnz	r3, b470a <_ZN3Epd6lut_GCEv+0xa2>
        SendCommand(0x22);    // bw r
   b46cc:	f7ff fef3 	bl	b44b6 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 56 ; count++)
   b46d0:	4e20      	ldr	r6, [pc, #128]	; (b4754 <_ZN3Epd6lut_GCEv+0xec>)
        SendCommand(0x22);    // bw r
   b46d2:	2538      	movs	r5, #56	; 0x38
        {
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b46d4:	f816 1b01 	ldrb.w	r1, [r6], #1
   b46d8:	4620      	mov	r0, r4
        for(count = 0; count < 56 ; count++)
   b46da:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b46dc:	f7ff fef6 	bl	b44cc <_ZN3Epd8SendDataEh>
        for(count = 0; count < 56 ; count++)
   b46e0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b46e4:	d1f6      	bne.n	b46d4 <_ZN3Epd6lut_GCEv+0x6c>
        }
            
        SendCommand(0x23);    // wb w
   b46e6:	2123      	movs	r1, #35	; 0x23
   b46e8:	4620      	mov	r0, r4
   b46ea:	f7ff fee4 	bl	b44b6 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 42 ; count++)
   b46ee:	4e1a      	ldr	r6, [pc, #104]	; (b4758 <_ZN3Epd6lut_GCEv+0xf0>)
        SendCommand(0x23);    // wb w
   b46f0:	252a      	movs	r5, #42	; 0x2a
        {
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b46f2:	f816 1b01 	ldrb.w	r1, [r6], #1
   b46f6:	4620      	mov	r0, r4
        for(count = 0; count < 42 ; count++)
   b46f8:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b46fa:	f7ff fee7 	bl	b44cc <_ZN3Epd8SendDataEh>
        for(count = 0; count < 42 ; count++)
   b46fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4702:	d1f6      	bne.n	b46f2 <_ZN3Epd6lut_GCEv+0x8a>
        }
            
        EPD_3IN52_Flag = 1;
   b4704:	2301      	movs	r3, #1
   b4706:	7623      	strb	r3, [r4, #24]
            SendData(EPD_3IN52_lut_R22_GC[count]);
        }
            
       EPD_3IN52_Flag = 0;
    }
}
   b4708:	bd70      	pop	{r4, r5, r6, pc}
        SendCommand(0x22);    // bw r
   b470a:	f7ff fed4 	bl	b44b6 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 56 ; count++)
   b470e:	4e12      	ldr	r6, [pc, #72]	; (b4758 <_ZN3Epd6lut_GCEv+0xf0>)
        SendCommand(0x22);    // bw r
   b4710:	2538      	movs	r5, #56	; 0x38
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b4712:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4716:	4620      	mov	r0, r4
        for(count = 0; count < 56 ; count++)
   b4718:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R23_GC[count]);
   b471a:	f7ff fed7 	bl	b44cc <_ZN3Epd8SendDataEh>
        for(count = 0; count < 56 ; count++)
   b471e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4722:	d1f6      	bne.n	b4712 <_ZN3Epd6lut_GCEv+0xaa>
        SendCommand(0x23);    // wb w
   b4724:	2123      	movs	r1, #35	; 0x23
   b4726:	4620      	mov	r0, r4
   b4728:	f7ff fec5 	bl	b44b6 <_ZN3Epd11SendCommandEh>
        for(count = 0; count < 42 ; count++)
   b472c:	4e09      	ldr	r6, [pc, #36]	; (b4754 <_ZN3Epd6lut_GCEv+0xec>)
        SendCommand(0x23);    // wb w
   b472e:	252a      	movs	r5, #42	; 0x2a
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b4730:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4734:	4620      	mov	r0, r4
        for(count = 0; count < 42 ; count++)
   b4736:	3d01      	subs	r5, #1
            SendData(EPD_3IN52_lut_R22_GC[count]);
   b4738:	f7ff fec8 	bl	b44cc <_ZN3Epd8SendDataEh>
        for(count = 0; count < 42 ; count++)
   b473c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b4740:	d1f6      	bne.n	b4730 <_ZN3Epd6lut_GCEv+0xc8>
       EPD_3IN52_Flag = 0;
   b4742:	7625      	strb	r5, [r4, #24]
}
   b4744:	e7e0      	b.n	b4708 <_ZN3Epd6lut_GCEv+0xa0>
   b4746:	bf00      	nop
   b4748:	000b639f 	.word	0x000b639f
   b474c:	000b63d7 	.word	0x000b63d7
   b4750:	000b6471 	.word	0x000b6471
   b4754:	000b6401 	.word	0x000b6401
   b4758:	000b6439 	.word	0x000b6439

000b475c <_ZN3Epd12display_partEPhjjjj>:
        SendData(pgm_read_byte(&picData[i]));
    }
}

void Epd::display_part(UBYTE *Image, UWORD xstart, UWORD ystart, UWORD image_width, UWORD image_heigh)
{
   b475c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4760:	9100      	str	r1, [sp, #0]
    UWORD i,j;
    SendCommand(0x13);		     //Transfer new data
   b4762:	2113      	movs	r1, #19
{
   b4764:	461f      	mov	r7, r3
   b4766:	4614      	mov	r4, r2
   b4768:	4605      	mov	r5, r0
    SendCommand(0x13);		     //Transfer new data
   b476a:	f7ff fea4 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    for(i=0; i<height; i++)
        for(j=0; j<(width/8); j++)
        {
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
   b476e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4770:	990d      	ldr	r1, [sp, #52]	; 0x34
   b4772:	ea4f 0bd4 	mov.w	fp, r4, lsr #3
   b4776:	441c      	add	r4, r3
   b4778:	437b      	muls	r3, r7
   b477a:	f1c3 0900 	rsb	r9, r3, #0
   b477e:	187b      	adds	r3, r7, r1
   b4780:	08e4      	lsrs	r4, r4, #3
    for(i=0; i<height; i++)
   b4782:	f04f 0a00 	mov.w	sl, #0
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
   b4786:	9301      	str	r3, [sp, #4]
    for(i=0; i<height; i++)
   b4788:	6969      	ldr	r1, [r5, #20]
   b478a:	4551      	cmp	r1, sl
   b478c:	d91f      	bls.n	b47ce <_ZN3Epd12display_partEPhjjjj+0x72>
            {
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
   b478e:	9b00      	ldr	r3, [sp, #0]
   b4790:	ebcb 08d9 	rsb	r8, fp, r9, lsr #3
        for(j=0; j<(width/8); j++)
   b4794:	2600      	movs	r6, #0
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
   b4796:	4498      	add	r8, r3
        for(j=0; j<(width/8); j++)
   b4798:	6929      	ldr	r1, [r5, #16]
   b479a:	ebb6 0fd1 	cmp.w	r6, r1, lsr #3
   b479e:	d211      	bcs.n	b47c4 <_ZN3Epd12display_partEPhjjjj+0x68>
            if((j >= xstart/8) && (j < (image_width + xstart)/8) && (i >= ystart) && (i <= (ystart + image_heigh)) )
   b47a0:	45b3      	cmp	fp, r6
   b47a2:	d80d      	bhi.n	b47c0 <_ZN3Epd12display_partEPhjjjj+0x64>
   b47a4:	42b4      	cmp	r4, r6
   b47a6:	d90b      	bls.n	b47c0 <_ZN3Epd12display_partEPhjjjj+0x64>
   b47a8:	45ba      	cmp	sl, r7
   b47aa:	d309      	bcc.n	b47c0 <_ZN3Epd12display_partEPhjjjj+0x64>
   b47ac:	9b01      	ldr	r3, [sp, #4]
   b47ae:	4553      	cmp	r3, sl
   b47b0:	d306      	bcc.n	b47c0 <_ZN3Epd12display_partEPhjjjj+0x64>
                SendData(Image[(i-ystart) * image_width/8 + j - xstart/8]);
   b47b2:	f818 1006 	ldrb.w	r1, [r8, r6]
                // Serial.print(Image[(i-ystart) * image_width/8 + j - xstart], HEX);
                // Serial.print(" ");
            }
            else
            {
                SendData(0x00);
   b47b6:	4628      	mov	r0, r5
   b47b8:	f7ff fe88 	bl	b44cc <_ZN3Epd8SendDataEh>
        for(j=0; j<(width/8); j++)
   b47bc:	3601      	adds	r6, #1
   b47be:	e7eb      	b.n	b4798 <_ZN3Epd12display_partEPhjjjj+0x3c>
                SendData(0x00);
   b47c0:	2100      	movs	r1, #0
   b47c2:	e7f8      	b.n	b47b6 <_ZN3Epd12display_partEPhjjjj+0x5a>
    for(i=0; i<height; i++)
   b47c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b47c6:	f10a 0a01 	add.w	sl, sl, #1
   b47ca:	4499      	add	r9, r3
   b47cc:	e7dc      	b.n	b4788 <_ZN3Epd12display_partEPhjjjj+0x2c>
            }
        }
}
   b47ce:	b003      	add	sp, #12
   b47d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b47d4 <_ZN3Epd11display_NUMEh>:


void Epd::display_NUM(UBYTE NUM)
{
   b47d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47d8:	460e      	mov	r6, r1
    UWORD row, column;
    // UWORD pcnt = 0;

    SendCommand(0x13);		     //Transfer new data
   b47da:	2113      	movs	r1, #19
{
   b47dc:	4604      	mov	r4, r0
    SendCommand(0x13);		     //Transfer new data
   b47de:	f7ff fe6a 	bl	b44b6 <_ZN3Epd11SendCommandEh>

    for(column=0; column<height; column++)   
   b47e2:	2500      	movs	r5, #0
   b47e4:	6963      	ldr	r3, [r4, #20]
   b47e6:	42ab      	cmp	r3, r5
   b47e8:	d961      	bls.n	b48ae <_ZN3Epd11display_NUMEh+0xda>
    {
        for(row=0; row<width/8; row++)  
   b47ea:	2700      	movs	r7, #0
                case EPD_3IN52_Source_Line:
                    SendData(0xAA);  
                    break;
                        
                case EPD_3IN52_Gate_Line:
                    if(column%2)
   b47ec:	f005 0801 	and.w	r8, r5, #1
        for(row=0; row<width/8; row++)  
   b47f0:	6923      	ldr	r3, [r4, #16]
   b47f2:	ebb7 0fd3 	cmp.w	r7, r3, lsr #3
   b47f6:	ea4f 02d3 	mov.w	r2, r3, lsr #3
   b47fa:	d256      	bcs.n	b48aa <_ZN3Epd11display_NUMEh+0xd6>
            switch (NUM)
   b47fc:	2e0f      	cmp	r6, #15
   b47fe:	d02c      	beq.n	b485a <_ZN3Epd11display_NUMEh+0x86>
   b4800:	d808      	bhi.n	b4814 <_ZN3Epd11display_NUMEh+0x40>
   b4802:	2e03      	cmp	r6, #3
   b4804:	d80d      	bhi.n	b4822 <_ZN3Epd11display_NUMEh+0x4e>
   b4806:	1e71      	subs	r1, r6, #1
   b4808:	2902      	cmp	r1, #2
   b480a:	d815      	bhi.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b480c:	e8df f001 	tbb	[pc, r1]
   b4810:	3b2d      	.short	0x3b2d
   b4812:	19          	.byte	0x19
   b4813:	00          	.byte	0x00
   b4814:	2ef0      	cmp	r6, #240	; 0xf0
   b4816:	d024      	beq.n	b4862 <_ZN3Epd11display_NUMEh+0x8e>
   b4818:	d805      	bhi.n	b4826 <_ZN3Epd11display_NUMEh+0x52>
   b481a:	2e55      	cmp	r6, #85	; 0x55
   b481c:	d009      	beq.n	b4832 <_ZN3Epd11display_NUMEh+0x5e>
   b481e:	2eaa      	cmp	r6, #170	; 0xaa
   b4820:	d005      	beq.n	b482e <_ZN3Epd11display_NUMEh+0x5a>
        for(row=0; row<width/8; row++)  
   b4822:	3701      	adds	r7, #1
   b4824:	e7e4      	b.n	b47f0 <_ZN3Epd11display_NUMEh+0x1c>
            switch (NUM)
   b4826:	2eff      	cmp	r6, #255	; 0xff
   b4828:	d1fb      	bne.n	b4822 <_ZN3Epd11display_NUMEh+0x4e>
                        SendData(0xff); //An odd number of Gate line  
   b482a:	21ff      	movs	r1, #255	; 0xff
   b482c:	e005      	b.n	b483a <_ZN3Epd11display_NUMEh+0x66>
                    SendData(0xAA);  
   b482e:	4631      	mov	r1, r6
   b4830:	e003      	b.n	b483a <_ZN3Epd11display_NUMEh+0x66>
                    if(column%2)
   b4832:	f1b8 0f00 	cmp.w	r8, #0
   b4836:	d1f8      	bne.n	b482a <_ZN3Epd11display_NUMEh+0x56>
                    SendData(0x00);
   b4838:	2100      	movs	r1, #0
   b483a:	4620      	mov	r0, r4
   b483c:	f7ff fe46 	bl	b44cc <_ZN3Epd8SendDataEh>
                    break;  
   b4840:	e7ef      	b.n	b4822 <_ZN3Epd11display_NUMEh+0x4e>
                    else
                        SendData(0x00); //The even line Gate  
                    break;			
                        
                case EPD_3IN52_Chessboard:
                    if(row>=(width/8/2)&&column>=(height/2))
   b4842:	6962      	ldr	r2, [r4, #20]
   b4844:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
   b4848:	ea4f 0252 	mov.w	r2, r2, lsr #1
   b484c:	d302      	bcc.n	b4854 <_ZN3Epd11display_NUMEh+0x80>
   b484e:	4295      	cmp	r5, r2
   b4850:	d3f2      	bcc.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b4852:	e7ea      	b.n	b482a <_ZN3Epd11display_NUMEh+0x56>
                        SendData(0xff);
                    else if(row<(width/8/2)&&column<(height/2))
   b4854:	4295      	cmp	r5, r2
   b4856:	d2ef      	bcs.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b4858:	e7e7      	b.n	b482a <_ZN3Epd11display_NUMEh+0x56>
                    else
                        SendData(0x00);
                    break; 			
                        
                case EPD_3IN52_LEFT_BLACK_RIGHT_WHITE:
                    if(row>=(width/8/2))
   b485a:	ebb7 1f13 	cmp.w	r7, r3, lsr #4
                    else
                        SendData(0x00);
                    break;
                            
                case EPD_3IN52_UP_BLACK_DOWN_WHITE:
                    if(column>=(height/2))
   b485e:	d2e4      	bcs.n	b482a <_ZN3Epd11display_NUMEh+0x56>
   b4860:	e7ea      	b.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b4862:	6963      	ldr	r3, [r4, #20]
   b4864:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
   b4868:	e7f9      	b.n	b485e <_ZN3Epd11display_NUMEh+0x8a>
                    else
                        SendData(0x00);
                    break;
                            
                case EPD_3IN52_Frame:
                    if(column==0||column==(height-1))
   b486a:	2d00      	cmp	r5, #0
   b486c:	d0e4      	beq.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b486e:	6963      	ldr	r3, [r4, #20]
   b4870:	3b01      	subs	r3, #1
   b4872:	42ab      	cmp	r3, r5
   b4874:	d0e0      	beq.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
                        SendData(0x00);						
                    else if(row==0)
   b4876:	b90f      	cbnz	r7, b487c <_ZN3Epd11display_NUMEh+0xa8>
                        SendData(0x7F);
   b4878:	217f      	movs	r1, #127	; 0x7f
   b487a:	e7de      	b.n	b483a <_ZN3Epd11display_NUMEh+0x66>
                    else if(row==(width/8-1))
   b487c:	1e53      	subs	r3, r2, #1
   b487e:	42bb      	cmp	r3, r7
   b4880:	d1d3      	bne.n	b482a <_ZN3Epd11display_NUMEh+0x56>
                        SendData(0xFE);					
   b4882:	21fe      	movs	r1, #254	; 0xfe
   b4884:	e7d9      	b.n	b483a <_ZN3Epd11display_NUMEh+0x66>
                    else
                        SendData(0xFF);
                    break; 					
                            
                case EPD_3IN52_Crosstalk:
                    if((row>=(width/8/3)&&row<=(width/8/3*2)&&column<=(height/3))||(row>=(width/8/3)&&row<=(width/8/3*2)&&column>=(height/3*2)))
   b4886:	2218      	movs	r2, #24
   b4888:	fbb3 f3f2 	udiv	r3, r3, r2
   b488c:	42bb      	cmp	r3, r7
   b488e:	d8cc      	bhi.n	b482a <_ZN3Epd11display_NUMEh+0x56>
   b4890:	ebb7 0f43 	cmp.w	r7, r3, lsl #1
   b4894:	d8c9      	bhi.n	b482a <_ZN3Epd11display_NUMEh+0x56>
   b4896:	6963      	ldr	r3, [r4, #20]
   b4898:	2203      	movs	r2, #3
   b489a:	fbb3 f3f2 	udiv	r3, r3, r2
   b489e:	42ab      	cmp	r3, r5
   b48a0:	d2ca      	bcs.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b48a2:	ebb5 0f43 	cmp.w	r5, r3, lsl #1
   b48a6:	d2c7      	bcs.n	b4838 <_ZN3Epd11display_NUMEh+0x64>
   b48a8:	e7bf      	b.n	b482a <_ZN3Epd11display_NUMEh+0x56>
    for(column=0; column<height; column++)   
   b48aa:	3501      	adds	r5, #1
   b48ac:	e79a      	b.n	b47e4 <_ZN3Epd11display_NUMEh+0x10>
                default:
                    break;
            }
        }
    }	
}
   b48ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b48b2 <_ZN3Epd5ClearEv>:
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void Epd::Clear(void)
{
   b48b2:	b538      	push	{r3, r4, r5, lr}
    UWORD i;
    SendCommand(0x13);		     //Transfer new data
   b48b4:	2113      	movs	r1, #19
{
   b48b6:	4604      	mov	r4, r0
    SendCommand(0x13);		     //Transfer new data
   b48b8:	f7ff fdfd 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    for(i=0;i<(width*height/8);i++)	     
   b48bc:	2500      	movs	r5, #0
   b48be:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b48c2:	4353      	muls	r3, r2
   b48c4:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   b48c8:	d205      	bcs.n	b48d6 <_ZN3Epd5ClearEv+0x24>
    {
        SendData(0xFF);
   b48ca:	21ff      	movs	r1, #255	; 0xff
   b48cc:	4620      	mov	r0, r4
   b48ce:	f7ff fdfd 	bl	b44cc <_ZN3Epd8SendDataEh>
    for(i=0;i<(width*height/8);i++)	     
   b48d2:	3501      	adds	r5, #1
   b48d4:	e7f3      	b.n	b48be <_ZN3Epd5ClearEv+0xc>
    }
    lut_GC();
   b48d6:	4620      	mov	r0, r4
   b48d8:	f7ff fec6 	bl	b4668 <_ZN3Epd6lut_GCEv>
	refresh();
   b48dc:	4620      	mov	r0, r4
}
   b48de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	refresh();
   b48e2:	f7ff beb0 	b.w	b4646 <_ZN3Epd7refreshEv>

000b48e6 <_ZN3Epd5sleepEv>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void Epd::sleep(void)
{
   b48e6:	b510      	push	{r4, lr}
    SendCommand(0X07);  	//deep sleep
   b48e8:	2107      	movs	r1, #7
{
   b48ea:	4604      	mov	r4, r0
    SendCommand(0X07);  	//deep sleep
   b48ec:	f7ff fde3 	bl	b44b6 <_ZN3Epd11SendCommandEh>
    SendData(0xA5);
   b48f0:	4620      	mov	r0, r4
   b48f2:	21a5      	movs	r1, #165	; 0xa5
   b48f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SendData(0xA5);
   b48f8:	f7ff bde8 	b.w	b44cc <_ZN3Epd8SendDataEh>

000b48fc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b48fc:	4770      	bx	lr

000b48fe <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b48fe:	b510      	push	{r4, lr}
  }
   b4900:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4902:	4604      	mov	r4, r0
  }
   b4904:	f7ff fbcf 	bl	b40a6 <_ZdlPvj>
   b4908:	4620      	mov	r0, r4
   b490a:	bd10      	pop	{r4, pc}

000b490c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b490c:	b40e      	push	{r1, r2, r3}
   b490e:	b503      	push	{r0, r1, lr}
   b4910:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4912:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4914:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4918:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b491a:	f000 ffb6 	bl	b588a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b491e:	b002      	add	sp, #8
   b4920:	f85d eb04 	ldr.w	lr, [sp], #4
   b4924:	b003      	add	sp, #12
   b4926:	4770      	bx	lr

000b4928 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4928:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b492a:	4604      	mov	r4, r0
   b492c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b492e:	7922      	ldrb	r2, [r4, #4]
   b4930:	68a3      	ldr	r3, [r4, #8]
   b4932:	b132      	cbz	r2, b4942 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4934:	b9a3      	cbnz	r3, b4960 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4936:	490b      	ldr	r1, [pc, #44]	; (b4964 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4938:	b002      	add	sp, #8
   b493a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b493e:	f000 bf69 	b.w	b5814 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4942:	4a09      	ldr	r2, [pc, #36]	; (b4968 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4944:	7b26      	ldrb	r6, [r4, #12]
   b4946:	4d09      	ldr	r5, [pc, #36]	; (b496c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4948:	4909      	ldr	r1, [pc, #36]	; (b4970 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b494a:	7b64      	ldrb	r4, [r4, #13]
   b494c:	2e01      	cmp	r6, #1
   b494e:	bf18      	it	ne
   b4950:	4629      	movne	r1, r5
   b4952:	e9cd 1400 	strd	r1, r4, [sp]
   b4956:	4907      	ldr	r1, [pc, #28]	; (b4974 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4958:	f7ff ffd8 	bl	b490c <_ZN5Print6printfEPKcz>
  }
   b495c:	b002      	add	sp, #8
   b495e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4960:	4a05      	ldr	r2, [pc, #20]	; (b4978 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4962:	e7ef      	b.n	b4944 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4964:	000b64ac 	.word	0x000b64ac
   b4968:	000b639e 	.word	0x000b639e
   b496c:	000b64a8 	.word	0x000b64a8
   b4970:	000b64a4 	.word	0x000b64a4
   b4974:	000b64c2 	.word	0x000b64c2
   b4978:	000b649b 	.word	0x000b649b

000b497c <_ZN5EpdIfC1Ev>:
#include "../lib/E_Paper/src/epdif.h"

#include <spi.h>

EpdIf::EpdIf() {
};
   b497c:	4770      	bx	lr

000b497e <_ZN5EpdIf12DigitalWriteEii>:

EpdIf::~EpdIf() {
};

void EpdIf::DigitalWrite(int pin, int value) {
    digitalWrite(pin, value);
   b497e:	b2c9      	uxtb	r1, r1
   b4980:	b280      	uxth	r0, r0
   b4982:	f001 bb08 	b.w	b5f96 <digitalWrite>

000b4986 <_ZN5EpdIf11DigitalReadEi>:
}

int EpdIf::DigitalRead(int pin) {
    return digitalRead(pin);
   b4986:	b280      	uxth	r0, r0
   b4988:	f001 bb1e 	b.w	b5fc8 <digitalRead>

000b498c <_ZN5EpdIf7DelayMsEj>:
}

void EpdIf::DelayMs(unsigned int delaytime) {
    delay(delaytime);
   b498c:	f000 bcc8 	b.w	b5320 <delay>

000b4990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4990:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4992:	4c0b      	ldr	r4, [pc, #44]	; (b49c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4994:	7821      	ldrb	r1, [r4, #0]
   b4996:	f3bf 8f5b 	dmb	ish
   b499a:	f011 0101 	ands.w	r1, r1, #1
   b499e:	d10b      	bne.n	b49b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b49a0:	4620      	mov	r0, r4
   b49a2:	9101      	str	r1, [sp, #4]
   b49a4:	f7ff fb81 	bl	b40aa <__cxa_guard_acquire>
   b49a8:	9901      	ldr	r1, [sp, #4]
   b49aa:	b128      	cbz	r0, b49b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b49ac:	4805      	ldr	r0, [pc, #20]	; (b49c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b49ae:	f000 ffa9 	bl	b5904 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b49b2:	4620      	mov	r0, r4
   b49b4:	f7ff fb7e 	bl	b40b4 <__cxa_guard_release>
        return instance;
    }
   b49b8:	4802      	ldr	r0, [pc, #8]	; (b49c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b49ba:	b002      	add	sp, #8
   b49bc:	bd10      	pop	{r4, pc}
   b49be:	bf00      	nop
   b49c0:	2003e690 	.word	0x2003e690
   b49c4:	2003e694 	.word	0x2003e694

000b49c8 <_ZN5EpdIf6IfInitEv>:
    digitalWrite(CS_PIN, LOW);
    SPI.transfer(data);
    digitalWrite(CS_PIN, HIGH);
}

int EpdIf::IfInit(void) {
   b49c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    pinMode(CS_PIN, OUTPUT);
   b49ca:	2101      	movs	r1, #1
   b49cc:	2008      	movs	r0, #8
   b49ce:	f001 fad1 	bl	b5f74 <pinMode>
    pinMode(RST_PIN, OUTPUT);
   b49d2:	2101      	movs	r1, #1
   b49d4:	2004      	movs	r0, #4
   b49d6:	f001 facd 	bl	b5f74 <pinMode>
    pinMode(DC_PIN, OUTPUT);
   b49da:	2101      	movs	r1, #1
   b49dc:	2002      	movs	r0, #2
   b49de:	f001 fac9 	bl	b5f74 <pinMode>
    pinMode(BUSY_PIN, INPUT); 
   b49e2:	2100      	movs	r1, #0
   b49e4:	2003      	movs	r0, #3
   b49e6:	f001 fac5 	bl	b5f74 <pinMode>

    hal_spi_interface_t interface() {
         return instance().interface();
    }
    void begin() {
        instance().begin();
   b49ea:	f7ff ffd1 	bl	b4990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b49ee:	f000 ff93 	bl	b5918 <_ZN8SPIClass5beginEv>
      dataMode_{dataMode}
   b49f2:	4b09      	ldr	r3, [pc, #36]	; (b4a18 <_ZN5EpdIf6IfInitEv+0x50>)
   b49f4:	9300      	str	r3, [sp, #0]
   b49f6:	4b09      	ldr	r3, [pc, #36]	; (b4a1c <_ZN5EpdIf6IfInitEv+0x54>)
   b49f8:	9302      	str	r3, [sp, #8]
   b49fa:	2400      	movs	r4, #0
   b49fc:	2301      	movs	r3, #1
   b49fe:	f8ad 300c 	strh.w	r3, [sp, #12]
   b4a02:	f88d 4004 	strb.w	r4, [sp, #4]
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::SPISettings& settings) {
        return instance().beginTransaction(settings);
   b4a06:	f7ff ffc3 	bl	b4990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a0a:	4669      	mov	r1, sp
   b4a0c:	f000 ffae 	bl	b596c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
    SPI.begin();
    SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
    
    return 0;
}
   b4a10:	4620      	mov	r0, r4
   b4a12:	b004      	add	sp, #16
   b4a14:	bd10      	pop	{r4, pc}
   b4a16:	bf00      	nop
   b4a18:	000b64e8 	.word	0x000b64e8
   b4a1c:	001e8480 	.word	0x001e8480

000b4a20 <_ZN5EpdIf11SpiTransferEh>:
void EpdIf::SpiTransfer(unsigned char data) {
   b4a20:	b510      	push	{r4, lr}
    digitalWrite(CS_PIN, LOW);
   b4a22:	2100      	movs	r1, #0
void EpdIf::SpiTransfer(unsigned char data) {
   b4a24:	4604      	mov	r4, r0
    digitalWrite(CS_PIN, LOW);
   b4a26:	2008      	movs	r0, #8
   b4a28:	f001 fab5 	bl	b5f96 <digitalWrite>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4a2c:	f7ff ffb0 	bl	b4990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4a30:	4621      	mov	r1, r4
   b4a32:	f001 f809 	bl	b5a48 <_ZN8SPIClass8transferEh>
}
   b4a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(CS_PIN, HIGH);
   b4a3a:	2101      	movs	r1, #1
   b4a3c:	2008      	movs	r0, #8
   b4a3e:	f001 baaa 	b.w	b5f96 <digitalWrite>

000b4a42 <_ZN5PaintC1EPhii>:

#include <avr/pgmspace.h>
//#include "epdpaint.h"
#include "../lib/E_Paper/src/epdpaint.h"

Paint::Paint(unsigned char* image, int width, int height) {
   b4a42:	b530      	push	{r4, r5, lr}
    this->rotate = ROTATE_0;
   b4a44:	2400      	movs	r4, #0
   b4a46:	60c4      	str	r4, [r0, #12]
    this->image = image;
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4a48:	f012 0407 	ands.w	r4, r2, #7
    this->image = image;
   b4a4c:	6001      	str	r1, [r0, #0]
    this->width = width % 8 ? width + 8 - (width % 8) : width;
   b4a4e:	d008      	beq.n	b4a62 <_ZN5PaintC1EPhii+0x20>
   b4a50:	f102 0508 	add.w	r5, r2, #8
   b4a54:	4252      	negs	r2, r2
   b4a56:	f002 0107 	and.w	r1, r2, #7
   b4a5a:	4622      	mov	r2, r4
   b4a5c:	bf58      	it	pl
   b4a5e:	424a      	negpl	r2, r1
   b4a60:	1aaa      	subs	r2, r5, r2
    this->height = height;
   b4a62:	e9c0 2301 	strd	r2, r3, [r0, #4]
}
   b4a66:	bd30      	pop	{r4, r5, pc}

000b4a68 <_ZN5PaintD1Ev>:

Paint::~Paint() {
}
   b4a68:	4770      	bx	lr

000b4a6a <_ZN5Paint17DrawAbsolutePixelEiii>:
/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4a6a:	2900      	cmp	r1, #0
void Paint::DrawAbsolutePixel(int x, int y, int colored) {
   b4a6c:	b530      	push	{r4, r5, lr}
    if (x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4a6e:	db15      	blt.n	b4a9c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4a70:	6844      	ldr	r4, [r0, #4]
   b4a72:	428c      	cmp	r4, r1
   b4a74:	dd12      	ble.n	b4a9c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4a76:	2a00      	cmp	r2, #0
   b4a78:	db10      	blt.n	b4a9c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
   b4a7a:	6885      	ldr	r5, [r0, #8]
   b4a7c:	4295      	cmp	r5, r2
   b4a7e:	dd0d      	ble.n	b4a9c <_ZN5Paint17DrawAbsolutePixelEiii+0x32>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b4a80:	fb02 1204 	mla	r2, r2, r4, r1
   b4a84:	6805      	ldr	r5, [r0, #0]
   b4a86:	10d2      	asrs	r2, r2, #3
   b4a88:	f001 0107 	and.w	r1, r1, #7
   b4a8c:	2480      	movs	r4, #128	; 0x80
   b4a8e:	fa44 f101 	asr.w	r1, r4, r1
   b4a92:	56a8      	ldrsb	r0, [r5, r2]
   b4a94:	b249      	sxtb	r1, r1
        if (colored) {
   b4a96:	b113      	cbz	r3, b4a9e <_ZN5Paint17DrawAbsolutePixelEiii+0x34>
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
   b4a98:	4308      	orrs	r0, r1
        } else {
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b4a9a:	54a8      	strb	r0, [r5, r2]
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * this->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
   b4a9c:	bd30      	pop	{r4, r5, pc}
            image[(x + y * this->width) / 8] &= ~(0x80 >> (x % 8));
   b4a9e:	ea20 0001 	bic.w	r0, r0, r1
   b4aa2:	e7fa      	b.n	b4a9a <_ZN5Paint17DrawAbsolutePixelEiii+0x30>

000b4aa4 <_ZN5Paint5ClearEi>:
void Paint::Clear(int colored) {
   b4aa4:	b570      	push	{r4, r5, r6, lr}
   b4aa6:	460b      	mov	r3, r1
   b4aa8:	4604      	mov	r4, r0
    for (int x = 0; x < this->width; x++) {
   b4aaa:	2500      	movs	r5, #0
   b4aac:	6862      	ldr	r2, [r4, #4]
   b4aae:	42aa      	cmp	r2, r5
   b4ab0:	dd0c      	ble.n	b4acc <_ZN5Paint5ClearEi+0x28>
        for (int y = 0; y < this->height; y++) {
   b4ab2:	2600      	movs	r6, #0
   b4ab4:	68a2      	ldr	r2, [r4, #8]
   b4ab6:	42b2      	cmp	r2, r6
   b4ab8:	dd06      	ble.n	b4ac8 <_ZN5Paint5ClearEi+0x24>
            DrawAbsolutePixel(x, y, colored);
   b4aba:	4632      	mov	r2, r6
   b4abc:	4629      	mov	r1, r5
   b4abe:	4620      	mov	r0, r4
   b4ac0:	f7ff ffd3 	bl	b4a6a <_ZN5Paint17DrawAbsolutePixelEiii>
        for (int y = 0; y < this->height; y++) {
   b4ac4:	3601      	adds	r6, #1
   b4ac6:	e7f5      	b.n	b4ab4 <_ZN5Paint5ClearEi+0x10>
    for (int x = 0; x < this->width; x++) {
   b4ac8:	3501      	adds	r5, #1
   b4aca:	e7ef      	b.n	b4aac <_ZN5Paint5ClearEi+0x8>
}
   b4acc:	bd70      	pop	{r4, r5, r6, pc}

000b4ace <_ZN5Paint8GetImageEv>:
/**
 *  @brief: Getters and Setters
 */
unsigned char* Paint::GetImage(void) {
    return this->image;
}
   b4ace:	6800      	ldr	r0, [r0, #0]
   b4ad0:	4770      	bx	lr

000b4ad2 <_ZN5Paint8GetWidthEv>:

int Paint::GetWidth(void) {
    return this->width;
}
   b4ad2:	6840      	ldr	r0, [r0, #4]
   b4ad4:	4770      	bx	lr

000b4ad6 <_ZN5Paint9GetHeightEv>:
    this->width = width % 8 ? width + 8 - (width % 8) : width;
}

int Paint::GetHeight(void) {
    return this->height;
}
   b4ad6:	6880      	ldr	r0, [r0, #8]
   b4ad8:	4770      	bx	lr

000b4ada <_ZN5Paint9SetRotateEi>:
int Paint::GetRotate(void) {
    return this->rotate;
}

void Paint::SetRotate(int rotate){
    this->rotate = rotate;
   b4ada:	60c1      	str	r1, [r0, #12]
}
   b4adc:	4770      	bx	lr

000b4ade <_ZN5Paint9DrawPixelEiii>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint::DrawPixel(int x, int y, int colored) {
   b4ade:	b4f0      	push	{r4, r5, r6, r7}
    int point_temp;
    if (this->rotate == ROTATE_0) {
   b4ae0:	68c7      	ldr	r7, [r0, #12]
void Paint::DrawPixel(int x, int y, int colored) {
   b4ae2:	460d      	mov	r5, r1
   b4ae4:	4614      	mov	r4, r2
    if (this->rotate == ROTATE_0) {
   b4ae6:	b967      	cbnz	r7, b4b02 <_ZN5Paint9DrawPixelEiii+0x24>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4ae8:	2900      	cmp	r1, #0
   b4aea:	db37      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4aec:	6847      	ldr	r7, [r0, #4]
   b4aee:	428f      	cmp	r7, r1
   b4af0:	dd34      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4af2:	2a00      	cmp	r2, #0
   b4af4:	db32      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4af6:	6885      	ldr	r5, [r0, #8]
   b4af8:	4295      	cmp	r5, r2
   b4afa:	dd2f      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
        point_temp = x;
        x = y;
        y = this->height - point_temp;
        DrawAbsolutePixel(x, y, colored);
    }
}
   b4afc:	bcf0      	pop	{r4, r5, r6, r7}
        DrawAbsolutePixel(x, y, colored);
   b4afe:	f7ff bfb4 	b.w	b4a6a <_ZN5Paint17DrawAbsolutePixelEiii>
    } else if (this->rotate == ROTATE_90) {
   b4b02:	2f01      	cmp	r7, #1
   b4b04:	d10c      	bne.n	b4b20 <_ZN5Paint9DrawPixelEiii+0x42>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b4b06:	2900      	cmp	r1, #0
   b4b08:	db28      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b0a:	6882      	ldr	r2, [r0, #8]
   b4b0c:	428a      	cmp	r2, r1
   b4b0e:	dd25      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b10:	2c00      	cmp	r4, #0
   b4b12:	db23      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b14:	6841      	ldr	r1, [r0, #4]
   b4b16:	42a1      	cmp	r1, r4
   b4b18:	dd20      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4b1a:	462a      	mov	r2, r5
   b4b1c:	1b09      	subs	r1, r1, r4
   b4b1e:	e7ed      	b.n	b4afc <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_180) {
   b4b20:	2f02      	cmp	r7, #2
   b4b22:	d10c      	bne.n	b4b3e <_ZN5Paint9DrawPixelEiii+0x60>
        if(x < 0 || x >= this->width || y < 0 || y >= this->height) {
   b4b24:	2900      	cmp	r1, #0
   b4b26:	db19      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b28:	6841      	ldr	r1, [r0, #4]
   b4b2a:	42a9      	cmp	r1, r5
   b4b2c:	dd16      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b2e:	2a00      	cmp	r2, #0
   b4b30:	db14      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b32:	6882      	ldr	r2, [r0, #8]
   b4b34:	42a2      	cmp	r2, r4
   b4b36:	dd11      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4b38:	1b12      	subs	r2, r2, r4
   b4b3a:	1b49      	subs	r1, r1, r5
   b4b3c:	e7de      	b.n	b4afc <_ZN5Paint9DrawPixelEiii+0x1e>
    } else if (this->rotate == ROTATE_270) {
   b4b3e:	2f03      	cmp	r7, #3
   b4b40:	d10c      	bne.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
        if(x < 0 || x >= this->height || y < 0 || y >= this->width) {
   b4b42:	2900      	cmp	r1, #0
   b4b44:	db0a      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b46:	6882      	ldr	r2, [r0, #8]
   b4b48:	428a      	cmp	r2, r1
   b4b4a:	dd07      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b4c:	2c00      	cmp	r4, #0
   b4b4e:	db05      	blt.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
   b4b50:	6841      	ldr	r1, [r0, #4]
   b4b52:	42a1      	cmp	r1, r4
   b4b54:	dd02      	ble.n	b4b5c <_ZN5Paint9DrawPixelEiii+0x7e>
        DrawAbsolutePixel(x, y, colored);
   b4b56:	1b52      	subs	r2, r2, r5
   b4b58:	4621      	mov	r1, r4
   b4b5a:	e7cf      	b.n	b4afc <_ZN5Paint9DrawPixelEiii+0x1e>
}
   b4b5c:	bcf0      	pop	{r4, r5, r6, r7}
   b4b5e:	4770      	bx	lr

000b4b60 <_ZN5Paint10DrawCharAtEiicP5sFONTi>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4b60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b4b66:	88ac      	ldrh	r4, [r5, #4]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4b68:	4691      	mov	r9, r2
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
   b4b6a:	f014 0207 	ands.w	r2, r4, #7
   b4b6e:	bf18      	it	ne
   b4b70:	2201      	movne	r2, #1
   b4b72:	eb02 02d4 	add.w	r2, r2, r4, lsr #3
   b4b76:	88ec      	ldrh	r4, [r5, #6]
   b4b78:	3b20      	subs	r3, #32
   b4b7a:	4363      	muls	r3, r4
    const unsigned char* ptr = &font->table[char_offset];
   b4b7c:	682c      	ldr	r4, [r5, #0]
void Paint::DrawCharAt(int x, int y, char ascii_char, sFONT* font, int colored) {
   b4b7e:	4688      	mov	r8, r1
    const unsigned char* ptr = &font->table[char_offset];
   b4b80:	fb03 4402 	mla	r4, r3, r2, r4

    for (j = 0; j < font->Height; j++) {
   b4b84:	2700      	movs	r7, #0
        for (i = 0; i < font->Width; i++) {
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b4b86:	f04f 0b80 	mov.w	fp, #128	; 0x80
    for (j = 0; j < font->Height; j++) {
   b4b8a:	88eb      	ldrh	r3, [r5, #6]
   b4b8c:	42bb      	cmp	r3, r7
   b4b8e:	dd20      	ble.n	b4bd2 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x72>
        for (i = 0; i < font->Width; i++) {
   b4b90:	2600      	movs	r6, #0
                DrawPixel(x + i, y + j, colored);
   b4b92:	eb09 0207 	add.w	r2, r9, r7
        for (i = 0; i < font->Width; i++) {
   b4b96:	88ab      	ldrh	r3, [r5, #4]
   b4b98:	42b3      	cmp	r3, r6
   b4b9a:	dd15      	ble.n	b4bc8 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x68>
            if (pgm_read_byte(ptr) & (0x80 >> (i % 8))) {
   b4b9c:	7821      	ldrb	r1, [r4, #0]
   b4b9e:	f006 0a07 	and.w	sl, r6, #7
   b4ba2:	fa4b f30a 	asr.w	r3, fp, sl
   b4ba6:	4219      	tst	r1, r3
   b4ba8:	d008      	beq.n	b4bbc <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x5c>
                DrawPixel(x + i, y + j, colored);
   b4baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b4bac:	9201      	str	r2, [sp, #4]
   b4bae:	eb06 0108 	add.w	r1, r6, r8
   b4bb2:	9000      	str	r0, [sp, #0]
   b4bb4:	f7ff ff93 	bl	b4ade <_ZN5Paint9DrawPixelEiii>
   b4bb8:	e9dd 0200 	ldrd	r0, r2, [sp]
            }
            if (i % 8 == 7) {
   b4bbc:	f1ba 0f07 	cmp.w	sl, #7
                ptr++;
   b4bc0:	bf08      	it	eq
   b4bc2:	3401      	addeq	r4, #1
        for (i = 0; i < font->Width; i++) {
   b4bc4:	3601      	adds	r6, #1
   b4bc6:	e7e6      	b.n	b4b96 <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x36>
            }
        }
        if (font->Width % 8 != 0) {
   b4bc8:	075b      	lsls	r3, r3, #29
            ptr++;
   b4bca:	bf18      	it	ne
   b4bcc:	3401      	addne	r4, #1
    for (j = 0; j < font->Height; j++) {
   b4bce:	3701      	adds	r7, #1
   b4bd0:	e7db      	b.n	b4b8a <_ZN5Paint10DrawCharAtEiicP5sFONTi+0x2a>
        }
    }
}
   b4bd2:	b003      	add	sp, #12
   b4bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4bd8 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint::DrawStringAt(int x, int y, const char* text, sFONT* font, int colored) {
   b4bd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4bdc:	9f08      	ldr	r7, [sp, #32]
   b4bde:	4606      	mov	r6, r0
   b4be0:	460c      	mov	r4, r1
   b4be2:	4690      	mov	r8, r2
   b4be4:	1e5d      	subs	r5, r3, #1
    const char* p_text = text;
    unsigned int counter = 0;
    int refcolumn = x;
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
   b4be6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   b4bea:	b153      	cbz	r3, b4c02 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0x2a>
        /* Display one character on EPD */
        DrawCharAt(refcolumn, y, *p_text, font, colored);
   b4bec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4bee:	4621      	mov	r1, r4
   b4bf0:	e9cd 7200 	strd	r7, r2, [sp]
   b4bf4:	4630      	mov	r0, r6
   b4bf6:	4642      	mov	r2, r8
   b4bf8:	f7ff ffb2 	bl	b4b60 <_ZN5Paint10DrawCharAtEiicP5sFONTi>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
   b4bfc:	88bb      	ldrh	r3, [r7, #4]
   b4bfe:	441c      	add	r4, r3
    while (*p_text != 0) {
   b4c00:	e7f1      	b.n	b4be6 <_ZN5Paint12DrawStringAtEiiPKcP5sFONTi+0xe>
        /* Point on the next character */
        p_text++;
        counter++;
    }
}
   b4c02:	b002      	add	sp, #8
   b4c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4c08 <_ZN5Paint18DrawHorizontalLineEiiii>:
}

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint::DrawHorizontalLine(int x, int y, int line_width, int colored) {
   b4c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c0a:	4606      	mov	r6, r0
   b4c0c:	4617      	mov	r7, r2
    int i;
    for (i = x; i < x + line_width; i++) {
   b4c0e:	460c      	mov	r4, r1
   b4c10:	18cd      	adds	r5, r1, r3
   b4c12:	42a5      	cmp	r5, r4
   b4c14:	dd07      	ble.n	b4c26 <_ZN5Paint18DrawHorizontalLineEiiii+0x1e>
        DrawPixel(i, y, colored);
   b4c16:	4621      	mov	r1, r4
   b4c18:	9b06      	ldr	r3, [sp, #24]
   b4c1a:	463a      	mov	r2, r7
   b4c1c:	4630      	mov	r0, r6
   b4c1e:	f7ff ff5e 	bl	b4ade <_ZN5Paint9DrawPixelEiii>
    for (i = x; i < x + line_width; i++) {
   b4c22:	3401      	adds	r4, #1
   b4c24:	e7f5      	b.n	b4c12 <_ZN5Paint18DrawHorizontalLineEiiii+0xa>
    }
}
   b4c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c28 <_ZN5Paint16DrawVerticalLineEiiii>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint::DrawVerticalLine(int x, int y, int line_height, int colored) {
   b4c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4c2a:	4606      	mov	r6, r0
   b4c2c:	460f      	mov	r7, r1
    int i;
    for (i = y; i < y + line_height; i++) {
   b4c2e:	4614      	mov	r4, r2
   b4c30:	18d5      	adds	r5, r2, r3
   b4c32:	42a5      	cmp	r5, r4
   b4c34:	dd07      	ble.n	b4c46 <_ZN5Paint16DrawVerticalLineEiiii+0x1e>
        DrawPixel(x, i, colored);
   b4c36:	4622      	mov	r2, r4
   b4c38:	9b06      	ldr	r3, [sp, #24]
   b4c3a:	4639      	mov	r1, r7
   b4c3c:	4630      	mov	r0, r6
   b4c3e:	f7ff ff4e 	bl	b4ade <_ZN5Paint9DrawPixelEiii>
    for (i = y; i < y + line_height; i++) {
   b4c42:	3401      	adds	r4, #1
   b4c44:	e7f5      	b.n	b4c32 <_ZN5Paint16DrawVerticalLineEiiii+0xa>
    }
}
   b4c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4c48 <_ZN5Paint19DrawFilledRectangleEiiiii>:
}

/**
*  @brief: this draws a filled rectangle
*/
void Paint::DrawFilledRectangle(int x0, int y0, int x1, int y1, int colored) {
   b4c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4c4c:	428b      	cmp	r3, r1
   b4c4e:	4604      	mov	r4, r0
   b4c50:	9808      	ldr	r0, [sp, #32]
   b4c52:	461e      	mov	r6, r3
   b4c54:	bfa8      	it	ge
   b4c56:	460e      	movge	r6, r1
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
    max_x = x1 > x0 ? x1 : x0;
   b4c58:	428b      	cmp	r3, r1
   b4c5a:	bfb8      	it	lt
   b4c5c:	460b      	movlt	r3, r1
   b4c5e:	4290      	cmp	r0, r2
   b4c60:	4680      	mov	r8, r0
   b4c62:	bfa8      	it	ge
   b4c64:	4690      	movge	r8, r2
    min_y = y1 > y0 ? y0 : y1;
    max_y = y1 > y0 ? y1 : y0;
    
    for (i = min_x; i <= max_x; i++) {
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b4c66:	4290      	cmp	r0, r2
   b4c68:	bfac      	ite	ge
   b4c6a:	ebc8 0700 	rsbge	r7, r8, r0
   b4c6e:	ebc8 0702 	rsblt	r7, r8, r2
   b4c72:	461d      	mov	r5, r3
   b4c74:	3701      	adds	r7, #1
    for (i = min_x; i <= max_x; i++) {
   b4c76:	42ae      	cmp	r6, r5
   b4c78:	dc09      	bgt.n	b4c8e <_ZN5Paint19DrawFilledRectangleEiiiii+0x46>
      DrawVerticalLine(i, min_y, max_y - min_y + 1, colored);
   b4c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4c7c:	9300      	str	r3, [sp, #0]
   b4c7e:	4631      	mov	r1, r6
   b4c80:	463b      	mov	r3, r7
   b4c82:	4642      	mov	r2, r8
   b4c84:	4620      	mov	r0, r4
   b4c86:	f7ff ffcf 	bl	b4c28 <_ZN5Paint16DrawVerticalLineEiiii>
    for (i = min_x; i <= max_x; i++) {
   b4c8a:	3601      	adds	r6, #1
   b4c8c:	e7f3      	b.n	b4c76 <_ZN5Paint19DrawFilledRectangleEiiiii+0x2e>
    }
}
   b4c8e:	b002      	add	sp, #8
   b4c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4c94 <_ZN8max1720xC1Ev>:
 */

#include "../lib/MAX17201/src/max1720x.h"

// Initializes variables and the Wire library
max1720x::max1720x() { 
   b4c94:	b510      	push	{r4, lr}
   b4c96:	4604      	mov	r4, r0
    Wire.begin(); 
   b4c98:	f001 f9c4 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4c9c:	f000 fc20 	bl	b54e0 <_ZN7TwoWire5beginEv>
}
   b4ca0:	4620      	mov	r0, r4
   b4ca2:	bd10      	pop	{r4, pc}

000b4ca4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b4ca4:	6803      	ldr	r3, [r0, #0]
   b4ca6:	b2c9      	uxtb	r1, r1
   b4ca8:	689b      	ldr	r3, [r3, #8]
   b4caa:	4718      	bx	r3

000b4cac <_ZN17DFRobot_PN532_IIC12writeCommandEPhh>:
    return dataSrt;
}
/*
    Send commands to the chip through the iic ports*/

void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t checksum;
    cmdlen++;
   b4cb0:	3201      	adds	r2, #1
    delay(2);     // Delay for random time to wake up NFC module
   b4cb2:	2002      	movs	r0, #2
    cmdlen++;
   b4cb4:	b2d5      	uxtb	r5, r2
void DFRobot_PN532_IIC::writeCommand(uint8_t* cmd, uint8_t cmdlen) {     
   b4cb6:	460f      	mov	r7, r1
    delay(2);     // Delay for random time to wake up NFC module
   b4cb8:	f000 fb32 	bl	b5320 <delay>
    // I2C START
    Wire.beginTransmission(I2C_ADDRESS);
   b4cbc:	f001 f9b2 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4cc0:	2124      	movs	r1, #36	; 0x24
   b4cc2:	f000 fc43 	bl	b554c <_ZN7TwoWire17beginTransmissionEi>
    checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
    Wire.write(PN532_PREAMBLE);
   b4cc6:	f001 f9ad 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4cca:	2100      	movs	r1, #0
   b4ccc:	f7ff ffea 	bl	b4ca4 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE1);
   b4cd0:	f001 f9a8 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4cd4:	2100      	movs	r1, #0
   b4cd6:	f7ff ffe5 	bl	b4ca4 <_ZN7TwoWire5writeEi>
    Wire.write(PN532_STARTCODE2);
   b4cda:	f001 f9a3 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4cde:	21ff      	movs	r1, #255	; 0xff
   b4ce0:	f7ff ffe0 	bl	b4ca4 <_ZN7TwoWire5writeEi>
    Wire.write(cmdlen);
   b4ce4:	f001 f99e 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4ce8:	6803      	ldr	r3, [r0, #0]
   b4cea:	4629      	mov	r1, r5
   b4cec:	689b      	ldr	r3, [r3, #8]
   b4cee:	4798      	blx	r3
    Wire.write(~cmdlen + 1);
   b4cf0:	f001 f998 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4cf4:	4269      	negs	r1, r5
   b4cf6:	f7ff ffd5 	bl	b4ca4 <_ZN7TwoWire5writeEi>
    Wire.write(HOSTTOPN532);
   b4cfa:	f001 f993 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4cfe:	21d4      	movs	r1, #212	; 0xd4
   b4d00:	f7ff ffd0 	bl	b4ca4 <_ZN7TwoWire5writeEi>
   b4d04:	2400      	movs	r4, #0
    checksum += HOSTTOPN532;
   b4d06:	26d3      	movs	r6, #211	; 0xd3
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b4d08:	3d01      	subs	r5, #1
   b4d0a:	f104 0801 	add.w	r8, r4, #1
   b4d0e:	b2e4      	uxtb	r4, r4
   b4d10:	42ac      	cmp	r4, r5
   b4d12:	da0a      	bge.n	b4d2a <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x7e>
      Wire.write(cmd[i]);
   b4d14:	f001 f986 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4d18:	6803      	ldr	r3, [r0, #0]
   b4d1a:	5d39      	ldrb	r1, [r7, r4]
   b4d1c:	689b      	ldr	r3, [r3, #8]
   b4d1e:	4798      	blx	r3
      checksum += cmd[i];
   b4d20:	5d39      	ldrb	r1, [r7, r4]
   b4d22:	440e      	add	r6, r1
   b4d24:	b2f6      	uxtb	r6, r6
    for (uint8_t i = 0; i < cmdlen - 1; i++) {
   b4d26:	4644      	mov	r4, r8
   b4d28:	e7ef      	b.n	b4d0a <_ZN17DFRobot_PN532_IIC12writeCommandEPhh+0x5e>
    }
    Wire.write((byte)~checksum);
   b4d2a:	f001 f97b 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4d2e:	6803      	ldr	r3, [r0, #0]
   b4d30:	43f1      	mvns	r1, r6
   b4d32:	689b      	ldr	r3, [r3, #8]
   b4d34:	b2c9      	uxtb	r1, r1
   b4d36:	4798      	blx	r3
    Wire.write((byte)PN532_POSTAMBLE);
   b4d38:	f001 f974 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4d3c:	6803      	ldr	r3, [r0, #0]
   b4d3e:	2100      	movs	r1, #0
   b4d40:	689b      	ldr	r3, [r3, #8]
   b4d42:	4798      	blx	r3
    Wire.endTransmission();
   b4d44:	f001 f96e 	bl	b6024 <_Z19__fetch_global_Wirev>
}
   b4d48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Wire.endTransmission();
   b4d4c:	f000 bc05 	b.w	b555a <_ZN7TwoWire15endTransmissionEv>

000b4d50 <_ZN17DFRobot_PN532_IICC1Ehh>:
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
        return false ;
    }
    return true;
}
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b4d50:	b538      	push	{r3, r4, r5, lr}
   b4d52:	4604      	mov	r4, r0
   b4d54:	4b06      	ldr	r3, [pc, #24]	; (b4d70 <_ZN17DFRobot_PN532_IICC1Ehh+0x20>)
    
    _irq = irq;
   b4d56:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
DFRobot_PN532_IIC::DFRobot_PN532_IIC(uint8_t irq,uint8_t mode){
   b4d5a:	4608      	mov	r0, r1
   b4d5c:	4615      	mov	r5, r2
   b4d5e:	6023      	str	r3, [r4, #0]
    pinMode(_irq, INPUT);
   b4d60:	2100      	movs	r1, #0
   b4d62:	f001 f907 	bl	b5f74 <pinMode>
    _mode = mode;
   b4d66:	f884 5049 	strb.w	r5, [r4, #73]	; 0x49
}
   b4d6a:	4620      	mov	r0, r4
   b4d6c:	bd38      	pop	{r3, r4, r5, pc}
   b4d6e:	bf00      	nop
   b4d70:	000b8e8c 	.word	0x000b8e8c

000b4d74 <_ZN17DFRobot_PN532_IIC10waitRemindEv>:
bool DFRobot_PN532_IIC::waitRemind(){
   b4d74:	b538      	push	{r3, r4, r5, lr}
   b4d76:	4605      	mov	r5, r0
   b4d78:	2465      	movs	r4, #101	; 0x65
    uint16_t timer = 0;
     //digitalRead(_irq)
    //return ret == 0;
    //bool b = digitalRead(_irq);
    //Serial.println(b);
    while(digitalRead(_irq)!=0){
   b4d7a:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
   b4d7e:	f001 f923 	bl	b5fc8 <digitalRead>
   b4d82:	b130      	cbz	r0, b4d92 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x1e>
        //Serial.print(digitalRead(_irq));
    if (timeout != 0) {
      timer += 10;
      if (timer > timeout) {
   b4d84:	3c01      	subs	r4, #1
   b4d86:	b2a4      	uxth	r4, r4
   b4d88:	b12c      	cbz	r4, b4d96 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x22>
        return false;
      }
    }
    delay(10);
   b4d8a:	200a      	movs	r0, #10
   b4d8c:	f000 fac8 	bl	b5320 <delay>
    while(digitalRead(_irq)!=0){
   b4d90:	e7f3      	b.n	b4d7a <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x6>
    }
    //Serial.print(digitalRead(_irq));
    return true;
   b4d92:	2001      	movs	r0, #1
}
   b4d94:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b4d96:	4620      	mov	r0, r4
   b4d98:	e7fc      	b.n	b4d94 <_ZN17DFRobot_PN532_IIC10waitRemindEv+0x20>

000b4d9a <_ZN17DFRobot_PN532_IIC7readAckEil>:
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b4d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    pn532ack[0] = 0x00;
   b4d9c:	2300      	movs	r3, #0
   b4d9e:	f88d 3000 	strb.w	r3, [sp]
    pn532ack[1] = 0x00;
   b4da2:	f88d 3001 	strb.w	r3, [sp, #1]
    pn532ack[3] = 0x00;
   b4da6:	f88d 3003 	strb.w	r3, [sp, #3]
    pn532ack[5] = 0x00;
   b4daa:	f88d 3005 	strb.w	r3, [sp, #5]
    if(_mode == 1){
   b4dae:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
    pn532ack[2] = 0xFF;
   b4db2:	22ff      	movs	r2, #255	; 0xff
    if(_mode == 1){
   b4db4:	2b01      	cmp	r3, #1
bool DFRobot_PN532_IIC::readAck(int x,long timeout ) {
   b4db6:	4604      	mov	r4, r0
   b4db8:	460d      	mov	r5, r1
    pn532ack[2] = 0xFF;
   b4dba:	f88d 2002 	strb.w	r2, [sp, #2]
    pn532ack[4] = 0xFF;
   b4dbe:	f88d 2004 	strb.w	r2, [sp, #4]
    if(_mode == 1){
   b4dc2:	d141      	bne.n	b4e48 <_ZN17DFRobot_PN532_IIC7readAckEil+0xae>
    if(!waitRemind())
   b4dc4:	f7ff ffd6 	bl	b4d74 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b4dc8:	b910      	cbnz	r0, b4dd0 <_ZN17DFRobot_PN532_IIC7readAckEil+0x36>
        return false;
   b4dca:	2000      	movs	r0, #0
}
   b4dcc:	b003      	add	sp, #12
   b4dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Wire.requestFrom(I2C_ADDRESS,8);
   b4dd0:	f001 f928 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4dd4:	2208      	movs	r2, #8
   b4dd6:	2124      	movs	r1, #36	; 0x24
   b4dd8:	f000 fbb1 	bl	b553e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4ddc:	f001 f922 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4de0:	6803      	ldr	r3, [r0, #0]
   b4de2:	695b      	ldr	r3, [r3, #20]
   b4de4:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b4de6:	1d26      	adds	r6, r4, #4
   b4de8:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b4dec:	2001      	movs	r0, #1
   b4dee:	f000 fa97 	bl	b5320 <delay>
        receiveACK[i]= Wire.read();
   b4df2:	f001 f917 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4df6:	6803      	ldr	r3, [r0, #0]
   b4df8:	695b      	ldr	r3, [r3, #20]
   b4dfa:	4798      	blx	r3
   b4dfc:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b4e00:	42be      	cmp	r6, r7
   b4e02:	d1f3      	bne.n	b4dec <_ZN17DFRobot_PN532_IIC7readAckEil+0x52>
    if(!waitRemind() ) return false;
   b4e04:	4620      	mov	r0, r4
   b4e06:	f7ff ffb5 	bl	b4d74 <_ZN17DFRobot_PN532_IIC10waitRemindEv>
   b4e0a:	2800      	cmp	r0, #0
   b4e0c:	d0dd      	beq.n	b4dca <_ZN17DFRobot_PN532_IIC7readAckEil+0x30>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b4e0e:	f001 f909 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e12:	1f2a      	subs	r2, r5, #4
   b4e14:	2124      	movs	r1, #36	; 0x24
   b4e16:	f000 fb92 	bl	b553e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4e1a:	f001 f903 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e1e:	6803      	ldr	r3, [r0, #0]
   b4e20:	695b      	ldr	r3, [r3, #20]
   b4e22:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b4e24:	f06f 0709 	mvn.w	r7, #9
   b4e28:	3d06      	subs	r5, #6
   b4e2a:	1b3f      	subs	r7, r7, r4
   b4e2c:	19bb      	adds	r3, r7, r6
   b4e2e:	429d      	cmp	r5, r3
   b4e30:	dd49      	ble.n	b4ec6 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b4e32:	2001      	movs	r0, #1
   b4e34:	f000 fa74 	bl	b5320 <delay>
        receiveACK[6 + i] = Wire.read();
   b4e38:	f001 f8f4 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e3c:	6803      	ldr	r3, [r0, #0]
   b4e3e:	695b      	ldr	r3, [r3, #20]
   b4e40:	4798      	blx	r3
   b4e42:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b4e46:	e7f1      	b.n	b4e2c <_ZN17DFRobot_PN532_IIC7readAckEil+0x92>
    else if(_mode == 0){
   b4e48:	2b00      	cmp	r3, #0
   b4e4a:	d13c      	bne.n	b4ec6 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
    delay(30);
   b4e4c:	201e      	movs	r0, #30
   b4e4e:	f000 fa67 	bl	b5320 <delay>
    Wire.requestFrom(I2C_ADDRESS,8);
   b4e52:	f001 f8e7 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e56:	2208      	movs	r2, #8
   b4e58:	2124      	movs	r1, #36	; 0x24
   b4e5a:	f000 fb70 	bl	b553e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4e5e:	f001 f8e1 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e62:	6803      	ldr	r3, [r0, #0]
   b4e64:	695b      	ldr	r3, [r3, #20]
   b4e66:	4798      	blx	r3
    for(int i = 0; i < 6; i++){
   b4e68:	1d26      	adds	r6, r4, #4
   b4e6a:	f104 070a 	add.w	r7, r4, #10
        delay(1);
   b4e6e:	2001      	movs	r0, #1
   b4e70:	f000 fa56 	bl	b5320 <delay>
        receiveACK[i]= Wire.read();
   b4e74:	f001 f8d6 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e78:	6803      	ldr	r3, [r0, #0]
   b4e7a:	695b      	ldr	r3, [r3, #20]
   b4e7c:	4798      	blx	r3
   b4e7e:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < 6; i++){
   b4e82:	42be      	cmp	r6, r7
   b4e84:	d1f3      	bne.n	b4e6e <_ZN17DFRobot_PN532_IIC7readAckEil+0xd4>
    delay(30);
   b4e86:	201e      	movs	r0, #30
   b4e88:	f000 fa4a 	bl	b5320 <delay>
    Wire.requestFrom(I2C_ADDRESS,x-4);
   b4e8c:	f001 f8ca 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e90:	1f2a      	subs	r2, r5, #4
   b4e92:	2124      	movs	r1, #36	; 0x24
   b4e94:	f000 fb53 	bl	b553e <_ZN7TwoWire11requestFromEhj>
    Wire.read();
   b4e98:	f001 f8c4 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4e9c:	6803      	ldr	r3, [r0, #0]
   b4e9e:	695b      	ldr	r3, [r3, #20]
   b4ea0:	4798      	blx	r3
    for(int i = 0; i < x - 6; i++){
   b4ea2:	f06f 0709 	mvn.w	r7, #9
   b4ea6:	3d06      	subs	r5, #6
   b4ea8:	1b3f      	subs	r7, r7, r4
   b4eaa:	19bb      	adds	r3, r7, r6
   b4eac:	429d      	cmp	r5, r3
   b4eae:	dd0a      	ble.n	b4ec6 <_ZN17DFRobot_PN532_IIC7readAckEil+0x12c>
        delay(1);
   b4eb0:	2001      	movs	r0, #1
   b4eb2:	f000 fa35 	bl	b5320 <delay>
        receiveACK[6 + i] = Wire.read();
   b4eb6:	f001 f8b5 	bl	b6024 <_Z19__fetch_global_Wirev>
   b4eba:	6803      	ldr	r3, [r0, #0]
   b4ebc:	695b      	ldr	r3, [r3, #20]
   b4ebe:	4798      	blx	r3
   b4ec0:	f806 0b01 	strb.w	r0, [r6], #1
    for(int i = 0; i < x - 6; i++){
   b4ec4:	e7f1      	b.n	b4eaa <_ZN17DFRobot_PN532_IIC7readAckEil+0x110>
    if(strncmp((char *)pn532ack,(char *)receiveACK, 6)!=0){
   b4ec6:	2206      	movs	r2, #6
   b4ec8:	1d21      	adds	r1, r4, #4
   b4eca:	4668      	mov	r0, sp
   b4ecc:	f001 f962 	bl	b6194 <strncmp>
   b4ed0:	fab0 f080 	clz	r0, r0
   b4ed4:	0940      	lsrs	r0, r0, #5
   b4ed6:	e779      	b.n	b4dcc <_ZN17DFRobot_PN532_IIC7readAckEil+0x32>

000b4ed8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ed8:	b508      	push	{r3, lr}
   b4eda:	4b02      	ldr	r3, [pc, #8]	; (b4ee4 <os_mutex_recursive_create+0xc>)
   b4edc:	681b      	ldr	r3, [r3, #0]
   b4ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4ee0:	9301      	str	r3, [sp, #4]
   b4ee2:	bd08      	pop	{r3, pc}
   b4ee4:	00030248 	.word	0x00030248

000b4ee8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4ee8:	b508      	push	{r3, lr}
   b4eea:	4b02      	ldr	r3, [pc, #8]	; (b4ef4 <HAL_RNG_GetRandomNumber+0xc>)
   b4eec:	681b      	ldr	r3, [r3, #0]
   b4eee:	685b      	ldr	r3, [r3, #4]
   b4ef0:	9301      	str	r3, [sp, #4]
   b4ef2:	bd08      	pop	{r3, pc}
   b4ef4:	00030218 	.word	0x00030218

000b4ef8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4ef8:	b508      	push	{r3, lr}
   b4efa:	4b02      	ldr	r3, [pc, #8]	; (b4f04 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4efc:	681b      	ldr	r3, [r3, #0]
   b4efe:	695b      	ldr	r3, [r3, #20]
   b4f00:	9301      	str	r3, [sp, #4]
   b4f02:	bd08      	pop	{r3, pc}
   b4f04:	00030218 	.word	0x00030218

000b4f08 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4f08:	b508      	push	{r3, lr}
   b4f0a:	4b02      	ldr	r3, [pc, #8]	; (b4f14 <hal_gpio_mode+0xc>)
   b4f0c:	681b      	ldr	r3, [r3, #0]
   b4f0e:	689b      	ldr	r3, [r3, #8]
   b4f10:	9301      	str	r3, [sp, #4]
   b4f12:	bd08      	pop	{r3, pc}
   b4f14:	0003022c 	.word	0x0003022c

000b4f18 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4f18:	b508      	push	{r3, lr}
   b4f1a:	4b02      	ldr	r3, [pc, #8]	; (b4f24 <hal_gpio_get_mode+0xc>)
   b4f1c:	681b      	ldr	r3, [r3, #0]
   b4f1e:	68db      	ldr	r3, [r3, #12]
   b4f20:	9301      	str	r3, [sp, #4]
   b4f22:	bd08      	pop	{r3, pc}
   b4f24:	0003022c 	.word	0x0003022c

000b4f28 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4f28:	b508      	push	{r3, lr}
   b4f2a:	4b02      	ldr	r3, [pc, #8]	; (b4f34 <hal_gpio_write+0xc>)
   b4f2c:	681b      	ldr	r3, [r3, #0]
   b4f2e:	691b      	ldr	r3, [r3, #16]
   b4f30:	9301      	str	r3, [sp, #4]
   b4f32:	bd08      	pop	{r3, pc}
   b4f34:	0003022c 	.word	0x0003022c

000b4f38 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b4f38:	b508      	push	{r3, lr}
   b4f3a:	4b02      	ldr	r3, [pc, #8]	; (b4f44 <hal_gpio_read+0xc>)
   b4f3c:	681b      	ldr	r3, [r3, #0]
   b4f3e:	695b      	ldr	r3, [r3, #20]
   b4f40:	9301      	str	r3, [sp, #4]
   b4f42:	bd08      	pop	{r3, pc}
   b4f44:	0003022c 	.word	0x0003022c

000b4f48 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4f48:	b508      	push	{r3, lr}
   b4f4a:	4b02      	ldr	r3, [pc, #8]	; (b4f54 <hal_i2c_begin+0xc>)
   b4f4c:	681b      	ldr	r3, [r3, #0]
   b4f4e:	68db      	ldr	r3, [r3, #12]
   b4f50:	9301      	str	r3, [sp, #4]
   b4f52:	bd08      	pop	{r3, pc}
   b4f54:	00030228 	.word	0x00030228

000b4f58 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4f58:	b508      	push	{r3, lr}
   b4f5a:	4b02      	ldr	r3, [pc, #8]	; (b4f64 <hal_i2c_begin_transmission+0xc>)
   b4f5c:	681b      	ldr	r3, [r3, #0]
   b4f5e:	699b      	ldr	r3, [r3, #24]
   b4f60:	9301      	str	r3, [sp, #4]
   b4f62:	bd08      	pop	{r3, pc}
   b4f64:	00030228 	.word	0x00030228

000b4f68 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <hal_i2c_end_transmission+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	69db      	ldr	r3, [r3, #28]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	00030228 	.word	0x00030228

000b4f78 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <hal_i2c_write+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	6a1b      	ldr	r3, [r3, #32]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	00030228 	.word	0x00030228

000b4f88 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <hal_i2c_available+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	00030228 	.word	0x00030228

000b4f98 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <hal_i2c_read+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030228 	.word	0x00030228

000b4fa8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <hal_i2c_peek+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030228 	.word	0x00030228

000b4fb8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <hal_i2c_flush+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030228 	.word	0x00030228

000b4fc8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <hal_i2c_is_enabled+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030228 	.word	0x00030228

000b4fd8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <hal_i2c_init+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	00030228 	.word	0x00030228

000b4fe8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <hal_i2c_request_ex+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	00030228 	.word	0x00030228

000b4ff8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <inet_inet_ntop+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	695b      	ldr	r3, [r3, #20]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030264 	.word	0x00030264

000b5008 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <netdb_freeaddrinfo+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	689b      	ldr	r3, [r3, #8]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030268 	.word	0x00030268

000b5018 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <netdb_getaddrinfo+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	68db      	ldr	r3, [r3, #12]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030268 	.word	0x00030268

000b5028 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <hal_spi_begin+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	681b      	ldr	r3, [r3, #0]
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	00030230 	.word	0x00030230

000b5038 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <hal_spi_transfer+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	695b      	ldr	r3, [r3, #20]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	00030230 	.word	0x00030230

000b5048 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <hal_spi_init+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	69db      	ldr	r3, [r3, #28]
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	00030230 	.word	0x00030230

000b5058 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <hal_spi_is_enabled+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	6a1b      	ldr	r3, [r3, #32]
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030230 	.word	0x00030230

000b5068 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <hal_spi_info+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030230 	.word	0x00030230

000b5078 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <hal_spi_set_settings+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030230 	.word	0x00030230

000b5088 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <hal_spi_acquire+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	00030230 	.word	0x00030230

000b5098 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <hal_spi_release+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	00030230 	.word	0x00030230

000b50a8 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <hal_usart_write+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	68db      	ldr	r3, [r3, #12]
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	0003023c 	.word	0x0003023c

000b50b8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <hal_usart_available+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	691b      	ldr	r3, [r3, #16]
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	0003023c 	.word	0x0003023c

000b50c8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <hal_usart_read+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	695b      	ldr	r3, [r3, #20]
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	0003023c 	.word	0x0003023c

000b50d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <hal_usart_peek+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	699b      	ldr	r3, [r3, #24]
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	0003023c 	.word	0x0003023c

000b50e8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <hal_usart_flush+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	69db      	ldr	r3, [r3, #28]
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	0003023c 	.word	0x0003023c

000b50f8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b50f8:	b508      	push	{r3, lr}
   b50fa:	4b02      	ldr	r3, [pc, #8]	; (b5104 <hal_usart_is_enabled+0xc>)
   b50fc:	681b      	ldr	r3, [r3, #0]
   b50fe:	6a1b      	ldr	r3, [r3, #32]
   b5100:	9301      	str	r3, [sp, #4]
   b5102:	bd08      	pop	{r3, pc}
   b5104:	0003023c 	.word	0x0003023c

000b5108 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5108:	b508      	push	{r3, lr}
   b510a:	4b02      	ldr	r3, [pc, #8]	; (b5114 <hal_usart_available_data_for_write+0xc>)
   b510c:	681b      	ldr	r3, [r3, #0]
   b510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5110:	9301      	str	r3, [sp, #4]
   b5112:	bd08      	pop	{r3, pc}
   b5114:	0003023c 	.word	0x0003023c

000b5118 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5118:	b508      	push	{r3, lr}
   b511a:	4b02      	ldr	r3, [pc, #8]	; (b5124 <hal_usart_init_ex+0xc>)
   b511c:	681b      	ldr	r3, [r3, #0]
   b511e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5120:	9301      	str	r3, [sp, #4]
   b5122:	bd08      	pop	{r3, pc}
   b5124:	0003023c 	.word	0x0003023c

000b5128 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5128:	b508      	push	{r3, lr}
   b512a:	4b02      	ldr	r3, [pc, #8]	; (b5134 <HAL_USB_USART_Init+0xc>)
   b512c:	681b      	ldr	r3, [r3, #0]
   b512e:	681b      	ldr	r3, [r3, #0]
   b5130:	9301      	str	r3, [sp, #4]
   b5132:	bd08      	pop	{r3, pc}
   b5134:	0003024c 	.word	0x0003024c

000b5138 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5138:	b508      	push	{r3, lr}
   b513a:	4b02      	ldr	r3, [pc, #8]	; (b5144 <HAL_USB_USART_Begin+0xc>)
   b513c:	681b      	ldr	r3, [r3, #0]
   b513e:	685b      	ldr	r3, [r3, #4]
   b5140:	9301      	str	r3, [sp, #4]
   b5142:	bd08      	pop	{r3, pc}
   b5144:	0003024c 	.word	0x0003024c

000b5148 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5148:	b508      	push	{r3, lr}
   b514a:	4b02      	ldr	r3, [pc, #8]	; (b5154 <HAL_USB_USART_Available_Data+0xc>)
   b514c:	681b      	ldr	r3, [r3, #0]
   b514e:	691b      	ldr	r3, [r3, #16]
   b5150:	9301      	str	r3, [sp, #4]
   b5152:	bd08      	pop	{r3, pc}
   b5154:	0003024c 	.word	0x0003024c

000b5158 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5158:	b508      	push	{r3, lr}
   b515a:	4b02      	ldr	r3, [pc, #8]	; (b5164 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b515c:	681b      	ldr	r3, [r3, #0]
   b515e:	695b      	ldr	r3, [r3, #20]
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	bd08      	pop	{r3, pc}
   b5164:	0003024c 	.word	0x0003024c

000b5168 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5168:	b508      	push	{r3, lr}
   b516a:	4b02      	ldr	r3, [pc, #8]	; (b5174 <HAL_USB_USART_Receive_Data+0xc>)
   b516c:	681b      	ldr	r3, [r3, #0]
   b516e:	699b      	ldr	r3, [r3, #24]
   b5170:	9301      	str	r3, [sp, #4]
   b5172:	bd08      	pop	{r3, pc}
   b5174:	0003024c 	.word	0x0003024c

000b5178 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5178:	b508      	push	{r3, lr}
   b517a:	4b02      	ldr	r3, [pc, #8]	; (b5184 <HAL_USB_USART_Send_Data+0xc>)
   b517c:	681b      	ldr	r3, [r3, #0]
   b517e:	69db      	ldr	r3, [r3, #28]
   b5180:	9301      	str	r3, [sp, #4]
   b5182:	bd08      	pop	{r3, pc}
   b5184:	0003024c 	.word	0x0003024c

000b5188 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b02      	ldr	r3, [pc, #8]	; (b5194 <HAL_USB_USART_Flush_Data+0xc>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	6a1b      	ldr	r3, [r3, #32]
   b5190:	9301      	str	r3, [sp, #4]
   b5192:	bd08      	pop	{r3, pc}
   b5194:	0003024c 	.word	0x0003024c

000b5198 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5198:	b508      	push	{r3, lr}
   b519a:	4b02      	ldr	r3, [pc, #8]	; (b51a4 <set_system_mode+0xc>)
   b519c:	681b      	ldr	r3, [r3, #0]
   b519e:	685b      	ldr	r3, [r3, #4]
   b51a0:	9301      	str	r3, [sp, #4]
   b51a2:	bd08      	pop	{r3, pc}
   b51a4:	00030220 	.word	0x00030220

000b51a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b51a8:	b508      	push	{r3, lr}
   b51aa:	4b02      	ldr	r3, [pc, #8]	; (b51b4 <system_delay_ms+0xc>)
   b51ac:	681b      	ldr	r3, [r3, #0]
   b51ae:	695b      	ldr	r3, [r3, #20]
   b51b0:	9301      	str	r3, [sp, #4]
   b51b2:	bd08      	pop	{r3, pc}
   b51b4:	00030220 	.word	0x00030220

000b51b8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b51b8:	b508      	push	{r3, lr}
   b51ba:	4b02      	ldr	r3, [pc, #8]	; (b51c4 <system_thread_set_state+0xc>)
   b51bc:	681b      	ldr	r3, [r3, #0]
   b51be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51c0:	9301      	str	r3, [sp, #4]
   b51c2:	bd08      	pop	{r3, pc}
   b51c4:	00030220 	.word	0x00030220

000b51c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b51c8:	b508      	push	{r3, lr}
   b51ca:	4b03      	ldr	r3, [pc, #12]	; (b51d8 <system_ctrl_set_app_request_handler+0x10>)
   b51cc:	681b      	ldr	r3, [r3, #0]
   b51ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b51d2:	9301      	str	r3, [sp, #4]
   b51d4:	bd08      	pop	{r3, pc}
   b51d6:	0000      	.short	0x0000
   b51d8:	00030220 	.word	0x00030220

000b51dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b03      	ldr	r3, [pc, #12]	; (b51ec <system_ctrl_set_result+0x10>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b51e6:	9301      	str	r3, [sp, #4]
   b51e8:	bd08      	pop	{r3, pc}
   b51ea:	0000      	.short	0x0000
   b51ec:	00030220 	.word	0x00030220

000b51f0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b51f0:	b508      	push	{r3, lr}
   b51f2:	4b02      	ldr	r3, [pc, #8]	; (b51fc <spark_set_random_seed_from_cloud_handler+0xc>)
   b51f4:	681b      	ldr	r3, [r3, #0]
   b51f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b51f8:	9301      	str	r3, [sp, #4]
   b51fa:	bd08      	pop	{r3, pc}
   b51fc:	00030244 	.word	0x00030244

000b5200 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5200:	b508      	push	{r3, lr}
   b5202:	4b02      	ldr	r3, [pc, #8]	; (b520c <network_connect+0xc>)
   b5204:	681b      	ldr	r3, [r3, #0]
   b5206:	685b      	ldr	r3, [r3, #4]
   b5208:	9301      	str	r3, [sp, #4]
   b520a:	bd08      	pop	{r3, pc}
   b520c:	00030240 	.word	0x00030240

000b5210 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5210:	b508      	push	{r3, lr}
   b5212:	4b02      	ldr	r3, [pc, #8]	; (b521c <network_connecting+0xc>)
   b5214:	681b      	ldr	r3, [r3, #0]
   b5216:	689b      	ldr	r3, [r3, #8]
   b5218:	9301      	str	r3, [sp, #4]
   b521a:	bd08      	pop	{r3, pc}
   b521c:	00030240 	.word	0x00030240

000b5220 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5220:	b508      	push	{r3, lr}
   b5222:	4b02      	ldr	r3, [pc, #8]	; (b522c <network_disconnect+0xc>)
   b5224:	681b      	ldr	r3, [r3, #0]
   b5226:	68db      	ldr	r3, [r3, #12]
   b5228:	9301      	str	r3, [sp, #4]
   b522a:	bd08      	pop	{r3, pc}
   b522c:	00030240 	.word	0x00030240

000b5230 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5230:	b508      	push	{r3, lr}
   b5232:	4b02      	ldr	r3, [pc, #8]	; (b523c <network_ready+0xc>)
   b5234:	681b      	ldr	r3, [r3, #0]
   b5236:	691b      	ldr	r3, [r3, #16]
   b5238:	9301      	str	r3, [sp, #4]
   b523a:	bd08      	pop	{r3, pc}
   b523c:	00030240 	.word	0x00030240

000b5240 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5240:	b508      	push	{r3, lr}
   b5242:	4b02      	ldr	r3, [pc, #8]	; (b524c <network_on+0xc>)
   b5244:	681b      	ldr	r3, [r3, #0]
   b5246:	695b      	ldr	r3, [r3, #20]
   b5248:	9301      	str	r3, [sp, #4]
   b524a:	bd08      	pop	{r3, pc}
   b524c:	00030240 	.word	0x00030240

000b5250 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5250:	b508      	push	{r3, lr}
   b5252:	4b02      	ldr	r3, [pc, #8]	; (b525c <network_off+0xc>)
   b5254:	681b      	ldr	r3, [r3, #0]
   b5256:	699b      	ldr	r3, [r3, #24]
   b5258:	9301      	str	r3, [sp, #4]
   b525a:	bd08      	pop	{r3, pc}
   b525c:	00030240 	.word	0x00030240

000b5260 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5260:	b508      	push	{r3, lr}
   b5262:	4b02      	ldr	r3, [pc, #8]	; (b526c <network_listen+0xc>)
   b5264:	681b      	ldr	r3, [r3, #0]
   b5266:	69db      	ldr	r3, [r3, #28]
   b5268:	9301      	str	r3, [sp, #4]
   b526a:	bd08      	pop	{r3, pc}
   b526c:	00030240 	.word	0x00030240

000b5270 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5270:	b508      	push	{r3, lr}
   b5272:	4b02      	ldr	r3, [pc, #8]	; (b527c <network_listening+0xc>)
   b5274:	681b      	ldr	r3, [r3, #0]
   b5276:	6a1b      	ldr	r3, [r3, #32]
   b5278:	9301      	str	r3, [sp, #4]
   b527a:	bd08      	pop	{r3, pc}
   b527c:	00030240 	.word	0x00030240

000b5280 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5280:	b508      	push	{r3, lr}
   b5282:	4b02      	ldr	r3, [pc, #8]	; (b528c <network_set_listen_timeout+0xc>)
   b5284:	681b      	ldr	r3, [r3, #0]
   b5286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5288:	9301      	str	r3, [sp, #4]
   b528a:	bd08      	pop	{r3, pc}
   b528c:	00030240 	.word	0x00030240

000b5290 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5290:	b508      	push	{r3, lr}
   b5292:	4b02      	ldr	r3, [pc, #8]	; (b529c <network_get_listen_timeout+0xc>)
   b5294:	681b      	ldr	r3, [r3, #0]
   b5296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5298:	9301      	str	r3, [sp, #4]
   b529a:	bd08      	pop	{r3, pc}
   b529c:	00030240 	.word	0x00030240

000b52a0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b52a0:	b508      	push	{r3, lr}
   b52a2:	4b02      	ldr	r3, [pc, #8]	; (b52ac <network_is_on+0xc>)
   b52a4:	681b      	ldr	r3, [r3, #0]
   b52a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52a8:	9301      	str	r3, [sp, #4]
   b52aa:	bd08      	pop	{r3, pc}
   b52ac:	00030240 	.word	0x00030240

000b52b0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b52b0:	b508      	push	{r3, lr}
   b52b2:	4b02      	ldr	r3, [pc, #8]	; (b52bc <network_is_off+0xc>)
   b52b4:	681b      	ldr	r3, [r3, #0]
   b52b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52b8:	9301      	str	r3, [sp, #4]
   b52ba:	bd08      	pop	{r3, pc}
   b52bc:	00030240 	.word	0x00030240

000b52c0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b52c0:	b508      	push	{r3, lr}
   b52c2:	4b02      	ldr	r3, [pc, #8]	; (b52cc <malloc+0xc>)
   b52c4:	681b      	ldr	r3, [r3, #0]
   b52c6:	681b      	ldr	r3, [r3, #0]
   b52c8:	9301      	str	r3, [sp, #4]
   b52ca:	bd08      	pop	{r3, pc}
   b52cc:	0003021c 	.word	0x0003021c

000b52d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b52d0:	b508      	push	{r3, lr}
   b52d2:	4b02      	ldr	r3, [pc, #8]	; (b52dc <free+0xc>)
   b52d4:	681b      	ldr	r3, [r3, #0]
   b52d6:	685b      	ldr	r3, [r3, #4]
   b52d8:	9301      	str	r3, [sp, #4]
   b52da:	bd08      	pop	{r3, pc}
   b52dc:	0003021c 	.word	0x0003021c

000b52e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b52e0:	b508      	push	{r3, lr}
   b52e2:	4b02      	ldr	r3, [pc, #8]	; (b52ec <realloc+0xc>)
   b52e4:	681b      	ldr	r3, [r3, #0]
   b52e6:	689b      	ldr	r3, [r3, #8]
   b52e8:	9301      	str	r3, [sp, #4]
   b52ea:	bd08      	pop	{r3, pc}
   b52ec:	0003021c 	.word	0x0003021c

000b52f0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b52f0:	b508      	push	{r3, lr}
   b52f2:	4b02      	ldr	r3, [pc, #8]	; (b52fc <vsnprintf+0xc>)
   b52f4:	681b      	ldr	r3, [r3, #0]
   b52f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b52f8:	9301      	str	r3, [sp, #4]
   b52fa:	bd08      	pop	{r3, pc}
   b52fc:	0003021c 	.word	0x0003021c

000b5300 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5300:	b508      	push	{r3, lr}
   b5302:	4b02      	ldr	r3, [pc, #8]	; (b530c <__assert_func+0xc>)
   b5304:	681b      	ldr	r3, [r3, #0]
   b5306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5308:	9301      	str	r3, [sp, #4]
   b530a:	bd08      	pop	{r3, pc}
   b530c:	0003021c 	.word	0x0003021c

000b5310 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5310:	b508      	push	{r3, lr}
   b5312:	4b02      	ldr	r3, [pc, #8]	; (b531c <newlib_impure_ptr_callback+0xc>)
   b5314:	681b      	ldr	r3, [r3, #0]
   b5316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5318:	9301      	str	r3, [sp, #4]
   b531a:	bd08      	pop	{r3, pc}
   b531c:	0003021c 	.word	0x0003021c

000b5320 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5320:	2100      	movs	r1, #0
   b5322:	f7ff bf41 	b.w	b51a8 <system_delay_ms>
	...

000b5328 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5328:	4802      	ldr	r0, [pc, #8]	; (b5334 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b532a:	2300      	movs	r3, #0
   b532c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b532e:	f7ff bdd3 	b.w	b4ed8 <os_mutex_recursive_create>
   b5332:	bf00      	nop
   b5334:	2003e69c 	.word	0x2003e69c

000b5338 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b5338:	2200      	movs	r2, #0
   b533a:	6840      	ldr	r0, [r0, #4]
   b533c:	4611      	mov	r1, r2
   b533e:	f7ff bf77 	b.w	b5230 <network_ready>

000b5342 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b5342:	2200      	movs	r2, #0
   b5344:	6840      	ldr	r0, [r0, #4]
   b5346:	4611      	mov	r1, r2
   b5348:	f7ff bf92 	b.w	b5270 <network_listening>

000b534c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b534c:	2200      	movs	r2, #0
   b534e:	6840      	ldr	r0, [r0, #4]
   b5350:	4611      	mov	r1, r2
   b5352:	f7ff bf9d 	b.w	b5290 <network_get_listen_timeout>

000b5356 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5356:	6840      	ldr	r0, [r0, #4]
   b5358:	2200      	movs	r2, #0
   b535a:	f7ff bf91 	b.w	b5280 <network_set_listen_timeout>

000b535e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b535e:	6840      	ldr	r0, [r0, #4]
   b5360:	2200      	movs	r2, #0
   b5362:	f081 0101 	eor.w	r1, r1, #1
   b5366:	f7ff bf7b 	b.w	b5260 <network_listen>

000b536a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b536a:	2300      	movs	r3, #0
   b536c:	6840      	ldr	r0, [r0, #4]
   b536e:	461a      	mov	r2, r3
   b5370:	4619      	mov	r1, r3
   b5372:	f7ff bf6d 	b.w	b5250 <network_off>

000b5376 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5376:	2300      	movs	r3, #0
   b5378:	6840      	ldr	r0, [r0, #4]
   b537a:	461a      	mov	r2, r3
   b537c:	4619      	mov	r1, r3
   b537e:	f7ff bf5f 	b.w	b5240 <network_on>

000b5382 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5382:	2200      	movs	r2, #0
   b5384:	6840      	ldr	r0, [r0, #4]
   b5386:	4611      	mov	r1, r2
   b5388:	f7ff bf42 	b.w	b5210 <network_connecting>

000b538c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b538c:	6840      	ldr	r0, [r0, #4]
   b538e:	2200      	movs	r2, #0
   b5390:	2102      	movs	r1, #2
   b5392:	f7ff bf45 	b.w	b5220 <network_disconnect>

000b5396 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5396:	2300      	movs	r3, #0
   b5398:	6840      	ldr	r0, [r0, #4]
   b539a:	461a      	mov	r2, r3
   b539c:	f7ff bf30 	b.w	b5200 <network_connect>

000b53a0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b53a0:	4b08      	ldr	r3, [pc, #32]	; (b53c4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b53a2:	b510      	push	{r4, lr}
   b53a4:	2428      	movs	r4, #40	; 0x28
   b53a6:	4622      	mov	r2, r4
   b53a8:	4618      	mov	r0, r3
   b53aa:	2100      	movs	r1, #0
   b53ac:	f000 feb4 	bl	b6118 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b53b0:	4b05      	ldr	r3, [pc, #20]	; (b53c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b53b2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b53b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b53b8:	6042      	str	r2, [r0, #4]
   b53ba:	2204      	movs	r2, #4
   b53bc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b53be:	4a03      	ldr	r2, [pc, #12]	; (b53cc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b53c0:	601a      	str	r2, [r3, #0]
   b53c2:	bd10      	pop	{r4, pc}
   b53c4:	2003e6a8 	.word	0x2003e6a8
   b53c8:	2003e6a0 	.word	0x2003e6a0
   b53cc:	000b8e9c 	.word	0x000b8e9c

000b53d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b53d0:	2200      	movs	r2, #0
   b53d2:	6840      	ldr	r0, [r0, #4]
   b53d4:	4611      	mov	r1, r2
   b53d6:	f7ff bf4b 	b.w	b5270 <network_listening>

000b53da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b53da:	2200      	movs	r2, #0
   b53dc:	6840      	ldr	r0, [r0, #4]
   b53de:	4611      	mov	r1, r2
   b53e0:	f7ff bf56 	b.w	b5290 <network_get_listen_timeout>

000b53e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b53e4:	6840      	ldr	r0, [r0, #4]
   b53e6:	2200      	movs	r2, #0
   b53e8:	f7ff bf4a 	b.w	b5280 <network_set_listen_timeout>

000b53ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b53ec:	6840      	ldr	r0, [r0, #4]
   b53ee:	2200      	movs	r2, #0
   b53f0:	f081 0101 	eor.w	r1, r1, #1
   b53f4:	f7ff bf34 	b.w	b5260 <network_listen>

000b53f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b53f8:	2300      	movs	r3, #0
   b53fa:	6840      	ldr	r0, [r0, #4]
   b53fc:	461a      	mov	r2, r3
   b53fe:	4619      	mov	r1, r3
   b5400:	f7ff bf26 	b.w	b5250 <network_off>

000b5404 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5404:	2300      	movs	r3, #0
   b5406:	6840      	ldr	r0, [r0, #4]
   b5408:	461a      	mov	r2, r3
   b540a:	4619      	mov	r1, r3
   b540c:	f7ff bf18 	b.w	b5240 <network_on>

000b5410 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5410:	2200      	movs	r2, #0
   b5412:	6840      	ldr	r0, [r0, #4]
   b5414:	4611      	mov	r1, r2
   b5416:	f7ff bf0b 	b.w	b5230 <network_ready>

000b541a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b541a:	2200      	movs	r2, #0
   b541c:	6840      	ldr	r0, [r0, #4]
   b541e:	4611      	mov	r1, r2
   b5420:	f7ff bef6 	b.w	b5210 <network_connecting>

000b5424 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5424:	6840      	ldr	r0, [r0, #4]
   b5426:	2200      	movs	r2, #0
   b5428:	2102      	movs	r1, #2
   b542a:	f7ff bef9 	b.w	b5220 <network_disconnect>

000b542e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b542e:	2300      	movs	r3, #0
   b5430:	6840      	ldr	r0, [r0, #4]
   b5432:	461a      	mov	r2, r3
   b5434:	f7ff bee4 	b.w	b5200 <network_connect>

000b5438 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b5438:	4b02      	ldr	r3, [pc, #8]	; (b5444 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b543a:	2203      	movs	r2, #3
   b543c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b543e:	4a02      	ldr	r2, [pc, #8]	; (b5448 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5440:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5442:	4770      	bx	lr
   b5444:	2003e6d0 	.word	0x2003e6d0
   b5448:	000b8ed8 	.word	0x000b8ed8

000b544c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b544c:	4770      	bx	lr

000b544e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b544e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5450:	4606      	mov	r6, r0
   b5452:	4615      	mov	r5, r2
   b5454:	460c      	mov	r4, r1
   b5456:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5458:	42bc      	cmp	r4, r7
   b545a:	d006      	beq.n	b546a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b545c:	6833      	ldr	r3, [r6, #0]
   b545e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5462:	689b      	ldr	r3, [r3, #8]
   b5464:	4630      	mov	r0, r6
   b5466:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5468:	e7f6      	b.n	b5458 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b546a:	4628      	mov	r0, r5
   b546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b546e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b546e:	7c00      	ldrb	r0, [r0, #16]
   b5470:	2200      	movs	r2, #0
   b5472:	f7ff bd81 	b.w	b4f78 <hal_i2c_write>

000b5476 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5476:	7c00      	ldrb	r0, [r0, #16]
   b5478:	2100      	movs	r1, #0
   b547a:	f7ff bd85 	b.w	b4f88 <hal_i2c_available>

000b547e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b547e:	7c00      	ldrb	r0, [r0, #16]
   b5480:	2100      	movs	r1, #0
   b5482:	f7ff bd89 	b.w	b4f98 <hal_i2c_read>

000b5486 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5486:	7c00      	ldrb	r0, [r0, #16]
   b5488:	2100      	movs	r1, #0
   b548a:	f7ff bd8d 	b.w	b4fa8 <hal_i2c_peek>

000b548e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b548e:	7c00      	ldrb	r0, [r0, #16]
   b5490:	2100      	movs	r1, #0
   b5492:	f7ff bd91 	b.w	b4fb8 <hal_i2c_flush>

000b5496 <_ZN7TwoWireD0Ev>:
   b5496:	b510      	push	{r4, lr}
   b5498:	2114      	movs	r1, #20
   b549a:	4604      	mov	r4, r0
   b549c:	f7fe fe03 	bl	b40a6 <_ZdlPvj>
   b54a0:	4620      	mov	r0, r4
   b54a2:	bd10      	pop	{r4, pc}

000b54a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b54a4:	b538      	push	{r3, r4, r5, lr}
   b54a6:	4604      	mov	r4, r0
   b54a8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b54aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54ae:	2200      	movs	r2, #0
   b54b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b54b4:	4b09      	ldr	r3, [pc, #36]	; (b54dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b54b6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b54b8:	4608      	mov	r0, r1
   b54ba:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b54bc:	4629      	mov	r1, r5
   b54be:	f7ff fd8b 	bl	b4fd8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b54c2:	30bf      	adds	r0, #191	; 0xbf
   b54c4:	d108      	bne.n	b54d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b54c6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b54c8:	07db      	lsls	r3, r3, #31
   b54ca:	d505      	bpl.n	b54d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b54cc:	6868      	ldr	r0, [r5, #4]
   b54ce:	f7ff feff 	bl	b52d0 <free>
    free(conf.tx_buffer);
   b54d2:	68e8      	ldr	r0, [r5, #12]
   b54d4:	f7ff fefc 	bl	b52d0 <free>
}
   b54d8:	4620      	mov	r0, r4
   b54da:	bd38      	pop	{r3, r4, r5, pc}
   b54dc:	000b8f14 	.word	0x000b8f14

000b54e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b54e0:	2300      	movs	r3, #0
   b54e2:	7c00      	ldrb	r0, [r0, #16]
   b54e4:	461a      	mov	r2, r3
   b54e6:	4619      	mov	r1, r3
   b54e8:	f7ff bd2e 	b.w	b4f48 <hal_i2c_begin>

000b54ec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b54ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b54ee:	2200      	movs	r2, #0
   b54f0:	2314      	movs	r3, #20
   b54f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b54f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b54fa:	780b      	ldrb	r3, [r1, #0]
   b54fc:	f88d 3008 	strb.w	r3, [sp, #8]
   b5500:	684b      	ldr	r3, [r1, #4]
   b5502:	9303      	str	r3, [sp, #12]
   b5504:	68cb      	ldr	r3, [r1, #12]
   b5506:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5508:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b550a:	7a0b      	ldrb	r3, [r1, #8]
   b550c:	9305      	str	r3, [sp, #20]
   b550e:	a901      	add	r1, sp, #4
   b5510:	f7ff fd6a 	bl	b4fe8 <hal_i2c_request_ex>
}
   b5514:	b007      	add	sp, #28
   b5516:	f85d fb04 	ldr.w	pc, [sp], #4

000b551a <_ZN7TwoWire11requestFromEhjh>:
{
   b551a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b551c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b551e:	f88d 1000 	strb.w	r1, [sp]
   b5522:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5526:	9103      	str	r1, [sp, #12]
   b5528:	bf18      	it	ne
   b552a:	2301      	movne	r3, #1
   b552c:	4669      	mov	r1, sp
    size_ = size;
   b552e:	9201      	str	r2, [sp, #4]
   b5530:	f88d 3008 	strb.w	r3, [sp, #8]
   b5534:	f7ff ffda 	bl	b54ec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5538:	b005      	add	sp, #20
   b553a:	f85d fb04 	ldr.w	pc, [sp], #4

000b553e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b553e:	2301      	movs	r3, #1
   b5540:	f7ff bfeb 	b.w	b551a <_ZN7TwoWire11requestFromEhjh>

000b5544 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5544:	7c00      	ldrb	r0, [r0, #16]
   b5546:	2200      	movs	r2, #0
   b5548:	f7ff bd06 	b.w	b4f58 <hal_i2c_begin_transmission>

000b554c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b554c:	b2c9      	uxtb	r1, r1
   b554e:	f7ff bff9 	b.w	b5544 <_ZN7TwoWire17beginTransmissionEh>

000b5552 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5552:	7c00      	ldrb	r0, [r0, #16]
   b5554:	2200      	movs	r2, #0
   b5556:	f7ff bd07 	b.w	b4f68 <hal_i2c_end_transmission>

000b555a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b555a:	2101      	movs	r1, #1
   b555c:	f7ff bff9 	b.w	b5552 <_ZN7TwoWire15endTransmissionEh>

000b5560 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5560:	4770      	bx	lr

000b5562 <_ZN9IPAddressD0Ev>:
   b5562:	b510      	push	{r4, lr}
   b5564:	2118      	movs	r1, #24
   b5566:	4604      	mov	r4, r0
   b5568:	f7fe fd9d 	bl	b40a6 <_ZdlPvj>
   b556c:	4620      	mov	r0, r4
   b556e:	bd10      	pop	{r4, pc}

000b5570 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5570:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5572:	7d03      	ldrb	r3, [r0, #20]
   b5574:	2b06      	cmp	r3, #6
{
   b5576:	b08d      	sub	sp, #52	; 0x34
   b5578:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b557a:	f100 0704 	add.w	r7, r0, #4
   b557e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5582:	d012      	beq.n	b55aa <_ZNK9IPAddress7printToER5Print+0x3a>
   b5584:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5588:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b558c:	220a      	movs	r2, #10
   b558e:	4630      	mov	r0, r6
   b5590:	f000 f95d 	bl	b584e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5594:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5596:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5598:	d019      	beq.n	b55ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b559a:	2c00      	cmp	r4, #0
   b559c:	d0f4      	beq.n	b5588 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b559e:	212e      	movs	r1, #46	; 0x2e
   b55a0:	4630      	mov	r0, r6
   b55a2:	f000 f93b 	bl	b581c <_ZN5Print5printEc>
   b55a6:	4404      	add	r4, r0
   b55a8:	e7ee      	b.n	b5588 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55aa:	232f      	movs	r3, #47	; 0x2f
   b55ac:	466a      	mov	r2, sp
   b55ae:	4639      	mov	r1, r7
   b55b0:	200a      	movs	r0, #10
		buf[0] = 0;
   b55b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b55b6:	f7ff fd1f 	bl	b4ff8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b55ba:	4668      	mov	r0, sp
   b55bc:	f7fe fd2e 	bl	b401c <strlen>
   b55c0:	6833      	ldr	r3, [r6, #0]
   b55c2:	4602      	mov	r2, r0
   b55c4:	68db      	ldr	r3, [r3, #12]
   b55c6:	4669      	mov	r1, sp
   b55c8:	4630      	mov	r0, r6
   b55ca:	4798      	blx	r3
   b55cc:	4604      	mov	r4, r0
    }
    return n;
}
   b55ce:	4620      	mov	r0, r4
   b55d0:	b00d      	add	sp, #52	; 0x34
   b55d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b55d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b55d4:	b510      	push	{r4, lr}
   b55d6:	4b05      	ldr	r3, [pc, #20]	; (b55ec <_ZN9IPAddressC1Ev+0x18>)
   b55d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b55da:	2211      	movs	r2, #17
   b55dc:	f840 3b04 	str.w	r3, [r0], #4
   b55e0:	2100      	movs	r1, #0
   b55e2:	f000 fd99 	bl	b6118 <memset>
}
   b55e6:	4620      	mov	r0, r4
   b55e8:	bd10      	pop	{r4, pc}
   b55ea:	bf00      	nop
   b55ec:	000b8f3c 	.word	0x000b8f3c

000b55f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b55f0:	4603      	mov	r3, r0
   b55f2:	4a07      	ldr	r2, [pc, #28]	; (b5610 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b55f4:	b510      	push	{r4, lr}
   b55f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b55fa:	f101 0210 	add.w	r2, r1, #16
   b55fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5602:	f843 4b04 	str.w	r4, [r3], #4
   b5606:	4291      	cmp	r1, r2
   b5608:	d1f9      	bne.n	b55fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b560a:	780a      	ldrb	r2, [r1, #0]
   b560c:	701a      	strb	r2, [r3, #0]
}
   b560e:	bd10      	pop	{r4, pc}
   b5610:	000b8f3c 	.word	0x000b8f3c

000b5614 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5614:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5616:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b561a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b561e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5622:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5626:	2304      	movs	r3, #4
   b5628:	6041      	str	r1, [r0, #4]
   b562a:	7503      	strb	r3, [r0, #20]
}
   b562c:	bd10      	pop	{r4, pc}
	...

000b5630 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5630:	b507      	push	{r0, r1, r2, lr}
   b5632:	4b06      	ldr	r3, [pc, #24]	; (b564c <_ZN9IPAddressC1EPKh+0x1c>)
   b5634:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5636:	78cb      	ldrb	r3, [r1, #3]
   b5638:	9300      	str	r3, [sp, #0]
   b563a:	788b      	ldrb	r3, [r1, #2]
   b563c:	784a      	ldrb	r2, [r1, #1]
   b563e:	7809      	ldrb	r1, [r1, #0]
   b5640:	f7ff ffe8 	bl	b5614 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5644:	b003      	add	sp, #12
   b5646:	f85d fb04 	ldr.w	pc, [sp], #4
   b564a:	bf00      	nop
   b564c:	000b8f3c 	.word	0x000b8f3c

000b5650 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5650:	4b01      	ldr	r3, [pc, #4]	; (b5658 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5652:	4a02      	ldr	r2, [pc, #8]	; (b565c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5654:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5656:	4770      	bx	lr
   b5658:	2003e6d8 	.word	0x2003e6d8
   b565c:	000b8f48 	.word	0x000b8f48

000b5660 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5660:	2300      	movs	r3, #0
   b5662:	6840      	ldr	r0, [r0, #4]
   b5664:	461a      	mov	r2, r3
   b5666:	f7ff bdcb 	b.w	b5200 <network_connect>

000b566a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b566a:	6840      	ldr	r0, [r0, #4]
   b566c:	2200      	movs	r2, #0
   b566e:	2102      	movs	r1, #2
   b5670:	f7ff bdd6 	b.w	b5220 <network_disconnect>

000b5674 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5674:	2200      	movs	r2, #0
   b5676:	6840      	ldr	r0, [r0, #4]
   b5678:	4611      	mov	r1, r2
   b567a:	f7ff bdc9 	b.w	b5210 <network_connecting>

000b567e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b567e:	2200      	movs	r2, #0
   b5680:	6840      	ldr	r0, [r0, #4]
   b5682:	4611      	mov	r1, r2
   b5684:	f7ff bdd4 	b.w	b5230 <network_ready>

000b5688 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5688:	2300      	movs	r3, #0
   b568a:	6840      	ldr	r0, [r0, #4]
   b568c:	461a      	mov	r2, r3
   b568e:	4619      	mov	r1, r3
   b5690:	f7ff bdd6 	b.w	b5240 <network_on>

000b5694 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5694:	2300      	movs	r3, #0
   b5696:	6840      	ldr	r0, [r0, #4]
   b5698:	461a      	mov	r2, r3
   b569a:	4619      	mov	r1, r3
   b569c:	f7ff bdd8 	b.w	b5250 <network_off>

000b56a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b56a0:	6840      	ldr	r0, [r0, #4]
   b56a2:	2100      	movs	r1, #0
   b56a4:	f7ff bdfc 	b.w	b52a0 <network_is_on>

000b56a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b56a8:	6840      	ldr	r0, [r0, #4]
   b56aa:	2100      	movs	r1, #0
   b56ac:	f7ff be00 	b.w	b52b0 <network_is_off>

000b56b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b56b0:	6840      	ldr	r0, [r0, #4]
   b56b2:	2200      	movs	r2, #0
   b56b4:	f081 0101 	eor.w	r1, r1, #1
   b56b8:	f7ff bdd2 	b.w	b5260 <network_listen>

000b56bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b56bc:	6840      	ldr	r0, [r0, #4]
   b56be:	2200      	movs	r2, #0
   b56c0:	f7ff bdde 	b.w	b5280 <network_set_listen_timeout>

000b56c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b56c4:	2200      	movs	r2, #0
   b56c6:	6840      	ldr	r0, [r0, #4]
   b56c8:	4611      	mov	r1, r2
   b56ca:	f7ff bde1 	b.w	b5290 <network_get_listen_timeout>

000b56ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b56ce:	2200      	movs	r2, #0
   b56d0:	6840      	ldr	r0, [r0, #4]
   b56d2:	4611      	mov	r1, r2
   b56d4:	f7ff bdcc 	b.w	b5270 <network_listening>

000b56d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b56d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b56dc:	b095      	sub	sp, #84	; 0x54
   b56de:	4614      	mov	r4, r2
   b56e0:	460d      	mov	r5, r1
   b56e2:	4607      	mov	r7, r0
    IPAddress addr;
   b56e4:	f7ff ff76 	bl	b55d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b56e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b56ea:	221c      	movs	r2, #28
   b56ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b56ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b56f0:	f000 fd12 	bl	b6118 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b56f4:	2340      	movs	r3, #64	; 0x40
   b56f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b56f8:	4620      	mov	r0, r4
   b56fa:	466b      	mov	r3, sp
   b56fc:	aa0c      	add	r2, sp, #48	; 0x30
   b56fe:	2100      	movs	r1, #0
   b5700:	f7ff fc8a 	bl	b5018 <netdb_getaddrinfo>
    if (!r) {
   b5704:	4604      	mov	r4, r0
   b5706:	2800      	cmp	r0, #0
   b5708:	d14b      	bne.n	b57a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b570a:	4602      	mov	r2, r0
   b570c:	2101      	movs	r1, #1
   b570e:	6868      	ldr	r0, [r5, #4]
   b5710:	f7ff fd8e 	bl	b5230 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5714:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5716:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5718:	4622      	mov	r2, r4
   b571a:	6868      	ldr	r0, [r5, #4]
   b571c:	f7ff fd88 	bl	b5230 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5720:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5722:	4681      	mov	r9, r0
        bool ok = false;
   b5724:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5726:	2e00      	cmp	r6, #0
   b5728:	d03b      	beq.n	b57a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b572a:	2900      	cmp	r1, #0
   b572c:	d139      	bne.n	b57a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b572e:	6873      	ldr	r3, [r6, #4]
   b5730:	2b02      	cmp	r3, #2
   b5732:	d003      	beq.n	b573c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5734:	2b0a      	cmp	r3, #10
   b5736:	d011      	beq.n	b575c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5738:	69f6      	ldr	r6, [r6, #28]
   b573a:	e7f4      	b.n	b5726 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b573c:	f1b8 0f00 	cmp.w	r8, #0
   b5740:	d0fa      	beq.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5742:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5744:	a806      	add	r0, sp, #24
   b5746:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5748:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b574a:	f7ff ff71 	bl	b5630 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b574e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5750:	1d3c      	adds	r4, r7, #4
   b5752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5754:	682b      	ldr	r3, [r5, #0]
   b5756:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5758:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b575a:	e7ed      	b.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b575c:	f1b9 0f00 	cmp.w	r9, #0
   b5760:	d0ea      	beq.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5762:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5764:	2210      	movs	r2, #16
   b5766:	a801      	add	r0, sp, #4
   b5768:	f000 fcd6 	bl	b6118 <memset>
                    a.v = 6;
   b576c:	2306      	movs	r3, #6
   b576e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5772:	ad01      	add	r5, sp, #4
   b5774:	f104 0308 	add.w	r3, r4, #8
   b5778:	3418      	adds	r4, #24
   b577a:	6818      	ldr	r0, [r3, #0]
   b577c:	6859      	ldr	r1, [r3, #4]
   b577e:	462a      	mov	r2, r5
   b5780:	c203      	stmia	r2!, {r0, r1}
   b5782:	3308      	adds	r3, #8
   b5784:	42a3      	cmp	r3, r4
   b5786:	4615      	mov	r5, r2
   b5788:	d1f7      	bne.n	b577a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b578a:	a901      	add	r1, sp, #4
   b578c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b578e:	ad07      	add	r5, sp, #28
   b5790:	f7ff ff2e 	bl	b55f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5796:	1d3c      	adds	r4, r7, #4
   b5798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b579a:	682b      	ldr	r3, [r5, #0]
   b579c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b579e:	4649      	mov	r1, r9
   b57a0:	e7ca      	b.n	b5738 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b57a2:	9800      	ldr	r0, [sp, #0]
   b57a4:	f7ff fc30 	bl	b5008 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b57a8:	4638      	mov	r0, r7
   b57aa:	b015      	add	sp, #84	; 0x54
   b57ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b57b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b57b0:	4b02      	ldr	r3, [pc, #8]	; (b57bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b57b2:	4a03      	ldr	r2, [pc, #12]	; (b57c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b57b4:	601a      	str	r2, [r3, #0]
   b57b6:	2200      	movs	r2, #0
   b57b8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b57ba:	4770      	bx	lr
   b57bc:	2003e6dc 	.word	0x2003e6dc
   b57c0:	000b8f54 	.word	0x000b8f54

000b57c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b57c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57c6:	4606      	mov	r6, r0
   b57c8:	460d      	mov	r5, r1
  size_t n = 0;
   b57ca:	188f      	adds	r7, r1, r2
   b57cc:	2400      	movs	r4, #0
  while (size--) {
   b57ce:	42bd      	cmp	r5, r7
   b57d0:	d00c      	beq.n	b57ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b57d2:	6833      	ldr	r3, [r6, #0]
   b57d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b57d8:	689b      	ldr	r3, [r3, #8]
   b57da:	4630      	mov	r0, r6
   b57dc:	4798      	blx	r3
     if (chunk>=0)
   b57de:	1e03      	subs	r3, r0, #0
   b57e0:	db01      	blt.n	b57e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b57e2:	441c      	add	r4, r3
  while (size--) {
   b57e4:	e7f3      	b.n	b57ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b57e6:	2c00      	cmp	r4, #0
   b57e8:	bf08      	it	eq
   b57ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b57ec:	4620      	mov	r0, r4
   b57ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57f0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b57f0:	b513      	push	{r0, r1, r4, lr}
   b57f2:	4604      	mov	r4, r0
    }
   b57f4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b57f6:	b159      	cbz	r1, b5810 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b57f8:	9101      	str	r1, [sp, #4]
   b57fa:	f7fe fc0f 	bl	b401c <strlen>
   b57fe:	6823      	ldr	r3, [r4, #0]
   b5800:	9901      	ldr	r1, [sp, #4]
   b5802:	68db      	ldr	r3, [r3, #12]
   b5804:	4602      	mov	r2, r0
   b5806:	4620      	mov	r0, r4
    }
   b5808:	b002      	add	sp, #8
   b580a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b580e:	4718      	bx	r3
    }
   b5810:	b002      	add	sp, #8
   b5812:	bd10      	pop	{r4, pc}

000b5814 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5814:	b508      	push	{r3, lr}
  return write(str);
   b5816:	f7ff ffeb 	bl	b57f0 <_ZN5Print5writeEPKc>
}
   b581a:	bd08      	pop	{r3, pc}

000b581c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b581c:	6803      	ldr	r3, [r0, #0]
   b581e:	689b      	ldr	r3, [r3, #8]
   b5820:	4718      	bx	r3

000b5822 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5822:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5824:	210d      	movs	r1, #13
{
   b5826:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5828:	f7ff fff8 	bl	b581c <_ZN5Print5printEc>
  n += print('\n');
   b582c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b582e:	4604      	mov	r4, r0
  n += print('\n');
   b5830:	4628      	mov	r0, r5
   b5832:	f7ff fff3 	bl	b581c <_ZN5Print5printEc>
  return n;
}
   b5836:	4420      	add	r0, r4
   b5838:	bd38      	pop	{r3, r4, r5, pc}

000b583a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b583a:	b538      	push	{r3, r4, r5, lr}
   b583c:	4605      	mov	r5, r0
  return write(str);
   b583e:	f7ff ffd7 	bl	b57f0 <_ZN5Print5writeEPKc>
   b5842:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5844:	4628      	mov	r0, r5
   b5846:	f7ff ffec 	bl	b5822 <_ZN5Print7printlnEv>
  return n;
}
   b584a:	4420      	add	r0, r4
   b584c:	bd38      	pop	{r3, r4, r5, pc}

000b584e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b584e:	b530      	push	{r4, r5, lr}
   b5850:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5852:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5854:	2a01      	cmp	r2, #1
  *str = '\0';
   b5856:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b585a:	bf98      	it	ls
   b585c:	220a      	movls	r2, #10
   b585e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5860:	460d      	mov	r5, r1
   b5862:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5866:	fb01 5312 	mls	r3, r1, r2, r5
   b586a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b586e:	2b09      	cmp	r3, #9
   b5870:	bf94      	ite	ls
   b5872:	3330      	addls	r3, #48	; 0x30
   b5874:	3337      	addhi	r3, #55	; 0x37
   b5876:	b2db      	uxtb	r3, r3
  } while(n);
   b5878:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b587a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b587e:	d9ef      	bls.n	b5860 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5880:	4621      	mov	r1, r4
   b5882:	f7ff ffb5 	bl	b57f0 <_ZN5Print5writeEPKc>
}
   b5886:	b00b      	add	sp, #44	; 0x2c
   b5888:	bd30      	pop	{r4, r5, pc}

000b588a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b588a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b588e:	b086      	sub	sp, #24
   b5890:	af00      	add	r7, sp, #0
   b5892:	4605      	mov	r5, r0
   b5894:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5896:	1d38      	adds	r0, r7, #4
   b5898:	2114      	movs	r1, #20
{
   b589a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b589c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b589e:	f7ff fd27 	bl	b52f0 <vsnprintf>

    if (n<bufsize)
   b58a2:	2813      	cmp	r0, #19
   b58a4:	d80e      	bhi.n	b58c4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b58a6:	1d39      	adds	r1, r7, #4
   b58a8:	4628      	mov	r0, r5
   b58aa:	f7ff ffa1 	bl	b57f0 <_ZN5Print5writeEPKc>
   b58ae:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b58b0:	b11e      	cbz	r6, b58ba <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b58b2:	4628      	mov	r0, r5
   b58b4:	f7ff ffb5 	bl	b5822 <_ZN5Print7printlnEv>
   b58b8:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b58ba:	4620      	mov	r0, r4
   b58bc:	3718      	adds	r7, #24
   b58be:	46bd      	mov	sp, r7
   b58c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b58c4:	f100 0308 	add.w	r3, r0, #8
   b58c8:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b58cc:	46e8      	mov	r8, sp
        char bigger[n+1];
   b58ce:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b58d2:	4622      	mov	r2, r4
   b58d4:	1c41      	adds	r1, r0, #1
   b58d6:	683b      	ldr	r3, [r7, #0]
   b58d8:	4668      	mov	r0, sp
   b58da:	f7ff fd09 	bl	b52f0 <vsnprintf>
  return write(str);
   b58de:	4669      	mov	r1, sp
   b58e0:	4628      	mov	r0, r5
   b58e2:	f7ff ff85 	bl	b57f0 <_ZN5Print5writeEPKc>
   b58e6:	4604      	mov	r4, r0
   b58e8:	46c5      	mov	sp, r8
   b58ea:	e7e1      	b.n	b58b0 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b58ec <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b58ec:	4b01      	ldr	r3, [pc, #4]	; (b58f4 <_GLOBAL__sub_I_RGB+0x8>)
   b58ee:	2200      	movs	r2, #0
   b58f0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b58f2:	4770      	bx	lr
   b58f4:	2003e6e4 	.word	0x2003e6e4

000b58f8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b58f8:	2100      	movs	r1, #0
   b58fa:	f7ff bbcd 	b.w	b5098 <hal_spi_release>

000b58fe <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b58fe:	2100      	movs	r1, #0
   b5900:	f7ff bbc2 	b.w	b5088 <hal_spi_acquire>

000b5904 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5904:	b510      	push	{r4, lr}
   b5906:	4604      	mov	r4, r0
   b5908:	4608      	mov	r0, r1
{
    _spi = spi;
   b590a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b590c:	f7ff fb9c 	bl	b5048 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5910:	2300      	movs	r3, #0
   b5912:	6063      	str	r3, [r4, #4]
}
   b5914:	4620      	mov	r0, r4
   b5916:	bd10      	pop	{r4, pc}

000b5918 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5918:	b513      	push	{r0, r1, r4, lr}
   b591a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b591c:	7800      	ldrb	r0, [r0, #0]
   b591e:	f7ff ffee 	bl	b58fe <_ZN8SPIClass4lockEv.isra.0>
   b5922:	b958      	cbnz	r0, b593c <_ZN8SPIClass5beginEv+0x24>
   b5924:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5926:	9001      	str	r0, [sp, #4]
   b5928:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b592c:	f7ff fb7c 	bl	b5028 <hal_spi_begin>
        unlock();
   b5930:	9801      	ldr	r0, [sp, #4]
    }
}
   b5932:	b002      	add	sp, #8
   b5934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5938:	f7ff bfde 	b.w	b58f8 <_ZN8SPIClass6unlockEv.isra.0>
   b593c:	b002      	add	sp, #8
   b593e:	bd10      	pop	{r4, pc}

000b5940 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5940:	0840      	lsrs	r0, r0, #1
{
   b5942:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5944:	6018      	str	r0, [r3, #0]
   b5946:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5948:	6818      	ldr	r0, [r3, #0]
   b594a:	4288      	cmp	r0, r1
   b594c:	b2e5      	uxtb	r5, r4
   b594e:	d906      	bls.n	b595e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5950:	3401      	adds	r4, #1
   b5952:	2c08      	cmp	r4, #8
   b5954:	d002      	beq.n	b595c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5956:	0840      	lsrs	r0, r0, #1
   b5958:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b595a:	e7f5      	b.n	b5948 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b595c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b595e:	4b02      	ldr	r3, [pc, #8]	; (b5968 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5960:	5d5b      	ldrb	r3, [r3, r5]
   b5962:	7013      	strb	r3, [r2, #0]
}
   b5964:	bd30      	pop	{r4, r5, pc}
   b5966:	bf00      	nop
   b5968:	000b8f88 	.word	0x000b8f88

000b596c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b596c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5970:	4606      	mov	r6, r0
   b5972:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5974:	7800      	ldrb	r0, [r0, #0]
{
   b5976:	460c      	mov	r4, r1
    CHECK(lock());
   b5978:	f7ff ffc1 	bl	b58fe <_ZN8SPIClass4lockEv.isra.0>
   b597c:	2800      	cmp	r0, #0
   b597e:	db1b      	blt.n	b59b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5980:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5982:	2214      	movs	r2, #20
   b5984:	2100      	movs	r1, #0
   b5986:	a809      	add	r0, sp, #36	; 0x24
   b5988:	f000 fbc6 	bl	b6118 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b598c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b598e:	2200      	movs	r2, #0
   b5990:	a909      	add	r1, sp, #36	; 0x24
   b5992:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5994:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5998:	f7ff fb66 	bl	b5068 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b599c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b59a0:	b113      	cbz	r3, b59a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b59a2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b59a6:	b155      	cbz	r5, b59be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b59a8:	2700      	movs	r7, #0
   b59aa:	46b9      	mov	r9, r7
   b59ac:	46b8      	mov	r8, r7
   b59ae:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b59b0:	7923      	ldrb	r3, [r4, #4]
   b59b2:	b15d      	cbz	r5, b59cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b59b4:	b1c3      	cbz	r3, b59e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b59b6:	2000      	movs	r0, #0
}
   b59b8:	b00f      	add	sp, #60	; 0x3c
   b59ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b59be:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b59c2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b59c6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b59ca:	e7f1      	b.n	b59b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b59cc:	2b00      	cmp	r3, #0
   b59ce:	d135      	bne.n	b5a3c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b59d0:	68a3      	ldr	r3, [r4, #8]
   b59d2:	4543      	cmp	r3, r8
   b59d4:	d108      	bne.n	b59e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b59d6:	f88d 9020 	strb.w	r9, [sp, #32]
   b59da:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b59de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b59e2:	89a3      	ldrh	r3, [r4, #12]
   b59e4:	429a      	cmp	r2, r3
   b59e6:	d0e6      	beq.n	b59b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b59e8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b59ea:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b59ec:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b59f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b59f2:	ab04      	add	r3, sp, #16
   b59f4:	f10d 020f 	add.w	r2, sp, #15
   b59f8:	f7ff ffa2 	bl	b5940 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b59fc:	7921      	ldrb	r1, [r4, #4]
   b59fe:	b985      	cbnz	r5, b5a22 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5a00:	b989      	cbnz	r1, b5a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a02:	68a3      	ldr	r3, [r4, #8]
   b5a04:	4543      	cmp	r3, r8
   b5a06:	d30e      	bcc.n	b5a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5a08:	f88d 9020 	strb.w	r9, [sp, #32]
   b5a0c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5a10:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5a14:	89a3      	ldrh	r3, [r4, #12]
   b5a16:	429a      	cmp	r2, r3
   b5a18:	d105      	bne.n	b5a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5a1a:	9b04      	ldr	r3, [sp, #16]
   b5a1c:	4543      	cmp	r3, r8
   b5a1e:	d102      	bne.n	b5a26 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5a20:	e7c9      	b.n	b59b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5a22:	2900      	cmp	r1, #0
   b5a24:	d1f9      	bne.n	b5a1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5a26:	2300      	movs	r3, #0
   b5a28:	9301      	str	r3, [sp, #4]
   b5a2a:	7b63      	ldrb	r3, [r4, #13]
   b5a2c:	9300      	str	r3, [sp, #0]
   b5a2e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5a32:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5a34:	7830      	ldrb	r0, [r6, #0]
   b5a36:	f7ff fb1f 	bl	b5078 <hal_spi_set_settings>
   b5a3a:	e7bc      	b.n	b59b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5a3c:	e9cd 5500 	strd	r5, r5, [sp]
   b5a40:	462b      	mov	r3, r5
   b5a42:	462a      	mov	r2, r5
   b5a44:	2101      	movs	r1, #1
   b5a46:	e7f5      	b.n	b5a34 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5a48 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5a48:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5a4a:	7800      	ldrb	r0, [r0, #0]
   b5a4c:	f7ff faf4 	bl	b5038 <hal_spi_transfer>
}
   b5a50:	b2c0      	uxtb	r0, r0
   b5a52:	bd08      	pop	{r3, pc}

000b5a54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5a54:	b510      	push	{r4, lr}
   b5a56:	4604      	mov	r4, r0
{
	free(buffer);
   b5a58:	6800      	ldr	r0, [r0, #0]
   b5a5a:	f7ff fc39 	bl	b52d0 <free>
}
   b5a5e:	4620      	mov	r0, r4
   b5a60:	bd10      	pop	{r4, pc}

000b5a62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5a62:	b510      	push	{r4, lr}
   b5a64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5a66:	6800      	ldr	r0, [r0, #0]
   b5a68:	b108      	cbz	r0, b5a6e <_ZN6String10invalidateEv+0xc>
   b5a6a:	f7ff fc31 	bl	b52d0 <free>
	buffer = NULL;
   b5a6e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5a70:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5a74:	6023      	str	r3, [r4, #0]
}
   b5a76:	bd10      	pop	{r4, pc}

000b5a78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5a78:	b538      	push	{r3, r4, r5, lr}
   b5a7a:	4604      	mov	r4, r0
   b5a7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5a7e:	6800      	ldr	r0, [r0, #0]
   b5a80:	3101      	adds	r1, #1
   b5a82:	f7ff fc2d 	bl	b52e0 <realloc>
	if (newbuffer) {
   b5a86:	b110      	cbz	r0, b5a8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5a88:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5a8c:	2001      	movs	r0, #1
	}
	return 0;
}
   b5a8e:	bd38      	pop	{r3, r4, r5, pc}

000b5a90 <_ZN6String7reserveEj>:
{
   b5a90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5a92:	6803      	ldr	r3, [r0, #0]
{
   b5a94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5a96:	b123      	cbz	r3, b5aa2 <_ZN6String7reserveEj+0x12>
   b5a98:	6843      	ldr	r3, [r0, #4]
   b5a9a:	428b      	cmp	r3, r1
   b5a9c:	d301      	bcc.n	b5aa2 <_ZN6String7reserveEj+0x12>
   b5a9e:	2001      	movs	r0, #1
}
   b5aa0:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	f7ff ffe8 	bl	b5a78 <_ZN6String12changeBufferEj>
   b5aa8:	2800      	cmp	r0, #0
   b5aaa:	d0f9      	beq.n	b5aa0 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5aac:	68a3      	ldr	r3, [r4, #8]
   b5aae:	2b00      	cmp	r3, #0
   b5ab0:	d1f5      	bne.n	b5a9e <_ZN6String7reserveEj+0xe>
   b5ab2:	6822      	ldr	r2, [r4, #0]
   b5ab4:	7013      	strb	r3, [r2, #0]
   b5ab6:	e7f2      	b.n	b5a9e <_ZN6String7reserveEj+0xe>

000b5ab8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5aba:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5abc:	4611      	mov	r1, r2
   b5abe:	9201      	str	r2, [sp, #4]
{
   b5ac0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5ac2:	f7ff ffe5 	bl	b5a90 <_ZN6String7reserveEj>
   b5ac6:	9a01      	ldr	r2, [sp, #4]
   b5ac8:	b928      	cbnz	r0, b5ad6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5aca:	4620      	mov	r0, r4
   b5acc:	f7ff ffc9 	bl	b5a62 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5ad0:	4620      	mov	r0, r4
   b5ad2:	b003      	add	sp, #12
   b5ad4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5ad6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5ad8:	4629      	mov	r1, r5
   b5ada:	6820      	ldr	r0, [r4, #0]
   b5adc:	f000 fb0e 	bl	b60fc <memcpy>
	buffer[len] = 0;
   b5ae0:	6822      	ldr	r2, [r4, #0]
   b5ae2:	68a3      	ldr	r3, [r4, #8]
   b5ae4:	2100      	movs	r1, #0
   b5ae6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5ae8:	e7f2      	b.n	b5ad0 <_ZN6String4copyEPKcj+0x18>

000b5aea <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5aea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5aec:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5aee:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5af2:	4604      	mov	r4, r0
	len = 0;
   b5af4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5af6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5af8:	b141      	cbz	r1, b5b0c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5afa:	4608      	mov	r0, r1
   b5afc:	9101      	str	r1, [sp, #4]
   b5afe:	f7fe fa8d 	bl	b401c <strlen>
   b5b02:	9901      	ldr	r1, [sp, #4]
   b5b04:	4602      	mov	r2, r0
   b5b06:	4620      	mov	r0, r4
   b5b08:	f7ff ffd6 	bl	b5ab8 <_ZN6String4copyEPKcj>
}
   b5b0c:	4620      	mov	r0, r4
   b5b0e:	b002      	add	sp, #8
   b5b10:	bd10      	pop	{r4, pc}

000b5b12 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b5b12:	4288      	cmp	r0, r1
{
   b5b14:	b510      	push	{r4, lr}
   b5b16:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b5b18:	d005      	beq.n	b5b26 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b5b1a:	680b      	ldr	r3, [r1, #0]
   b5b1c:	b12b      	cbz	r3, b5b2a <_ZN6StringaSERKS_+0x18>
   b5b1e:	688a      	ldr	r2, [r1, #8]
   b5b20:	4619      	mov	r1, r3
   b5b22:	f7ff ffc9 	bl	b5ab8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5b26:	4620      	mov	r0, r4
   b5b28:	bd10      	pop	{r4, pc}
	else invalidate();
   b5b2a:	f7ff ff9a 	bl	b5a62 <_ZN6String10invalidateEv>
   b5b2e:	e7fa      	b.n	b5b26 <_ZN6StringaSERKS_+0x14>

000b5b30 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b5b30:	b510      	push	{r4, lr}
	buffer = NULL;
   b5b32:	2300      	movs	r3, #0
String::String(const String &value)
   b5b34:	4604      	mov	r4, r0
	capacity = 0;
   b5b36:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b5b3a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5b3c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b5b3e:	f7ff ffe8 	bl	b5b12 <_ZN6StringaSERKS_>
}
   b5b42:	4620      	mov	r0, r4
   b5b44:	bd10      	pop	{r4, pc}

000b5b46 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5b46:	b513      	push	{r0, r1, r4, lr}
   b5b48:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5b4a:	b159      	cbz	r1, b5b64 <_ZN6StringaSEPKc+0x1e>
   b5b4c:	4608      	mov	r0, r1
   b5b4e:	9101      	str	r1, [sp, #4]
   b5b50:	f7fe fa64 	bl	b401c <strlen>
   b5b54:	9901      	ldr	r1, [sp, #4]
   b5b56:	4602      	mov	r2, r0
   b5b58:	4620      	mov	r0, r4
   b5b5a:	f7ff ffad 	bl	b5ab8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5b5e:	4620      	mov	r0, r4
   b5b60:	b002      	add	sp, #8
   b5b62:	bd10      	pop	{r4, pc}
	else invalidate();
   b5b64:	f7ff ff7d 	bl	b5a62 <_ZN6String10invalidateEv>
   b5b68:	e7f9      	b.n	b5b5e <_ZN6StringaSEPKc+0x18>

000b5b6a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5b6a:	b570      	push	{r4, r5, r6, lr}
   b5b6c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5b6e:	460e      	mov	r6, r1
   b5b70:	b909      	cbnz	r1, b5b76 <_ZN6String6concatEPKcj+0xc>
   b5b72:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5b74:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5b76:	b16a      	cbz	r2, b5b94 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5b78:	6884      	ldr	r4, [r0, #8]
   b5b7a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5b7c:	4621      	mov	r1, r4
   b5b7e:	f7ff ff87 	bl	b5a90 <_ZN6String7reserveEj>
   b5b82:	2800      	cmp	r0, #0
   b5b84:	d0f5      	beq.n	b5b72 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5b86:	6828      	ldr	r0, [r5, #0]
   b5b88:	68ab      	ldr	r3, [r5, #8]
   b5b8a:	4631      	mov	r1, r6
   b5b8c:	4418      	add	r0, r3
   b5b8e:	f000 faf9 	bl	b6184 <strcpy>
	len = newlen;
   b5b92:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5b94:	2001      	movs	r0, #1
   b5b96:	e7ed      	b.n	b5b74 <_ZN6String6concatEPKcj+0xa>

000b5b98 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5b98:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5b9a:	688a      	ldr	r2, [r1, #8]
   b5b9c:	6809      	ldr	r1, [r1, #0]
{
   b5b9e:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5ba0:	f7ff ffe3 	bl	b5b6a <_ZN6String6concatEPKcj>
   b5ba4:	b910      	cbnz	r0, b5bac <_ZplRK15StringSumHelperRK6String+0x14>
   b5ba6:	4620      	mov	r0, r4
   b5ba8:	f7ff ff5b 	bl	b5a62 <_ZN6String10invalidateEv>
	return a;
}
   b5bac:	4620      	mov	r0, r4
   b5bae:	bd10      	pop	{r4, pc}

000b5bb0 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   b5bb0:	b513      	push	{r0, r1, r4, lr}
   b5bb2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5bb4:	b929      	cbnz	r1, b5bc2 <_ZplRK15StringSumHelperPKc+0x12>
   b5bb6:	4620      	mov	r0, r4
   b5bb8:	f7ff ff53 	bl	b5a62 <_ZN6String10invalidateEv>
	return a;
}
   b5bbc:	4620      	mov	r0, r4
   b5bbe:	b002      	add	sp, #8
   b5bc0:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   b5bc2:	4608      	mov	r0, r1
   b5bc4:	9101      	str	r1, [sp, #4]
   b5bc6:	f7fe fa29 	bl	b401c <strlen>
   b5bca:	9901      	ldr	r1, [sp, #4]
   b5bcc:	4602      	mov	r2, r0
   b5bce:	4620      	mov	r0, r4
   b5bd0:	f7ff ffcb 	bl	b5b6a <_ZN6String6concatEPKcj>
   b5bd4:	2800      	cmp	r0, #0
   b5bd6:	d0ee      	beq.n	b5bb6 <_ZplRK15StringSumHelperPKc+0x6>
   b5bd8:	e7f0      	b.n	b5bbc <_ZplRK15StringSumHelperPKc+0xc>
	...

000b5bdc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5bdc:	4b05      	ldr	r3, [pc, #20]	; (b5bf4 <_GLOBAL__sub_I_System+0x18>)
   b5bde:	2202      	movs	r2, #2
   b5be0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5be2:	4b05      	ldr	r3, [pc, #20]	; (b5bf8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5be4:	4a05      	ldr	r2, [pc, #20]	; (b5bfc <_GLOBAL__sub_I_System+0x20>)
   b5be6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5be8:	2000      	movs	r0, #0
   b5bea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5bee:	f7ff bad3 	b.w	b5198 <set_system_mode>
   b5bf2:	bf00      	nop
   b5bf4:	2003e700 	.word	0x2003e700
   b5bf8:	2003e6f4 	.word	0x2003e6f4
   b5bfc:	ffff0000 	.word	0xffff0000

000b5c00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5c00:	4b02      	ldr	r3, [pc, #8]	; (b5c0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5c02:	681a      	ldr	r2, [r3, #0]
   b5c04:	4b02      	ldr	r3, [pc, #8]	; (b5c10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5c06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5c08:	4770      	bx	lr
   b5c0a:	bf00      	nop
   b5c0c:	2003ba40 	.word	0x2003ba40
   b5c10:	2003e704 	.word	0x2003e704

000b5c14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5c14:	4770      	bx	lr

000b5c16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5c16:	7441      	strb	r1, [r0, #17]
}
   b5c18:	4770      	bx	lr

000b5c1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5c1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5c1c:	7c00      	ldrb	r0, [r0, #16]
   b5c1e:	f7ff fa73 	bl	b5108 <hal_usart_available_data_for_write>
}
   b5c22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c26:	bd08      	pop	{r3, pc}

000b5c28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5c28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5c2a:	7c00      	ldrb	r0, [r0, #16]
   b5c2c:	f7ff fa44 	bl	b50b8 <hal_usart_available>
}
   b5c30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5c34:	bd08      	pop	{r3, pc}

000b5c36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5c36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5c38:	7c00      	ldrb	r0, [r0, #16]
   b5c3a:	f7ff fa4d 	bl	b50d8 <hal_usart_peek>
}
   b5c3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c42:	bd08      	pop	{r3, pc}

000b5c44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5c44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5c46:	7c00      	ldrb	r0, [r0, #16]
   b5c48:	f7ff fa3e 	bl	b50c8 <hal_usart_read>
}
   b5c4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5c50:	bd08      	pop	{r3, pc}

000b5c52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5c52:	7c00      	ldrb	r0, [r0, #16]
   b5c54:	f7ff ba48 	b.w	b50e8 <hal_usart_flush>

000b5c58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5c5a:	7c45      	ldrb	r5, [r0, #17]
{
   b5c5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5c5e:	b12d      	cbz	r5, b5c6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5c60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5c62:	b003      	add	sp, #12
   b5c64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5c68:	f7ff ba1e 	b.w	b50a8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5c6c:	7c00      	ldrb	r0, [r0, #16]
   b5c6e:	9101      	str	r1, [sp, #4]
   b5c70:	f7ff fa4a 	bl	b5108 <hal_usart_available_data_for_write>
   b5c74:	2800      	cmp	r0, #0
   b5c76:	9901      	ldr	r1, [sp, #4]
   b5c78:	dcf2      	bgt.n	b5c60 <_ZN11USARTSerial5writeEh+0x8>
}
   b5c7a:	4628      	mov	r0, r5
   b5c7c:	b003      	add	sp, #12
   b5c7e:	bd30      	pop	{r4, r5, pc}

000b5c80 <_ZN11USARTSerialD0Ev>:
   b5c80:	b510      	push	{r4, lr}
   b5c82:	2114      	movs	r1, #20
   b5c84:	4604      	mov	r4, r0
   b5c86:	f7fe fa0e 	bl	b40a6 <_ZdlPvj>
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	bd10      	pop	{r4, pc}
	...

000b5c90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5c90:	b510      	push	{r4, lr}
   b5c92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5c96:	4604      	mov	r4, r0
   b5c98:	4608      	mov	r0, r1
   b5c9a:	4611      	mov	r1, r2
   b5c9c:	2200      	movs	r2, #0
   b5c9e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5ca2:	4b04      	ldr	r3, [pc, #16]	; (b5cb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5ca4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5ca6:	2301      	movs	r3, #1
  _serial = serial;
   b5ca8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5caa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5cac:	f7ff fa34 	bl	b5118 <hal_usart_init_ex>
}
   b5cb0:	4620      	mov	r0, r4
   b5cb2:	bd10      	pop	{r4, pc}
   b5cb4:	000b8fb4 	.word	0x000b8fb4

000b5cb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5cb8:	7441      	strb	r1, [r0, #17]
}
   b5cba:	4770      	bx	lr

000b5cbc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5cbc:	4770      	bx	lr

000b5cbe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5cbe:	4770      	bx	lr

000b5cc0 <_ZN9USBSerial4readEv>:
{
   b5cc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5cc2:	2100      	movs	r1, #0
   b5cc4:	7c00      	ldrb	r0, [r0, #16]
   b5cc6:	f7ff fa4f 	bl	b5168 <HAL_USB_USART_Receive_Data>
}
   b5cca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5cce:	bd08      	pop	{r3, pc}

000b5cd0 <_ZN9USBSerial4peekEv>:
{
   b5cd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5cd2:	2101      	movs	r1, #1
   b5cd4:	7c00      	ldrb	r0, [r0, #16]
   b5cd6:	f7ff fa47 	bl	b5168 <HAL_USB_USART_Receive_Data>
}
   b5cda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5cde:	bd08      	pop	{r3, pc}

000b5ce0 <_ZN9USBSerial17availableForWriteEv>:
{
   b5ce0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5ce2:	7c00      	ldrb	r0, [r0, #16]
   b5ce4:	f7ff fa38 	bl	b5158 <HAL_USB_USART_Available_Data_For_Write>
}
   b5ce8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5cec:	bd08      	pop	{r3, pc}

000b5cee <_ZN9USBSerial9availableEv>:
{
   b5cee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5cf0:	7c00      	ldrb	r0, [r0, #16]
   b5cf2:	f7ff fa29 	bl	b5148 <HAL_USB_USART_Available_Data>
}
   b5cf6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5cfa:	bd08      	pop	{r3, pc}

000b5cfc <_ZN9USBSerial5writeEh>:
{
   b5cfc:	b513      	push	{r0, r1, r4, lr}
   b5cfe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5d00:	7c00      	ldrb	r0, [r0, #16]
{
   b5d02:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5d04:	f7ff fa28 	bl	b5158 <HAL_USB_USART_Available_Data_For_Write>
   b5d08:	2800      	cmp	r0, #0
   b5d0a:	9901      	ldr	r1, [sp, #4]
   b5d0c:	dc01      	bgt.n	b5d12 <_ZN9USBSerial5writeEh+0x16>
   b5d0e:	7c60      	ldrb	r0, [r4, #17]
   b5d10:	b120      	cbz	r0, b5d1c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5d12:	7c20      	ldrb	r0, [r4, #16]
   b5d14:	f7ff fa30 	bl	b5178 <HAL_USB_USART_Send_Data>
   b5d18:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5d1c:	b002      	add	sp, #8
   b5d1e:	bd10      	pop	{r4, pc}

000b5d20 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5d20:	7c00      	ldrb	r0, [r0, #16]
   b5d22:	f7ff ba31 	b.w	b5188 <HAL_USB_USART_Flush_Data>

000b5d26 <_ZN9USBSerialD0Ev>:
   b5d26:	b510      	push	{r4, lr}
   b5d28:	2114      	movs	r1, #20
   b5d2a:	4604      	mov	r4, r0
   b5d2c:	f7fe f9bb 	bl	b40a6 <_ZdlPvj>
   b5d30:	4620      	mov	r0, r4
   b5d32:	bd10      	pop	{r4, pc}

000b5d34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5d34:	b510      	push	{r4, lr}
   b5d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5d3a:	4604      	mov	r4, r0
   b5d3c:	4608      	mov	r0, r1
   b5d3e:	2100      	movs	r1, #0
   b5d40:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5d44:	4b04      	ldr	r3, [pc, #16]	; (b5d58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5d46:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5d48:	2301      	movs	r3, #1
  _serial = serial;
   b5d4a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5d4c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5d4e:	4611      	mov	r1, r2
   b5d50:	f7ff f9ea 	bl	b5128 <HAL_USB_USART_Init>
}
   b5d54:	4620      	mov	r0, r4
   b5d56:	bd10      	pop	{r4, pc}
   b5d58:	000b8fe4 	.word	0x000b8fe4

000b5d5c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5d5c:	7c00      	ldrb	r0, [r0, #16]
   b5d5e:	2200      	movs	r2, #0
   b5d60:	f7ff b9ea 	b.w	b5138 <HAL_USB_USART_Begin>

000b5d64 <_Z19acquireSerialBufferv>:
{
   b5d64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5d66:	2214      	movs	r2, #20
{
   b5d68:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5d6a:	2100      	movs	r1, #0
   b5d6c:	f000 f9d4 	bl	b6118 <memset>
}
   b5d70:	4620      	mov	r0, r4
   b5d72:	bd10      	pop	{r4, pc}

000b5d74 <_Z16_fetch_usbserialv>:
{
   b5d74:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d76:	4c0f      	ldr	r4, [pc, #60]	; (b5db4 <_Z16_fetch_usbserialv+0x40>)
{
   b5d78:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5d7a:	a803      	add	r0, sp, #12
   b5d7c:	f7ff fff2 	bl	b5d64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5d80:	7821      	ldrb	r1, [r4, #0]
   b5d82:	f3bf 8f5b 	dmb	ish
   b5d86:	f011 0101 	ands.w	r1, r1, #1
   b5d8a:	d10f      	bne.n	b5dac <_Z16_fetch_usbserialv+0x38>
   b5d8c:	4620      	mov	r0, r4
   b5d8e:	9101      	str	r1, [sp, #4]
   b5d90:	f7fe f98b 	bl	b40aa <__cxa_guard_acquire>
   b5d94:	9901      	ldr	r1, [sp, #4]
   b5d96:	b148      	cbz	r0, b5dac <_Z16_fetch_usbserialv+0x38>
   b5d98:	aa03      	add	r2, sp, #12
   b5d9a:	4807      	ldr	r0, [pc, #28]	; (b5db8 <_Z16_fetch_usbserialv+0x44>)
   b5d9c:	f7ff ffca 	bl	b5d34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5da0:	4620      	mov	r0, r4
   b5da2:	f7fe f987 	bl	b40b4 <__cxa_guard_release>
   b5da6:	4805      	ldr	r0, [pc, #20]	; (b5dbc <_Z16_fetch_usbserialv+0x48>)
   b5da8:	f000 f9a2 	bl	b60f0 <atexit>
	return _usbserial;
}
   b5dac:	4802      	ldr	r0, [pc, #8]	; (b5db8 <_Z16_fetch_usbserialv+0x44>)
   b5dae:	b008      	add	sp, #32
   b5db0:	bd10      	pop	{r4, pc}
   b5db2:	bf00      	nop
   b5db4:	2003e708 	.word	0x2003e708
   b5db8:	2003e70c 	.word	0x2003e70c
   b5dbc:	000b5cbd 	.word	0x000b5cbd

000b5dc0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5dc0:	4b01      	ldr	r3, [pc, #4]	; (b5dc8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5dc2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5dc4:	4770      	bx	lr
   b5dc6:	bf00      	nop
   b5dc8:	2003ba44 	.word	0x2003ba44

000b5dcc <serialEventRun>:
{
   b5dcc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5dce:	4b0b      	ldr	r3, [pc, #44]	; (b5dfc <serialEventRun+0x30>)
   b5dd0:	b143      	cbz	r3, b5de4 <serialEventRun+0x18>
   b5dd2:	f7ff ffcf 	bl	b5d74 <_Z16_fetch_usbserialv>
   b5dd6:	6803      	ldr	r3, [r0, #0]
   b5dd8:	691b      	ldr	r3, [r3, #16]
   b5dda:	4798      	blx	r3
   b5ddc:	2800      	cmp	r0, #0
   b5dde:	dd01      	ble.n	b5de4 <serialEventRun+0x18>
        serialEvent();
   b5de0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5de4:	4b06      	ldr	r3, [pc, #24]	; (b5e00 <serialEventRun+0x34>)
   b5de6:	b143      	cbz	r3, b5dfa <serialEventRun+0x2e>
   b5de8:	f000 f95c 	bl	b60a4 <_Z22__fetch_global_Serial1v>
   b5dec:	6803      	ldr	r3, [r0, #0]
   b5dee:	691b      	ldr	r3, [r3, #16]
   b5df0:	4798      	blx	r3
   b5df2:	2800      	cmp	r0, #0
   b5df4:	dd01      	ble.n	b5dfa <serialEventRun+0x2e>
        serialEvent1();
   b5df6:	f3af 8000 	nop.w
}
   b5dfa:	bd08      	pop	{r3, pc}
	...

000b5e04 <_post_loop>:
{
   b5e04:	b508      	push	{r3, lr}
	serialEventRun();
   b5e06:	f7ff ffe1 	bl	b5dcc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5e0a:	f7ff f875 	bl	b4ef8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5e0e:	4b01      	ldr	r3, [pc, #4]	; (b5e14 <_post_loop+0x10>)
   b5e10:	6018      	str	r0, [r3, #0]
}
   b5e12:	bd08      	pop	{r3, pc}
   b5e14:	2003e728 	.word	0x2003e728

000b5e18 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e18:	4805      	ldr	r0, [pc, #20]	; (b5e30 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5e1a:	4a06      	ldr	r2, [pc, #24]	; (b5e34 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5e1c:	4906      	ldr	r1, [pc, #24]	; (b5e38 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5e1e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5e20:	1a12      	subs	r2, r2, r0
   b5e22:	f000 f96b 	bl	b60fc <memcpy>
    __backup_sram_signature = signature;
   b5e26:	4b05      	ldr	r3, [pc, #20]	; (b5e3c <_Z33system_initialize_user_backup_ramv+0x24>)
   b5e28:	4a05      	ldr	r2, [pc, #20]	; (b5e40 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5e2a:	601a      	str	r2, [r3, #0]
}
   b5e2c:	bd08      	pop	{r3, pc}
   b5e2e:	bf00      	nop
   b5e30:	2003f400 	.word	0x2003f400
   b5e34:	2003f404 	.word	0x2003f404
   b5e38:	000b9144 	.word	0x000b9144
   b5e3c:	2003f400 	.word	0x2003f400
   b5e40:	9a271c1e 	.word	0x9a271c1e

000b5e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5e44:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e46:	2300      	movs	r3, #0
   b5e48:	9300      	str	r3, [sp, #0]
   b5e4a:	461a      	mov	r2, r3
   b5e4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e50:	f7ff f9c4 	bl	b51dc <system_ctrl_set_result>
}
   b5e54:	b003      	add	sp, #12
   b5e56:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5e5c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5e5c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5e5e:	8843      	ldrh	r3, [r0, #2]
   b5e60:	2b0a      	cmp	r3, #10
   b5e62:	d008      	beq.n	b5e76 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5e64:	2b50      	cmp	r3, #80	; 0x50
   b5e66:	d10b      	bne.n	b5e80 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5e68:	4b09      	ldr	r3, [pc, #36]	; (b5e90 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5e6a:	681b      	ldr	r3, [r3, #0]
   b5e6c:	b14b      	cbz	r3, b5e82 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5e6e:	b003      	add	sp, #12
   b5e70:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5e74:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5e76:	f7ff ffe5 	bl	b5e44 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5e7a:	b003      	add	sp, #12
   b5e7c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5e80:	2300      	movs	r3, #0
   b5e82:	9300      	str	r3, [sp, #0]
   b5e84:	461a      	mov	r2, r3
   b5e86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5e8a:	f7ff f9a7 	bl	b51dc <system_ctrl_set_result>
}
   b5e8e:	e7f4      	b.n	b5e7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5e90:	2003e724 	.word	0x2003e724

000b5e94 <module_user_init_hook>:
{
   b5e94:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5e96:	4812      	ldr	r0, [pc, #72]	; (b5ee0 <module_user_init_hook+0x4c>)
   b5e98:	2100      	movs	r1, #0
   b5e9a:	f7ff fa39 	bl	b5310 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5e9e:	4b11      	ldr	r3, [pc, #68]	; (b5ee4 <module_user_init_hook+0x50>)
   b5ea0:	681a      	ldr	r2, [r3, #0]
   b5ea2:	4b11      	ldr	r3, [pc, #68]	; (b5ee8 <module_user_init_hook+0x54>)
   b5ea4:	429a      	cmp	r2, r3
   b5ea6:	4b11      	ldr	r3, [pc, #68]	; (b5eec <module_user_init_hook+0x58>)
   b5ea8:	bf0c      	ite	eq
   b5eaa:	2201      	moveq	r2, #1
   b5eac:	2200      	movne	r2, #0
   b5eae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5eb0:	d001      	beq.n	b5eb6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5eb2:	f7ff ffb1 	bl	b5e18 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5eb6:	f7ff f817 	bl	b4ee8 <HAL_RNG_GetRandomNumber>
   b5eba:	4604      	mov	r4, r0
    srand(seed);
   b5ebc:	f000 f934 	bl	b6128 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5ec0:	4b0b      	ldr	r3, [pc, #44]	; (b5ef0 <module_user_init_hook+0x5c>)
   b5ec2:	b113      	cbz	r3, b5eca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5eca:	2100      	movs	r1, #0
   b5ecc:	4808      	ldr	r0, [pc, #32]	; (b5ef0 <module_user_init_hook+0x5c>)
   b5ece:	f7ff f98f 	bl	b51f0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5ed6:	4807      	ldr	r0, [pc, #28]	; (b5ef4 <module_user_init_hook+0x60>)
   b5ed8:	2100      	movs	r1, #0
   b5eda:	f7ff b975 	b.w	b51c8 <system_ctrl_set_app_request_handler>
   b5ede:	bf00      	nop
   b5ee0:	000b5dc1 	.word	0x000b5dc1
   b5ee4:	2003f400 	.word	0x2003f400
   b5ee8:	9a271c1e 	.word	0x9a271c1e
   b5eec:	2003e720 	.word	0x2003e720
   b5ef0:	00000000 	.word	0x00000000
   b5ef4:	000b5e5d 	.word	0x000b5e5d

000b5ef8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5ef8:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   b5efa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5efc:	d902      	bls.n	b5f04 <pinAvailable+0xc>
    return false;
   b5efe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5f00:	b002      	add	sp, #8
   b5f02:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5f04:	f1a0 030b 	sub.w	r3, r0, #11
   b5f08:	2b02      	cmp	r3, #2
   b5f0a:	d81a      	bhi.n	b5f42 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5f0c:	4c17      	ldr	r4, [pc, #92]	; (b5f6c <pinAvailable+0x74>)
   b5f0e:	7821      	ldrb	r1, [r4, #0]
   b5f10:	f3bf 8f5b 	dmb	ish
   b5f14:	f011 0101 	ands.w	r1, r1, #1
   b5f18:	d10b      	bne.n	b5f32 <pinAvailable+0x3a>
   b5f1a:	4620      	mov	r0, r4
   b5f1c:	9101      	str	r1, [sp, #4]
   b5f1e:	f7fe f8c4 	bl	b40aa <__cxa_guard_acquire>
   b5f22:	9901      	ldr	r1, [sp, #4]
   b5f24:	b128      	cbz	r0, b5f32 <pinAvailable+0x3a>
   b5f26:	4812      	ldr	r0, [pc, #72]	; (b5f70 <pinAvailable+0x78>)
   b5f28:	f7ff fcec 	bl	b5904 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	f7fe f8c1 	bl	b40b4 <__cxa_guard_release>
   b5f32:	4b0f      	ldr	r3, [pc, #60]	; (b5f70 <pinAvailable+0x78>)
   b5f34:	7818      	ldrb	r0, [r3, #0]
   b5f36:	f7ff f88f 	bl	b5058 <hal_spi_is_enabled>
   b5f3a:	2800      	cmp	r0, #0
   b5f3c:	d1df      	bne.n	b5efe <pinAvailable+0x6>
  return true; // 'pin' is available
   b5f3e:	2001      	movs	r0, #1
   b5f40:	e7de      	b.n	b5f00 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5f42:	2801      	cmp	r0, #1
   b5f44:	d809      	bhi.n	b5f5a <pinAvailable+0x62>
   b5f46:	f000 f86d 	bl	b6024 <_Z19__fetch_global_Wirev>
   b5f4a:	2100      	movs	r1, #0
   b5f4c:	7c00      	ldrb	r0, [r0, #16]
   b5f4e:	f7ff f83b 	bl	b4fc8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5f52:	f080 0001 	eor.w	r0, r0, #1
   b5f56:	b2c0      	uxtb	r0, r0
   b5f58:	e7d2      	b.n	b5f00 <pinAvailable+0x8>
   b5f5a:	3809      	subs	r0, #9
   b5f5c:	2801      	cmp	r0, #1
   b5f5e:	d8ee      	bhi.n	b5f3e <pinAvailable+0x46>
   b5f60:	f000 f8a0 	bl	b60a4 <_Z22__fetch_global_Serial1v>
   b5f64:	7c00      	ldrb	r0, [r0, #16]
   b5f66:	f7ff f8c7 	bl	b50f8 <hal_usart_is_enabled>
   b5f6a:	e7f2      	b.n	b5f52 <pinAvailable+0x5a>
   b5f6c:	2003e690 	.word	0x2003e690
   b5f70:	2003e694 	.word	0x2003e694

000b5f74 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f74:	2825      	cmp	r0, #37	; 0x25
{
   b5f76:	b538      	push	{r3, r4, r5, lr}
   b5f78:	4604      	mov	r4, r0
   b5f7a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5f7c:	d80a      	bhi.n	b5f94 <pinMode+0x20>
   b5f7e:	29ff      	cmp	r1, #255	; 0xff
   b5f80:	d008      	beq.n	b5f94 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5f82:	f7ff ffb9 	bl	b5ef8 <pinAvailable>
   b5f86:	b128      	cbz	r0, b5f94 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5f88:	4629      	mov	r1, r5
   b5f8a:	4620      	mov	r0, r4
}
   b5f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5f90:	f7fe bfba 	b.w	b4f08 <hal_gpio_mode>
}
   b5f94:	bd38      	pop	{r3, r4, r5, pc}

000b5f96 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5f96:	b538      	push	{r3, r4, r5, lr}
   b5f98:	4604      	mov	r4, r0
   b5f9a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5f9c:	f7fe ffbc 	bl	b4f18 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5fa0:	28ff      	cmp	r0, #255	; 0xff
   b5fa2:	d010      	beq.n	b5fc6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5fa4:	2806      	cmp	r0, #6
   b5fa6:	d804      	bhi.n	b5fb2 <digitalWrite+0x1c>
   b5fa8:	234d      	movs	r3, #77	; 0x4d
   b5faa:	fa23 f000 	lsr.w	r0, r3, r0
   b5fae:	07c3      	lsls	r3, r0, #31
   b5fb0:	d409      	bmi.n	b5fc6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5fb2:	4620      	mov	r0, r4
   b5fb4:	f7ff ffa0 	bl	b5ef8 <pinAvailable>
   b5fb8:	b128      	cbz	r0, b5fc6 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5fba:	4629      	mov	r1, r5
   b5fbc:	4620      	mov	r0, r4
}
   b5fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b5fc2:	f7fe bfb1 	b.w	b4f28 <hal_gpio_write>
}
   b5fc6:	bd38      	pop	{r3, r4, r5, pc}

000b5fc8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b5fc8:	b510      	push	{r4, lr}
   b5fca:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b5fcc:	f7fe ffa4 	bl	b4f18 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b5fd0:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b5fd2:	b2db      	uxtb	r3, r3
   b5fd4:	2b01      	cmp	r3, #1
   b5fd6:	d908      	bls.n	b5fea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b5fd8:	4620      	mov	r0, r4
   b5fda:	f7ff ff8d 	bl	b5ef8 <pinAvailable>
   b5fde:	b120      	cbz	r0, b5fea <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b5fe0:	4620      	mov	r0, r4
}
   b5fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b5fe6:	f7fe bfa7 	b.w	b4f38 <hal_gpio_read>
}
   b5fea:	2000      	movs	r0, #0
   b5fec:	bd10      	pop	{r4, pc}

000b5fee <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5fee:	4770      	bx	lr

000b5ff0 <_Z17acquireWireBufferv>:
{
   b5ff0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5ff2:	4b0a      	ldr	r3, [pc, #40]	; (b601c <_Z17acquireWireBufferv+0x2c>)
   b5ff4:	6003      	str	r3, [r0, #0]
   b5ff6:	2301      	movs	r3, #1
{
   b5ff8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5ffa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5ffc:	4908      	ldr	r1, [pc, #32]	; (b6020 <_Z17acquireWireBufferv+0x30>)
   b5ffe:	2020      	movs	r0, #32
   b6000:	f000 f874 	bl	b60ec <_ZnajRKSt9nothrow_t>
	};
   b6004:	2520      	movs	r5, #32
   b6006:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6008:	4905      	ldr	r1, [pc, #20]	; (b6020 <_Z17acquireWireBufferv+0x30>)
	};
   b600a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b600c:	4628      	mov	r0, r5
   b600e:	f000 f86d 	bl	b60ec <_ZnajRKSt9nothrow_t>
	};
   b6012:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6016:	4620      	mov	r0, r4
   b6018:	bd38      	pop	{r3, r4, r5, pc}
   b601a:	bf00      	nop
   b601c:	00010018 	.word	0x00010018
   b6020:	000b900c 	.word	0x000b900c

000b6024 <_Z19__fetch_global_Wirev>:
{
   b6024:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6026:	4d0e      	ldr	r5, [pc, #56]	; (b6060 <_Z19__fetch_global_Wirev+0x3c>)
   b6028:	7829      	ldrb	r1, [r5, #0]
   b602a:	f3bf 8f5b 	dmb	ish
   b602e:	f011 0401 	ands.w	r4, r1, #1
{
   b6032:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6034:	d111      	bne.n	b605a <_Z19__fetch_global_Wirev+0x36>
   b6036:	4628      	mov	r0, r5
   b6038:	f7fe f837 	bl	b40aa <__cxa_guard_acquire>
   b603c:	b168      	cbz	r0, b605a <_Z19__fetch_global_Wirev+0x36>
   b603e:	4668      	mov	r0, sp
   b6040:	f7ff ffd6 	bl	b5ff0 <_Z17acquireWireBufferv>
   b6044:	466a      	mov	r2, sp
   b6046:	4621      	mov	r1, r4
   b6048:	4806      	ldr	r0, [pc, #24]	; (b6064 <_Z19__fetch_global_Wirev+0x40>)
   b604a:	f7ff fa2b 	bl	b54a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b604e:	4628      	mov	r0, r5
   b6050:	f7fe f830 	bl	b40b4 <__cxa_guard_release>
   b6054:	4804      	ldr	r0, [pc, #16]	; (b6068 <_Z19__fetch_global_Wirev+0x44>)
   b6056:	f000 f84b 	bl	b60f0 <atexit>
	return wire;
}
   b605a:	4802      	ldr	r0, [pc, #8]	; (b6064 <_Z19__fetch_global_Wirev+0x40>)
   b605c:	b007      	add	sp, #28
   b605e:	bd30      	pop	{r4, r5, pc}
   b6060:	2003e72c 	.word	0x2003e72c
   b6064:	2003e730 	.word	0x2003e730
   b6068:	000b5fef 	.word	0x000b5fef

000b606c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b606c:	4770      	bx	lr
	...

000b6070 <_Z20acquireSerial1Bufferv>:
{
   b6070:	b538      	push	{r3, r4, r5, lr}
   b6072:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6074:	2514      	movs	r5, #20
   b6076:	462a      	mov	r2, r5
   b6078:	2100      	movs	r1, #0
   b607a:	f000 f84d 	bl	b6118 <memset>
   b607e:	8025      	strh	r5, [r4, #0]
   b6080:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6082:	4907      	ldr	r1, [pc, #28]	; (b60a0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6084:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6086:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6088:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b608a:	f000 f82f 	bl	b60ec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b608e:	4904      	ldr	r1, [pc, #16]	; (b60a0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6090:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6092:	4628      	mov	r0, r5
   b6094:	f000 f82a 	bl	b60ec <_ZnajRKSt9nothrow_t>
    };
   b6098:	60e0      	str	r0, [r4, #12]
}
   b609a:	4620      	mov	r0, r4
   b609c:	bd38      	pop	{r3, r4, r5, pc}
   b609e:	bf00      	nop
   b60a0:	000b900c 	.word	0x000b900c

000b60a4 <_Z22__fetch_global_Serial1v>:
{
   b60a4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60a6:	4d0e      	ldr	r5, [pc, #56]	; (b60e0 <_Z22__fetch_global_Serial1v+0x3c>)
   b60a8:	7829      	ldrb	r1, [r5, #0]
   b60aa:	f3bf 8f5b 	dmb	ish
   b60ae:	f011 0401 	ands.w	r4, r1, #1
{
   b60b2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b60b4:	d111      	bne.n	b60da <_Z22__fetch_global_Serial1v+0x36>
   b60b6:	4628      	mov	r0, r5
   b60b8:	f7fd fff7 	bl	b40aa <__cxa_guard_acquire>
   b60bc:	b168      	cbz	r0, b60da <_Z22__fetch_global_Serial1v+0x36>
   b60be:	a801      	add	r0, sp, #4
   b60c0:	f7ff ffd6 	bl	b6070 <_Z20acquireSerial1Bufferv>
   b60c4:	aa01      	add	r2, sp, #4
   b60c6:	4621      	mov	r1, r4
   b60c8:	4806      	ldr	r0, [pc, #24]	; (b60e4 <_Z22__fetch_global_Serial1v+0x40>)
   b60ca:	f7ff fde1 	bl	b5c90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b60ce:	4628      	mov	r0, r5
   b60d0:	f7fd fff0 	bl	b40b4 <__cxa_guard_release>
   b60d4:	4804      	ldr	r0, [pc, #16]	; (b60e8 <_Z22__fetch_global_Serial1v+0x44>)
   b60d6:	f000 f80b 	bl	b60f0 <atexit>
    return serial1;
}
   b60da:	4802      	ldr	r0, [pc, #8]	; (b60e4 <_Z22__fetch_global_Serial1v+0x40>)
   b60dc:	b007      	add	sp, #28
   b60de:	bd30      	pop	{r4, r5, pc}
   b60e0:	2003e744 	.word	0x2003e744
   b60e4:	2003e748 	.word	0x2003e748
   b60e8:	000b606d 	.word	0x000b606d

000b60ec <_ZnajRKSt9nothrow_t>:
   b60ec:	f7fd bfd9 	b.w	b40a2 <_Znaj>

000b60f0 <atexit>:
   b60f0:	2300      	movs	r3, #0
   b60f2:	4601      	mov	r1, r0
   b60f4:	461a      	mov	r2, r3
   b60f6:	4618      	mov	r0, r3
   b60f8:	f000 b860 	b.w	b61bc <__register_exitproc>

000b60fc <memcpy>:
   b60fc:	440a      	add	r2, r1
   b60fe:	4291      	cmp	r1, r2
   b6100:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6104:	d100      	bne.n	b6108 <memcpy+0xc>
   b6106:	4770      	bx	lr
   b6108:	b510      	push	{r4, lr}
   b610a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b610e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6112:	4291      	cmp	r1, r2
   b6114:	d1f9      	bne.n	b610a <memcpy+0xe>
   b6116:	bd10      	pop	{r4, pc}

000b6118 <memset>:
   b6118:	4402      	add	r2, r0
   b611a:	4603      	mov	r3, r0
   b611c:	4293      	cmp	r3, r2
   b611e:	d100      	bne.n	b6122 <memset+0xa>
   b6120:	4770      	bx	lr
   b6122:	f803 1b01 	strb.w	r1, [r3], #1
   b6126:	e7f9      	b.n	b611c <memset+0x4>

000b6128 <srand>:
   b6128:	b538      	push	{r3, r4, r5, lr}
   b612a:	4b10      	ldr	r3, [pc, #64]	; (b616c <srand+0x44>)
   b612c:	681d      	ldr	r5, [r3, #0]
   b612e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6130:	4604      	mov	r4, r0
   b6132:	b9b3      	cbnz	r3, b6162 <srand+0x3a>
   b6134:	2018      	movs	r0, #24
   b6136:	f7ff f8c3 	bl	b52c0 <malloc>
   b613a:	4602      	mov	r2, r0
   b613c:	63a8      	str	r0, [r5, #56]	; 0x38
   b613e:	b920      	cbnz	r0, b614a <srand+0x22>
   b6140:	4b0b      	ldr	r3, [pc, #44]	; (b6170 <srand+0x48>)
   b6142:	480c      	ldr	r0, [pc, #48]	; (b6174 <srand+0x4c>)
   b6144:	2142      	movs	r1, #66	; 0x42
   b6146:	f7ff f8db 	bl	b5300 <__assert_func>
   b614a:	490b      	ldr	r1, [pc, #44]	; (b6178 <srand+0x50>)
   b614c:	4b0b      	ldr	r3, [pc, #44]	; (b617c <srand+0x54>)
   b614e:	e9c0 1300 	strd	r1, r3, [r0]
   b6152:	4b0b      	ldr	r3, [pc, #44]	; (b6180 <srand+0x58>)
   b6154:	6083      	str	r3, [r0, #8]
   b6156:	230b      	movs	r3, #11
   b6158:	8183      	strh	r3, [r0, #12]
   b615a:	2100      	movs	r1, #0
   b615c:	2001      	movs	r0, #1
   b615e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6162:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6164:	2200      	movs	r2, #0
   b6166:	611c      	str	r4, [r3, #16]
   b6168:	615a      	str	r2, [r3, #20]
   b616a:	bd38      	pop	{r3, r4, r5, pc}
   b616c:	2003ba44 	.word	0x2003ba44
   b6170:	000b900d 	.word	0x000b900d
   b6174:	000b9024 	.word	0x000b9024
   b6178:	abcd330e 	.word	0xabcd330e
   b617c:	e66d1234 	.word	0xe66d1234
   b6180:	0005deec 	.word	0x0005deec

000b6184 <strcpy>:
   b6184:	4603      	mov	r3, r0
   b6186:	f811 2b01 	ldrb.w	r2, [r1], #1
   b618a:	f803 2b01 	strb.w	r2, [r3], #1
   b618e:	2a00      	cmp	r2, #0
   b6190:	d1f9      	bne.n	b6186 <strcpy+0x2>
   b6192:	4770      	bx	lr

000b6194 <strncmp>:
   b6194:	b510      	push	{r4, lr}
   b6196:	b17a      	cbz	r2, b61b8 <strncmp+0x24>
   b6198:	4603      	mov	r3, r0
   b619a:	3901      	subs	r1, #1
   b619c:	1884      	adds	r4, r0, r2
   b619e:	f813 0b01 	ldrb.w	r0, [r3], #1
   b61a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b61a6:	4290      	cmp	r0, r2
   b61a8:	d101      	bne.n	b61ae <strncmp+0x1a>
   b61aa:	42a3      	cmp	r3, r4
   b61ac:	d101      	bne.n	b61b2 <strncmp+0x1e>
   b61ae:	1a80      	subs	r0, r0, r2
   b61b0:	bd10      	pop	{r4, pc}
   b61b2:	2800      	cmp	r0, #0
   b61b4:	d1f3      	bne.n	b619e <strncmp+0xa>
   b61b6:	e7fa      	b.n	b61ae <strncmp+0x1a>
   b61b8:	4610      	mov	r0, r2
   b61ba:	e7f9      	b.n	b61b0 <strncmp+0x1c>

000b61bc <__register_exitproc>:
   b61bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b61c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b627c <__register_exitproc+0xc0>
   b61c4:	4606      	mov	r6, r0
   b61c6:	f8d8 0000 	ldr.w	r0, [r8]
   b61ca:	461f      	mov	r7, r3
   b61cc:	460d      	mov	r5, r1
   b61ce:	4691      	mov	r9, r2
   b61d0:	f000 f856 	bl	b6280 <__retarget_lock_acquire_recursive>
   b61d4:	4b25      	ldr	r3, [pc, #148]	; (b626c <__register_exitproc+0xb0>)
   b61d6:	681c      	ldr	r4, [r3, #0]
   b61d8:	b934      	cbnz	r4, b61e8 <__register_exitproc+0x2c>
   b61da:	4c25      	ldr	r4, [pc, #148]	; (b6270 <__register_exitproc+0xb4>)
   b61dc:	601c      	str	r4, [r3, #0]
   b61de:	4b25      	ldr	r3, [pc, #148]	; (b6274 <__register_exitproc+0xb8>)
   b61e0:	b113      	cbz	r3, b61e8 <__register_exitproc+0x2c>
   b61e2:	681b      	ldr	r3, [r3, #0]
   b61e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b61e8:	6863      	ldr	r3, [r4, #4]
   b61ea:	2b1f      	cmp	r3, #31
   b61ec:	dd07      	ble.n	b61fe <__register_exitproc+0x42>
   b61ee:	f8d8 0000 	ldr.w	r0, [r8]
   b61f2:	f000 f847 	bl	b6284 <__retarget_lock_release_recursive>
   b61f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b61fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b61fe:	b34e      	cbz	r6, b6254 <__register_exitproc+0x98>
   b6200:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6204:	b988      	cbnz	r0, b622a <__register_exitproc+0x6e>
   b6206:	4b1c      	ldr	r3, [pc, #112]	; (b6278 <__register_exitproc+0xbc>)
   b6208:	b923      	cbnz	r3, b6214 <__register_exitproc+0x58>
   b620a:	f8d8 0000 	ldr.w	r0, [r8]
   b620e:	f000 f838 	bl	b6282 <__retarget_lock_release>
   b6212:	e7f0      	b.n	b61f6 <__register_exitproc+0x3a>
   b6214:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6218:	f7ff f852 	bl	b52c0 <malloc>
   b621c:	2800      	cmp	r0, #0
   b621e:	d0f4      	beq.n	b620a <__register_exitproc+0x4e>
   b6220:	2300      	movs	r3, #0
   b6222:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6226:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b622a:	6863      	ldr	r3, [r4, #4]
   b622c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6230:	2201      	movs	r2, #1
   b6232:	409a      	lsls	r2, r3
   b6234:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6238:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b623c:	4313      	orrs	r3, r2
   b623e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6242:	2e02      	cmp	r6, #2
   b6244:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6248:	bf02      	ittt	eq
   b624a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b624e:	4313      	orreq	r3, r2
   b6250:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6254:	6863      	ldr	r3, [r4, #4]
   b6256:	f8d8 0000 	ldr.w	r0, [r8]
   b625a:	1c5a      	adds	r2, r3, #1
   b625c:	3302      	adds	r3, #2
   b625e:	6062      	str	r2, [r4, #4]
   b6260:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6264:	f000 f80e 	bl	b6284 <__retarget_lock_release_recursive>
   b6268:	2000      	movs	r0, #0
   b626a:	e7c6      	b.n	b61fa <__register_exitproc+0x3e>
   b626c:	2003e7e8 	.word	0x2003e7e8
   b6270:	2003e75c 	.word	0x2003e75c
   b6274:	00000000 	.word	0x00000000
   b6278:	000b52c1 	.word	0x000b52c1
   b627c:	2003baa8 	.word	0x2003baa8

000b6280 <__retarget_lock_acquire_recursive>:
   b6280:	4770      	bx	lr

000b6282 <__retarget_lock_release>:
   b6282:	4770      	bx	lr

000b6284 <__retarget_lock_release_recursive>:
   b6284:	4770      	bx	lr

000b6286 <link_code_end>:
	...

000b6288 <dynalib_user>:
   b6288:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b6298:	0000 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   b62a8:	6520 502d 7061 7265 6420 7369 6c70 7961      e-Paper display
   b62b8:	4600 6961 656c 2064 6f74 6920 696e 6974     .Failed to initi
   b62c8:	6c61 7a69 2065 6964 7073 616c 0079 6157     alize display.Wa
   b62d8:	7469 6e69 2067 6f66 2072 2061 6163 6472     iting for a card
   b62e8:	2e2e 2e2e 2e2e 4300 6e6f 7473 7572 7463     .......Construct
   b62f8:	6e69 2067 656d 7373 6761 2065 6f66 2072     ing message for 
   b6308:	6964 7073 616c 2e79 2e2e 4400 6e69 6e69     display....Dinin
   b6318:	2067 6f52 6d6f 4d00 7261 2073 6568 6572     g Room.Mars here
   b6328:	7720 2065 6f63 656d 3100 3a30 3030 3100      we come.10:00.1
   b6338:	3a32 3030 5300 6574 6976 0065 6f57 646e     2:00.Stevie.Wond
   b6348:	7265 4500 5252 524f 5200 4f4f 3a4d 0020     er.ERROR.ROOM: .
   b6358:	4954 4c54 3a45 0020 4954 454d 203a 2000     TITLE: .TIME: . 
   b6368:	202d 5300 4550 4b41 5245 203a 6500 502d     - .SPEAKER: .e-P
   b6378:	7061 7265 6220 7375 2079 0a0d 0020 2d65     aper busy .. .e-
   b6388:	6150 6570 2072 7562 7973 7220 6c65 6165     Paper busy relea
   b6398:	6573 0d20 200a                               se .. .

000b639f <_ZL20EPD_3IN52_lut_R20_GC>:
   b639f:	0f01 0f0f 0101 0001 0000 0000 0000 0000     ................
	...

000b63d7 <_ZL20EPD_3IN52_lut_R21_GC>:
   b63d7:	4f01 0f8f 0101 0001 0000 0000 0000 0000     .O..............
	...

000b6401 <_ZL20EPD_3IN52_lut_R22_GC>:
   b6401:	0f01 0f8f 0101 0001 0000 0000 0000 0000     ................
	...

000b6439 <_ZL20EPD_3IN52_lut_R23_GC>:
   b6439:	4f01 4f8f 0101 0001 0000 0000 0000 0000     .O.O............
	...

000b6471 <_ZL20EPD_3IN52_lut_R24_GC>:
   b6471:	0f01 4f8f 0101 0001 0000 0000 0000 0000     ...O............
	...
   b6499:	0000 6564 6166 6c75 2074 4d00 4253 4c00     ..default .MSB.L
   b64a9:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
   b64b9:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
   b64c9:	6974 676e 2073 7325 7525 2520 2073 4f4d     tings %s%u %s MO
   b64d9:	4544 7525 003e                               DE%u>..

000b64e0 <_ZTVN8particle11SPISettingsE>:
	...
   b64e8:	4929 000b 48fd 000b 48ff 000b               )I...H...H..

000b64f4 <_ZL12Font20_Table>:
	...
   b651c:	0000 0007 0007 0007 0007 0007 0007 0007     ................
   b652c:	0002 0002 0000 0000 0007 0007 0000 0000     ................
	...
   b6548:	e01c e01c e01c 4008 4008 4008 0000 0000     .......@.@.@....
	...
   b656c:	c00c c00c c00c c00c c00c f03f f03f c00c     ..........?.?...
   b657c:	c00c f03f f03f c00c c00c c00c c00c c00c     ..?.?...........
	...
   b6594:	0003 0003 e007 e00f 6018 0018 001f c00f     .........`......
   b65a4:	e000 6018 6018 c01f 801f 0003 0003 0003     ...`.`..........
	...
   b65bc:	0000 001c 0022 0022 0022 601c e001 800f     ...."."."..`....
   b65cc:	003c c031 2002 2002 2002 c001 0000 0000     <.1.. . . ......
	...
   b65e8:	0000 e003 e00f 000c 000c 0006 300f f01f     .............0..
   b65f8:	e019 c018 f01f b007 0000 0000 0000 0000     ................
	...
   b6610:	8003 8003 8003 0001 0001 0001 0000 0000     ................
	...
   b6634:	0000 c000 c000 8001 8001 8001 0003 0003     ................
   b6644:	0003 0003 0003 0003 8001 8001 8001 c000     ................
   b6654:	c000 0000 0000 0000 0000 000c 000c 0006     ................
   b6664:	0006 0006 0003 0003 0003 0003 0003 0003     ................
   b6674:	0006 0006 0006 000c 000c 0000 0000 0000     ................
   b6684:	0000 0003 0003 0003 601b e01f 8007 8007     .........`......
   b6694:	c00f c00c 0000 0000 0000 0000 0000 0000     ................
	...
   b66b0:	0000 0003 0003 0003 0003 f03f f03f 0003     ..........?.?...
   b66c0:	0003 0003 0003 0000 0000 0000 0000 0000     ................
	...
   b66e8:	0000 8003 0003 0003 0006 0006 0004 0000     ................
	...
   b6708:	0000 e03f e03f 0000 0000 0000 0000 0000     ..?.?...........
	...
   b6738:	0000 8003 8003 8003 0000 0000 0000 0000     ................
   b6748:	0000 0000 6000 6000 c000 c000 c000 8001     .....`.`........
   b6758:	8001 0003 0003 0006 0006 000c 000c 000c     ................
   b6768:	0018 0018 0000 0000 0000 0000 0000 800f     ................
   b6778:	c01f c018 6030 6030 6030 6030 6030 6030     ....0`0`0`0`0`0`
   b6788:	6030 c018 c01f 800f 0000 0000 0000 0000     0`..............
   b6798:	0000 0000 0000 0003 001f 001f 0003 0003     ................
   b67a8:	0003 0003 0003 0003 0003 0003 e01f e01f     ................
	...
   b67c4:	0000 800f c01f e038 6030 6000 c000 8001     ......8.0`.`....
   b67d4:	0003 0006 000c 0018 e03f e03f 0000 0000     ........?.?.....
	...
   b67ec:	0000 800f c03f e030 6000 e000 c007 c007     ....?.0..`......
   b67fc:	e000 6000 6000 e060 c07f 803f 0000 0000     ...`.``...?.....
	...
   b6814:	0000 c001 c003 c003 c006 c00c c00c c018     ................
   b6824:	c030 e03f e03f c000 e003 e003 0000 0000     0.?.?...........
	...
   b683c:	0000 c01f c01f 0018 0018 801f c01f e018     ................
   b684c:	6000 6000 6000 e030 c03f 801f 0000 0000     .`.`.`0.?.......
	...
   b6864:	0000 e003 e00f 001e 0018 0038 8037 c03f     ..........8.7.?.
   b6874:	e038 6030 6030 e018 c01f 8007 0000 0000     8.0`0`..........
	...
   b688c:	0000 e03f e03f 6030 6000 c000 c000 c000     ..?.?.0`.`......
   b689c:	8001 8001 8001 0003 0003 0003 0000 0000     ................
	...
   b68b4:	0000 800f c01f e038 6030 e038 c01f c01f     ......8.0`8.....
   b68c4:	e038 6030 6030 e038 c01f 800f 0000 0000     8.0`0`8.........
	...
   b68dc:	0000 000f c01f c038 6030 6030 e038 e01f     ......8.0`0`8...
   b68ec:	600f e000 c000 c003 803f 003e 0000 0000     .`......?.>.....
	...
   b690c:	0000 8003 8003 8003 0000 0000 0000 8003     ................
   b691c:	8003 8003 0000 0000 0000 0000 0000 0000     ................
	...
   b6934:	0000 c001 c001 c001 0000 0000 0000 8003     ................
   b6944:	0003 0006 0006 0004 0000 0000 0000 0000     ................
   b6954:	0000 0000 0000 3000 f000 c003 0007 001c     .......0........
   b6964:	0078 001c 0007 c003 f000 3000 0000 0000     x..........0....
	...
   b6984:	0000 f07f f07f 0000 0000 f07f f07f 0000     ................
	...
   b69a8:	0000 0030 003c 000f 8003 e000 7800 e000     ..0.<........x..
   b69b8:	8003 000f 003c 0030 0000 0000 0000 0000     ....<.0.........
	...
   b69d0:	800f c01f 6018 6018 6000 c001 8003 0003     .....`.`.`......
   b69e0:	0000 0000 0007 0007 0000 0000 0000 0000     ................
   b69f0:	0000 0000 0000 8003 800c 4008 4010 4010     ...........@.@.@
   b6a00:	c011 4012 4012 4012 c011 0010 0008 4008     ...@.@.@.......@
   b6a10:	8007 0000 0000 0000 0000 0000 0000 0000     ................
   b6a20:	801f 801f 8003 c006 c006 c00c 600c e01f     .............`..
   b6a30:	e01f 3030 7878 7878 0000 0000 0000 0000     ..00xxxx........
	...
   b6a48:	803f c03f 6018 6018 e018 c01f e01f 7018     ?.?..`.`.......p
   b6a58:	3018 3018 f03f e03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b6a70:	b007 f00f 701c 3038 0030 0030 0030 0030     .....p800.0.0.0.
   b6a80:	3038 701c e00f c007 0000 0000 0000 0000     80.p............
	...
   b6a98:	807f c07f e030 7030 3030 3030 3030 3030     ....0.0p00000000
   b6aa8:	7030 e030 c07f 807f 0000 0000 0000 0000     0p0.............
	...
   b6ac0:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b6ad0:	3018 3018 f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b6ae8:	f03f f03f 3018 3018 8019 801f 801f 8019     ?.?..0.0........
   b6af8:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b6b10:	b007 f01f 7018 3030 0030 0030 f831 f831     .....p000.0.1.1.
   b6b20:	3030 3018 f01f c007 0000 0000 0000 0000     00.0............
	...
   b6b38:	f03c f03c 6018 6018 6018 e01f e01f 6018     <.<..`.`.`.....`
   b6b48:	6018 6018 f03c f03c 0000 0000 0000 0000     .`.`<.<.........
	...
   b6b60:	e01f e01f 0003 0003 0003 0003 0003 0003     ................
   b6b70:	0003 0003 e01f e01f 0000 0000 0000 0000     ................
	...
   b6b88:	f803 f803 6000 6000 6000 6000 6030 6030     .....`.`.`.`0`0`
   b6b98:	6030 e030 c03f 800f 0000 0000 0000 0000     0`0.?...........
	...
   b6bb0:	f83e f83e e018 8019 001b 001f 801d c018     >.>.............
   b6bc0:	c018 6018 783e 383e 0000 0000 0000 0000     ...`>x>8........
	...
   b6bd8:	003f 003f 000c 000c 000c 000c 000c 300c     ?.?............0
   b6be8:	300c 300c f03f f03f 0000 0000 0000 0000     .0.0?.?.........
	...
   b6c00:	7878 7878 7038 f03c b034 b037 b037 3033     xxxx8p<.4.7.7.30
   b6c10:	3033 3030 f87c f87c 0000 0000 0000 0000     3000|.|.........
	...
   b6c28:	f039 f03d 601c 601e 601e 601b 601b e019     9.=..`.`.`.`.`..
   b6c38:	e019 e018 e03e 603e 0000 0000 0000 0000     ....>.>`........
	...
   b6c50:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b6c60:	7038 e01c c00f 8007 0000 0000 0000 0000     8p..............
	...
   b6c78:	c03f e03f 7018 3018 3018 7018 e01f c01f     ?.?..p.0.0.p....
   b6c88:	0018 0018 003f 003f 0000 0000 0000 0000     ....?.?.........
	...
   b6ca0:	8007 c00f e01c 7038 3030 3030 3030 3030     ......8p00000000
   b6cb0:	7038 e01c c00f 8007 b007 f00f e00c 0000     8p..............
	...
   b6cc8:	c03f e03f 7018 3018 7018 e01f c01f e018     ?.?..p.0.p......
   b6cd8:	6018 7018 383e 183e 0000 0000 0000 0000     .`.p>8>.........
	...
   b6cf0:	b00f f01f 7038 3030 0038 801f e007 7000     ....8p008......p
   b6d00:	3030 7038 e03f c037 0000 0000 0000 0000     008p?.7.........
	...
   b6d18:	f03f f03f 3033 3033 3033 0003 0003 0003     ?.?.303030......
   b6d28:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b6d40:	f03c f03c 6018 6018 6018 6018 6018 6018     <.<..`.`.`.`.`.`
   b6d50:	6018 e01c c00f 8007 0000 0000 0000 0000     .`..............
	...
   b6d68:	f078 f078 6030 6030 c018 c018 800d 800d     x.x.0`0`........
   b6d78:	800d 0007 0007 0007 0000 0000 0000 0000     ................
	...
   b6d90:	7c7c 7c7c 1830 9833 9833 9833 d836 d016     ||||0.3.3.3.6...
   b6da0:	701c 701c 701c 3018 0000 0000 0000 0000     .p.p.p.0........
	...
   b6db8:	f078 f078 6030 c018 800d 0007 0007 800d     x.x.0`..........
   b6dc8:	c018 6030 f078 f078 0000 0000 0000 0000     ..0`x.x.........
	...
   b6de0:	f03c f03c 6018 c00c 8007 8007 0003 0003     <.<..`..........
   b6df0:	0003 0003 c00f c00f 0000 0000 0000 0000     ................
	...
   b6e08:	e01f e01f 6018 c018 8001 0003 0003 0006     .....`..........
   b6e18:	600c 6018 e01f e01f 0000 0000 0000 0000     .`.`............
   b6e28:	0000 0000 0000 c003 c003 0003 0003 0003     ................
   b6e38:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b6e48:	0003 c003 c003 0000 0000 0000 0018 0018     ................
   b6e58:	000c 000c 000c 0006 0006 0003 0003 8001     ................
   b6e68:	8001 c000 c000 c000 6000 6000 0000 0000     .........`.`....
   b6e78:	0000 0000 0000 000f 000f 0003 0003 0003     ................
   b6e88:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b6e98:	0003 000f 000f 0000 0000 0000 0000 0002     ................
   b6ea8:	0007 800d c018 6030 2020 0000 0000 0000     ......0`  ......
	...
   b6ef0:	fcff fcff 0000 0004 0003 8000 0000 0000     ................
	...
   b6f24:	0000 c00f e01f 6000 e00f e01f 6038 e030     .......`....8`0.
   b6f34:	f03f 701f 0000 0000 0000 0000 0000 0000     ?..p............
   b6f44:	0000 0070 0070 0030 0030 8037 e03f 6038     ..p.p.0.0.7.?.8`
   b6f54:	3030 3030 3030 6038 e07f 8077 0000 0000     0000008`..w.....
	...
   b6f74:	0000 b007 f01f 3018 3030 0030 0030 3038     .......0000.0.80
   b6f84:	f01f c00f 0000 0000 0000 0000 0000 0000     ................
   b6f94:	0000 7000 7000 3000 3000 b007 f01f 7018     ...p.p.0.0.....p
   b6fa4:	3030 3030 3030 7038 f81f b807 0000 0000     0000008p........
	...
   b6fc4:	0000 8007 e01f 6018 f03f f03f 0030 3018     .......`?.?.0..0
   b6fd4:	f01f c007 0000 0000 0000 0000 0000 0000     ................
   b6fe4:	0000 f003 f007 0006 0006 e01f e01f 0006     ................
   b6ff4:	0006 0006 0006 0006 e01f e01f 0000 0000     ................
	...
   b7014:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b7024:	f01f b007 3000 7000 e00f c00f 0000 0000     .....0.p........
   b7034:	0000 0038 0038 0018 0018 c01b e01f 601c     ..8.8..........`
   b7044:	6018 6018 6018 6018 f03c f03c 0000 0000     .`.`.`.`<.<.....
	...
   b705c:	0000 0003 0003 0000 0000 001f 001f 0003     ................
   b706c:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b7084:	0000 0003 0003 0000 0000 c01f c01f c000     ................
   b7094:	c000 c000 c000 c000 c000 c000 c000 c001     ................
   b70a4:	803f 003f 0000 0000 0000 0038 0038 0018     ?.?.......8.8...
   b70b4:	0018 e01b e01b 001b 001e 001e 001b 8019     ................
   b70c4:	f039 f039 0000 0000 0000 0000 0000 0000     9.9.............
   b70d4:	0000 001f 001f 0003 0003 0003 0003 0003     ................
   b70e4:	0003 0003 0003 0003 e01f e01f 0000 0000     ................
	...
   b7104:	0000 e07e f07f 3033 3033 3033 3033 3033     ..~...3030303030
   b7114:	b87b b87b 0000 0000 0000 0000 0000 0000     {.{.............
	...
   b712c:	0000 c03b e03f 601c 6018 6018 6018 6018     ..;.?..`.`.`.`.`
   b713c:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b7154:	0000 8007 e01f 6018 3030 3030 3030 6018     .......`000000.`
   b7164:	e01f 8007 0000 0000 0000 0000 0000 0000     ................
	...
   b717c:	0000 8077 e07f 6038 3030 3030 3030 6038     ..w...8`0000008`
   b718c:	e03f 8037 0030 0030 007c 007c 0000 0000     ?.7.0.0.|.|.....
	...
   b71a4:	0000 b807 f81f 7018 3030 3030 3030 7018     .......p000000.p
   b71b4:	f01f b007 3000 3000 f800 f800 0000 0000     .....0.0........
	...
   b71cc:	0000 e03c f03d 300f 000e 000c 000c 000c     ..<.=..0........
   b71dc:	c03f c03f 0000 0000 0000 0000 0000 0000     ?.?.............
	...
   b71f4:	0000 e007 e01f 6018 001e c00f e001 6018     .......`.......`
   b7204:	e01f 801f 0000 0000 0000 0000 0000 0000     ................
   b7214:	0000 0000 000c 000c 000c e03f e03f 000c     ..........?.?...
   b7224:	000c 000c 000c 300c f00f c007 0000 0000     .......0........
	...
   b7244:	0000 e038 e038 6018 6018 6018 6018 e018     ..8.8..`.`.`.`..
   b7254:	f01f 700f 0000 0000 0000 0000 0000 0000     ...p............
	...
   b726c:	0000 f078 f078 6030 c018 c018 800d 800d     ..x.x.0`........
   b727c:	0007 0007 0000 0000 0000 0000 0000 0000     ................
	...
   b7294:	0000 f078 f078 6032 6032 e037 c01d c01d     ..x.x.2`2`7.....
   b72a4:	c018 c018 0000 0000 0000 0000 0000 0000     ................
	...
   b72bc:	0000 f03c f03c c00c 8007 0003 8007 c00c     ..<.<...........
   b72cc:	f03c f03c 0000 0000 0000 0000 0000 0000     <.<.............
	...
   b72e4:	0000 f078 f078 6030 c018 c018 800d 800f     ..x.x.0`........
   b72f4:	0007 0006 0006 000c 007f 007f 0000 0000     ................
	...
   b730c:	0000 e01f e01f c018 8001 0003 0006 600c     ...............`
   b731c:	e01f e01f 0000 0000 0000 0000 0000 0000     ................
   b732c:	0000 c001 c003 0003 0003 0003 0003 0003     ................
   b733c:	0007 000e 0007 0003 0003 0003 0003 c003     ................
   b734c:	c001 0000 0000 0000 0000 0003 0003 0003     ................
   b735c:	0003 0003 0003 0003 0003 0003 0003 0003     ................
   b736c:	0003 0003 0003 0003 0003 0000 0000 0000     ................
   b737c:	0000 001c 001e 0006 0006 0006 0006 0006     ................
   b738c:	0007 8003 0007 0006 0006 0006 0006 001e     ................
   b739c:	001c 0000 0000 0000 0000 0000 0000 0000     ................
   b73ac:	0000 0000 000e 303f f033 e001 0000 0000     ......?03.......
	...

000b73cc <_ZL12Font24_Table>:
	...
   b7418:	0000 8003 0300 0080 8003 0300 0080 8003     ................
   b7428:	0300 0080 8003 0300 0080 8003 0100 0000     ................
   b7438:	0001 0000 0000 0000 0300 0080 8003 0000     ................
	...
   b7464:	0e00 0070 700e 0e00 0070 2004 0400 0020     ..p..p..p.. .. .
   b7474:	2004 0400 0020 0000 0000 0000 0000 0000     . .. ...........
	...
   b74a8:	0000 6006 0600 0060 6006 0600 0060 6006     ...`..`..`..`..`
   b74b8:	3f00 00f8 f83f 0600 0060 c00c 3f00 00f8     .?..?...`....?..
   b74c8:	f83f 0c00 00c0 c00c 0c00 00c0 c00c 0c00     ?...............
   b74d8:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
   b74e8:	0000 0000 0000 0100 0080 8001 0700 00b0     ................
   b74f8:	f00f 1800 0070 7018 1c00 0000 800f 0700     ....p..p........
   b7508:	00e0 f000 1800 0030 301c 1c00 0070 e01f     ......0..0..p...
   b7518:	1b00 00c0 8001 0100 0080 8001 0100 0080     ................
	...
   b7538:	0000 8007 0f00 00c0 e01c 1800 0060 6018     ............`..`
   b7548:	1c00 00e0 f80f 0700 00e0 f01f 0700 0038     ..............8.
   b7558:	1806 0600 0018 3807 0300 00f0 e001 0000     .......8........
	...
   b7588:	f003 0700 00f0 600c 0c00 0000 000c 0600     .......`........
   b7598:	0000 0007 0f00 009c fc1d 1800 00f0 7018     ...............p
   b75a8:	0f00 00fc dc07 0000 0000 0000 0000 0000     ................
	...
   b75cc:	0300 0080 8003 0300 0080 0001 0100 0000     ................
   b75dc:	0001 0100 0000 0000 0000 0000 0000 0000     ................
	...
   b7610:	0000 1800 0000 0038 7000 0000 00f0 e000     ......8..p......
   b7620:	0000 00e0 c001 0100 00c0 c001 0100 00c0     ................
   b7630:	c001 0100 00c0 e000 0000 00e0 7000 0000     .............p..
   b7640:	0070 3800 0000 0018 0000 0000 0000 0000     p..8............
	...
   b7658:	0000 0018 1c00 0000 000e 0e00 0000 0007     ................
   b7668:	0700 0000 8003 0300 0080 8003 0300 0080     ................
   b7678:	8003 0300 0080 0007 0700 0000 000f 0e00     ................
   b7688:	0000 001c 1800 0000 0000 0000 0000 0000     ................
	...
   b76a0:	0000 8001 0100 0080 8001 1d00 00b8 f81f     ................
   b76b0:	0700 00e0 c003 0300 00c0 6006 0600 0060     ...........`..`.
	...
   b76f0:	8001 0100 0080 8001 0100 0080 8001 3f00     ...............?
   b7700:	00fc fc3f 0100 0080 8001 0100 0080 8001     ..?.............
   b7710:	0100 0080 0000 0000 0000 0000 0000 0000     ................
	...
   b7754:	0000 e000 0000 00c0 c001 0100 0080 8001     ................
   b7764:	0300 0000 0003 0000 0000 0000 0000 0000     ................
	...
   b778c:	0000 1f00 00f8 f81f 0000 0000 0000 0000     ................
	...
   b77e4:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7804:	1800 0000 0018 3800 0000 0030 7000 0000     .......8..0..p..
   b7814:	0060 6000 0000 00c0 c000 0100 0080 8001     `..`............
   b7824:	0300 0000 0003 0600 0000 0006 0e00 0000     ................
   b7834:	000c 1c00 0000 0018 1800 0000 0000 0000     ................
	...
   b7850:	0000 c003 0700 00e0 300c 0c00 0030 1818     .........0..0...
   b7860:	1800 0018 1818 1800 0018 1818 1800 0018     ................
   b7870:	1818 0c00 0030 300c 0700 00e0 c003 0000     ....0..0........
	...
   b7898:	0000 8000 0700 0080 801f 1d00 0080 8001     ................
   b78a8:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b78b8:	8001 0100 0080 8001 1f00 00f8 f81f 0000     ................
	...
   b78e0:	0000 c007 1f00 00f0 3038 3000 0018 1830     ........80.0..0.
   b78f0:	0000 0018 3000 0000 0060 c001 0300 0080     .....0..`.......
   b7900:	0006 0c00 0000 0018 3f00 00f8 f83f 0000     .........?..?...
	...
   b7928:	0000 c003 0f00 00e0 700c 0000 0030 3000     .........p..0..0
   b7938:	0000 0060 c003 0300 00e0 7000 0000 0018     ..`........p....
   b7948:	1800 0000 0018 3818 1f00 00f0 c00f 0000     .......8........
	...
   b7970:	0000 e000 0100 00e0 e001 0300 0060 6006     ............`..`
   b7980:	0600 0060 600c 0c00 0060 6018 3000 0060     ..`..`..`..`.0`.
   b7990:	f83f 3f00 00f8 6000 0300 00f8 f803 0000     ?..?...`........
	...
   b79b8:	0000 f01f 1f00 00f0 0018 1800 0000 0018     ................
   b79c8:	1b00 00c0 f01f 1c00 0030 1800 0000 0018     ........0.......
   b79d8:	1800 0000 0018 3030 3f00 00f0 c00f 0000     ......00.?......
	...
   b7a00:	0000 f800 0300 00f8 0007 0e00 0000 000c     ................
   b7a10:	1800 0000 c01b 1f00 00f0 301c 1800 0018     ...........0....
   b7a20:	1818 1800 0018 380c 0f00 00f0 e003 0000     .......8........
	...
   b7a48:	0000 f81f 1f00 00f8 1818 1800 0038 3000     ............8..0
   b7a58:	0000 0030 7000 0000 0060 6000 0000 00e0     ..0..p..`..`....
   b7a68:	c000 0000 00c0 c001 0100 0080 8001 0000     ................
	...
   b7a90:	0000 e007 0f00 00f0 381c 1800 0018 1818     .........8......
   b7aa0:	0c00 0030 e007 0700 00e0 300c 1800 0018     ..0........0....
   b7ab0:	1818 1800 0018 381c 0f00 00f0 e007 0000     .......8........
	...
   b7ad8:	0000 c007 0f00 00f0 301c 1800 0018 1818     .........0......
   b7ae8:	1800 0018 380c 0f00 00f8 d803 0000 0018     .....8..........
   b7af8:	3000 0000 0070 e000 1f00 00c0 001f 0000     .0..p...........
	...
   b7b2c:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7b44:	0000 c003 0300 00c0 c003 0000 0000 0000     ................
	...
   b7b74:	0000 f000 0000 00f0 f000 0000 0000 0000     ................
	...
   b7b8c:	00e0 c001 0100 0080 8001 0300 0000 0002     ................
	...
   b7bb8:	1c00 0000 003c f000 0300 00c0 000f 3c00     ....<..........<
   b7bc8:	0000 00f0 3c00 0000 000f 0300 00c0 f000     .....<..........
   b7bd8:	0000 003c 1c00 0000 0000 0000 0000 0000     ..<.............
	...
   b7c08:	7f00 00fc fc7f 0000 0000 0000 7f00 00fc     ................
   b7c18:	fc7f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b7c48:	0070 7800 0000 001e 0700 0080 e001 0000     p..x............
   b7c58:	0078 1e00 0000 0078 e001 0700 0080 001e     x.....x.........
   b7c68:	7800 0000 0070 0000 0000 0000 0000 0000     .x..p...........
	...
   b7c8c:	0700 00c0 e00f 1800 0070 3018 1800 0030     ........p..0..0.
   b7c9c:	7000 0000 00e0 c003 0300 0080 0003 0000     .p..............
   b7cac:	0000 0000 0700 0000 0007 0000 0000 0000     ................
	...
   b7cd0:	0000 e003 0700 00f0 380e 0c00 0018 7818     .........8.....x
   b7ce0:	1800 00f8 d819 1900 0098 9819 1900 0098     ................
   b7cf0:	f818 1800 0078 0018 0c00 0000 180e 0700     ....x...........
   b7d00:	00f8 e003 0000 0000 0000 0000 0000 0000     ................
	...
   b7d1c:	1f00 0080 c01f 0100 00c0 6003 0300 0060     ...........`..`.
   b7d2c:	3006 0600 0030 300c 0f00 00f8 f81f 1800     .0..0..0........
   b7d3c:	000c 0c30 fc00 007f 7ffc 0000 0000 0000     ..0.............
	...
   b7d64:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   b7d74:	3818 1f00 00f0 f81f 1800 001c 0c18 1800     .8..............
   b7d84:	000c 0c18 7f00 00f8 f07f 0000 0000 0000     ................
	...
   b7dac:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   b7dbc:	0030 3000 0000 0030 3000 0000 0030 1800     0..0..0..0..0...
   b7dcc:	000c 1c1c 0f00 00f8 f003 0000 0000 0000     ................
	...
   b7df4:	7f00 00c0 f07f 1800 0038 1818 1800 000c     ........8.......
   b7e04:	0c18 1800 000c 0c18 1800 000c 0c18 1800     ................
   b7e14:	0018 3818 7f00 00f0 e07f 0000 0000 0000     ...8............
	...
   b7e3c:	7f00 00f8 f87f 1800 0018 1818 1900 0098     ................
   b7e4c:	8019 1f00 0080 801f 1900 0080 9819 1800     ................
   b7e5c:	0018 1818 7f00 00f8 f87f 0000 0000 0000     ................
	...
   b7e84:	3f00 00fc fc3f 0c00 000c 0c0c 0c00 00cc     .?..?...........
   b7e94:	c00c 0f00 00c0 c00f 0c00 00c0 c00c 0c00     ................
   b7ea4:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   b7ecc:	0300 00ec fc0f 1c00 001c 0c18 3000 000c     .............0..
   b7edc:	0030 3000 0000 fe30 3000 00fe 0c30 3800     0..0..0..0..0..8
   b7eec:	000c 1c1c 0f00 00fc f003 0000 0000 0000     ................
	...
   b7f14:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   b7f24:	1818 1f00 00f8 f81f 1800 0018 1818 1800     ................
   b7f34:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   b7f5c:	1f00 00f8 f81f 0100 0080 8001 0100 0080     ................
   b7f6c:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b7f7c:	0080 8001 1f00 00f8 f81f 0000 0000 0000     ................
	...
   b7fa4:	0700 00fe fe07 0000 0030 3000 0000 0030     ........0..0..0.
   b7fb4:	3000 0000 0030 3030 3000 0030 3030 3000     .0..0.00.00.00.0
   b7fc4:	0030 6030 3f00 00e0 800f 0000 0000 0000     0.0`.?..........
	...
   b7fec:	7f00 003e 3e7f 1800 0030 6018 1800 00c0     ..>..>..0..`....
   b7ffc:	8019 1b00 0080 c01f 1c00 00e0 7018 1800     .............p..
   b800c:	0030 3818 7f00 001f 1f7f 0000 0000 0000     0..8............
	...
   b8034:	7f00 0080 807f 0c00 0000 000c 0c00 0000     ................
   b8044:	000c 0c00 0000 000c 0c00 000c 0c0c 0c00     ................
   b8054:	000c 0c0c 7f00 00fc fc7f 0000 0000 0000     ................
	...
   b807c:	f000 000f 1ff8 3800 001c 3c3c 3c00 003c     .......8..<<.<<.
   b808c:	6c36 3600 006c cc33 3300 00cc 8c31 3000     6l.6l.3..3..1..0
   b809c:	000c 0c30 fe00 007f 7ffe 0000 0000 0000     ..0.............
	...
   b80c4:	7800 00fe fe78 1c00 0018 181e 1f00 0018     .x..x...........
   b80d4:	181b 1b00 0098 d819 1800 00d8 f818 1800     ................
   b80e4:	0078 3818 7f00 0018 187f 0000 0000 0000     x..8............
	...
   b810c:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   b811c:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   b812c:	0018 381c 0f00 00f0 c003 0000 0000 0000     ...8............
	...
   b8154:	3f00 00f0 f83f 0c00 001c 0c0c 0c00 000c     .?..?...........
   b8164:	0c0c 0c00 0018 f80f 0f00 00e0 000c 0c00     ................
   b8174:	0000 000c 3f00 00c0 c03f 0000 0000 0000     .....?..?.......
	...
   b819c:	0300 00c0 f00f 1c00 0038 1818 3800 001c     ........8....8..
   b81ac:	0c30 3000 000c 0c30 3000 000c 1c38 1800     0..0..0..0..8...
   b81bc:	0018 381c 0f00 00f0 c007 0700 00cc fc0f     ...8............
   b81cc:	0c00 0038 0000 0000 0000 0000 0000 0000     ..8.............
	...
   b81e4:	7f00 00e0 f07f 1800 0038 1818 1800 0018     ........8.......
   b81f4:	3818 1f00 00f0 c01f 1800 00e0 7018 1800     .8...........p..
   b8204:	0030 3818 7f00 001e 0e7f 0000 0000 0000     0..8............
	...
   b822c:	0700 00d8 f80f 1c00 0038 1818 1800 0018     ........8.......
   b823c:	001e 0f00 00c0 f003 0000 0078 1818 1800     ..........x.....
   b824c:	0018 381c 1f00 00f0 e01b 0000 0000 0000     ...8............
	...
   b8274:	3f00 00fc fc3f 3100 008c 8c31 3100 008c     .?..?..1..1..1..
   b8284:	8c31 0100 0080 8001 0100 0080 8001 0100     1...............
   b8294:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   b82bc:	7e00 007e 7e7e 1800 0018 1818 1800 0018     .~~.~~..........
   b82cc:	1818 1800 0018 1818 1800 0018 1818 1800     ................
   b82dc:	0018 300c 0f00 00f0 c003 0000 0000 0000     ...0............
	...
   b8304:	7f00 007f 7f7f 1800 000c 180c 0c00 0018     ................
   b8314:	180c 0600 0030 3006 0300 0060 6003 0300     ....0..0..`..`..
   b8324:	0060 c001 0100 00c0 8000 0000 0000 0000     `...............
	...
   b834c:	fe00 803f 3ffe 3080 0006 0630 3000 0086     ..?..?.0..0..0..
   b835c:	cc19 1900 00cc 6c1b 1b00 006c 7c1e 0e00     .......l..l..|..
   b836c:	0038 380e 0c00 0018 180c 0000 0000 0000     8..8............
	...
   b8394:	7e00 007e 7e7e 1800 0018 300c 0600 0060     .~~.~~.....0..`.
   b83a4:	c003 0100 0080 8001 0300 00c0 6006 0c00     .............`..
   b83b4:	0030 1818 7e00 007e 7e7e 0000 0000 0000     0....~~.~~......
	...
   b83dc:	7c00 007e 7e7c 1800 0018 300c 0600 0060     .|~.|~.....0..`.
   b83ec:	6006 0300 00c0 8001 0100 0080 8001 0100     .`..............
   b83fc:	0080 8001 0f00 00f0 f00f 0000 0000 0000     ................
	...
   b8424:	1f00 00f8 f81f 1800 0018 3018 1800 0060     ...........0..`.
   b8434:	c018 0100 0080 0003 0600 0018 180c 1800     ................
   b8444:	0018 1830 3f00 00f8 f83f 0000 0000 0000     ..0..?..?.......
	...
   b8468:	0000 f001 0100 00f0 8001 0100 0080 8001     ................
   b8478:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8488:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8498:	0080 f001 0100 00f0 0000 0000 0000 0000     ................
   b84a8:	0000 0000 0018 1800 0000 001c 0c00 0000     ................
   b84b8:	000e 0600 0000 0006 0300 0000 0003 0100     ................
   b84c8:	0080 8001 0000 00c0 c000 0000 0060 6000     ............`..`
   b84d8:	0000 0070 3000 0000 0038 1800 0000 0018     ..p..0..8.......
	...
   b84f8:	0000 800f 0f00 0080 8001 0100 0080 8001     ................
   b8508:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8518:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8528:	0080 800f 0f00 0080 0000 0000 0000 0000     ................
	...
   b8540:	0080 c001 0300 00e0 7007 0600 0030 180c     .........p..0...
   b8550:	1800 000c 0410 0000 0000 0000 0000 0000     ................
	...
   b85c4:	0000 ffff ff00 00ff 0000 0300 0000 8003     ................
   b85d4:	0000 00e0 6000 0000 0000 0000 0000 0000     .....`..........
	...
   b8624:	0000 c00f 1f00 00e0 3000 0000 0030 f007     .........0..0...
   b8634:	1f00 00f0 3038 3000 0030 7030 1f00 00fc     ....80.00.0p....
   b8644:	bc0f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8660:	0000 0078 7800 0000 0018 1800 0000 e01b     ..x..x..........
   b8670:	1f00 00f8 181c 1800 000c 0c18 1800 000c     ................
   b8680:	0c18 1800 000c 181c 7f00 00f8 e07b 0000     ............{...
	...
   b86b4:	0000 ec03 0f00 00fc 1c1c 3800 000c 0c30     ...........8..0.
   b86c4:	3000 0000 0030 3800 000c 1c1c 0f00 00f8     .0..0..8........
   b86d4:	f003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b86f0:	0000 7800 0000 0078 1800 0000 0018 d807     ...x..x.........
   b8700:	1f00 00f8 3818 3000 0018 1830 3000 0018     .....8.0..0..0..
   b8710:	1830 3000 0018 3818 1f00 00fe de07 0000     0..0...8........
	...
   b8744:	0000 e007 1f00 00f8 1818 3000 000c fc3f     ...........0..?.
   b8754:	3f00 00fc 0030 3000 0000 0c18 1f00 00fc     .?..0..0........
   b8764:	f007 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8780:	0000 fc01 0300 00fc 0006 0600 0000 f83f     ..............?.
   b8790:	3f00 00f8 0006 0600 0000 0006 0600 0000     .?..............
   b87a0:	0006 0600 0000 0006 3f00 00f0 f03f 0000     .........?..?...
	...
   b87d4:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   b87e4:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   b87f4:	d807 0000 0018 1800 0000 0038 f00f 0f00     ..........8.....
   b8804:	00c0 0000 0000 0000 0000 0000 0000 0078     ..............x.
   b8814:	7800 0000 0018 1800 0000 e01b 1f00 00f0     .x..............
   b8824:	381c 1800 0018 1818 1800 0018 1818 1800     .8..............
   b8834:	0018 1818 7e00 007e 7e7e 0000 0000 0000     .....~~.~~......
	...
   b8858:	0000 8001 0100 0080 0000 0000 0000 801f     ................
   b8868:	1f00 0080 8001 0100 0080 8001 0100 0080     ................
   b8878:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   b88a0:	0000 c000 0000 00c0 0000 0000 0000 f01f     ................
   b88b0:	1f00 00f0 3000 0000 0030 3000 0000 0030     .....0..0..0..0.
   b88c0:	3000 0000 0030 3000 0000 0030 3000 0000     .0..0..0..0..0..
   b88d0:	0030 3000 0000 0070 e01f 1f00 0080 0000     0..0..p.........
	...
   b88e8:	0000 003c 3c00 0000 000c 0c00 0000 f80c     ..<..<..........
   b88f8:	0c00 00f8 c00c 0d00 0080 800f 0f00 0000     ................
   b8908:	800f 0d00 00c0 e00c 3c00 007c 7c3c 0000     .........<|.<|..
	...
   b8930:	0000 801f 1f00 0080 8001 0100 0080 8001     ................
   b8940:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8950:	8001 0100 0080 8001 3f00 00fc fc3f 0000     .........?..?...
	...
   b8984:	0000 78f7 ff00 00fc cc39 3100 008c 8c31     ...x....9..1..1.
   b8994:	3100 008c 8c31 3100 008c 8c31 fd00 00ef     .1..1..1..1.....
   b89a4:	effd 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b89cc:	0000 e07b 7f00 00f0 381c 1800 0018 1818     ..{......8......
   b89dc:	1800 0018 1818 1800 0018 1818 7e00 007e     .............~~.
   b89ec:	7e7e 0000 0000 0000 0000 0000 0000 0000     ~~..............
	...
   b8a14:	0000 c003 0f00 00f0 381c 3800 001c 0c30     .........8.8..0.
   b8a24:	3000 000c 0c30 3800 001c 381c 0f00 00f0     .0..0..8...8....
   b8a34:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8a5c:	0000 e07b 7f00 00f8 181c 1800 000c 0c18     ..{.............
   b8a6c:	1800 000c 0c18 1800 000c 181c 1f00 00f8     ................
   b8a7c:	e01b 1800 0000 0018 1800 0000 007f 7f00     ................
	...
   b8aa4:	0000 de07 1f00 00fe 3818 3000 0018 1830     .........8.0..0.
   b8ab4:	3000 0018 1830 3000 0018 3818 1f00 00f8     .0..0..0...8....
   b8ac4:	d807 0000 0018 1800 0000 0018 fe00 0000     ................
   b8ad4:	00fe 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8aec:	0000 783e 3e00 00fc cc07 0700 0000 0006     ..>x.>..........
   b8afc:	0600 0000 0006 0600 0000 0006 3f00 00f0     .............?..
   b8b0c:	f03f 0000 0000 0000 0000 0000 0000 0000     ?...............
	...
   b8b34:	0000 f807 0f00 00f8 1818 1800 0018 801f     ................
   b8b44:	0f00 00f0 f800 1800 0018 3818 1f00 00f0     ...........8....
   b8b54:	e01f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8b70:	0000 000c 0c00 0000 000c 0c00 0000 f03f     ..............?.
   b8b80:	3f00 00f0 000c 0c00 0000 000c 0c00 0000     .?..............
   b8b90:	000c 0c00 0000 1c0c 0700 00fc f003 0000     ................
	...
   b8bc4:	0000 7878 7800 0078 1818 1800 0018 1818     ..xx.xx.........
   b8bd4:	1800 0018 1818 1800 0018 3818 0f00 00fe     ...........8....
   b8be4:	de07 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8c0c:	0000 3e7c 7c00 003e 1818 1800 0018 300c     ..|>.|>........0
   b8c1c:	0c00 0030 6006 0600 0060 e007 0300 00c0     ..0..`..`.......
   b8c2c:	c003 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8c54:	0000 3c78 7800 003c 1831 3300 0098 9833     ..x<.x<.1..3..3.
   b8c64:	1a00 00b0 f01e 1e00 00f0 601c 0c00 0060     ...........`..`.
   b8c74:	600c 0000 0000 0000 0000 0000 0000 0000     .`..............
	...
   b8c9c:	0000 7c3e 3e00 007c 300c 0600 0060 c003     ..>|.>|..0..`...
   b8cac:	0100 0080 c003 0600 0060 300c 3e00 007c     ........`..0.>|.
   b8cbc:	7c3e 0000 0000 0000 0000 0000 0000 0000     >|..............
	...
   b8ce4:	0000 1f7e 7e00 001f 0c18 0c00 0018 180c     ..~..~..........
   b8cf4:	0600 0030 3006 0300 0060 e003 0100 00c0     ..0..0..`.......
   b8d04:	c000 0100 0080 8001 0300 0000 c03f 3f00     ............?..?
   b8d14:	00c0 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8d2c:	0000 f81f 1f00 00f8 3018 1800 0060 c000     .........0..`...
   b8d3c:	0100 0080 0003 0600 0018 180c 1f00 00f8     ................
   b8d4c:	f81f 0000 0000 0000 0000 0000 0000 0000     ................
	...
   b8d68:	0000 e000 0100 00e0 8001 0100 0080 8001     ................
   b8d78:	0100 0080 8001 0100 0080 8003 0700 0000     ................
   b8d88:	8003 0100 0080 8001 0100 0080 8001 0100     ................
   b8d98:	0080 e001 0000 00e0 0000 0000 0000 0000     ................
	...
   b8db0:	0000 8001 0100 0080 8001 0100 0080 8001     ................
   b8dc0:	0100 0080 8001 0100 0080 8001 0100 0080     ................
   b8dd0:	8001 0100 0080 8001 0100 0080 8001 0100     ................
   b8de0:	0080 8001 0100 0080 0000 0000 0000 0000     ................
	...
   b8df8:	0000 0007 0700 0080 8001 0100 0080 8001     ................
   b8e08:	0100 0080 8001 0100 0080 c001 0000 00e0     ................
   b8e18:	c001 0100 0080 8001 0100 0080 8001 0100     ................
   b8e28:	0080 8007 0700 0000 0000 0000 0000 0000     ................
	...
   b8e54:	000e 1f00 0018 b83b 3100 00f0 e000 0000     ......;..1......
	...

000b8e84 <_ZTV17DFRobot_PN532_IIC>:
	...
   b8e8c:	4cad 000b 4d9b 000b                         .L...M..

000b8e94 <_ZTVN5spark13CellularClassE>:
	...
   b8e9c:	5397 000b 538d 000b 5383 000b 5339 000b     .S...S...S..9S..
   b8eac:	5377 000b 536b 000b 56a1 000b 56a9 000b     wS..kS...V...V..
   b8ebc:	535f 000b 5357 000b 534d 000b 5343 000b     _S..WS..MS..CS..
   b8ecc:	56d9 000b                                   .V..

000b8ed0 <_ZTVN5spark13EthernetClassE>:
	...
   b8ed8:	542f 000b 5425 000b 541b 000b 5411 000b     /T..%T...T...T..
   b8ee8:	5405 000b 53f9 000b 56a1 000b 56a9 000b     .T...S...V...V..
   b8ef8:	53ed 000b 53e5 000b 53db 000b 53d1 000b     .S...S...S...S..
   b8f08:	56d9 000b                                   .V..

000b8f0c <_ZTV7TwoWire>:
	...
   b8f14:	544d 000b 5497 000b 546f 000b 544f 000b     MT...T..oT..OT..
   b8f24:	5477 000b 547f 000b 5487 000b 548f 000b     wT...T...T...T..

000b8f34 <_ZTV9IPAddress>:
	...
   b8f3c:	5571 000b 5561 000b 5563 000b 7061 0070     qU..aU..cU..app.

000b8f4c <_ZTVN5spark12NetworkClassE>:
	...
   b8f54:	5661 000b 566b 000b 5675 000b 567f 000b     aV..kV..uV...V..
   b8f64:	5689 000b 5695 000b 56a1 000b 56a9 000b     .V...V...V...V..
   b8f74:	56b1 000b 56bd 000b 56c5 000b 56cf 000b     .V...V...V...V..
   b8f84:	56d9 000b                                   .V..

000b8f88 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8f88:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b8f98:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b8fa8:	6d69 0065                                   ime.

000b8fac <_ZTV11USARTSerial>:
	...
   b8fb4:	5c15 000b 5c81 000b 5c59 000b 57c5 000b     .\...\..Y\...W..
   b8fc4:	5c29 000b 5c45 000b 5c37 000b 5c53 000b     )\..E\..7\..S\..
   b8fd4:	5c17 000b 5c1b 000b                         .\...\..

000b8fdc <_ZTV9USBSerial>:
	...
   b8fe4:	5cbf 000b 5d27 000b 5cfd 000b 57c5 000b     .\..']...\...W..
   b8ff4:	5cef 000b 5cc1 000b 5cd1 000b 5d21 000b     .\...\...\..!]..
   b9004:	5ce1 000b 5cb9 000b                         .\...\..

000b900c <_ZSt7nothrow>:
   b900c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b901c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b902c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b903c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b904c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b905c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b906c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b907d <link_const_data_end>:
   b907d:	00          	.byte	0x00
	...

000b9080 <link_constructors_location>:
   b9080:	000b43d9 	.word	0x000b43d9
   b9084:	000b5329 	.word	0x000b5329
   b9088:	000b53a1 	.word	0x000b53a1
   b908c:	000b5439 	.word	0x000b5439
   b9090:	000b5651 	.word	0x000b5651
   b9094:	000b57b1 	.word	0x000b57b1
   b9098:	000b58ed 	.word	0x000b58ed
   b909c:	000b5bdd 	.word	0x000b5bdd
   b90a0:	000b5c01 	.word	0x000b5c01
